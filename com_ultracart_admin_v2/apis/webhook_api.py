# coding: utf-8

"""
    UltraCart Rest API V2

    This is the next generation UltraCart REST API...

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class WebhookApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def webhook_webhooks_get(self, **kwargs):
        """
        Retrieve webhooks
        Retrieves the webhooks associated with this application. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.webhook_webhooks_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: WebhooksResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.webhook_webhooks_get_with_http_info(**kwargs)
        else:
            (data) = self.webhook_webhooks_get_with_http_info(**kwargs)
            return data

    def webhook_webhooks_get_with_http_info(self, **kwargs):
        """
        Retrieve webhooks
        Retrieves the webhooks associated with this application. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.webhook_webhooks_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: WebhooksResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webhook_webhooks_get" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/webhook/webhooks'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='WebhooksResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def webhook_webhooks_post(self, webhook, **kwargs):
        """
        Add a webhook
        Adds a new webhook on the account 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.webhook_webhooks_post(webhook, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Webhook webhook: Webhook to create (required)
        :return: WebhooksResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.webhook_webhooks_post_with_http_info(webhook, **kwargs)
        else:
            (data) = self.webhook_webhooks_post_with_http_info(webhook, **kwargs)
            return data

    def webhook_webhooks_post_with_http_info(self, webhook, **kwargs):
        """
        Add a webhook
        Adds a new webhook on the account 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.webhook_webhooks_post_with_http_info(webhook, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Webhook webhook: Webhook to create (required)
        :return: WebhooksResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webhook']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webhook_webhooks_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webhook' is set
        if ('webhook' not in params) or (params['webhook'] is None):
            raise ValueError("Missing the required parameter `webhook` when calling `webhook_webhooks_post`")

        resource_path = '/webhook/webhooks'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'webhook' in params:
            body_params = params['webhook']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='WebhooksResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def webhook_webhooks_webhook_oid_delete(self, webhook_oid, **kwargs):
        """
        Delete a webhook
        Delete a webhook on the UltraCart account. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.webhook_webhooks_webhook_oid_delete(webhook_oid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int webhook_oid: The webhook oid to delete. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.webhook_webhooks_webhook_oid_delete_with_http_info(webhook_oid, **kwargs)
        else:
            (data) = self.webhook_webhooks_webhook_oid_delete_with_http_info(webhook_oid, **kwargs)
            return data

    def webhook_webhooks_webhook_oid_delete_with_http_info(self, webhook_oid, **kwargs):
        """
        Delete a webhook
        Delete a webhook on the UltraCart account. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.webhook_webhooks_webhook_oid_delete_with_http_info(webhook_oid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int webhook_oid: The webhook oid to delete. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webhook_oid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webhook_webhooks_webhook_oid_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webhook_oid' is set
        if ('webhook_oid' not in params) or (params['webhook_oid'] is None):
            raise ValueError("Missing the required parameter `webhook_oid` when calling `webhook_webhooks_webhook_oid_delete`")

        resource_path = '/webhook/webhooks/{webhookOid}'.replace('{format}', 'json')
        path_params = {}
        if 'webhook_oid' in params:
            path_params['webhookOid'] = params['webhook_oid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def webhook_webhooks_webhook_oid_logs_get(self, webhook_oid, **kwargs):
        """
        Retrieve the log summaries
        Retrieves the log summary information for a given webhook.  This is useful for displaying all the various logs that can be viewed. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.webhook_webhooks_webhook_oid_logs_get(webhook_oid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int webhook_oid: The webhook oid to retrieve log summaries for. (required)
        :return: WebhookLogSummariesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.webhook_webhooks_webhook_oid_logs_get_with_http_info(webhook_oid, **kwargs)
        else:
            (data) = self.webhook_webhooks_webhook_oid_logs_get_with_http_info(webhook_oid, **kwargs)
            return data

    def webhook_webhooks_webhook_oid_logs_get_with_http_info(self, webhook_oid, **kwargs):
        """
        Retrieve the log summaries
        Retrieves the log summary information for a given webhook.  This is useful for displaying all the various logs that can be viewed. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.webhook_webhooks_webhook_oid_logs_get_with_http_info(webhook_oid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int webhook_oid: The webhook oid to retrieve log summaries for. (required)
        :return: WebhookLogSummariesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webhook_oid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webhook_webhooks_webhook_oid_logs_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webhook_oid' is set
        if ('webhook_oid' not in params) or (params['webhook_oid'] is None):
            raise ValueError("Missing the required parameter `webhook_oid` when calling `webhook_webhooks_webhook_oid_logs_get`")

        resource_path = '/webhook/webhooks/{webhookOid}/logs'.replace('{format}', 'json')
        path_params = {}
        if 'webhook_oid' in params:
            path_params['webhookOid'] = params['webhook_oid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='WebhookLogSummariesResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def webhook_webhooks_webhook_oid_logs_request_id_get(self, webhook_oid, request_id, **kwargs):
        """
        Retrieve an individual log
        Retrieves an individual log for a webhook given the webhook oid the request id. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.webhook_webhooks_webhook_oid_logs_request_id_get(webhook_oid, request_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int webhook_oid: The webhook oid that owns the log. (required)
        :param str request_id: The request id associated with the log to view. (required)
        :return: WebhookLogResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.webhook_webhooks_webhook_oid_logs_request_id_get_with_http_info(webhook_oid, request_id, **kwargs)
        else:
            (data) = self.webhook_webhooks_webhook_oid_logs_request_id_get_with_http_info(webhook_oid, request_id, **kwargs)
            return data

    def webhook_webhooks_webhook_oid_logs_request_id_get_with_http_info(self, webhook_oid, request_id, **kwargs):
        """
        Retrieve an individual log
        Retrieves an individual log for a webhook given the webhook oid the request id. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.webhook_webhooks_webhook_oid_logs_request_id_get_with_http_info(webhook_oid, request_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int webhook_oid: The webhook oid that owns the log. (required)
        :param str request_id: The request id associated with the log to view. (required)
        :return: WebhookLogResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webhook_oid', 'request_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webhook_webhooks_webhook_oid_logs_request_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webhook_oid' is set
        if ('webhook_oid' not in params) or (params['webhook_oid'] is None):
            raise ValueError("Missing the required parameter `webhook_oid` when calling `webhook_webhooks_webhook_oid_logs_request_id_get`")
        # verify the required parameter 'request_id' is set
        if ('request_id' not in params) or (params['request_id'] is None):
            raise ValueError("Missing the required parameter `request_id` when calling `webhook_webhooks_webhook_oid_logs_request_id_get`")

        resource_path = '/webhook/webhooks/{webhookOid}/logs/{requestId}'.replace('{format}', 'json')
        path_params = {}
        if 'webhook_oid' in params:
            path_params['webhookOid'] = params['webhook_oid']
        if 'request_id' in params:
            path_params['requestId'] = params['request_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='WebhookLogResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def webhook_webhooks_webhook_oid_put(self, webhook, webhook_oid, **kwargs):
        """
        Update a webhook
        Update a webhook on the account 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.webhook_webhooks_webhook_oid_put(webhook, webhook_oid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Webhook webhook: Webhook to update (required)
        :param int webhook_oid: The webhook oid to update. (required)
        :return: WebhooksResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.webhook_webhooks_webhook_oid_put_with_http_info(webhook, webhook_oid, **kwargs)
        else:
            (data) = self.webhook_webhooks_webhook_oid_put_with_http_info(webhook, webhook_oid, **kwargs)
            return data

    def webhook_webhooks_webhook_oid_put_with_http_info(self, webhook, webhook_oid, **kwargs):
        """
        Update a webhook
        Update a webhook on the account 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.webhook_webhooks_webhook_oid_put_with_http_info(webhook, webhook_oid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Webhook webhook: Webhook to update (required)
        :param int webhook_oid: The webhook oid to update. (required)
        :return: WebhooksResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webhook', 'webhook_oid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webhook_webhooks_webhook_oid_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webhook' is set
        if ('webhook' not in params) or (params['webhook'] is None):
            raise ValueError("Missing the required parameter `webhook` when calling `webhook_webhooks_webhook_oid_put`")
        # verify the required parameter 'webhook_oid' is set
        if ('webhook_oid' not in params) or (params['webhook_oid'] is None):
            raise ValueError("Missing the required parameter `webhook_oid` when calling `webhook_webhooks_webhook_oid_put`")

        resource_path = '/webhook/webhooks/{webhookOid}'.replace('{format}', 'json')
        path_params = {}
        if 'webhook_oid' in params:
            path_params['webhookOid'] = params['webhook_oid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'webhook' in params:
            body_params = params['webhook']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='WebhooksResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def webhook_webhooks_webhook_oid_reflow_event_name_post(self, webhook_oid, event_name, **kwargs):
        """
        Resend events to the webhook endpoint.
        This method will resend events to the webhook endpoint.  This method can be used for example to send all the existing items on an account to a webhook. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.webhook_webhooks_webhook_oid_reflow_event_name_post(webhook_oid, event_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int webhook_oid: The webhook oid that is receiving the reflowed events. (required)
        :param str event_name: The event to reflow. (required)
        :return: WebhookSampleRequestResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.webhook_webhooks_webhook_oid_reflow_event_name_post_with_http_info(webhook_oid, event_name, **kwargs)
        else:
            (data) = self.webhook_webhooks_webhook_oid_reflow_event_name_post_with_http_info(webhook_oid, event_name, **kwargs)
            return data

    def webhook_webhooks_webhook_oid_reflow_event_name_post_with_http_info(self, webhook_oid, event_name, **kwargs):
        """
        Resend events to the webhook endpoint.
        This method will resend events to the webhook endpoint.  This method can be used for example to send all the existing items on an account to a webhook. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.webhook_webhooks_webhook_oid_reflow_event_name_post_with_http_info(webhook_oid, event_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int webhook_oid: The webhook oid that is receiving the reflowed events. (required)
        :param str event_name: The event to reflow. (required)
        :return: WebhookSampleRequestResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webhook_oid', 'event_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webhook_webhooks_webhook_oid_reflow_event_name_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webhook_oid' is set
        if ('webhook_oid' not in params) or (params['webhook_oid'] is None):
            raise ValueError("Missing the required parameter `webhook_oid` when calling `webhook_webhooks_webhook_oid_reflow_event_name_post`")
        # verify the required parameter 'event_name' is set
        if ('event_name' not in params) or (params['event_name'] is None):
            raise ValueError("Missing the required parameter `event_name` when calling `webhook_webhooks_webhook_oid_reflow_event_name_post`")

        resource_path = '/webhook/webhooks/{webhookOid}/reflow/{eventName}'.replace('{format}', 'json')
        path_params = {}
        if 'webhook_oid' in params:
            path_params['webhookOid'] = params['webhook_oid']
        if 'event_name' in params:
            path_params['eventName'] = params['event_name']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='WebhookSampleRequestResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def webhook_webhooks_webhook_oid_samples_get(self, webhook_oid, **kwargs):
        """
        Retrieve a sample notification.
        Retrieves a sample notification for the webhook.  This provides as example of what the notifications that can be delivered will look like. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.webhook_webhooks_webhook_oid_samples_get(webhook_oid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int webhook_oid: The webhook oid to retrieve samples for. (required)
        :return: WebhookSampleRequestResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.webhook_webhooks_webhook_oid_samples_get_with_http_info(webhook_oid, **kwargs)
        else:
            (data) = self.webhook_webhooks_webhook_oid_samples_get_with_http_info(webhook_oid, **kwargs)
            return data

    def webhook_webhooks_webhook_oid_samples_get_with_http_info(self, webhook_oid, **kwargs):
        """
        Retrieve a sample notification.
        Retrieves a sample notification for the webhook.  This provides as example of what the notifications that can be delivered will look like. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.webhook_webhooks_webhook_oid_samples_get_with_http_info(webhook_oid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int webhook_oid: The webhook oid to retrieve samples for. (required)
        :return: WebhookSampleRequestResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webhook_oid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webhook_webhooks_webhook_oid_samples_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webhook_oid' is set
        if ('webhook_oid' not in params) or (params['webhook_oid'] is None):
            raise ValueError("Missing the required parameter `webhook_oid` when calling `webhook_webhooks_webhook_oid_samples_get`")

        resource_path = '/webhook/webhooks/{webhookOid}/samples'.replace('{format}', 'json')
        path_params = {}
        if 'webhook_oid' in params:
            path_params['webhookOid'] = params['webhook_oid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='WebhookSampleRequestResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def webhook_webhooks_webhook_oid_validate_post(self, samples, webhook_oid, **kwargs):
        """
        Send test message to an endpoint.
        Performs a test of the webhook endpoint given the specified sample request and returns the log associated with the response. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.webhook_webhooks_webhook_oid_validate_post(samples, webhook_oid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param WebhookSampleRequest samples: Samples to send in the test (required)
        :param int webhook_oid: The webhook oid that is being tested. (required)
        :return: WebhookLogResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.webhook_webhooks_webhook_oid_validate_post_with_http_info(samples, webhook_oid, **kwargs)
        else:
            (data) = self.webhook_webhooks_webhook_oid_validate_post_with_http_info(samples, webhook_oid, **kwargs)
            return data

    def webhook_webhooks_webhook_oid_validate_post_with_http_info(self, samples, webhook_oid, **kwargs):
        """
        Send test message to an endpoint.
        Performs a test of the webhook endpoint given the specified sample request and returns the log associated with the response. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.webhook_webhooks_webhook_oid_validate_post_with_http_info(samples, webhook_oid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param WebhookSampleRequest samples: Samples to send in the test (required)
        :param int webhook_oid: The webhook oid that is being tested. (required)
        :return: WebhookLogResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['samples', 'webhook_oid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webhook_webhooks_webhook_oid_validate_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'samples' is set
        if ('samples' not in params) or (params['samples'] is None):
            raise ValueError("Missing the required parameter `samples` when calling `webhook_webhooks_webhook_oid_validate_post`")
        # verify the required parameter 'webhook_oid' is set
        if ('webhook_oid' not in params) or (params['webhook_oid'] is None):
            raise ValueError("Missing the required parameter `webhook_oid` when calling `webhook_webhooks_webhook_oid_validate_post`")

        resource_path = '/webhook/webhooks/{webhookOid}/validate'.replace('{format}', 'json')
        path_params = {}
        if 'webhook_oid' in params:
            path_params['webhookOid'] = params['webhook_oid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'samples' in params:
            body_params = params['samples']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='WebhookLogResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
