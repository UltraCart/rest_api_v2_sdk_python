# coding: utf-8

"""
    UltraCart Rest API V2

    This is the next generation UltraCart REST API...

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ItemShippingDestinationMarkup(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, country=None, flat_fee=None, per_item=None, postal_code=None, shipping_method=None, state=None):
        """
        ItemShippingDestinationMarkup - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'country': 'str',
            'flat_fee': 'float',
            'per_item': 'float',
            'postal_code': 'str',
            'shipping_method': 'str',
            'state': 'str'
        }

        self.attribute_map = {
            'country': 'country',
            'flat_fee': 'flat_fee',
            'per_item': 'per_item',
            'postal_code': 'postal_code',
            'shipping_method': 'shipping_method',
            'state': 'state'
        }

        self._country = country
        self._flat_fee = flat_fee
        self._per_item = per_item
        self._postal_code = postal_code
        self._shipping_method = shipping_method
        self._state = state

    @property
    def country(self):
        """
        Gets the country of this ItemShippingDestinationMarkup.


        :return: The country of this ItemShippingDestinationMarkup.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """
        Sets the country of this ItemShippingDestinationMarkup.


        :param country: The country of this ItemShippingDestinationMarkup.
        :type: str
        """

        self._country = country

    @property
    def flat_fee(self):
        """
        Gets the flat_fee of this ItemShippingDestinationMarkup.


        :return: The flat_fee of this ItemShippingDestinationMarkup.
        :rtype: float
        """
        return self._flat_fee

    @flat_fee.setter
    def flat_fee(self, flat_fee):
        """
        Sets the flat_fee of this ItemShippingDestinationMarkup.


        :param flat_fee: The flat_fee of this ItemShippingDestinationMarkup.
        :type: float
        """

        self._flat_fee = flat_fee

    @property
    def per_item(self):
        """
        Gets the per_item of this ItemShippingDestinationMarkup.


        :return: The per_item of this ItemShippingDestinationMarkup.
        :rtype: float
        """
        return self._per_item

    @per_item.setter
    def per_item(self, per_item):
        """
        Sets the per_item of this ItemShippingDestinationMarkup.


        :param per_item: The per_item of this ItemShippingDestinationMarkup.
        :type: float
        """

        self._per_item = per_item

    @property
    def postal_code(self):
        """
        Gets the postal_code of this ItemShippingDestinationMarkup.


        :return: The postal_code of this ItemShippingDestinationMarkup.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """
        Sets the postal_code of this ItemShippingDestinationMarkup.


        :param postal_code: The postal_code of this ItemShippingDestinationMarkup.
        :type: str
        """

        self._postal_code = postal_code

    @property
    def shipping_method(self):
        """
        Gets the shipping_method of this ItemShippingDestinationMarkup.


        :return: The shipping_method of this ItemShippingDestinationMarkup.
        :rtype: str
        """
        return self._shipping_method

    @shipping_method.setter
    def shipping_method(self, shipping_method):
        """
        Sets the shipping_method of this ItemShippingDestinationMarkup.


        :param shipping_method: The shipping_method of this ItemShippingDestinationMarkup.
        :type: str
        """

        self._shipping_method = shipping_method

    @property
    def state(self):
        """
        Gets the state of this ItemShippingDestinationMarkup.


        :return: The state of this ItemShippingDestinationMarkup.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this ItemShippingDestinationMarkup.


        :param state: The state of this ItemShippingDestinationMarkup.
        :type: str
        """

        self._state = state

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
