# coding: utf-8

"""
    UltraCart Rest API V2

    This is the next generation UltraCart REST API...

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class OrderItemEdiLot(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, lot_expiration=None, lot_number=None, lot_quantity=None):
        """
        OrderItemEdiLot - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'lot_expiration': 'str',
            'lot_number': 'str',
            'lot_quantity': 'int'
        }

        self.attribute_map = {
            'lot_expiration': 'lot_expiration',
            'lot_number': 'lot_number',
            'lot_quantity': 'lot_quantity'
        }

        self._lot_expiration = lot_expiration
        self._lot_number = lot_number
        self._lot_quantity = lot_quantity

    @property
    def lot_expiration(self):
        """
        Gets the lot_expiration of this OrderItemEdiLot.
        Log expiration

        :return: The lot_expiration of this OrderItemEdiLot.
        :rtype: str
        """
        return self._lot_expiration

    @lot_expiration.setter
    def lot_expiration(self, lot_expiration):
        """
        Sets the lot_expiration of this OrderItemEdiLot.
        Log expiration

        :param lot_expiration: The lot_expiration of this OrderItemEdiLot.
        :type: str
        """

        self._lot_expiration = lot_expiration

    @property
    def lot_number(self):
        """
        Gets the lot_number of this OrderItemEdiLot.
        Lot number

        :return: The lot_number of this OrderItemEdiLot.
        :rtype: str
        """
        return self._lot_number

    @lot_number.setter
    def lot_number(self, lot_number):
        """
        Sets the lot_number of this OrderItemEdiLot.
        Lot number

        :param lot_number: The lot_number of this OrderItemEdiLot.
        :type: str
        """

        self._lot_number = lot_number

    @property
    def lot_quantity(self):
        """
        Gets the lot_quantity of this OrderItemEdiLot.
        Lot quantity

        :return: The lot_quantity of this OrderItemEdiLot.
        :rtype: int
        """
        return self._lot_quantity

    @lot_quantity.setter
    def lot_quantity(self, lot_quantity):
        """
        Sets the lot_quantity of this OrderItemEdiLot.
        Lot quantity

        :param lot_quantity: The lot_quantity of this OrderItemEdiLot.
        :type: int
        """

        self._lot_quantity = lot_quantity

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
