# coding: utf-8

"""
    UltraCart Rest API V2

    This is the next generation UltraCart REST API...

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class CartSummary(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, arbitrary_shipping_handling_total=None, arbitrary_tax=None, arbitrary_tax_rate=None, arbitrary_taxable_subtotal=None, shipping_handling=None, shipping_handling_discount=None, shipping_handling_with_discount=None, subtotal=None, subtotal_discount=None, subtotal_with_discount=None, surcharge=None, tax=None, taxable_subtotal=None, taxable_subtotal_discount=None, taxable_subtotal_with_discount=None, total=None):
        """
        CartSummary - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'arbitrary_shipping_handling_total': 'Currency',
            'arbitrary_tax': 'Currency',
            'arbitrary_tax_rate': 'Currency',
            'arbitrary_taxable_subtotal': 'Currency',
            'shipping_handling': 'Currency',
            'shipping_handling_discount': 'Currency',
            'shipping_handling_with_discount': 'Currency',
            'subtotal': 'Currency',
            'subtotal_discount': 'Currency',
            'subtotal_with_discount': 'Currency',
            'surcharge': 'Currency',
            'tax': 'Currency',
            'taxable_subtotal': 'Currency',
            'taxable_subtotal_discount': 'Currency',
            'taxable_subtotal_with_discount': 'Currency',
            'total': 'Currency'
        }

        self.attribute_map = {
            'arbitrary_shipping_handling_total': 'arbitrary_shipping_handling_total',
            'arbitrary_tax': 'arbitrary_tax',
            'arbitrary_tax_rate': 'arbitrary_tax_rate',
            'arbitrary_taxable_subtotal': 'arbitrary_taxable_subtotal',
            'shipping_handling': 'shipping_handling',
            'shipping_handling_discount': 'shipping_handling_discount',
            'shipping_handling_with_discount': 'shipping_handling_with_discount',
            'subtotal': 'subtotal',
            'subtotal_discount': 'subtotal_discount',
            'subtotal_with_discount': 'subtotal_with_discount',
            'surcharge': 'surcharge',
            'tax': 'tax',
            'taxable_subtotal': 'taxable_subtotal',
            'taxable_subtotal_discount': 'taxable_subtotal_discount',
            'taxable_subtotal_with_discount': 'taxable_subtotal_with_discount',
            'total': 'total'
        }

        self._arbitrary_shipping_handling_total = arbitrary_shipping_handling_total
        self._arbitrary_tax = arbitrary_tax
        self._arbitrary_tax_rate = arbitrary_tax_rate
        self._arbitrary_taxable_subtotal = arbitrary_taxable_subtotal
        self._shipping_handling = shipping_handling
        self._shipping_handling_discount = shipping_handling_discount
        self._shipping_handling_with_discount = shipping_handling_with_discount
        self._subtotal = subtotal
        self._subtotal_discount = subtotal_discount
        self._subtotal_with_discount = subtotal_with_discount
        self._surcharge = surcharge
        self._tax = tax
        self._taxable_subtotal = taxable_subtotal
        self._taxable_subtotal_discount = taxable_subtotal_discount
        self._taxable_subtotal_with_discount = taxable_subtotal_with_discount
        self._total = total

    @property
    def arbitrary_shipping_handling_total(self):
        """
        Gets the arbitrary_shipping_handling_total of this CartSummary.


        :return: The arbitrary_shipping_handling_total of this CartSummary.
        :rtype: Currency
        """
        return self._arbitrary_shipping_handling_total

    @arbitrary_shipping_handling_total.setter
    def arbitrary_shipping_handling_total(self, arbitrary_shipping_handling_total):
        """
        Sets the arbitrary_shipping_handling_total of this CartSummary.


        :param arbitrary_shipping_handling_total: The arbitrary_shipping_handling_total of this CartSummary.
        :type: Currency
        """

        self._arbitrary_shipping_handling_total = arbitrary_shipping_handling_total

    @property
    def arbitrary_tax(self):
        """
        Gets the arbitrary_tax of this CartSummary.


        :return: The arbitrary_tax of this CartSummary.
        :rtype: Currency
        """
        return self._arbitrary_tax

    @arbitrary_tax.setter
    def arbitrary_tax(self, arbitrary_tax):
        """
        Sets the arbitrary_tax of this CartSummary.


        :param arbitrary_tax: The arbitrary_tax of this CartSummary.
        :type: Currency
        """

        self._arbitrary_tax = arbitrary_tax

    @property
    def arbitrary_tax_rate(self):
        """
        Gets the arbitrary_tax_rate of this CartSummary.


        :return: The arbitrary_tax_rate of this CartSummary.
        :rtype: Currency
        """
        return self._arbitrary_tax_rate

    @arbitrary_tax_rate.setter
    def arbitrary_tax_rate(self, arbitrary_tax_rate):
        """
        Sets the arbitrary_tax_rate of this CartSummary.


        :param arbitrary_tax_rate: The arbitrary_tax_rate of this CartSummary.
        :type: Currency
        """

        self._arbitrary_tax_rate = arbitrary_tax_rate

    @property
    def arbitrary_taxable_subtotal(self):
        """
        Gets the arbitrary_taxable_subtotal of this CartSummary.


        :return: The arbitrary_taxable_subtotal of this CartSummary.
        :rtype: Currency
        """
        return self._arbitrary_taxable_subtotal

    @arbitrary_taxable_subtotal.setter
    def arbitrary_taxable_subtotal(self, arbitrary_taxable_subtotal):
        """
        Sets the arbitrary_taxable_subtotal of this CartSummary.


        :param arbitrary_taxable_subtotal: The arbitrary_taxable_subtotal of this CartSummary.
        :type: Currency
        """

        self._arbitrary_taxable_subtotal = arbitrary_taxable_subtotal

    @property
    def shipping_handling(self):
        """
        Gets the shipping_handling of this CartSummary.


        :return: The shipping_handling of this CartSummary.
        :rtype: Currency
        """
        return self._shipping_handling

    @shipping_handling.setter
    def shipping_handling(self, shipping_handling):
        """
        Sets the shipping_handling of this CartSummary.


        :param shipping_handling: The shipping_handling of this CartSummary.
        :type: Currency
        """

        self._shipping_handling = shipping_handling

    @property
    def shipping_handling_discount(self):
        """
        Gets the shipping_handling_discount of this CartSummary.


        :return: The shipping_handling_discount of this CartSummary.
        :rtype: Currency
        """
        return self._shipping_handling_discount

    @shipping_handling_discount.setter
    def shipping_handling_discount(self, shipping_handling_discount):
        """
        Sets the shipping_handling_discount of this CartSummary.


        :param shipping_handling_discount: The shipping_handling_discount of this CartSummary.
        :type: Currency
        """

        self._shipping_handling_discount = shipping_handling_discount

    @property
    def shipping_handling_with_discount(self):
        """
        Gets the shipping_handling_with_discount of this CartSummary.


        :return: The shipping_handling_with_discount of this CartSummary.
        :rtype: Currency
        """
        return self._shipping_handling_with_discount

    @shipping_handling_with_discount.setter
    def shipping_handling_with_discount(self, shipping_handling_with_discount):
        """
        Sets the shipping_handling_with_discount of this CartSummary.


        :param shipping_handling_with_discount: The shipping_handling_with_discount of this CartSummary.
        :type: Currency
        """

        self._shipping_handling_with_discount = shipping_handling_with_discount

    @property
    def subtotal(self):
        """
        Gets the subtotal of this CartSummary.


        :return: The subtotal of this CartSummary.
        :rtype: Currency
        """
        return self._subtotal

    @subtotal.setter
    def subtotal(self, subtotal):
        """
        Sets the subtotal of this CartSummary.


        :param subtotal: The subtotal of this CartSummary.
        :type: Currency
        """

        self._subtotal = subtotal

    @property
    def subtotal_discount(self):
        """
        Gets the subtotal_discount of this CartSummary.


        :return: The subtotal_discount of this CartSummary.
        :rtype: Currency
        """
        return self._subtotal_discount

    @subtotal_discount.setter
    def subtotal_discount(self, subtotal_discount):
        """
        Sets the subtotal_discount of this CartSummary.


        :param subtotal_discount: The subtotal_discount of this CartSummary.
        :type: Currency
        """

        self._subtotal_discount = subtotal_discount

    @property
    def subtotal_with_discount(self):
        """
        Gets the subtotal_with_discount of this CartSummary.


        :return: The subtotal_with_discount of this CartSummary.
        :rtype: Currency
        """
        return self._subtotal_with_discount

    @subtotal_with_discount.setter
    def subtotal_with_discount(self, subtotal_with_discount):
        """
        Sets the subtotal_with_discount of this CartSummary.


        :param subtotal_with_discount: The subtotal_with_discount of this CartSummary.
        :type: Currency
        """

        self._subtotal_with_discount = subtotal_with_discount

    @property
    def surcharge(self):
        """
        Gets the surcharge of this CartSummary.


        :return: The surcharge of this CartSummary.
        :rtype: Currency
        """
        return self._surcharge

    @surcharge.setter
    def surcharge(self, surcharge):
        """
        Sets the surcharge of this CartSummary.


        :param surcharge: The surcharge of this CartSummary.
        :type: Currency
        """

        self._surcharge = surcharge

    @property
    def tax(self):
        """
        Gets the tax of this CartSummary.


        :return: The tax of this CartSummary.
        :rtype: Currency
        """
        return self._tax

    @tax.setter
    def tax(self, tax):
        """
        Sets the tax of this CartSummary.


        :param tax: The tax of this CartSummary.
        :type: Currency
        """

        self._tax = tax

    @property
    def taxable_subtotal(self):
        """
        Gets the taxable_subtotal of this CartSummary.


        :return: The taxable_subtotal of this CartSummary.
        :rtype: Currency
        """
        return self._taxable_subtotal

    @taxable_subtotal.setter
    def taxable_subtotal(self, taxable_subtotal):
        """
        Sets the taxable_subtotal of this CartSummary.


        :param taxable_subtotal: The taxable_subtotal of this CartSummary.
        :type: Currency
        """

        self._taxable_subtotal = taxable_subtotal

    @property
    def taxable_subtotal_discount(self):
        """
        Gets the taxable_subtotal_discount of this CartSummary.


        :return: The taxable_subtotal_discount of this CartSummary.
        :rtype: Currency
        """
        return self._taxable_subtotal_discount

    @taxable_subtotal_discount.setter
    def taxable_subtotal_discount(self, taxable_subtotal_discount):
        """
        Sets the taxable_subtotal_discount of this CartSummary.


        :param taxable_subtotal_discount: The taxable_subtotal_discount of this CartSummary.
        :type: Currency
        """

        self._taxable_subtotal_discount = taxable_subtotal_discount

    @property
    def taxable_subtotal_with_discount(self):
        """
        Gets the taxable_subtotal_with_discount of this CartSummary.


        :return: The taxable_subtotal_with_discount of this CartSummary.
        :rtype: Currency
        """
        return self._taxable_subtotal_with_discount

    @taxable_subtotal_with_discount.setter
    def taxable_subtotal_with_discount(self, taxable_subtotal_with_discount):
        """
        Sets the taxable_subtotal_with_discount of this CartSummary.


        :param taxable_subtotal_with_discount: The taxable_subtotal_with_discount of this CartSummary.
        :type: Currency
        """

        self._taxable_subtotal_with_discount = taxable_subtotal_with_discount

    @property
    def total(self):
        """
        Gets the total of this CartSummary.


        :return: The total of this CartSummary.
        :rtype: Currency
        """
        return self._total

    @total.setter
    def total(self, total):
        """
        Sets the total of this CartSummary.


        :param total: The total of this CartSummary.
        :type: Currency
        """

        self._total = total

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
