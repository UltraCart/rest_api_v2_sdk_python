# coding: utf-8

"""
    UltraCart Rest API V2

    This is the next generation UltraCart REST API...

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class OrderAutoOrder(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, auto_order_code=None, original_order_id=None, status=None):
        """
        OrderAutoOrder - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'auto_order_code': 'str',
            'original_order_id': 'str',
            'status': 'str'
        }

        self.attribute_map = {
            'auto_order_code': 'auto_order_code',
            'original_order_id': 'original_order_id',
            'status': 'status'
        }

        self._auto_order_code = auto_order_code
        self._original_order_id = original_order_id
        self._status = status

    @property
    def auto_order_code(self):
        """
        Gets the auto_order_code of this OrderAutoOrder.
        Unique identifier assigned to the auto order

        :return: The auto_order_code of this OrderAutoOrder.
        :rtype: str
        """
        return self._auto_order_code

    @auto_order_code.setter
    def auto_order_code(self, auto_order_code):
        """
        Sets the auto_order_code of this OrderAutoOrder.
        Unique identifier assigned to the auto order

        :param auto_order_code: The auto_order_code of this OrderAutoOrder.
        :type: str
        """

        self._auto_order_code = auto_order_code

    @property
    def original_order_id(self):
        """
        Gets the original_order_id of this OrderAutoOrder.
        Orignal order id that started this auto order sequence

        :return: The original_order_id of this OrderAutoOrder.
        :rtype: str
        """
        return self._original_order_id

    @original_order_id.setter
    def original_order_id(self, original_order_id):
        """
        Sets the original_order_id of this OrderAutoOrder.
        Orignal order id that started this auto order sequence

        :param original_order_id: The original_order_id of this OrderAutoOrder.
        :type: str
        """

        self._original_order_id = original_order_id

    @property
    def status(self):
        """
        Gets the status of this OrderAutoOrder.
        The status of the auto order

        :return: The status of this OrderAutoOrder.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this OrderAutoOrder.
        The status of the auto order

        :param status: The status of this OrderAutoOrder.
        :type: str
        """
        allowed_values = ["active", "canceled", "disabled"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
