# coding: utf-8

"""
    UltraCart Rest API V2

    This is the next generation UltraCart REST API...

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ItemAutoOrderStep(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, arbitrary_schedule_days=None, arbitrary_unit_cost=None, arbitrary_unit_cost_schedules=None, grandfather_pricing=None, managed_by=None, pause_days=None, pause_unit_date=None, preshipment_notice_days=None, recurring_merchant_item_id=None, recurring_merchant_item_oid=None, repeat_count=None, schedule=None, subscribe_email_list_name=None, subscribe_email_list_oid=None, type=None):
        """
        ItemAutoOrderStep - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'arbitrary_schedule_days': 'int',
            'arbitrary_unit_cost': 'float',
            'arbitrary_unit_cost_schedules': 'list[ItemAutoOrderStepArbitraryUnitCostSchedule]',
            'grandfather_pricing': 'list[ItemAutoOrderStepGrandfatherPricing]',
            'managed_by': 'str',
            'pause_days': 'int',
            'pause_unit_date': 'str',
            'preshipment_notice_days': 'int',
            'recurring_merchant_item_id': 'str',
            'recurring_merchant_item_oid': 'int',
            'repeat_count': 'int',
            'schedule': 'str',
            'subscribe_email_list_name': 'str',
            'subscribe_email_list_oid': 'int',
            'type': 'str'
        }

        self.attribute_map = {
            'arbitrary_schedule_days': 'arbitrary_schedule_days',
            'arbitrary_unit_cost': 'arbitrary_unit_cost',
            'arbitrary_unit_cost_schedules': 'arbitrary_unit_cost_schedules',
            'grandfather_pricing': 'grandfather_pricing',
            'managed_by': 'managed_by',
            'pause_days': 'pause_days',
            'pause_unit_date': 'pause_unit_date',
            'preshipment_notice_days': 'preshipment_notice_days',
            'recurring_merchant_item_id': 'recurring_merchant_item_id',
            'recurring_merchant_item_oid': 'recurring_merchant_item_oid',
            'repeat_count': 'repeat_count',
            'schedule': 'schedule',
            'subscribe_email_list_name': 'subscribe_email_list_name',
            'subscribe_email_list_oid': 'subscribe_email_list_oid',
            'type': 'type'
        }

        self._arbitrary_schedule_days = arbitrary_schedule_days
        self._arbitrary_unit_cost = arbitrary_unit_cost
        self._arbitrary_unit_cost_schedules = arbitrary_unit_cost_schedules
        self._grandfather_pricing = grandfather_pricing
        self._managed_by = managed_by
        self._pause_days = pause_days
        self._pause_unit_date = pause_unit_date
        self._preshipment_notice_days = preshipment_notice_days
        self._recurring_merchant_item_id = recurring_merchant_item_id
        self._recurring_merchant_item_oid = recurring_merchant_item_oid
        self._repeat_count = repeat_count
        self._schedule = schedule
        self._subscribe_email_list_name = subscribe_email_list_name
        self._subscribe_email_list_oid = subscribe_email_list_oid
        self._type = type

    @property
    def arbitrary_schedule_days(self):
        """
        Gets the arbitrary_schedule_days of this ItemAutoOrderStep.


        :return: The arbitrary_schedule_days of this ItemAutoOrderStep.
        :rtype: int
        """
        return self._arbitrary_schedule_days

    @arbitrary_schedule_days.setter
    def arbitrary_schedule_days(self, arbitrary_schedule_days):
        """
        Sets the arbitrary_schedule_days of this ItemAutoOrderStep.


        :param arbitrary_schedule_days: The arbitrary_schedule_days of this ItemAutoOrderStep.
        :type: int
        """

        self._arbitrary_schedule_days = arbitrary_schedule_days

    @property
    def arbitrary_unit_cost(self):
        """
        Gets the arbitrary_unit_cost of this ItemAutoOrderStep.


        :return: The arbitrary_unit_cost of this ItemAutoOrderStep.
        :rtype: float
        """
        return self._arbitrary_unit_cost

    @arbitrary_unit_cost.setter
    def arbitrary_unit_cost(self, arbitrary_unit_cost):
        """
        Sets the arbitrary_unit_cost of this ItemAutoOrderStep.


        :param arbitrary_unit_cost: The arbitrary_unit_cost of this ItemAutoOrderStep.
        :type: float
        """

        self._arbitrary_unit_cost = arbitrary_unit_cost

    @property
    def arbitrary_unit_cost_schedules(self):
        """
        Gets the arbitrary_unit_cost_schedules of this ItemAutoOrderStep.


        :return: The arbitrary_unit_cost_schedules of this ItemAutoOrderStep.
        :rtype: list[ItemAutoOrderStepArbitraryUnitCostSchedule]
        """
        return self._arbitrary_unit_cost_schedules

    @arbitrary_unit_cost_schedules.setter
    def arbitrary_unit_cost_schedules(self, arbitrary_unit_cost_schedules):
        """
        Sets the arbitrary_unit_cost_schedules of this ItemAutoOrderStep.


        :param arbitrary_unit_cost_schedules: The arbitrary_unit_cost_schedules of this ItemAutoOrderStep.
        :type: list[ItemAutoOrderStepArbitraryUnitCostSchedule]
        """

        self._arbitrary_unit_cost_schedules = arbitrary_unit_cost_schedules

    @property
    def grandfather_pricing(self):
        """
        Gets the grandfather_pricing of this ItemAutoOrderStep.


        :return: The grandfather_pricing of this ItemAutoOrderStep.
        :rtype: list[ItemAutoOrderStepGrandfatherPricing]
        """
        return self._grandfather_pricing

    @grandfather_pricing.setter
    def grandfather_pricing(self, grandfather_pricing):
        """
        Sets the grandfather_pricing of this ItemAutoOrderStep.


        :param grandfather_pricing: The grandfather_pricing of this ItemAutoOrderStep.
        :type: list[ItemAutoOrderStepGrandfatherPricing]
        """

        self._grandfather_pricing = grandfather_pricing

    @property
    def managed_by(self):
        """
        Gets the managed_by of this ItemAutoOrderStep.


        :return: The managed_by of this ItemAutoOrderStep.
        :rtype: str
        """
        return self._managed_by

    @managed_by.setter
    def managed_by(self, managed_by):
        """
        Sets the managed_by of this ItemAutoOrderStep.


        :param managed_by: The managed_by of this ItemAutoOrderStep.
        :type: str
        """

        self._managed_by = managed_by

    @property
    def pause_days(self):
        """
        Gets the pause_days of this ItemAutoOrderStep.


        :return: The pause_days of this ItemAutoOrderStep.
        :rtype: int
        """
        return self._pause_days

    @pause_days.setter
    def pause_days(self, pause_days):
        """
        Sets the pause_days of this ItemAutoOrderStep.


        :param pause_days: The pause_days of this ItemAutoOrderStep.
        :type: int
        """

        self._pause_days = pause_days

    @property
    def pause_unit_date(self):
        """
        Gets the pause_unit_date of this ItemAutoOrderStep.


        :return: The pause_unit_date of this ItemAutoOrderStep.
        :rtype: str
        """
        return self._pause_unit_date

    @pause_unit_date.setter
    def pause_unit_date(self, pause_unit_date):
        """
        Sets the pause_unit_date of this ItemAutoOrderStep.


        :param pause_unit_date: The pause_unit_date of this ItemAutoOrderStep.
        :type: str
        """

        self._pause_unit_date = pause_unit_date

    @property
    def preshipment_notice_days(self):
        """
        Gets the preshipment_notice_days of this ItemAutoOrderStep.


        :return: The preshipment_notice_days of this ItemAutoOrderStep.
        :rtype: int
        """
        return self._preshipment_notice_days

    @preshipment_notice_days.setter
    def preshipment_notice_days(self, preshipment_notice_days):
        """
        Sets the preshipment_notice_days of this ItemAutoOrderStep.


        :param preshipment_notice_days: The preshipment_notice_days of this ItemAutoOrderStep.
        :type: int
        """

        self._preshipment_notice_days = preshipment_notice_days

    @property
    def recurring_merchant_item_id(self):
        """
        Gets the recurring_merchant_item_id of this ItemAutoOrderStep.


        :return: The recurring_merchant_item_id of this ItemAutoOrderStep.
        :rtype: str
        """
        return self._recurring_merchant_item_id

    @recurring_merchant_item_id.setter
    def recurring_merchant_item_id(self, recurring_merchant_item_id):
        """
        Sets the recurring_merchant_item_id of this ItemAutoOrderStep.


        :param recurring_merchant_item_id: The recurring_merchant_item_id of this ItemAutoOrderStep.
        :type: str
        """

        self._recurring_merchant_item_id = recurring_merchant_item_id

    @property
    def recurring_merchant_item_oid(self):
        """
        Gets the recurring_merchant_item_oid of this ItemAutoOrderStep.


        :return: The recurring_merchant_item_oid of this ItemAutoOrderStep.
        :rtype: int
        """
        return self._recurring_merchant_item_oid

    @recurring_merchant_item_oid.setter
    def recurring_merchant_item_oid(self, recurring_merchant_item_oid):
        """
        Sets the recurring_merchant_item_oid of this ItemAutoOrderStep.


        :param recurring_merchant_item_oid: The recurring_merchant_item_oid of this ItemAutoOrderStep.
        :type: int
        """

        self._recurring_merchant_item_oid = recurring_merchant_item_oid

    @property
    def repeat_count(self):
        """
        Gets the repeat_count of this ItemAutoOrderStep.


        :return: The repeat_count of this ItemAutoOrderStep.
        :rtype: int
        """
        return self._repeat_count

    @repeat_count.setter
    def repeat_count(self, repeat_count):
        """
        Sets the repeat_count of this ItemAutoOrderStep.


        :param repeat_count: The repeat_count of this ItemAutoOrderStep.
        :type: int
        """

        self._repeat_count = repeat_count

    @property
    def schedule(self):
        """
        Gets the schedule of this ItemAutoOrderStep.


        :return: The schedule of this ItemAutoOrderStep.
        :rtype: str
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """
        Sets the schedule of this ItemAutoOrderStep.


        :param schedule: The schedule of this ItemAutoOrderStep.
        :type: str
        """

        self._schedule = schedule

    @property
    def subscribe_email_list_name(self):
        """
        Gets the subscribe_email_list_name of this ItemAutoOrderStep.


        :return: The subscribe_email_list_name of this ItemAutoOrderStep.
        :rtype: str
        """
        return self._subscribe_email_list_name

    @subscribe_email_list_name.setter
    def subscribe_email_list_name(self, subscribe_email_list_name):
        """
        Sets the subscribe_email_list_name of this ItemAutoOrderStep.


        :param subscribe_email_list_name: The subscribe_email_list_name of this ItemAutoOrderStep.
        :type: str
        """

        self._subscribe_email_list_name = subscribe_email_list_name

    @property
    def subscribe_email_list_oid(self):
        """
        Gets the subscribe_email_list_oid of this ItemAutoOrderStep.


        :return: The subscribe_email_list_oid of this ItemAutoOrderStep.
        :rtype: int
        """
        return self._subscribe_email_list_oid

    @subscribe_email_list_oid.setter
    def subscribe_email_list_oid(self, subscribe_email_list_oid):
        """
        Sets the subscribe_email_list_oid of this ItemAutoOrderStep.


        :param subscribe_email_list_oid: The subscribe_email_list_oid of this ItemAutoOrderStep.
        :type: int
        """

        self._subscribe_email_list_oid = subscribe_email_list_oid

    @property
    def type(self):
        """
        Gets the type of this ItemAutoOrderStep.


        :return: The type of this ItemAutoOrderStep.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this ItemAutoOrderStep.


        :param type: The type of this ItemAutoOrderStep.
        :type: str
        """

        self._type = type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
