# coding: utf-8

"""
    UltraCart Rest API V2

    This is the next generation UltraCart REST API...

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ItemContent(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, assignments=None, attributes=None, exclude_from_search=None, exclude_from_top_sellers=None, extended_description=None, extended_description_translated_text_instance_oid=None, multimedia=None, new_item=None, new_item_end=None, new_item_start=None, view_url=None):
        """
        ItemContent - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'assignments': 'list[ItemContentAssignment]',
            'attributes': 'list[ItemContentAttribute]',
            'exclude_from_search': 'bool',
            'exclude_from_top_sellers': 'bool',
            'extended_description': 'str',
            'extended_description_translated_text_instance_oid': 'int',
            'multimedia': 'list[ItemContentMultimedia]',
            'new_item': 'bool',
            'new_item_end': 'str',
            'new_item_start': 'str',
            'view_url': 'str'
        }

        self.attribute_map = {
            'assignments': 'assignments',
            'attributes': 'attributes',
            'exclude_from_search': 'exclude_from_search',
            'exclude_from_top_sellers': 'exclude_from_top_sellers',
            'extended_description': 'extended_description',
            'extended_description_translated_text_instance_oid': 'extended_description_translated_text_instance_oid',
            'multimedia': 'multimedia',
            'new_item': 'new_item',
            'new_item_end': 'new_item_end',
            'new_item_start': 'new_item_start',
            'view_url': 'view_url'
        }

        self._assignments = assignments
        self._attributes = attributes
        self._exclude_from_search = exclude_from_search
        self._exclude_from_top_sellers = exclude_from_top_sellers
        self._extended_description = extended_description
        self._extended_description_translated_text_instance_oid = extended_description_translated_text_instance_oid
        self._multimedia = multimedia
        self._new_item = new_item
        self._new_item_end = new_item_end
        self._new_item_start = new_item_start
        self._view_url = view_url

    @property
    def assignments(self):
        """
        Gets the assignments of this ItemContent.


        :return: The assignments of this ItemContent.
        :rtype: list[ItemContentAssignment]
        """
        return self._assignments

    @assignments.setter
    def assignments(self, assignments):
        """
        Sets the assignments of this ItemContent.


        :param assignments: The assignments of this ItemContent.
        :type: list[ItemContentAssignment]
        """

        self._assignments = assignments

    @property
    def attributes(self):
        """
        Gets the attributes of this ItemContent.


        :return: The attributes of this ItemContent.
        :rtype: list[ItemContentAttribute]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """
        Sets the attributes of this ItemContent.


        :param attributes: The attributes of this ItemContent.
        :type: list[ItemContentAttribute]
        """

        self._attributes = attributes

    @property
    def exclude_from_search(self):
        """
        Gets the exclude_from_search of this ItemContent.


        :return: The exclude_from_search of this ItemContent.
        :rtype: bool
        """
        return self._exclude_from_search

    @exclude_from_search.setter
    def exclude_from_search(self, exclude_from_search):
        """
        Sets the exclude_from_search of this ItemContent.


        :param exclude_from_search: The exclude_from_search of this ItemContent.
        :type: bool
        """

        self._exclude_from_search = exclude_from_search

    @property
    def exclude_from_top_sellers(self):
        """
        Gets the exclude_from_top_sellers of this ItemContent.


        :return: The exclude_from_top_sellers of this ItemContent.
        :rtype: bool
        """
        return self._exclude_from_top_sellers

    @exclude_from_top_sellers.setter
    def exclude_from_top_sellers(self, exclude_from_top_sellers):
        """
        Sets the exclude_from_top_sellers of this ItemContent.


        :param exclude_from_top_sellers: The exclude_from_top_sellers of this ItemContent.
        :type: bool
        """

        self._exclude_from_top_sellers = exclude_from_top_sellers

    @property
    def extended_description(self):
        """
        Gets the extended_description of this ItemContent.


        :return: The extended_description of this ItemContent.
        :rtype: str
        """
        return self._extended_description

    @extended_description.setter
    def extended_description(self, extended_description):
        """
        Sets the extended_description of this ItemContent.


        :param extended_description: The extended_description of this ItemContent.
        :type: str
        """

        self._extended_description = extended_description

    @property
    def extended_description_translated_text_instance_oid(self):
        """
        Gets the extended_description_translated_text_instance_oid of this ItemContent.


        :return: The extended_description_translated_text_instance_oid of this ItemContent.
        :rtype: int
        """
        return self._extended_description_translated_text_instance_oid

    @extended_description_translated_text_instance_oid.setter
    def extended_description_translated_text_instance_oid(self, extended_description_translated_text_instance_oid):
        """
        Sets the extended_description_translated_text_instance_oid of this ItemContent.


        :param extended_description_translated_text_instance_oid: The extended_description_translated_text_instance_oid of this ItemContent.
        :type: int
        """

        self._extended_description_translated_text_instance_oid = extended_description_translated_text_instance_oid

    @property
    def multimedia(self):
        """
        Gets the multimedia of this ItemContent.


        :return: The multimedia of this ItemContent.
        :rtype: list[ItemContentMultimedia]
        """
        return self._multimedia

    @multimedia.setter
    def multimedia(self, multimedia):
        """
        Sets the multimedia of this ItemContent.


        :param multimedia: The multimedia of this ItemContent.
        :type: list[ItemContentMultimedia]
        """

        self._multimedia = multimedia

    @property
    def new_item(self):
        """
        Gets the new_item of this ItemContent.


        :return: The new_item of this ItemContent.
        :rtype: bool
        """
        return self._new_item

    @new_item.setter
    def new_item(self, new_item):
        """
        Sets the new_item of this ItemContent.


        :param new_item: The new_item of this ItemContent.
        :type: bool
        """

        self._new_item = new_item

    @property
    def new_item_end(self):
        """
        Gets the new_item_end of this ItemContent.


        :return: The new_item_end of this ItemContent.
        :rtype: str
        """
        return self._new_item_end

    @new_item_end.setter
    def new_item_end(self, new_item_end):
        """
        Sets the new_item_end of this ItemContent.


        :param new_item_end: The new_item_end of this ItemContent.
        :type: str
        """

        self._new_item_end = new_item_end

    @property
    def new_item_start(self):
        """
        Gets the new_item_start of this ItemContent.


        :return: The new_item_start of this ItemContent.
        :rtype: str
        """
        return self._new_item_start

    @new_item_start.setter
    def new_item_start(self, new_item_start):
        """
        Sets the new_item_start of this ItemContent.


        :param new_item_start: The new_item_start of this ItemContent.
        :type: str
        """

        self._new_item_start = new_item_start

    @property
    def view_url(self):
        """
        Gets the view_url of this ItemContent.


        :return: The view_url of this ItemContent.
        :rtype: str
        """
        return self._view_url

    @view_url.setter
    def view_url(self, view_url):
        """
        Sets the view_url of this ItemContent.


        :param view_url: The view_url of this ItemContent.
        :type: str
        """

        self._view_url = view_url

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
