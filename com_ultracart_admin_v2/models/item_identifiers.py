# coding: utf-8

"""
    UltraCart Rest API V2

    This is the next generation UltraCart REST API...

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ItemIdentifiers(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, barcode=None, manufacturer_name=None, manufacturer_sku=None, unspsc=None):
        """
        ItemIdentifiers - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'barcode': 'str',
            'manufacturer_name': 'str',
            'manufacturer_sku': 'str',
            'unspsc': 'str'
        }

        self.attribute_map = {
            'barcode': 'barcode',
            'manufacturer_name': 'manufacturer_name',
            'manufacturer_sku': 'manufacturer_sku',
            'unspsc': 'unspsc'
        }

        self._barcode = barcode
        self._manufacturer_name = manufacturer_name
        self._manufacturer_sku = manufacturer_sku
        self._unspsc = unspsc

    @property
    def barcode(self):
        """
        Gets the barcode of this ItemIdentifiers.


        :return: The barcode of this ItemIdentifiers.
        :rtype: str
        """
        return self._barcode

    @barcode.setter
    def barcode(self, barcode):
        """
        Sets the barcode of this ItemIdentifiers.


        :param barcode: The barcode of this ItemIdentifiers.
        :type: str
        """

        self._barcode = barcode

    @property
    def manufacturer_name(self):
        """
        Gets the manufacturer_name of this ItemIdentifiers.


        :return: The manufacturer_name of this ItemIdentifiers.
        :rtype: str
        """
        return self._manufacturer_name

    @manufacturer_name.setter
    def manufacturer_name(self, manufacturer_name):
        """
        Sets the manufacturer_name of this ItemIdentifiers.


        :param manufacturer_name: The manufacturer_name of this ItemIdentifiers.
        :type: str
        """

        self._manufacturer_name = manufacturer_name

    @property
    def manufacturer_sku(self):
        """
        Gets the manufacturer_sku of this ItemIdentifiers.


        :return: The manufacturer_sku of this ItemIdentifiers.
        :rtype: str
        """
        return self._manufacturer_sku

    @manufacturer_sku.setter
    def manufacturer_sku(self, manufacturer_sku):
        """
        Sets the manufacturer_sku of this ItemIdentifiers.


        :param manufacturer_sku: The manufacturer_sku of this ItemIdentifiers.
        :type: str
        """

        self._manufacturer_sku = manufacturer_sku

    @property
    def unspsc(self):
        """
        Gets the unspsc of this ItemIdentifiers.


        :return: The unspsc of this ItemIdentifiers.
        :rtype: str
        """
        return self._unspsc

    @unspsc.setter
    def unspsc(self, unspsc):
        """
        Sets the unspsc of this ItemIdentifiers.


        :param unspsc: The unspsc of this ItemIdentifiers.
        :type: str
        """

        self._unspsc = unspsc

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
