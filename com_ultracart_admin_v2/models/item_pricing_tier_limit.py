# coding: utf-8

"""
    UltraCart Rest API V2

    This is the next generation UltraCart REST API...

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ItemPricingTierLimit(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, cumulative_order_limit=None, individual_order_limit=None, multiple_quantity=None):
        """
        ItemPricingTierLimit - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'cumulative_order_limit': 'int',
            'individual_order_limit': 'int',
            'multiple_quantity': 'int'
        }

        self.attribute_map = {
            'cumulative_order_limit': 'cumulative_order_limit',
            'individual_order_limit': 'individual_order_limit',
            'multiple_quantity': 'multiple_quantity'
        }

        self._cumulative_order_limit = cumulative_order_limit
        self._individual_order_limit = individual_order_limit
        self._multiple_quantity = multiple_quantity

    @property
    def cumulative_order_limit(self):
        """
        Gets the cumulative_order_limit of this ItemPricingTierLimit.


        :return: The cumulative_order_limit of this ItemPricingTierLimit.
        :rtype: int
        """
        return self._cumulative_order_limit

    @cumulative_order_limit.setter
    def cumulative_order_limit(self, cumulative_order_limit):
        """
        Sets the cumulative_order_limit of this ItemPricingTierLimit.


        :param cumulative_order_limit: The cumulative_order_limit of this ItemPricingTierLimit.
        :type: int
        """

        self._cumulative_order_limit = cumulative_order_limit

    @property
    def individual_order_limit(self):
        """
        Gets the individual_order_limit of this ItemPricingTierLimit.


        :return: The individual_order_limit of this ItemPricingTierLimit.
        :rtype: int
        """
        return self._individual_order_limit

    @individual_order_limit.setter
    def individual_order_limit(self, individual_order_limit):
        """
        Sets the individual_order_limit of this ItemPricingTierLimit.


        :param individual_order_limit: The individual_order_limit of this ItemPricingTierLimit.
        :type: int
        """

        self._individual_order_limit = individual_order_limit

    @property
    def multiple_quantity(self):
        """
        Gets the multiple_quantity of this ItemPricingTierLimit.


        :return: The multiple_quantity of this ItemPricingTierLimit.
        :rtype: int
        """
        return self._multiple_quantity

    @multiple_quantity.setter
    def multiple_quantity(self, multiple_quantity):
        """
        Sets the multiple_quantity of this ItemPricingTierLimit.


        :param multiple_quantity: The multiple_quantity of this ItemPricingTierLimit.
        :type: int
        """

        self._multiple_quantity = multiple_quantity

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
