# coding: utf-8

"""
    UltraCart Rest API V2

    This is the next generation UltraCart REST API...

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ItemPaymentProcessing(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, block_prepaid=None, credit_card_transaction_type=None, no_realtime_charge=None, payment_method_validity=None, rotating_transaction_gateway_codes=None):
        """
        ItemPaymentProcessing - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'block_prepaid': 'bool',
            'credit_card_transaction_type': 'str',
            'no_realtime_charge': 'bool',
            'payment_method_validity': 'str',
            'rotating_transaction_gateway_codes': 'str'
        }

        self.attribute_map = {
            'block_prepaid': 'block_prepaid',
            'credit_card_transaction_type': 'credit_card_transaction_type',
            'no_realtime_charge': 'no_realtime_charge',
            'payment_method_validity': 'payment_method_validity',
            'rotating_transaction_gateway_codes': 'rotating_transaction_gateway_codes'
        }

        self._block_prepaid = block_prepaid
        self._credit_card_transaction_type = credit_card_transaction_type
        self._no_realtime_charge = no_realtime_charge
        self._payment_method_validity = payment_method_validity
        self._rotating_transaction_gateway_codes = rotating_transaction_gateway_codes

    @property
    def block_prepaid(self):
        """
        Gets the block_prepaid of this ItemPaymentProcessing.


        :return: The block_prepaid of this ItemPaymentProcessing.
        :rtype: bool
        """
        return self._block_prepaid

    @block_prepaid.setter
    def block_prepaid(self, block_prepaid):
        """
        Sets the block_prepaid of this ItemPaymentProcessing.


        :param block_prepaid: The block_prepaid of this ItemPaymentProcessing.
        :type: bool
        """

        self._block_prepaid = block_prepaid

    @property
    def credit_card_transaction_type(self):
        """
        Gets the credit_card_transaction_type of this ItemPaymentProcessing.


        :return: The credit_card_transaction_type of this ItemPaymentProcessing.
        :rtype: str
        """
        return self._credit_card_transaction_type

    @credit_card_transaction_type.setter
    def credit_card_transaction_type(self, credit_card_transaction_type):
        """
        Sets the credit_card_transaction_type of this ItemPaymentProcessing.


        :param credit_card_transaction_type: The credit_card_transaction_type of this ItemPaymentProcessing.
        :type: str
        """

        self._credit_card_transaction_type = credit_card_transaction_type

    @property
    def no_realtime_charge(self):
        """
        Gets the no_realtime_charge of this ItemPaymentProcessing.


        :return: The no_realtime_charge of this ItemPaymentProcessing.
        :rtype: bool
        """
        return self._no_realtime_charge

    @no_realtime_charge.setter
    def no_realtime_charge(self, no_realtime_charge):
        """
        Sets the no_realtime_charge of this ItemPaymentProcessing.


        :param no_realtime_charge: The no_realtime_charge of this ItemPaymentProcessing.
        :type: bool
        """

        self._no_realtime_charge = no_realtime_charge

    @property
    def payment_method_validity(self):
        """
        Gets the payment_method_validity of this ItemPaymentProcessing.


        :return: The payment_method_validity of this ItemPaymentProcessing.
        :rtype: str
        """
        return self._payment_method_validity

    @payment_method_validity.setter
    def payment_method_validity(self, payment_method_validity):
        """
        Sets the payment_method_validity of this ItemPaymentProcessing.


        :param payment_method_validity: The payment_method_validity of this ItemPaymentProcessing.
        :type: str
        """

        self._payment_method_validity = payment_method_validity

    @property
    def rotating_transaction_gateway_codes(self):
        """
        Gets the rotating_transaction_gateway_codes of this ItemPaymentProcessing.


        :return: The rotating_transaction_gateway_codes of this ItemPaymentProcessing.
        :rtype: str
        """
        return self._rotating_transaction_gateway_codes

    @rotating_transaction_gateway_codes.setter
    def rotating_transaction_gateway_codes(self, rotating_transaction_gateway_codes):
        """
        Sets the rotating_transaction_gateway_codes of this ItemPaymentProcessing.


        :param rotating_transaction_gateway_codes: The rotating_transaction_gateway_codes of this ItemPaymentProcessing.
        :type: str
        """

        self._rotating_transaction_gateway_codes = rotating_transaction_gateway_codes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
