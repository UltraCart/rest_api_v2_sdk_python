# coding: utf-8

"""
    UltraCart Rest API V2

    This is the next generation UltraCart REST API...

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class CartBuysafe(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, bond_available=None, bond_cost=None, bond_free=None, bond_wanted=None, cart_display_text=None, cart_display_url=None):
        """
        CartBuysafe - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'bond_available': 'bool',
            'bond_cost': 'Currency',
            'bond_free': 'bool',
            'bond_wanted': 'bool',
            'cart_display_text': 'str',
            'cart_display_url': 'str'
        }

        self.attribute_map = {
            'bond_available': 'bond_available',
            'bond_cost': 'bond_cost',
            'bond_free': 'bond_free',
            'bond_wanted': 'bond_wanted',
            'cart_display_text': 'cart_display_text',
            'cart_display_url': 'cart_display_url'
        }

        self._bond_available = bond_available
        self._bond_cost = bond_cost
        self._bond_free = bond_free
        self._bond_wanted = bond_wanted
        self._cart_display_text = cart_display_text
        self._cart_display_url = cart_display_url

    @property
    def bond_available(self):
        """
        Gets the bond_available of this CartBuysafe.
        True if buySAFE is willing to bond the order

        :return: The bond_available of this CartBuysafe.
        :rtype: bool
        """
        return self._bond_available

    @bond_available.setter
    def bond_available(self, bond_available):
        """
        Sets the bond_available of this CartBuysafe.
        True if buySAFE is willing to bond the order

        :param bond_available: The bond_available of this CartBuysafe.
        :type: bool
        """

        self._bond_available = bond_available

    @property
    def bond_cost(self):
        """
        Gets the bond_cost of this CartBuysafe.


        :return: The bond_cost of this CartBuysafe.
        :rtype: Currency
        """
        return self._bond_cost

    @bond_cost.setter
    def bond_cost(self, bond_cost):
        """
        Sets the bond_cost of this CartBuysafe.


        :param bond_cost: The bond_cost of this CartBuysafe.
        :type: Currency
        """

        self._bond_cost = bond_cost

    @property
    def bond_free(self):
        """
        Gets the bond_free of this CartBuysafe.
        True if the bond is free (merchant paying for it)

        :return: The bond_free of this CartBuysafe.
        :rtype: bool
        """
        return self._bond_free

    @bond_free.setter
    def bond_free(self, bond_free):
        """
        Sets the bond_free of this CartBuysafe.
        True if the bond is free (merchant paying for it)

        :param bond_free: The bond_free of this CartBuysafe.
        :type: bool
        """

        self._bond_free = bond_free

    @property
    def bond_wanted(self):
        """
        Gets the bond_wanted of this CartBuysafe.
        True if the customer wants the bond

        :return: The bond_wanted of this CartBuysafe.
        :rtype: bool
        """
        return self._bond_wanted

    @bond_wanted.setter
    def bond_wanted(self, bond_wanted):
        """
        Sets the bond_wanted of this CartBuysafe.
        True if the customer wants the bond

        :param bond_wanted: The bond_wanted of this CartBuysafe.
        :type: bool
        """

        self._bond_wanted = bond_wanted

    @property
    def cart_display_text(self):
        """
        Gets the cart_display_text of this CartBuysafe.
        Recommend text to display to the customer

        :return: The cart_display_text of this CartBuysafe.
        :rtype: str
        """
        return self._cart_display_text

    @cart_display_text.setter
    def cart_display_text(self, cart_display_text):
        """
        Sets the cart_display_text of this CartBuysafe.
        Recommend text to display to the customer

        :param cart_display_text: The cart_display_text of this CartBuysafe.
        :type: str
        """

        self._cart_display_text = cart_display_text

    @property
    def cart_display_url(self):
        """
        Gets the cart_display_url of this CartBuysafe.
        URL associated with the recommended text

        :return: The cart_display_url of this CartBuysafe.
        :rtype: str
        """
        return self._cart_display_url

    @cart_display_url.setter
    def cart_display_url(self, cart_display_url):
        """
        Sets the cart_display_url of this CartBuysafe.
        URL associated with the recommended text

        :param cart_display_url: The cart_display_url of this CartBuysafe.
        :type: str
        """

        self._cart_display_url = cart_display_url

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
