# coding: utf-8

"""
    UltraCart Rest API V2

    This is the next generation UltraCart REST API...

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class OrderPaymentTransaction(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, details=None, successful=None, transaction_gateway=None, transaction_timestamp=None):
        """
        OrderPaymentTransaction - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'details': 'list[OrderPaymentTransactionDetail]',
            'successful': 'bool',
            'transaction_gateway': 'str',
            'transaction_timestamp': 'str'
        }

        self.attribute_map = {
            'details': 'details',
            'successful': 'successful',
            'transaction_gateway': 'transaction_gateway',
            'transaction_timestamp': 'transaction_timestamp'
        }

        self._details = details
        self._successful = successful
        self._transaction_gateway = transaction_gateway
        self._transaction_timestamp = transaction_timestamp

    @property
    def details(self):
        """
        Gets the details of this OrderPaymentTransaction.
        Details

        :return: The details of this OrderPaymentTransaction.
        :rtype: list[OrderPaymentTransactionDetail]
        """
        return self._details

    @details.setter
    def details(self, details):
        """
        Sets the details of this OrderPaymentTransaction.
        Details

        :param details: The details of this OrderPaymentTransaction.
        :type: list[OrderPaymentTransactionDetail]
        """

        self._details = details

    @property
    def successful(self):
        """
        Gets the successful of this OrderPaymentTransaction.
        True if the transaction was successful

        :return: The successful of this OrderPaymentTransaction.
        :rtype: bool
        """
        return self._successful

    @successful.setter
    def successful(self, successful):
        """
        Sets the successful of this OrderPaymentTransaction.
        True if the transaction was successful

        :param successful: The successful of this OrderPaymentTransaction.
        :type: bool
        """

        self._successful = successful

    @property
    def transaction_gateway(self):
        """
        Gets the transaction_gateway of this OrderPaymentTransaction.
        Transaction gateway

        :return: The transaction_gateway of this OrderPaymentTransaction.
        :rtype: str
        """
        return self._transaction_gateway

    @transaction_gateway.setter
    def transaction_gateway(self, transaction_gateway):
        """
        Sets the transaction_gateway of this OrderPaymentTransaction.
        Transaction gateway

        :param transaction_gateway: The transaction_gateway of this OrderPaymentTransaction.
        :type: str
        """

        self._transaction_gateway = transaction_gateway

    @property
    def transaction_timestamp(self):
        """
        Gets the transaction_timestamp of this OrderPaymentTransaction.
        Transaction date/time

        :return: The transaction_timestamp of this OrderPaymentTransaction.
        :rtype: str
        """
        return self._transaction_timestamp

    @transaction_timestamp.setter
    def transaction_timestamp(self, transaction_timestamp):
        """
        Sets the transaction_timestamp of this OrderPaymentTransaction.
        Transaction date/time

        :param transaction_timestamp: The transaction_timestamp of this OrderPaymentTransaction.
        :type: str
        """

        self._transaction_timestamp = transaction_timestamp

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
