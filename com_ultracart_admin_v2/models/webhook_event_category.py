# coding: utf-8

"""
    UltraCart Rest API V2

    This is the next generation UltraCart REST API...

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class WebhookEventCategory(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, event_category=None, events=None, subscribed=None):
        """
        WebhookEventCategory - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'event_category': 'str',
            'events': 'list[WebhookEventSubscription]',
            'subscribed': 'bool'
        }

        self.attribute_map = {
            'event_category': 'event_category',
            'events': 'events',
            'subscribed': 'subscribed'
        }

        self._event_category = event_category
        self._events = events
        self._subscribed = subscribed

    @property
    def event_category(self):
        """
        Gets the event_category of this WebhookEventCategory.


        :return: The event_category of this WebhookEventCategory.
        :rtype: str
        """
        return self._event_category

    @event_category.setter
    def event_category(self, event_category):
        """
        Sets the event_category of this WebhookEventCategory.


        :param event_category: The event_category of this WebhookEventCategory.
        :type: str
        """

        self._event_category = event_category

    @property
    def events(self):
        """
        Gets the events of this WebhookEventCategory.


        :return: The events of this WebhookEventCategory.
        :rtype: list[WebhookEventSubscription]
        """
        return self._events

    @events.setter
    def events(self, events):
        """
        Sets the events of this WebhookEventCategory.


        :param events: The events of this WebhookEventCategory.
        :type: list[WebhookEventSubscription]
        """

        self._events = events

    @property
    def subscribed(self):
        """
        Gets the subscribed of this WebhookEventCategory.


        :return: The subscribed of this WebhookEventCategory.
        :rtype: bool
        """
        return self._subscribed

    @subscribed.setter
    def subscribed(self, subscribed):
        """
        Sets the subscribed of this WebhookEventCategory.


        :param subscribed: The subscribed of this WebhookEventCategory.
        :type: bool
        """

        self._subscribed = subscribed

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
