# coding: utf-8

"""
    UltraCart Rest API V2

    This is the next generation UltraCart REST API...

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ItemDigitalDelivery(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, activation_code_description=None, activation_code_low_warning=None, activation_code_realtime_url=None, activation_code_shared_secret=None, activation_code_type=None, digital_items=None):
        """
        ItemDigitalDelivery - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'activation_code_description': 'str',
            'activation_code_low_warning': 'int',
            'activation_code_realtime_url': 'str',
            'activation_code_shared_secret': 'str',
            'activation_code_type': 'str',
            'digital_items': 'list[ItemDigitalItem]'
        }

        self.attribute_map = {
            'activation_code_description': 'activation_code_description',
            'activation_code_low_warning': 'activation_code_low_warning',
            'activation_code_realtime_url': 'activation_code_realtime_url',
            'activation_code_shared_secret': 'activation_code_shared_secret',
            'activation_code_type': 'activation_code_type',
            'digital_items': 'digital_items'
        }

        self._activation_code_description = activation_code_description
        self._activation_code_low_warning = activation_code_low_warning
        self._activation_code_realtime_url = activation_code_realtime_url
        self._activation_code_shared_secret = activation_code_shared_secret
        self._activation_code_type = activation_code_type
        self._digital_items = digital_items

    @property
    def activation_code_description(self):
        """
        Gets the activation_code_description of this ItemDigitalDelivery.
        Description of the activation code

        :return: The activation_code_description of this ItemDigitalDelivery.
        :rtype: str
        """
        return self._activation_code_description

    @activation_code_description.setter
    def activation_code_description(self, activation_code_description):
        """
        Sets the activation_code_description of this ItemDigitalDelivery.
        Description of the activation code

        :param activation_code_description: The activation_code_description of this ItemDigitalDelivery.
        :type: str
        """

        if not activation_code_description:
            raise ValueError("Invalid value for `activation_code_description`, must not be `None`")
        if len(activation_code_description) > 50:
            raise ValueError("Invalid value for `activation_code_description`, length must be less than `50`")

        self._activation_code_description = activation_code_description

    @property
    def activation_code_low_warning(self):
        """
        Gets the activation_code_low_warning of this ItemDigitalDelivery.
        The number of activation codes whcih should generate a warning email

        :return: The activation_code_low_warning of this ItemDigitalDelivery.
        :rtype: int
        """
        return self._activation_code_low_warning

    @activation_code_low_warning.setter
    def activation_code_low_warning(self, activation_code_low_warning):
        """
        Sets the activation_code_low_warning of this ItemDigitalDelivery.
        The number of activation codes whcih should generate a warning email

        :param activation_code_low_warning: The activation_code_low_warning of this ItemDigitalDelivery.
        :type: int
        """

        self._activation_code_low_warning = activation_code_low_warning

    @property
    def activation_code_realtime_url(self):
        """
        Gets the activation_code_realtime_url of this ItemDigitalDelivery.
        The URL to retrieve activation codes from in real-time

        :return: The activation_code_realtime_url of this ItemDigitalDelivery.
        :rtype: str
        """
        return self._activation_code_realtime_url

    @activation_code_realtime_url.setter
    def activation_code_realtime_url(self, activation_code_realtime_url):
        """
        Sets the activation_code_realtime_url of this ItemDigitalDelivery.
        The URL to retrieve activation codes from in real-time

        :param activation_code_realtime_url: The activation_code_realtime_url of this ItemDigitalDelivery.
        :type: str
        """

        if not activation_code_realtime_url:
            raise ValueError("Invalid value for `activation_code_realtime_url`, must not be `None`")
        if len(activation_code_realtime_url) > 350:
            raise ValueError("Invalid value for `activation_code_realtime_url`, length must be less than `350`")

        self._activation_code_realtime_url = activation_code_realtime_url

    @property
    def activation_code_shared_secret(self):
        """
        Gets the activation_code_shared_secret of this ItemDigitalDelivery.
        Shared secret used when communicating with the real-time URL

        :return: The activation_code_shared_secret of this ItemDigitalDelivery.
        :rtype: str
        """
        return self._activation_code_shared_secret

    @activation_code_shared_secret.setter
    def activation_code_shared_secret(self, activation_code_shared_secret):
        """
        Sets the activation_code_shared_secret of this ItemDigitalDelivery.
        Shared secret used when communicating with the real-time URL

        :param activation_code_shared_secret: The activation_code_shared_secret of this ItemDigitalDelivery.
        :type: str
        """

        if not activation_code_shared_secret:
            raise ValueError("Invalid value for `activation_code_shared_secret`, must not be `None`")
        if len(activation_code_shared_secret) > 20:
            raise ValueError("Invalid value for `activation_code_shared_secret`, length must be less than `20`")

        self._activation_code_shared_secret = activation_code_shared_secret

    @property
    def activation_code_type(self):
        """
        Gets the activation_code_type of this ItemDigitalDelivery.
        Type of activation code

        :return: The activation_code_type of this ItemDigitalDelivery.
        :rtype: str
        """
        return self._activation_code_type

    @activation_code_type.setter
    def activation_code_type(self, activation_code_type):
        """
        Sets the activation_code_type of this ItemDigitalDelivery.
        Type of activation code

        :param activation_code_type: The activation_code_type of this ItemDigitalDelivery.
        :type: str
        """

        self._activation_code_type = activation_code_type

    @property
    def digital_items(self):
        """
        Gets the digital_items of this ItemDigitalDelivery.
        Digital items that customer can download when this item is purchased

        :return: The digital_items of this ItemDigitalDelivery.
        :rtype: list[ItemDigitalItem]
        """
        return self._digital_items

    @digital_items.setter
    def digital_items(self, digital_items):
        """
        Sets the digital_items of this ItemDigitalDelivery.
        Digital items that customer can download when this item is purchased

        :param digital_items: The digital_items of this ItemDigitalDelivery.
        :type: list[ItemDigitalItem]
        """

        self._digital_items = digital_items

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
