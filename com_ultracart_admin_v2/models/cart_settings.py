# coding: utf-8

"""
    UltraCart Rest API V2

    This is the next generation UltraCart REST API...

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class CartSettings(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, billing=None, gift=None, payment=None, shipping=None, taxes=None, terms=None):
        """
        CartSettings - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'billing': 'CartSettingsBilling',
            'gift': 'CartSettingsGift',
            'payment': 'CartSettingsPayment',
            'shipping': 'CartSettingsShipping',
            'taxes': 'CartSettingsTaxes',
            'terms': 'CartSettingsTerms'
        }

        self.attribute_map = {
            'billing': 'billing',
            'gift': 'gift',
            'payment': 'payment',
            'shipping': 'shipping',
            'taxes': 'taxes',
            'terms': 'terms'
        }

        self._billing = billing
        self._gift = gift
        self._payment = payment
        self._shipping = shipping
        self._taxes = taxes
        self._terms = terms

    @property
    def billing(self):
        """
        Gets the billing of this CartSettings.


        :return: The billing of this CartSettings.
        :rtype: CartSettingsBilling
        """
        return self._billing

    @billing.setter
    def billing(self, billing):
        """
        Sets the billing of this CartSettings.


        :param billing: The billing of this CartSettings.
        :type: CartSettingsBilling
        """

        self._billing = billing

    @property
    def gift(self):
        """
        Gets the gift of this CartSettings.


        :return: The gift of this CartSettings.
        :rtype: CartSettingsGift
        """
        return self._gift

    @gift.setter
    def gift(self, gift):
        """
        Sets the gift of this CartSettings.


        :param gift: The gift of this CartSettings.
        :type: CartSettingsGift
        """

        self._gift = gift

    @property
    def payment(self):
        """
        Gets the payment of this CartSettings.


        :return: The payment of this CartSettings.
        :rtype: CartSettingsPayment
        """
        return self._payment

    @payment.setter
    def payment(self, payment):
        """
        Sets the payment of this CartSettings.


        :param payment: The payment of this CartSettings.
        :type: CartSettingsPayment
        """

        self._payment = payment

    @property
    def shipping(self):
        """
        Gets the shipping of this CartSettings.


        :return: The shipping of this CartSettings.
        :rtype: CartSettingsShipping
        """
        return self._shipping

    @shipping.setter
    def shipping(self, shipping):
        """
        Sets the shipping of this CartSettings.


        :param shipping: The shipping of this CartSettings.
        :type: CartSettingsShipping
        """

        self._shipping = shipping

    @property
    def taxes(self):
        """
        Gets the taxes of this CartSettings.


        :return: The taxes of this CartSettings.
        :rtype: CartSettingsTaxes
        """
        return self._taxes

    @taxes.setter
    def taxes(self, taxes):
        """
        Sets the taxes of this CartSettings.


        :param taxes: The taxes of this CartSettings.
        :type: CartSettingsTaxes
        """

        self._taxes = taxes

    @property
    def terms(self):
        """
        Gets the terms of this CartSettings.


        :return: The terms of this CartSettings.
        :rtype: CartSettingsTerms
        """
        return self._terms

    @terms.setter
    def terms(self, terms):
        """
        Sets the terms of this CartSettings.


        :param terms: The terms of this CartSettings.
        :type: CartSettingsTerms
        """

        self._terms = terms

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
