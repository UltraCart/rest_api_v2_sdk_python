# coding: utf-8

"""
    UltraCart Rest API V2

    This is the next generation UltraCart REST API...

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class OauthTokenResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, access_token=None, error=None, error_description=None, error_uri=None, expires_in=None, refresh_token=None, scope=None, token_type=None):
        """
        OauthTokenResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'access_token': 'str',
            'error': 'str',
            'error_description': 'str',
            'error_uri': 'str',
            'expires_in': 'str',
            'refresh_token': 'str',
            'scope': 'str',
            'token_type': 'str'
        }

        self.attribute_map = {
            'access_token': 'access_token',
            'error': 'error',
            'error_description': 'error_description',
            'error_uri': 'error_uri',
            'expires_in': 'expires_in',
            'refresh_token': 'refresh_token',
            'scope': 'scope',
            'token_type': 'token_type'
        }

        self._access_token = access_token
        self._error = error
        self._error_description = error_description
        self._error_uri = error_uri
        self._expires_in = expires_in
        self._refresh_token = refresh_token
        self._scope = scope
        self._token_type = token_type

    @property
    def access_token(self):
        """
        Gets the access_token of this OauthTokenResponse.
        Access token to use in OAuth authenticated API call

        :return: The access_token of this OauthTokenResponse.
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """
        Sets the access_token of this OauthTokenResponse.
        Access token to use in OAuth authenticated API call

        :param access_token: The access_token of this OauthTokenResponse.
        :type: str
        """

        self._access_token = access_token

    @property
    def error(self):
        """
        Gets the error of this OauthTokenResponse.


        :return: The error of this OauthTokenResponse.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """
        Sets the error of this OauthTokenResponse.


        :param error: The error of this OauthTokenResponse.
        :type: str
        """

        self._error = error

    @property
    def error_description(self):
        """
        Gets the error_description of this OauthTokenResponse.


        :return: The error_description of this OauthTokenResponse.
        :rtype: str
        """
        return self._error_description

    @error_description.setter
    def error_description(self, error_description):
        """
        Sets the error_description of this OauthTokenResponse.


        :param error_description: The error_description of this OauthTokenResponse.
        :type: str
        """

        self._error_description = error_description

    @property
    def error_uri(self):
        """
        Gets the error_uri of this OauthTokenResponse.


        :return: The error_uri of this OauthTokenResponse.
        :rtype: str
        """
        return self._error_uri

    @error_uri.setter
    def error_uri(self, error_uri):
        """
        Sets the error_uri of this OauthTokenResponse.


        :param error_uri: The error_uri of this OauthTokenResponse.
        :type: str
        """

        self._error_uri = error_uri

    @property
    def expires_in(self):
        """
        Gets the expires_in of this OauthTokenResponse.
        The number of seconds since issuance when the access token will expire and need to be refreshed using the refresh token

        :return: The expires_in of this OauthTokenResponse.
        :rtype: str
        """
        return self._expires_in

    @expires_in.setter
    def expires_in(self, expires_in):
        """
        Sets the expires_in of this OauthTokenResponse.
        The number of seconds since issuance when the access token will expire and need to be refreshed using the refresh token

        :param expires_in: The expires_in of this OauthTokenResponse.
        :type: str
        """

        self._expires_in = expires_in

    @property
    def refresh_token(self):
        """
        Gets the refresh_token of this OauthTokenResponse.
        The refresh token that should be used to fetch a new access token when the expiration occurs

        :return: The refresh_token of this OauthTokenResponse.
        :rtype: str
        """
        return self._refresh_token

    @refresh_token.setter
    def refresh_token(self, refresh_token):
        """
        Sets the refresh_token of this OauthTokenResponse.
        The refresh token that should be used to fetch a new access token when the expiration occurs

        :param refresh_token: The refresh_token of this OauthTokenResponse.
        :type: str
        """

        self._refresh_token = refresh_token

    @property
    def scope(self):
        """
        Gets the scope of this OauthTokenResponse.
        The scope of permissions associated with teh access token

        :return: The scope of this OauthTokenResponse.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """
        Sets the scope of this OauthTokenResponse.
        The scope of permissions associated with teh access token

        :param scope: The scope of this OauthTokenResponse.
        :type: str
        """

        self._scope = scope

    @property
    def token_type(self):
        """
        Gets the token_type of this OauthTokenResponse.
        Type of token

        :return: The token_type of this OauthTokenResponse.
        :rtype: str
        """
        return self._token_type

    @token_type.setter
    def token_type(self, token_type):
        """
        Sets the token_type of this OauthTokenResponse.
        Type of token

        :param token_type: The token_type of this OauthTokenResponse.
        :type: str
        """
        allowed_values = ["bearer"]
        if token_type not in allowed_values:
            raise ValueError(
                "Invalid value for `token_type` ({0}), must be one of {1}"
                .format(token_type, allowed_values)
            )

        self._token_type = token_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
