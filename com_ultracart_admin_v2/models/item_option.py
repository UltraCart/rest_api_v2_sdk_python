# coding: utf-8

"""
    UltraCart Rest API V2

    This is the next generation UltraCart REST API...

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ItemOption(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, cost_if_specified=None, cost_per_letter=None, cost_per_line=None, ignore_if_default=None, label=None, label_translated_text_instance_oid=None, name=None, name_translated_text_instance_oid=None, one_time_fee=None, option_oid=None, required=None, system_option=None, type=None, values=None):
        """
        ItemOption - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'cost_if_specified': 'float',
            'cost_per_letter': 'float',
            'cost_per_line': 'float',
            'ignore_if_default': 'bool',
            'label': 'str',
            'label_translated_text_instance_oid': 'int',
            'name': 'str',
            'name_translated_text_instance_oid': 'int',
            'one_time_fee': 'bool',
            'option_oid': 'int',
            'required': 'bool',
            'system_option': 'bool',
            'type': 'str',
            'values': 'list[ItemOptionValue]'
        }

        self.attribute_map = {
            'cost_if_specified': 'cost_if_specified',
            'cost_per_letter': 'cost_per_letter',
            'cost_per_line': 'cost_per_line',
            'ignore_if_default': 'ignore_if_default',
            'label': 'label',
            'label_translated_text_instance_oid': 'label_translated_text_instance_oid',
            'name': 'name',
            'name_translated_text_instance_oid': 'name_translated_text_instance_oid',
            'one_time_fee': 'one_time_fee',
            'option_oid': 'option_oid',
            'required': 'required',
            'system_option': 'system_option',
            'type': 'type',
            'values': 'values'
        }

        self._cost_if_specified = cost_if_specified
        self._cost_per_letter = cost_per_letter
        self._cost_per_line = cost_per_line
        self._ignore_if_default = ignore_if_default
        self._label = label
        self._label_translated_text_instance_oid = label_translated_text_instance_oid
        self._name = name
        self._name_translated_text_instance_oid = name_translated_text_instance_oid
        self._one_time_fee = one_time_fee
        self._option_oid = option_oid
        self._required = required
        self._system_option = system_option
        self._type = type
        self._values = values

    @property
    def cost_if_specified(self):
        """
        Gets the cost_if_specified of this ItemOption.


        :return: The cost_if_specified of this ItemOption.
        :rtype: float
        """
        return self._cost_if_specified

    @cost_if_specified.setter
    def cost_if_specified(self, cost_if_specified):
        """
        Sets the cost_if_specified of this ItemOption.


        :param cost_if_specified: The cost_if_specified of this ItemOption.
        :type: float
        """

        self._cost_if_specified = cost_if_specified

    @property
    def cost_per_letter(self):
        """
        Gets the cost_per_letter of this ItemOption.


        :return: The cost_per_letter of this ItemOption.
        :rtype: float
        """
        return self._cost_per_letter

    @cost_per_letter.setter
    def cost_per_letter(self, cost_per_letter):
        """
        Sets the cost_per_letter of this ItemOption.


        :param cost_per_letter: The cost_per_letter of this ItemOption.
        :type: float
        """

        self._cost_per_letter = cost_per_letter

    @property
    def cost_per_line(self):
        """
        Gets the cost_per_line of this ItemOption.


        :return: The cost_per_line of this ItemOption.
        :rtype: float
        """
        return self._cost_per_line

    @cost_per_line.setter
    def cost_per_line(self, cost_per_line):
        """
        Sets the cost_per_line of this ItemOption.


        :param cost_per_line: The cost_per_line of this ItemOption.
        :type: float
        """

        self._cost_per_line = cost_per_line

    @property
    def ignore_if_default(self):
        """
        Gets the ignore_if_default of this ItemOption.


        :return: The ignore_if_default of this ItemOption.
        :rtype: bool
        """
        return self._ignore_if_default

    @ignore_if_default.setter
    def ignore_if_default(self, ignore_if_default):
        """
        Sets the ignore_if_default of this ItemOption.


        :param ignore_if_default: The ignore_if_default of this ItemOption.
        :type: bool
        """

        self._ignore_if_default = ignore_if_default

    @property
    def label(self):
        """
        Gets the label of this ItemOption.


        :return: The label of this ItemOption.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """
        Sets the label of this ItemOption.


        :param label: The label of this ItemOption.
        :type: str
        """

        self._label = label

    @property
    def label_translated_text_instance_oid(self):
        """
        Gets the label_translated_text_instance_oid of this ItemOption.


        :return: The label_translated_text_instance_oid of this ItemOption.
        :rtype: int
        """
        return self._label_translated_text_instance_oid

    @label_translated_text_instance_oid.setter
    def label_translated_text_instance_oid(self, label_translated_text_instance_oid):
        """
        Sets the label_translated_text_instance_oid of this ItemOption.


        :param label_translated_text_instance_oid: The label_translated_text_instance_oid of this ItemOption.
        :type: int
        """

        self._label_translated_text_instance_oid = label_translated_text_instance_oid

    @property
    def name(self):
        """
        Gets the name of this ItemOption.


        :return: The name of this ItemOption.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ItemOption.


        :param name: The name of this ItemOption.
        :type: str
        """

        self._name = name

    @property
    def name_translated_text_instance_oid(self):
        """
        Gets the name_translated_text_instance_oid of this ItemOption.


        :return: The name_translated_text_instance_oid of this ItemOption.
        :rtype: int
        """
        return self._name_translated_text_instance_oid

    @name_translated_text_instance_oid.setter
    def name_translated_text_instance_oid(self, name_translated_text_instance_oid):
        """
        Sets the name_translated_text_instance_oid of this ItemOption.


        :param name_translated_text_instance_oid: The name_translated_text_instance_oid of this ItemOption.
        :type: int
        """

        self._name_translated_text_instance_oid = name_translated_text_instance_oid

    @property
    def one_time_fee(self):
        """
        Gets the one_time_fee of this ItemOption.


        :return: The one_time_fee of this ItemOption.
        :rtype: bool
        """
        return self._one_time_fee

    @one_time_fee.setter
    def one_time_fee(self, one_time_fee):
        """
        Sets the one_time_fee of this ItemOption.


        :param one_time_fee: The one_time_fee of this ItemOption.
        :type: bool
        """

        self._one_time_fee = one_time_fee

    @property
    def option_oid(self):
        """
        Gets the option_oid of this ItemOption.


        :return: The option_oid of this ItemOption.
        :rtype: int
        """
        return self._option_oid

    @option_oid.setter
    def option_oid(self, option_oid):
        """
        Sets the option_oid of this ItemOption.


        :param option_oid: The option_oid of this ItemOption.
        :type: int
        """

        self._option_oid = option_oid

    @property
    def required(self):
        """
        Gets the required of this ItemOption.


        :return: The required of this ItemOption.
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """
        Sets the required of this ItemOption.


        :param required: The required of this ItemOption.
        :type: bool
        """

        self._required = required

    @property
    def system_option(self):
        """
        Gets the system_option of this ItemOption.


        :return: The system_option of this ItemOption.
        :rtype: bool
        """
        return self._system_option

    @system_option.setter
    def system_option(self, system_option):
        """
        Sets the system_option of this ItemOption.


        :param system_option: The system_option of this ItemOption.
        :type: bool
        """

        self._system_option = system_option

    @property
    def type(self):
        """
        Gets the type of this ItemOption.


        :return: The type of this ItemOption.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this ItemOption.


        :param type: The type of this ItemOption.
        :type: str
        """

        self._type = type

    @property
    def values(self):
        """
        Gets the values of this ItemOption.


        :return: The values of this ItemOption.
        :rtype: list[ItemOptionValue]
        """
        return self._values

    @values.setter
    def values(self, values):
        """
        Sets the values of this ItemOption.


        :param values: The values of this ItemOption.
        :type: list[ItemOptionValue]
        """

        self._values = values

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
