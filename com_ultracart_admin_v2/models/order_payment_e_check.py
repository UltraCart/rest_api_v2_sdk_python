# coding: utf-8

"""
    UltraCart Rest API V2

    This is the next generation UltraCart REST API...

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class OrderPaymentECheck(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, bank_aba_code=None, bank_account_name=None, bank_account_number=None, bank_account_type=None, bank_name=None, bank_owner_type=None, customer_tax_id=None, drivers_license_dob=None, drivers_license_number=None, drivers_license_state=None):
        """
        OrderPaymentECheck - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'bank_aba_code': 'str',
            'bank_account_name': 'str',
            'bank_account_number': 'str',
            'bank_account_type': 'str',
            'bank_name': 'str',
            'bank_owner_type': 'str',
            'customer_tax_id': 'str',
            'drivers_license_dob': 'str',
            'drivers_license_number': 'str',
            'drivers_license_state': 'str'
        }

        self.attribute_map = {
            'bank_aba_code': 'bank_aba_code',
            'bank_account_name': 'bank_account_name',
            'bank_account_number': 'bank_account_number',
            'bank_account_type': 'bank_account_type',
            'bank_name': 'bank_name',
            'bank_owner_type': 'bank_owner_type',
            'customer_tax_id': 'customer_tax_id',
            'drivers_license_dob': 'drivers_license_dob',
            'drivers_license_number': 'drivers_license_number',
            'drivers_license_state': 'drivers_license_state'
        }

        self._bank_aba_code = bank_aba_code
        self._bank_account_name = bank_account_name
        self._bank_account_number = bank_account_number
        self._bank_account_type = bank_account_type
        self._bank_name = bank_name
        self._bank_owner_type = bank_owner_type
        self._customer_tax_id = customer_tax_id
        self._drivers_license_dob = drivers_license_dob
        self._drivers_license_number = drivers_license_number
        self._drivers_license_state = drivers_license_state

    @property
    def bank_aba_code(self):
        """
        Gets the bank_aba_code of this OrderPaymentECheck.
        Bank routing code

        :return: The bank_aba_code of this OrderPaymentECheck.
        :rtype: str
        """
        return self._bank_aba_code

    @bank_aba_code.setter
    def bank_aba_code(self, bank_aba_code):
        """
        Sets the bank_aba_code of this OrderPaymentECheck.
        Bank routing code

        :param bank_aba_code: The bank_aba_code of this OrderPaymentECheck.
        :type: str
        """

        if not bank_aba_code:
            raise ValueError("Invalid value for `bank_aba_code`, must not be `None`")
        if len(bank_aba_code) > 9:
            raise ValueError("Invalid value for `bank_aba_code`, length must be less than `9`")

        self._bank_aba_code = bank_aba_code

    @property
    def bank_account_name(self):
        """
        Gets the bank_account_name of this OrderPaymentECheck.
        Bank account name

        :return: The bank_account_name of this OrderPaymentECheck.
        :rtype: str
        """
        return self._bank_account_name

    @bank_account_name.setter
    def bank_account_name(self, bank_account_name):
        """
        Sets the bank_account_name of this OrderPaymentECheck.
        Bank account name

        :param bank_account_name: The bank_account_name of this OrderPaymentECheck.
        :type: str
        """

        if not bank_account_name:
            raise ValueError("Invalid value for `bank_account_name`, must not be `None`")
        if len(bank_account_name) > 50:
            raise ValueError("Invalid value for `bank_account_name`, length must be less than `50`")

        self._bank_account_name = bank_account_name

    @property
    def bank_account_number(self):
        """
        Gets the bank_account_number of this OrderPaymentECheck.
        Bank account number (masked to last 4)

        :return: The bank_account_number of this OrderPaymentECheck.
        :rtype: str
        """
        return self._bank_account_number

    @bank_account_number.setter
    def bank_account_number(self, bank_account_number):
        """
        Sets the bank_account_number of this OrderPaymentECheck.
        Bank account number (masked to last 4)

        :param bank_account_number: The bank_account_number of this OrderPaymentECheck.
        :type: str
        """

        if not bank_account_number:
            raise ValueError("Invalid value for `bank_account_number`, must not be `None`")
        if len(bank_account_number) > 50:
            raise ValueError("Invalid value for `bank_account_number`, length must be less than `50`")

        self._bank_account_number = bank_account_number

    @property
    def bank_account_type(self):
        """
        Gets the bank_account_type of this OrderPaymentECheck.
        Bank account type

        :return: The bank_account_type of this OrderPaymentECheck.
        :rtype: str
        """
        return self._bank_account_type

    @bank_account_type.setter
    def bank_account_type(self, bank_account_type):
        """
        Sets the bank_account_type of this OrderPaymentECheck.
        Bank account type

        :param bank_account_type: The bank_account_type of this OrderPaymentECheck.
        :type: str
        """
        allowed_values = ["Checking", "Savings"]
        if bank_account_type not in allowed_values:
            raise ValueError(
                "Invalid value for `bank_account_type` ({0}), must be one of {1}"
                .format(bank_account_type, allowed_values)
            )

        self._bank_account_type = bank_account_type

    @property
    def bank_name(self):
        """
        Gets the bank_name of this OrderPaymentECheck.
        Bank name

        :return: The bank_name of this OrderPaymentECheck.
        :rtype: str
        """
        return self._bank_name

    @bank_name.setter
    def bank_name(self, bank_name):
        """
        Sets the bank_name of this OrderPaymentECheck.
        Bank name

        :param bank_name: The bank_name of this OrderPaymentECheck.
        :type: str
        """

        if not bank_name:
            raise ValueError("Invalid value for `bank_name`, must not be `None`")
        if len(bank_name) > 50:
            raise ValueError("Invalid value for `bank_name`, length must be less than `50`")

        self._bank_name = bank_name

    @property
    def bank_owner_type(self):
        """
        Gets the bank_owner_type of this OrderPaymentECheck.
        Bank owner type

        :return: The bank_owner_type of this OrderPaymentECheck.
        :rtype: str
        """
        return self._bank_owner_type

    @bank_owner_type.setter
    def bank_owner_type(self, bank_owner_type):
        """
        Sets the bank_owner_type of this OrderPaymentECheck.
        Bank owner type

        :param bank_owner_type: The bank_owner_type of this OrderPaymentECheck.
        :type: str
        """
        allowed_values = ["Personal", "Business"]
        if bank_owner_type not in allowed_values:
            raise ValueError(
                "Invalid value for `bank_owner_type` ({0}), must be one of {1}"
                .format(bank_owner_type, allowed_values)
            )

        self._bank_owner_type = bank_owner_type

    @property
    def customer_tax_id(self):
        """
        Gets the customer_tax_id of this OrderPaymentECheck.
        Customer tax id (masked to last 4)

        :return: The customer_tax_id of this OrderPaymentECheck.
        :rtype: str
        """
        return self._customer_tax_id

    @customer_tax_id.setter
    def customer_tax_id(self, customer_tax_id):
        """
        Sets the customer_tax_id of this OrderPaymentECheck.
        Customer tax id (masked to last 4)

        :param customer_tax_id: The customer_tax_id of this OrderPaymentECheck.
        :type: str
        """

        if not customer_tax_id:
            raise ValueError("Invalid value for `customer_tax_id`, must not be `None`")
        if len(customer_tax_id) > 9:
            raise ValueError("Invalid value for `customer_tax_id`, length must be less than `9`")

        self._customer_tax_id = customer_tax_id

    @property
    def drivers_license_dob(self):
        """
        Gets the drivers_license_dob of this OrderPaymentECheck.
        Driver license date of birth

        :return: The drivers_license_dob of this OrderPaymentECheck.
        :rtype: str
        """
        return self._drivers_license_dob

    @drivers_license_dob.setter
    def drivers_license_dob(self, drivers_license_dob):
        """
        Sets the drivers_license_dob of this OrderPaymentECheck.
        Driver license date of birth

        :param drivers_license_dob: The drivers_license_dob of this OrderPaymentECheck.
        :type: str
        """

        if not drivers_license_dob:
            raise ValueError("Invalid value for `drivers_license_dob`, must not be `None`")
        if len(drivers_license_dob) > 10:
            raise ValueError("Invalid value for `drivers_license_dob`, length must be less than `10`")

        self._drivers_license_dob = drivers_license_dob

    @property
    def drivers_license_number(self):
        """
        Gets the drivers_license_number of this OrderPaymentECheck.
        Driver license number (masked to last 4)

        :return: The drivers_license_number of this OrderPaymentECheck.
        :rtype: str
        """
        return self._drivers_license_number

    @drivers_license_number.setter
    def drivers_license_number(self, drivers_license_number):
        """
        Sets the drivers_license_number of this OrderPaymentECheck.
        Driver license number (masked to last 4)

        :param drivers_license_number: The drivers_license_number of this OrderPaymentECheck.
        :type: str
        """

        if not drivers_license_number:
            raise ValueError("Invalid value for `drivers_license_number`, must not be `None`")
        if len(drivers_license_number) > 50:
            raise ValueError("Invalid value for `drivers_license_number`, length must be less than `50`")

        self._drivers_license_number = drivers_license_number

    @property
    def drivers_license_state(self):
        """
        Gets the drivers_license_state of this OrderPaymentECheck.
        Driver license state

        :return: The drivers_license_state of this OrderPaymentECheck.
        :rtype: str
        """
        return self._drivers_license_state

    @drivers_license_state.setter
    def drivers_license_state(self, drivers_license_state):
        """
        Sets the drivers_license_state of this OrderPaymentECheck.
        Driver license state

        :param drivers_license_state: The drivers_license_state of this OrderPaymentECheck.
        :type: str
        """

        if not drivers_license_state:
            raise ValueError("Invalid value for `drivers_license_state`, must not be `None`")
        if len(drivers_license_state) > 2:
            raise ValueError("Invalid value for `drivers_license_state`, length must be less than `2`")

        self._drivers_license_state = drivers_license_state

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
