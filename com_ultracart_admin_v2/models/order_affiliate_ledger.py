# coding: utf-8

"""
    UltraCart Rest API V2

    This is the next generation UltraCart REST API...

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class OrderAffiliateLedger(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, assigned_by_user=None, item_id=None, tier_number=None, transaction_amount=None, transaction_amount_paid=None, transaction_dts=None, transaction_memo=None, transaction_percentage=None, transaction_state=None):
        """
        OrderAffiliateLedger - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'assigned_by_user': 'str',
            'item_id': 'str',
            'tier_number': 'int',
            'transaction_amount': 'float',
            'transaction_amount_paid': 'float',
            'transaction_dts': 'str',
            'transaction_memo': 'str',
            'transaction_percentage': 'float',
            'transaction_state': 'str'
        }

        self.attribute_map = {
            'assigned_by_user': 'assigned_by_user',
            'item_id': 'item_id',
            'tier_number': 'tier_number',
            'transaction_amount': 'transaction_amount',
            'transaction_amount_paid': 'transaction_amount_paid',
            'transaction_dts': 'transaction_dts',
            'transaction_memo': 'transaction_memo',
            'transaction_percentage': 'transaction_percentage',
            'transaction_state': 'transaction_state'
        }

        self._assigned_by_user = assigned_by_user
        self._item_id = item_id
        self._tier_number = tier_number
        self._transaction_amount = transaction_amount
        self._transaction_amount_paid = transaction_amount_paid
        self._transaction_dts = transaction_dts
        self._transaction_memo = transaction_memo
        self._transaction_percentage = transaction_percentage
        self._transaction_state = transaction_state

    @property
    def assigned_by_user(self):
        """
        Gets the assigned_by_user of this OrderAffiliateLedger.
        UltraCart user name that assigned this commission if manually assigned

        :return: The assigned_by_user of this OrderAffiliateLedger.
        :rtype: str
        """
        return self._assigned_by_user

    @assigned_by_user.setter
    def assigned_by_user(self, assigned_by_user):
        """
        Sets the assigned_by_user of this OrderAffiliateLedger.
        UltraCart user name that assigned this commission if manually assigned

        :param assigned_by_user: The assigned_by_user of this OrderAffiliateLedger.
        :type: str
        """

        self._assigned_by_user = assigned_by_user

    @property
    def item_id(self):
        """
        Gets the item_id of this OrderAffiliateLedger.
        Item ID that this ledger record is associated with

        :return: The item_id of this OrderAffiliateLedger.
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """
        Sets the item_id of this OrderAffiliateLedger.
        Item ID that this ledger record is associated with

        :param item_id: The item_id of this OrderAffiliateLedger.
        :type: str
        """

        self._item_id = item_id

    @property
    def tier_number(self):
        """
        Gets the tier_number of this OrderAffiliateLedger.
        Tier number of this affiliate in the commission calculation

        :return: The tier_number of this OrderAffiliateLedger.
        :rtype: int
        """
        return self._tier_number

    @tier_number.setter
    def tier_number(self, tier_number):
        """
        Sets the tier_number of this OrderAffiliateLedger.
        Tier number of this affiliate in the commission calculation

        :param tier_number: The tier_number of this OrderAffiliateLedger.
        :type: int
        """

        self._tier_number = tier_number

    @property
    def transaction_amount(self):
        """
        Gets the transaction_amount of this OrderAffiliateLedger.
        Amount of the transaction

        :return: The transaction_amount of this OrderAffiliateLedger.
        :rtype: float
        """
        return self._transaction_amount

    @transaction_amount.setter
    def transaction_amount(self, transaction_amount):
        """
        Sets the transaction_amount of this OrderAffiliateLedger.
        Amount of the transaction

        :param transaction_amount: The transaction_amount of this OrderAffiliateLedger.
        :type: float
        """

        self._transaction_amount = transaction_amount

    @property
    def transaction_amount_paid(self):
        """
        Gets the transaction_amount_paid of this OrderAffiliateLedger.
        The amount that has been paid so far on the transaction

        :return: The transaction_amount_paid of this OrderAffiliateLedger.
        :rtype: float
        """
        return self._transaction_amount_paid

    @transaction_amount_paid.setter
    def transaction_amount_paid(self, transaction_amount_paid):
        """
        Sets the transaction_amount_paid of this OrderAffiliateLedger.
        The amount that has been paid so far on the transaction

        :param transaction_amount_paid: The transaction_amount_paid of this OrderAffiliateLedger.
        :type: float
        """

        self._transaction_amount_paid = transaction_amount_paid

    @property
    def transaction_dts(self):
        """
        Gets the transaction_dts of this OrderAffiliateLedger.
        The date/time that the affiliate ledger was generated for the transaction

        :return: The transaction_dts of this OrderAffiliateLedger.
        :rtype: str
        """
        return self._transaction_dts

    @transaction_dts.setter
    def transaction_dts(self, transaction_dts):
        """
        Sets the transaction_dts of this OrderAffiliateLedger.
        The date/time that the affiliate ledger was generated for the transaction

        :param transaction_dts: The transaction_dts of this OrderAffiliateLedger.
        :type: str
        """

        self._transaction_dts = transaction_dts

    @property
    def transaction_memo(self):
        """
        Gets the transaction_memo of this OrderAffiliateLedger.
        Details of the transaction suitable for display to the affiliate

        :return: The transaction_memo of this OrderAffiliateLedger.
        :rtype: str
        """
        return self._transaction_memo

    @transaction_memo.setter
    def transaction_memo(self, transaction_memo):
        """
        Sets the transaction_memo of this OrderAffiliateLedger.
        Details of the transaction suitable for display to the affiliate

        :param transaction_memo: The transaction_memo of this OrderAffiliateLedger.
        :type: str
        """

        self._transaction_memo = transaction_memo

    @property
    def transaction_percentage(self):
        """
        Gets the transaction_percentage of this OrderAffiliateLedger.
        The percentage earned on the transaction

        :return: The transaction_percentage of this OrderAffiliateLedger.
        :rtype: float
        """
        return self._transaction_percentage

    @transaction_percentage.setter
    def transaction_percentage(self, transaction_percentage):
        """
        Sets the transaction_percentage of this OrderAffiliateLedger.
        The percentage earned on the transaction

        :param transaction_percentage: The transaction_percentage of this OrderAffiliateLedger.
        :type: float
        """

        self._transaction_percentage = transaction_percentage

    @property
    def transaction_state(self):
        """
        Gets the transaction_state of this OrderAffiliateLedger.
        The state of the transaction

        :return: The transaction_state of this OrderAffiliateLedger.
        :rtype: str
        """
        return self._transaction_state

    @transaction_state.setter
    def transaction_state(self, transaction_state):
        """
        Sets the transaction_state of this OrderAffiliateLedger.
        The state of the transaction

        :param transaction_state: The transaction_state of this OrderAffiliateLedger.
        :type: str
        """
        allowed_values = ["Pending", "Posted", "Approved", "Paid", "Rejected", "Partially Paid"]
        if transaction_state not in allowed_values:
            raise ValueError(
                "Invalid value for `transaction_state` ({0}), must be one of {1}"
                .format(transaction_state, allowed_values)
            )

        self._transaction_state = transaction_state

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
