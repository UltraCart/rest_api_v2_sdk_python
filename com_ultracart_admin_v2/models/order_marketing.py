# coding: utf-8

"""
    UltraCart Rest API V2

    This is the next generation UltraCart REST API...

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class OrderMarketing(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, advertising_source=None, mailing_list=None, referral_code=None):
        """
        OrderMarketing - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'advertising_source': 'str',
            'mailing_list': 'bool',
            'referral_code': 'str'
        }

        self.attribute_map = {
            'advertising_source': 'advertising_source',
            'mailing_list': 'mailing_list',
            'referral_code': 'referral_code'
        }

        self._advertising_source = advertising_source
        self._mailing_list = mailing_list
        self._referral_code = referral_code

    @property
    def advertising_source(self):
        """
        Gets the advertising_source of this OrderMarketing.
        Advertising source

        :return: The advertising_source of this OrderMarketing.
        :rtype: str
        """
        return self._advertising_source

    @advertising_source.setter
    def advertising_source(self, advertising_source):
        """
        Sets the advertising_source of this OrderMarketing.
        Advertising source

        :param advertising_source: The advertising_source of this OrderMarketing.
        :type: str
        """

        if not advertising_source:
            raise ValueError("Invalid value for `advertising_source`, must not be `None`")
        if len(advertising_source) > 50:
            raise ValueError("Invalid value for `advertising_source`, length must be less than `50`")

        self._advertising_source = advertising_source

    @property
    def mailing_list(self):
        """
        Gets the mailing_list of this OrderMarketing.
        True if the customer has opted into mailing list subscription

        :return: The mailing_list of this OrderMarketing.
        :rtype: bool
        """
        return self._mailing_list

    @mailing_list.setter
    def mailing_list(self, mailing_list):
        """
        Sets the mailing_list of this OrderMarketing.
        True if the customer has opted into mailing list subscription

        :param mailing_list: The mailing_list of this OrderMarketing.
        :type: bool
        """

        self._mailing_list = mailing_list

    @property
    def referral_code(self):
        """
        Gets the referral_code of this OrderMarketing.
        Referral code

        :return: The referral_code of this OrderMarketing.
        :rtype: str
        """
        return self._referral_code

    @referral_code.setter
    def referral_code(self, referral_code):
        """
        Sets the referral_code of this OrderMarketing.
        Referral code

        :param referral_code: The referral_code of this OrderMarketing.
        :type: str
        """

        if not referral_code:
            raise ValueError("Invalid value for `referral_code`, must not be `None`")
        if len(referral_code) > 30:
            raise ValueError("Invalid value for `referral_code`, length must be less than `30`")

        self._referral_code = referral_code

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
