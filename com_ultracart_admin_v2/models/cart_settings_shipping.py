# coding: utf-8

"""
    UltraCart Rest API V2

    This is the next generation UltraCart REST API...

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class CartSettingsShipping(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, deliver_on_date=None, estimates=None, need_shipping=None, provinces=None, ship_on_date=None):
        """
        CartSettingsShipping - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'deliver_on_date': 'CartSettingsShippingCalendar',
            'estimates': 'list[CartSettingsShippingEstimate]',
            'need_shipping': 'bool',
            'provinces': 'list[CartSettingsProvince]',
            'ship_on_date': 'CartSettingsShippingCalendar'
        }

        self.attribute_map = {
            'deliver_on_date': 'deliver_on_date',
            'estimates': 'estimates',
            'need_shipping': 'need_shipping',
            'provinces': 'provinces',
            'ship_on_date': 'ship_on_date'
        }

        self._deliver_on_date = deliver_on_date
        self._estimates = estimates
        self._need_shipping = need_shipping
        self._provinces = provinces
        self._ship_on_date = ship_on_date

    @property
    def deliver_on_date(self):
        """
        Gets the deliver_on_date of this CartSettingsShipping.


        :return: The deliver_on_date of this CartSettingsShipping.
        :rtype: CartSettingsShippingCalendar
        """
        return self._deliver_on_date

    @deliver_on_date.setter
    def deliver_on_date(self, deliver_on_date):
        """
        Sets the deliver_on_date of this CartSettingsShipping.


        :param deliver_on_date: The deliver_on_date of this CartSettingsShipping.
        :type: CartSettingsShippingCalendar
        """

        self._deliver_on_date = deliver_on_date

    @property
    def estimates(self):
        """
        Gets the estimates of this CartSettingsShipping.
        Estimates for this cart

        :return: The estimates of this CartSettingsShipping.
        :rtype: list[CartSettingsShippingEstimate]
        """
        return self._estimates

    @estimates.setter
    def estimates(self, estimates):
        """
        Sets the estimates of this CartSettingsShipping.
        Estimates for this cart

        :param estimates: The estimates of this CartSettingsShipping.
        :type: list[CartSettingsShippingEstimate]
        """

        self._estimates = estimates

    @property
    def need_shipping(self):
        """
        Gets the need_shipping of this CartSettingsShipping.
        True if this order needs shipping

        :return: The need_shipping of this CartSettingsShipping.
        :rtype: bool
        """
        return self._need_shipping

    @need_shipping.setter
    def need_shipping(self, need_shipping):
        """
        Sets the need_shipping of this CartSettingsShipping.
        True if this order needs shipping

        :param need_shipping: The need_shipping of this CartSettingsShipping.
        :type: bool
        """

        self._need_shipping = need_shipping

    @property
    def provinces(self):
        """
        Gets the provinces of this CartSettingsShipping.
        Provinces

        :return: The provinces of this CartSettingsShipping.
        :rtype: list[CartSettingsProvince]
        """
        return self._provinces

    @provinces.setter
    def provinces(self, provinces):
        """
        Sets the provinces of this CartSettingsShipping.
        Provinces

        :param provinces: The provinces of this CartSettingsShipping.
        :type: list[CartSettingsProvince]
        """

        self._provinces = provinces

    @property
    def ship_on_date(self):
        """
        Gets the ship_on_date of this CartSettingsShipping.


        :return: The ship_on_date of this CartSettingsShipping.
        :rtype: CartSettingsShippingCalendar
        """
        return self._ship_on_date

    @ship_on_date.setter
    def ship_on_date(self, ship_on_date):
        """
        Sets the ship_on_date of this CartSettingsShipping.


        :param ship_on_date: The ship_on_date of this CartSettingsShipping.
        :type: CartSettingsShippingCalendar
        """

        self._ship_on_date = ship_on_date

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
