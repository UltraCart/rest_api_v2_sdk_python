# coding: utf-8

"""
    UltraCart Rest API V2

    This is the next generation UltraCart REST API...

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class AutoOrderItem(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, arbitrary_item_id=None, arbitrary_percentage_discount=None, arbitrary_quantity=None, arbitrary_schedule_days=None, arbitrary_unit_cost=None, arbitrary_unit_cost_remaining_orders=None, frequency=None, last_order_dts=None, life_time_value=None, next_preshipment_notice_dts=None, next_shipment_dts=None, no_order_after_dts=None, number_of_rebills=None, options=None, original_item_id=None, original_quantity=None, preshipment_notice_sent=None, rebill_value=None, remaining_repeat_count=None):
        """
        AutoOrderItem - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'arbitrary_item_id': 'str',
            'arbitrary_percentage_discount': 'float',
            'arbitrary_quantity': 'float',
            'arbitrary_schedule_days': 'int',
            'arbitrary_unit_cost': 'float',
            'arbitrary_unit_cost_remaining_orders': 'int',
            'frequency': 'str',
            'last_order_dts': 'str',
            'life_time_value': 'float',
            'next_preshipment_notice_dts': 'str',
            'next_shipment_dts': 'str',
            'no_order_after_dts': 'str',
            'number_of_rebills': 'int',
            'options': 'list[AutoOrderItemOption]',
            'original_item_id': 'str',
            'original_quantity': 'float',
            'preshipment_notice_sent': 'bool',
            'rebill_value': 'float',
            'remaining_repeat_count': 'int'
        }

        self.attribute_map = {
            'arbitrary_item_id': 'arbitrary_item_id',
            'arbitrary_percentage_discount': 'arbitrary_percentage_discount',
            'arbitrary_quantity': 'arbitrary_quantity',
            'arbitrary_schedule_days': 'arbitrary_schedule_days',
            'arbitrary_unit_cost': 'arbitrary_unit_cost',
            'arbitrary_unit_cost_remaining_orders': 'arbitrary_unit_cost_remaining_orders',
            'frequency': 'frequency',
            'last_order_dts': 'last_order_dts',
            'life_time_value': 'life_time_value',
            'next_preshipment_notice_dts': 'next_preshipment_notice_dts',
            'next_shipment_dts': 'next_shipment_dts',
            'no_order_after_dts': 'no_order_after_dts',
            'number_of_rebills': 'number_of_rebills',
            'options': 'options',
            'original_item_id': 'original_item_id',
            'original_quantity': 'original_quantity',
            'preshipment_notice_sent': 'preshipment_notice_sent',
            'rebill_value': 'rebill_value',
            'remaining_repeat_count': 'remaining_repeat_count'
        }

        self._arbitrary_item_id = arbitrary_item_id
        self._arbitrary_percentage_discount = arbitrary_percentage_discount
        self._arbitrary_quantity = arbitrary_quantity
        self._arbitrary_schedule_days = arbitrary_schedule_days
        self._arbitrary_unit_cost = arbitrary_unit_cost
        self._arbitrary_unit_cost_remaining_orders = arbitrary_unit_cost_remaining_orders
        self._frequency = frequency
        self._last_order_dts = last_order_dts
        self._life_time_value = life_time_value
        self._next_preshipment_notice_dts = next_preshipment_notice_dts
        self._next_shipment_dts = next_shipment_dts
        self._no_order_after_dts = no_order_after_dts
        self._number_of_rebills = number_of_rebills
        self._options = options
        self._original_item_id = original_item_id
        self._original_quantity = original_quantity
        self._preshipment_notice_sent = preshipment_notice_sent
        self._rebill_value = rebill_value
        self._remaining_repeat_count = remaining_repeat_count

    @property
    def arbitrary_item_id(self):
        """
        Gets the arbitrary_item_id of this AutoOrderItem.
        Arbitrary item id that should be rebilled instead of the normal schedule

        :return: The arbitrary_item_id of this AutoOrderItem.
        :rtype: str
        """
        return self._arbitrary_item_id

    @arbitrary_item_id.setter
    def arbitrary_item_id(self, arbitrary_item_id):
        """
        Sets the arbitrary_item_id of this AutoOrderItem.
        Arbitrary item id that should be rebilled instead of the normal schedule

        :param arbitrary_item_id: The arbitrary_item_id of this AutoOrderItem.
        :type: str
        """

        self._arbitrary_item_id = arbitrary_item_id

    @property
    def arbitrary_percentage_discount(self):
        """
        Gets the arbitrary_percentage_discount of this AutoOrderItem.
        An arbitrary percentage discount to provide on future rebills

        :return: The arbitrary_percentage_discount of this AutoOrderItem.
        :rtype: float
        """
        return self._arbitrary_percentage_discount

    @arbitrary_percentage_discount.setter
    def arbitrary_percentage_discount(self, arbitrary_percentage_discount):
        """
        Sets the arbitrary_percentage_discount of this AutoOrderItem.
        An arbitrary percentage discount to provide on future rebills

        :param arbitrary_percentage_discount: The arbitrary_percentage_discount of this AutoOrderItem.
        :type: float
        """

        self._arbitrary_percentage_discount = arbitrary_percentage_discount

    @property
    def arbitrary_quantity(self):
        """
        Gets the arbitrary_quantity of this AutoOrderItem.
        Arbitrary quantity to rebill

        :return: The arbitrary_quantity of this AutoOrderItem.
        :rtype: float
        """
        return self._arbitrary_quantity

    @arbitrary_quantity.setter
    def arbitrary_quantity(self, arbitrary_quantity):
        """
        Sets the arbitrary_quantity of this AutoOrderItem.
        Arbitrary quantity to rebill

        :param arbitrary_quantity: The arbitrary_quantity of this AutoOrderItem.
        :type: float
        """

        self._arbitrary_quantity = arbitrary_quantity

    @property
    def arbitrary_schedule_days(self):
        """
        Gets the arbitrary_schedule_days of this AutoOrderItem.
        The number of days to rebill if the frequency is set to an arbitrary number of days

        :return: The arbitrary_schedule_days of this AutoOrderItem.
        :rtype: int
        """
        return self._arbitrary_schedule_days

    @arbitrary_schedule_days.setter
    def arbitrary_schedule_days(self, arbitrary_schedule_days):
        """
        Sets the arbitrary_schedule_days of this AutoOrderItem.
        The number of days to rebill if the frequency is set to an arbitrary number of days

        :param arbitrary_schedule_days: The arbitrary_schedule_days of this AutoOrderItem.
        :type: int
        """

        self._arbitrary_schedule_days = arbitrary_schedule_days

    @property
    def arbitrary_unit_cost(self):
        """
        Gets the arbitrary_unit_cost of this AutoOrderItem.
        Arbitrary unit cost that rebills of this item should occur at

        :return: The arbitrary_unit_cost of this AutoOrderItem.
        :rtype: float
        """
        return self._arbitrary_unit_cost

    @arbitrary_unit_cost.setter
    def arbitrary_unit_cost(self, arbitrary_unit_cost):
        """
        Sets the arbitrary_unit_cost of this AutoOrderItem.
        Arbitrary unit cost that rebills of this item should occur at

        :param arbitrary_unit_cost: The arbitrary_unit_cost of this AutoOrderItem.
        :type: float
        """

        self._arbitrary_unit_cost = arbitrary_unit_cost

    @property
    def arbitrary_unit_cost_remaining_orders(self):
        """
        Gets the arbitrary_unit_cost_remaining_orders of this AutoOrderItem.
        The number of rebills to give the arbitrary unit cost on before reverting to normal pricing.

        :return: The arbitrary_unit_cost_remaining_orders of this AutoOrderItem.
        :rtype: int
        """
        return self._arbitrary_unit_cost_remaining_orders

    @arbitrary_unit_cost_remaining_orders.setter
    def arbitrary_unit_cost_remaining_orders(self, arbitrary_unit_cost_remaining_orders):
        """
        Sets the arbitrary_unit_cost_remaining_orders of this AutoOrderItem.
        The number of rebills to give the arbitrary unit cost on before reverting to normal pricing.

        :param arbitrary_unit_cost_remaining_orders: The arbitrary_unit_cost_remaining_orders of this AutoOrderItem.
        :type: int
        """

        self._arbitrary_unit_cost_remaining_orders = arbitrary_unit_cost_remaining_orders

    @property
    def frequency(self):
        """
        Gets the frequency of this AutoOrderItem.
        Frequency of the rebill if not a fixed schedule

        :return: The frequency of this AutoOrderItem.
        :rtype: str
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """
        Sets the frequency of this AutoOrderItem.
        Frequency of the rebill if not a fixed schedule

        :param frequency: The frequency of this AutoOrderItem.
        :type: str
        """
        allowed_values = ["Weekly", "Biweekly", "Every...", "Every 10 Days", "Every 24 Days", "Every 28 Days", "Monthly", "Every 45 Days", "Every 2 Months", "Every 3 Months", "Every 4 Months", "Every 6 Months", "Yearly"]
        if frequency not in allowed_values:
            raise ValueError(
                "Invalid value for `frequency` ({0}), must be one of {1}"
                .format(frequency, allowed_values)
            )

        self._frequency = frequency

    @property
    def last_order_dts(self):
        """
        Gets the last_order_dts of this AutoOrderItem.
        Date/time of the last order of this item

        :return: The last_order_dts of this AutoOrderItem.
        :rtype: str
        """
        return self._last_order_dts

    @last_order_dts.setter
    def last_order_dts(self, last_order_dts):
        """
        Sets the last_order_dts of this AutoOrderItem.
        Date/time of the last order of this item

        :param last_order_dts: The last_order_dts of this AutoOrderItem.
        :type: str
        """

        self._last_order_dts = last_order_dts

    @property
    def life_time_value(self):
        """
        Gets the life_time_value of this AutoOrderItem.
        The life time value of this item including the original purchase

        :return: The life_time_value of this AutoOrderItem.
        :rtype: float
        """
        return self._life_time_value

    @life_time_value.setter
    def life_time_value(self, life_time_value):
        """
        Sets the life_time_value of this AutoOrderItem.
        The life time value of this item including the original purchase

        :param life_time_value: The life_time_value of this AutoOrderItem.
        :type: float
        """

        self._life_time_value = life_time_value

    @property
    def next_preshipment_notice_dts(self):
        """
        Gets the next_preshipment_notice_dts of this AutoOrderItem.
        The date/time of when the next pre-shipment notice should be sent

        :return: The next_preshipment_notice_dts of this AutoOrderItem.
        :rtype: str
        """
        return self._next_preshipment_notice_dts

    @next_preshipment_notice_dts.setter
    def next_preshipment_notice_dts(self, next_preshipment_notice_dts):
        """
        Sets the next_preshipment_notice_dts of this AutoOrderItem.
        The date/time of when the next pre-shipment notice should be sent

        :param next_preshipment_notice_dts: The next_preshipment_notice_dts of this AutoOrderItem.
        :type: str
        """

        self._next_preshipment_notice_dts = next_preshipment_notice_dts

    @property
    def next_shipment_dts(self):
        """
        Gets the next_shipment_dts of this AutoOrderItem.
        Date/time that this item is scheduled to rebill

        :return: The next_shipment_dts of this AutoOrderItem.
        :rtype: str
        """
        return self._next_shipment_dts

    @next_shipment_dts.setter
    def next_shipment_dts(self, next_shipment_dts):
        """
        Sets the next_shipment_dts of this AutoOrderItem.
        Date/time that this item is scheduled to rebill

        :param next_shipment_dts: The next_shipment_dts of this AutoOrderItem.
        :type: str
        """

        self._next_shipment_dts = next_shipment_dts

    @property
    def no_order_after_dts(self):
        """
        Gets the no_order_after_dts of this AutoOrderItem.
        Date/time after which no additional rebills of this item should occur

        :return: The no_order_after_dts of this AutoOrderItem.
        :rtype: str
        """
        return self._no_order_after_dts

    @no_order_after_dts.setter
    def no_order_after_dts(self, no_order_after_dts):
        """
        Sets the no_order_after_dts of this AutoOrderItem.
        Date/time after which no additional rebills of this item should occur

        :param no_order_after_dts: The no_order_after_dts of this AutoOrderItem.
        :type: str
        """

        self._no_order_after_dts = no_order_after_dts

    @property
    def number_of_rebills(self):
        """
        Gets the number_of_rebills of this AutoOrderItem.
        The number of times this item has rebilled

        :return: The number_of_rebills of this AutoOrderItem.
        :rtype: int
        """
        return self._number_of_rebills

    @number_of_rebills.setter
    def number_of_rebills(self, number_of_rebills):
        """
        Sets the number_of_rebills of this AutoOrderItem.
        The number of times this item has rebilled

        :param number_of_rebills: The number_of_rebills of this AutoOrderItem.
        :type: int
        """

        self._number_of_rebills = number_of_rebills

    @property
    def options(self):
        """
        Gets the options of this AutoOrderItem.
        Options associated with this item

        :return: The options of this AutoOrderItem.
        :rtype: list[AutoOrderItemOption]
        """
        return self._options

    @options.setter
    def options(self, options):
        """
        Sets the options of this AutoOrderItem.
        Options associated with this item

        :param options: The options of this AutoOrderItem.
        :type: list[AutoOrderItemOption]
        """

        self._options = options

    @property
    def original_item_id(self):
        """
        Gets the original_item_id of this AutoOrderItem.
        The original item id purchased

        :return: The original_item_id of this AutoOrderItem.
        :rtype: str
        """
        return self._original_item_id

    @original_item_id.setter
    def original_item_id(self, original_item_id):
        """
        Sets the original_item_id of this AutoOrderItem.
        The original item id purchased

        :param original_item_id: The original_item_id of this AutoOrderItem.
        :type: str
        """

        self._original_item_id = original_item_id

    @property
    def original_quantity(self):
        """
        Gets the original_quantity of this AutoOrderItem.
        The original quantity purchased

        :return: The original_quantity of this AutoOrderItem.
        :rtype: float
        """
        return self._original_quantity

    @original_quantity.setter
    def original_quantity(self, original_quantity):
        """
        Sets the original_quantity of this AutoOrderItem.
        The original quantity purchased

        :param original_quantity: The original_quantity of this AutoOrderItem.
        :type: float
        """

        self._original_quantity = original_quantity

    @property
    def preshipment_notice_sent(self):
        """
        Gets the preshipment_notice_sent of this AutoOrderItem.
        True if the preshipment notice associated with the next rebill has been sent

        :return: The preshipment_notice_sent of this AutoOrderItem.
        :rtype: bool
        """
        return self._preshipment_notice_sent

    @preshipment_notice_sent.setter
    def preshipment_notice_sent(self, preshipment_notice_sent):
        """
        Sets the preshipment_notice_sent of this AutoOrderItem.
        True if the preshipment notice associated with the next rebill has been sent

        :param preshipment_notice_sent: The preshipment_notice_sent of this AutoOrderItem.
        :type: bool
        """

        self._preshipment_notice_sent = preshipment_notice_sent

    @property
    def rebill_value(self):
        """
        Gets the rebill_value of this AutoOrderItem.
        The value of the rebills of this item

        :return: The rebill_value of this AutoOrderItem.
        :rtype: float
        """
        return self._rebill_value

    @rebill_value.setter
    def rebill_value(self, rebill_value):
        """
        Sets the rebill_value of this AutoOrderItem.
        The value of the rebills of this item

        :param rebill_value: The rebill_value of this AutoOrderItem.
        :type: float
        """

        self._rebill_value = rebill_value

    @property
    def remaining_repeat_count(self):
        """
        Gets the remaining_repeat_count of this AutoOrderItem.
        The number of rebills remaining before this item is complete

        :return: The remaining_repeat_count of this AutoOrderItem.
        :rtype: int
        """
        return self._remaining_repeat_count

    @remaining_repeat_count.setter
    def remaining_repeat_count(self, remaining_repeat_count):
        """
        Sets the remaining_repeat_count of this AutoOrderItem.
        The number of rebills remaining before this item is complete

        :param remaining_repeat_count: The remaining_repeat_count of this AutoOrderItem.
        :type: int
        """

        self._remaining_repeat_count = remaining_repeat_count

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
