"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from ultracart.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from ultracart.exceptions import ApiAttributeError


def lazy_import():
    from ultracart.model.coupon_amount_off_items import CouponAmountOffItems
    from ultracart.model.coupon_amount_off_shipping import CouponAmountOffShipping
    from ultracart.model.coupon_amount_off_shipping_with_items_purchase import CouponAmountOffShippingWithItemsPurchase
    from ultracart.model.coupon_amount_off_subtotal import CouponAmountOffSubtotal
    from ultracart.model.coupon_amount_off_subtotal_and_shipping import CouponAmountOffSubtotalAndShipping
    from ultracart.model.coupon_amount_off_subtotal_free_shipping_with_purchase import CouponAmountOffSubtotalFreeShippingWithPurchase
    from ultracart.model.coupon_amount_off_subtotal_with_block_purchase import CouponAmountOffSubtotalWithBlockPurchase
    from ultracart.model.coupon_amount_off_subtotal_with_items_purchase import CouponAmountOffSubtotalWithItemsPurchase
    from ultracart.model.coupon_amount_off_subtotal_with_purchase import CouponAmountOffSubtotalWithPurchase
    from ultracart.model.coupon_amount_shipping_with_subtotal import CouponAmountShippingWithSubtotal
    from ultracart.model.coupon_automatically_apply_coupon_codes import CouponAutomaticallyApplyCouponCodes
    from ultracart.model.coupon_buy_one_get_one_limit import CouponBuyOneGetOneLimit
    from ultracart.model.coupon_discount_item_with_item_purchase import CouponDiscountItemWithItemPurchase
    from ultracart.model.coupon_discount_items import CouponDiscountItems
    from ultracart.model.coupon_free_item_and_shipping_with_subtotal import CouponFreeItemAndShippingWithSubtotal
    from ultracart.model.coupon_free_item_with_item_purchase import CouponFreeItemWithItemPurchase
    from ultracart.model.coupon_free_item_with_item_purchase_and_free_shipping import CouponFreeItemWithItemPurchaseAndFreeShipping
    from ultracart.model.coupon_free_item_with_subtotal import CouponFreeItemWithSubtotal
    from ultracart.model.coupon_free_items_with_item_purchase import CouponFreeItemsWithItemPurchase
    from ultracart.model.coupon_free_items_with_mix_match_purchase import CouponFreeItemsWithMixMatchPurchase
    from ultracart.model.coupon_free_shipping import CouponFreeShipping
    from ultracart.model.coupon_free_shipping_specific_items import CouponFreeShippingSpecificItems
    from ultracart.model.coupon_free_shipping_with_items_purchase import CouponFreeShippingWithItemsPurchase
    from ultracart.model.coupon_free_shipping_with_subtotal import CouponFreeShippingWithSubtotal
    from ultracart.model.coupon_more_loyalty_cashback import CouponMoreLoyaltyCashback
    from ultracart.model.coupon_more_loyalty_points import CouponMoreLoyaltyPoints
    from ultracart.model.coupon_multiple_amounts_off_items import CouponMultipleAmountsOffItems
    from ultracart.model.coupon_no_discount import CouponNoDiscount
    from ultracart.model.coupon_percent_more_loyalty_cashback import CouponPercentMoreLoyaltyCashback
    from ultracart.model.coupon_percent_more_loyalty_points import CouponPercentMoreLoyaltyPoints
    from ultracart.model.coupon_percent_off_item_with_items_quantity_purchase import CouponPercentOffItemWithItemsQuantityPurchase
    from ultracart.model.coupon_percent_off_items import CouponPercentOffItems
    from ultracart.model.coupon_percent_off_items_and_free_shipping import CouponPercentOffItemsAndFreeShipping
    from ultracart.model.coupon_percent_off_items_with_items_purchase import CouponPercentOffItemsWithItemsPurchase
    from ultracart.model.coupon_percent_off_msrp_items import CouponPercentOffMsrpItems
    from ultracart.model.coupon_percent_off_retail_price_items import CouponPercentOffRetailPriceItems
    from ultracart.model.coupon_percent_off_shipping import CouponPercentOffShipping
    from ultracart.model.coupon_percent_off_subtotal import CouponPercentOffSubtotal
    from ultracart.model.coupon_percent_off_subtotal_and_free_shipping import CouponPercentOffSubtotalAndFreeShipping
    from ultracart.model.coupon_percent_off_subtotal_limit import CouponPercentOffSubtotalLimit
    from ultracart.model.coupon_percent_off_subtotal_with_items_purchase import CouponPercentOffSubtotalWithItemsPurchase
    from ultracart.model.coupon_percent_off_subtotal_with_subtotal import CouponPercentOffSubtotalWithSubtotal
    from ultracart.model.coupon_restriction import CouponRestriction
    from ultracart.model.coupon_tiered_amount_off_items import CouponTieredAmountOffItems
    from ultracart.model.coupon_tiered_amount_off_subtotal import CouponTieredAmountOffSubtotal
    from ultracart.model.coupon_tiered_percent_off_items import CouponTieredPercentOffItems
    from ultracart.model.coupon_tiered_percent_off_shipping import CouponTieredPercentOffShipping
    from ultracart.model.coupon_tiered_percent_off_subtotal import CouponTieredPercentOffSubtotal
    from ultracart.model.coupon_tiered_percent_off_subtotal_based_on_msrp import CouponTieredPercentOffSubtotalBasedOnMSRP
    globals()['CouponAmountOffItems'] = CouponAmountOffItems
    globals()['CouponAmountOffShipping'] = CouponAmountOffShipping
    globals()['CouponAmountOffShippingWithItemsPurchase'] = CouponAmountOffShippingWithItemsPurchase
    globals()['CouponAmountOffSubtotal'] = CouponAmountOffSubtotal
    globals()['CouponAmountOffSubtotalAndShipping'] = CouponAmountOffSubtotalAndShipping
    globals()['CouponAmountOffSubtotalFreeShippingWithPurchase'] = CouponAmountOffSubtotalFreeShippingWithPurchase
    globals()['CouponAmountOffSubtotalWithBlockPurchase'] = CouponAmountOffSubtotalWithBlockPurchase
    globals()['CouponAmountOffSubtotalWithItemsPurchase'] = CouponAmountOffSubtotalWithItemsPurchase
    globals()['CouponAmountOffSubtotalWithPurchase'] = CouponAmountOffSubtotalWithPurchase
    globals()['CouponAmountShippingWithSubtotal'] = CouponAmountShippingWithSubtotal
    globals()['CouponAutomaticallyApplyCouponCodes'] = CouponAutomaticallyApplyCouponCodes
    globals()['CouponBuyOneGetOneLimit'] = CouponBuyOneGetOneLimit
    globals()['CouponDiscountItemWithItemPurchase'] = CouponDiscountItemWithItemPurchase
    globals()['CouponDiscountItems'] = CouponDiscountItems
    globals()['CouponFreeItemAndShippingWithSubtotal'] = CouponFreeItemAndShippingWithSubtotal
    globals()['CouponFreeItemWithItemPurchase'] = CouponFreeItemWithItemPurchase
    globals()['CouponFreeItemWithItemPurchaseAndFreeShipping'] = CouponFreeItemWithItemPurchaseAndFreeShipping
    globals()['CouponFreeItemWithSubtotal'] = CouponFreeItemWithSubtotal
    globals()['CouponFreeItemsWithItemPurchase'] = CouponFreeItemsWithItemPurchase
    globals()['CouponFreeItemsWithMixMatchPurchase'] = CouponFreeItemsWithMixMatchPurchase
    globals()['CouponFreeShipping'] = CouponFreeShipping
    globals()['CouponFreeShippingSpecificItems'] = CouponFreeShippingSpecificItems
    globals()['CouponFreeShippingWithItemsPurchase'] = CouponFreeShippingWithItemsPurchase
    globals()['CouponFreeShippingWithSubtotal'] = CouponFreeShippingWithSubtotal
    globals()['CouponMoreLoyaltyCashback'] = CouponMoreLoyaltyCashback
    globals()['CouponMoreLoyaltyPoints'] = CouponMoreLoyaltyPoints
    globals()['CouponMultipleAmountsOffItems'] = CouponMultipleAmountsOffItems
    globals()['CouponNoDiscount'] = CouponNoDiscount
    globals()['CouponPercentMoreLoyaltyCashback'] = CouponPercentMoreLoyaltyCashback
    globals()['CouponPercentMoreLoyaltyPoints'] = CouponPercentMoreLoyaltyPoints
    globals()['CouponPercentOffItemWithItemsQuantityPurchase'] = CouponPercentOffItemWithItemsQuantityPurchase
    globals()['CouponPercentOffItems'] = CouponPercentOffItems
    globals()['CouponPercentOffItemsAndFreeShipping'] = CouponPercentOffItemsAndFreeShipping
    globals()['CouponPercentOffItemsWithItemsPurchase'] = CouponPercentOffItemsWithItemsPurchase
    globals()['CouponPercentOffMsrpItems'] = CouponPercentOffMsrpItems
    globals()['CouponPercentOffRetailPriceItems'] = CouponPercentOffRetailPriceItems
    globals()['CouponPercentOffShipping'] = CouponPercentOffShipping
    globals()['CouponPercentOffSubtotal'] = CouponPercentOffSubtotal
    globals()['CouponPercentOffSubtotalAndFreeShipping'] = CouponPercentOffSubtotalAndFreeShipping
    globals()['CouponPercentOffSubtotalLimit'] = CouponPercentOffSubtotalLimit
    globals()['CouponPercentOffSubtotalWithItemsPurchase'] = CouponPercentOffSubtotalWithItemsPurchase
    globals()['CouponPercentOffSubtotalWithSubtotal'] = CouponPercentOffSubtotalWithSubtotal
    globals()['CouponRestriction'] = CouponRestriction
    globals()['CouponTieredAmountOffItems'] = CouponTieredAmountOffItems
    globals()['CouponTieredAmountOffSubtotal'] = CouponTieredAmountOffSubtotal
    globals()['CouponTieredPercentOffItems'] = CouponTieredPercentOffItems
    globals()['CouponTieredPercentOffShipping'] = CouponTieredPercentOffShipping
    globals()['CouponTieredPercentOffSubtotal'] = CouponTieredPercentOffSubtotal
    globals()['CouponTieredPercentOffSubtotalBasedOnMSRP'] = CouponTieredPercentOffSubtotalBasedOnMSRP


class Coupon(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('usable_by',): {
            'ANYONE': "Anyone",
            'UNIQUECODE': "UniqueCode",
            'ONCEPERCUSTOMER': "OncePerCustomer",
            'ONCEPERNEWCUSTOMER': "OncePerNewCustomer",
            'ONCEPERNEWCUSTOMERFORITEM': "OncePerNewCustomerForItem",
        },
    }

    validations = {
        ('coupon_type',): {
            'max_length': 65,
        },
        ('description',): {
            'max_length': 50,
        },
        ('merchant_code',): {
            'max_length': 20,
        },
        ('merchant_notes',): {
            'max_length': 250,
        },
        ('quickbooks_code',): {
            'max_length': 20,
        },
        ('usable_by',): {
            'max_length': 50,
        },
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'affiliate_oid': (int,),  # noqa: E501
            'allow_multiple_one_time_codes': (bool,),  # noqa: E501
            'amount_off_items': (CouponAmountOffItems,),  # noqa: E501
            'amount_off_shipping': (CouponAmountOffShipping,),  # noqa: E501
            'amount_off_shipping_with_items_purchase': (CouponAmountOffShippingWithItemsPurchase,),  # noqa: E501
            'amount_off_subtotal': (CouponAmountOffSubtotal,),  # noqa: E501
            'amount_off_subtotal_and_free_shipping': (CouponAmountOffSubtotalFreeShippingWithPurchase,),  # noqa: E501
            'amount_off_subtotal_and_shipping': (CouponAmountOffSubtotalAndShipping,),  # noqa: E501
            'amount_off_subtotal_with_block_purchase': (CouponAmountOffSubtotalWithBlockPurchase,),  # noqa: E501
            'amount_off_subtotal_with_items_purchase': (CouponAmountOffSubtotalWithItemsPurchase,),  # noqa: E501
            'amount_off_subtotal_with_purchase': (CouponAmountOffSubtotalWithPurchase,),  # noqa: E501
            'amount_shipping_with_subtotal': (CouponAmountShippingWithSubtotal,),  # noqa: E501
            'automatically_apply_coupon_codes': (CouponAutomaticallyApplyCouponCodes,),  # noqa: E501
            'buy_one_get_one': (CouponBuyOneGetOneLimit,),  # noqa: E501
            'calculated_description': (str,),  # noqa: E501
            'can_be_used_with_other_coupons': (bool,),  # noqa: E501
            'coupon_oid': (int,),  # noqa: E501
            'coupon_type': (str,),  # noqa: E501
            'description': (str,),  # noqa: E501
            'discount_item_with_item_purchase': (CouponDiscountItemWithItemPurchase,),  # noqa: E501
            'discount_items': (CouponDiscountItems,),  # noqa: E501
            'expiration_dts': (str,),  # noqa: E501
            'free_item_and_shipping_with_subtotal': (CouponFreeItemAndShippingWithSubtotal,),  # noqa: E501
            'free_item_with_item_purchase': (CouponFreeItemWithItemPurchase,),  # noqa: E501
            'free_item_with_item_purchase_and_free_shipping': (CouponFreeItemWithItemPurchaseAndFreeShipping,),  # noqa: E501
            'free_item_with_subtotal': (CouponFreeItemWithSubtotal,),  # noqa: E501
            'free_items_with_item_purchase': (CouponFreeItemsWithItemPurchase,),  # noqa: E501
            'free_items_with_mixmatch_purchase': (CouponFreeItemsWithMixMatchPurchase,),  # noqa: E501
            'free_shipping': (CouponFreeShipping,),  # noqa: E501
            'free_shipping_specific_items': (CouponFreeShippingSpecificItems,),  # noqa: E501
            'free_shipping_with_items_purchase': (CouponFreeShippingWithItemsPurchase,),  # noqa: E501
            'free_shipping_with_subtotal': (CouponFreeShippingWithSubtotal,),  # noqa: E501
            'hide_from_customer': (bool,),  # noqa: E501
            'merchant_code': (str,),  # noqa: E501
            'merchant_notes': (str,),  # noqa: E501
            'more_loyalty_cashback': (CouponMoreLoyaltyCashback,),  # noqa: E501
            'more_loyalty_points': (CouponMoreLoyaltyPoints,),  # noqa: E501
            'multiple_amounts_off_items': (CouponMultipleAmountsOffItems,),  # noqa: E501
            'no_discount': (CouponNoDiscount,),  # noqa: E501
            'percent_more_loyalty_cashback': (CouponPercentMoreLoyaltyCashback,),  # noqa: E501
            'percent_more_loyalty_points': (CouponPercentMoreLoyaltyPoints,),  # noqa: E501
            'percent_off_item_with_items_quantity_purchase': (CouponPercentOffItemWithItemsQuantityPurchase,),  # noqa: E501
            'percent_off_items': (CouponPercentOffItems,),  # noqa: E501
            'percent_off_items_and_free_shipping': (CouponPercentOffItemsAndFreeShipping,),  # noqa: E501
            'percent_off_items_with_items_purchase': (CouponPercentOffItemsWithItemsPurchase,),  # noqa: E501
            'percent_off_msrp_items': (CouponPercentOffMsrpItems,),  # noqa: E501
            'percent_off_retail_price_items': (CouponPercentOffRetailPriceItems,),  # noqa: E501
            'percent_off_shipping': (CouponPercentOffShipping,),  # noqa: E501
            'percent_off_subtotal': (CouponPercentOffSubtotal,),  # noqa: E501
            'percent_off_subtotal_and_free_shipping': (CouponPercentOffSubtotalAndFreeShipping,),  # noqa: E501
            'percent_off_subtotal_limit': (CouponPercentOffSubtotalLimit,),  # noqa: E501
            'percent_off_subtotal_with_items_purchase': (CouponPercentOffSubtotalWithItemsPurchase,),  # noqa: E501
            'percent_off_subtotal_with_subtotal': (CouponPercentOffSubtotalWithSubtotal,),  # noqa: E501
            'quickbooks_code': (str,),  # noqa: E501
            'restrict_by_postal_codes': ([str],),  # noqa: E501
            'restrict_by_screen_branding_theme_codes': ([CouponRestriction],),  # noqa: E501
            'restrict_by_storefronts': ([CouponRestriction],),  # noqa: E501
            'skip_on_rebill': (bool,),  # noqa: E501
            'start_dts': (str,),  # noqa: E501
            'super_coupon': (bool,),  # noqa: E501
            'tiered_amount_off_items': (CouponTieredAmountOffItems,),  # noqa: E501
            'tiered_amount_off_subtotal': (CouponTieredAmountOffSubtotal,),  # noqa: E501
            'tiered_percent_off_items': (CouponTieredPercentOffItems,),  # noqa: E501
            'tiered_percent_off_shipping': (CouponTieredPercentOffShipping,),  # noqa: E501
            'tiered_percent_off_subtotal': (CouponTieredPercentOffSubtotal,),  # noqa: E501
            'tiered_percent_off_subtotal_based_on_msrp': (CouponTieredPercentOffSubtotalBasedOnMSRP,),  # noqa: E501
            'usable_by': (str,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'affiliate_oid': 'affiliate_oid',  # noqa: E501
        'allow_multiple_one_time_codes': 'allow_multiple_one_time_codes',  # noqa: E501
        'amount_off_items': 'amount_off_items',  # noqa: E501
        'amount_off_shipping': 'amount_off_shipping',  # noqa: E501
        'amount_off_shipping_with_items_purchase': 'amount_off_shipping_with_items_purchase',  # noqa: E501
        'amount_off_subtotal': 'amount_off_subtotal',  # noqa: E501
        'amount_off_subtotal_and_free_shipping': 'amount_off_subtotal_and_free_shipping',  # noqa: E501
        'amount_off_subtotal_and_shipping': 'amount_off_subtotal_and_shipping',  # noqa: E501
        'amount_off_subtotal_with_block_purchase': 'amount_off_subtotal_with_block_purchase',  # noqa: E501
        'amount_off_subtotal_with_items_purchase': 'amount_off_subtotal_with_items_purchase',  # noqa: E501
        'amount_off_subtotal_with_purchase': 'amount_off_subtotal_with_purchase',  # noqa: E501
        'amount_shipping_with_subtotal': 'amount_shipping_with_subtotal',  # noqa: E501
        'automatically_apply_coupon_codes': 'automatically_apply_coupon_codes',  # noqa: E501
        'buy_one_get_one': 'buy_one_get_one',  # noqa: E501
        'calculated_description': 'calculated_description',  # noqa: E501
        'can_be_used_with_other_coupons': 'can_be_used_with_other_coupons',  # noqa: E501
        'coupon_oid': 'coupon_oid',  # noqa: E501
        'coupon_type': 'coupon_type',  # noqa: E501
        'description': 'description',  # noqa: E501
        'discount_item_with_item_purchase': 'discount_item_with_item_purchase',  # noqa: E501
        'discount_items': 'discount_items',  # noqa: E501
        'expiration_dts': 'expiration_dts',  # noqa: E501
        'free_item_and_shipping_with_subtotal': 'free_item_and_shipping_with_subtotal',  # noqa: E501
        'free_item_with_item_purchase': 'free_item_with_item_purchase',  # noqa: E501
        'free_item_with_item_purchase_and_free_shipping': 'free_item_with_item_purchase_and_free_shipping',  # noqa: E501
        'free_item_with_subtotal': 'free_item_with_subtotal',  # noqa: E501
        'free_items_with_item_purchase': 'free_items_with_item_purchase',  # noqa: E501
        'free_items_with_mixmatch_purchase': 'free_items_with_mixmatch_purchase',  # noqa: E501
        'free_shipping': 'free_shipping',  # noqa: E501
        'free_shipping_specific_items': 'free_shipping_specific_items',  # noqa: E501
        'free_shipping_with_items_purchase': 'free_shipping_with_items_purchase',  # noqa: E501
        'free_shipping_with_subtotal': 'free_shipping_with_subtotal',  # noqa: E501
        'hide_from_customer': 'hide_from_customer',  # noqa: E501
        'merchant_code': 'merchant_code',  # noqa: E501
        'merchant_notes': 'merchant_notes',  # noqa: E501
        'more_loyalty_cashback': 'more_loyalty_cashback',  # noqa: E501
        'more_loyalty_points': 'more_loyalty_points',  # noqa: E501
        'multiple_amounts_off_items': 'multiple_amounts_off_items',  # noqa: E501
        'no_discount': 'no_discount',  # noqa: E501
        'percent_more_loyalty_cashback': 'percent_more_loyalty_cashback',  # noqa: E501
        'percent_more_loyalty_points': 'percent_more_loyalty_points',  # noqa: E501
        'percent_off_item_with_items_quantity_purchase': 'percent_off_item_with_items_quantity_purchase',  # noqa: E501
        'percent_off_items': 'percent_off_items',  # noqa: E501
        'percent_off_items_and_free_shipping': 'percent_off_items_and_free_shipping',  # noqa: E501
        'percent_off_items_with_items_purchase': 'percent_off_items_with_items_purchase',  # noqa: E501
        'percent_off_msrp_items': 'percent_off_msrp_items',  # noqa: E501
        'percent_off_retail_price_items': 'percent_off_retail_price_items',  # noqa: E501
        'percent_off_shipping': 'percent_off_shipping',  # noqa: E501
        'percent_off_subtotal': 'percent_off_subtotal',  # noqa: E501
        'percent_off_subtotal_and_free_shipping': 'percent_off_subtotal_and_free_shipping',  # noqa: E501
        'percent_off_subtotal_limit': 'percent_off_subtotal_limit',  # noqa: E501
        'percent_off_subtotal_with_items_purchase': 'percent_off_subtotal_with_items_purchase',  # noqa: E501
        'percent_off_subtotal_with_subtotal': 'percent_off_subtotal_with_subtotal',  # noqa: E501
        'quickbooks_code': 'quickbooks_code',  # noqa: E501
        'restrict_by_postal_codes': 'restrict_by_postal_codes',  # noqa: E501
        'restrict_by_screen_branding_theme_codes': 'restrict_by_screen_branding_theme_codes',  # noqa: E501
        'restrict_by_storefronts': 'restrict_by_storefronts',  # noqa: E501
        'skip_on_rebill': 'skip_on_rebill',  # noqa: E501
        'start_dts': 'start_dts',  # noqa: E501
        'super_coupon': 'super_coupon',  # noqa: E501
        'tiered_amount_off_items': 'tiered_amount_off_items',  # noqa: E501
        'tiered_amount_off_subtotal': 'tiered_amount_off_subtotal',  # noqa: E501
        'tiered_percent_off_items': 'tiered_percent_off_items',  # noqa: E501
        'tiered_percent_off_shipping': 'tiered_percent_off_shipping',  # noqa: E501
        'tiered_percent_off_subtotal': 'tiered_percent_off_subtotal',  # noqa: E501
        'tiered_percent_off_subtotal_based_on_msrp': 'tiered_percent_off_subtotal_based_on_msrp',  # noqa: E501
        'usable_by': 'usable_by',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """Coupon - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            affiliate_oid (int): Associates an order with an affiliate when this value is set.. [optional]  # noqa: E501
            allow_multiple_one_time_codes (bool): True if multiple one time codes for this coupon can be used on a cart at the same time.. [optional]  # noqa: E501
            amount_off_items (CouponAmountOffItems): [optional]  # noqa: E501
            amount_off_shipping (CouponAmountOffShipping): [optional]  # noqa: E501
            amount_off_shipping_with_items_purchase (CouponAmountOffShippingWithItemsPurchase): [optional]  # noqa: E501
            amount_off_subtotal (CouponAmountOffSubtotal): [optional]  # noqa: E501
            amount_off_subtotal_and_free_shipping (CouponAmountOffSubtotalFreeShippingWithPurchase): [optional]  # noqa: E501
            amount_off_subtotal_and_shipping (CouponAmountOffSubtotalAndShipping): [optional]  # noqa: E501
            amount_off_subtotal_with_block_purchase (CouponAmountOffSubtotalWithBlockPurchase): [optional]  # noqa: E501
            amount_off_subtotal_with_items_purchase (CouponAmountOffSubtotalWithItemsPurchase): [optional]  # noqa: E501
            amount_off_subtotal_with_purchase (CouponAmountOffSubtotalWithPurchase): [optional]  # noqa: E501
            amount_shipping_with_subtotal (CouponAmountShippingWithSubtotal): [optional]  # noqa: E501
            automatically_apply_coupon_codes (CouponAutomaticallyApplyCouponCodes): [optional]  # noqa: E501
            buy_one_get_one (CouponBuyOneGetOneLimit): [optional]  # noqa: E501
            calculated_description (str): Calculated description displayed to the customer if no description is specified.. [optional]  # noqa: E501
            can_be_used_with_other_coupons (bool): True if this coupon can be used with other coupons in a single order.. [optional]  # noqa: E501
            coupon_oid (int): Coupon oid.. [optional]  # noqa: E501
            coupon_type (str): Coupon type.. [optional]  # noqa: E501
            description (str): Description of the coupon up to 50 characters.. [optional]  # noqa: E501
            discount_item_with_item_purchase (CouponDiscountItemWithItemPurchase): [optional]  # noqa: E501
            discount_items (CouponDiscountItems): [optional]  # noqa: E501
            expiration_dts (str): Date/time when coupon expires. [optional]  # noqa: E501
            free_item_and_shipping_with_subtotal (CouponFreeItemAndShippingWithSubtotal): [optional]  # noqa: E501
            free_item_with_item_purchase (CouponFreeItemWithItemPurchase): [optional]  # noqa: E501
            free_item_with_item_purchase_and_free_shipping (CouponFreeItemWithItemPurchaseAndFreeShipping): [optional]  # noqa: E501
            free_item_with_subtotal (CouponFreeItemWithSubtotal): [optional]  # noqa: E501
            free_items_with_item_purchase (CouponFreeItemsWithItemPurchase): [optional]  # noqa: E501
            free_items_with_mixmatch_purchase (CouponFreeItemsWithMixMatchPurchase): [optional]  # noqa: E501
            free_shipping (CouponFreeShipping): [optional]  # noqa: E501
            free_shipping_specific_items (CouponFreeShippingSpecificItems): [optional]  # noqa: E501
            free_shipping_with_items_purchase (CouponFreeShippingWithItemsPurchase): [optional]  # noqa: E501
            free_shipping_with_subtotal (CouponFreeShippingWithSubtotal): [optional]  # noqa: E501
            hide_from_customer (bool): Hide coupon from customer during checkout.  Often used when coupons are automatic discounting mechanisms.. [optional]  # noqa: E501
            merchant_code (str): Merchant code of coupon up to 20 characters.. [optional]  # noqa: E501
            merchant_notes (str): Internal notes about this coupon.  These are not visible to customer.. [optional]  # noqa: E501
            more_loyalty_cashback (CouponMoreLoyaltyCashback): [optional]  # noqa: E501
            more_loyalty_points (CouponMoreLoyaltyPoints): [optional]  # noqa: E501
            multiple_amounts_off_items (CouponMultipleAmountsOffItems): [optional]  # noqa: E501
            no_discount (CouponNoDiscount): [optional]  # noqa: E501
            percent_more_loyalty_cashback (CouponPercentMoreLoyaltyCashback): [optional]  # noqa: E501
            percent_more_loyalty_points (CouponPercentMoreLoyaltyPoints): [optional]  # noqa: E501
            percent_off_item_with_items_quantity_purchase (CouponPercentOffItemWithItemsQuantityPurchase): [optional]  # noqa: E501
            percent_off_items (CouponPercentOffItems): [optional]  # noqa: E501
            percent_off_items_and_free_shipping (CouponPercentOffItemsAndFreeShipping): [optional]  # noqa: E501
            percent_off_items_with_items_purchase (CouponPercentOffItemsWithItemsPurchase): [optional]  # noqa: E501
            percent_off_msrp_items (CouponPercentOffMsrpItems): [optional]  # noqa: E501
            percent_off_retail_price_items (CouponPercentOffRetailPriceItems): [optional]  # noqa: E501
            percent_off_shipping (CouponPercentOffShipping): [optional]  # noqa: E501
            percent_off_subtotal (CouponPercentOffSubtotal): [optional]  # noqa: E501
            percent_off_subtotal_and_free_shipping (CouponPercentOffSubtotalAndFreeShipping): [optional]  # noqa: E501
            percent_off_subtotal_limit (CouponPercentOffSubtotalLimit): [optional]  # noqa: E501
            percent_off_subtotal_with_items_purchase (CouponPercentOffSubtotalWithItemsPurchase): [optional]  # noqa: E501
            percent_off_subtotal_with_subtotal (CouponPercentOffSubtotalWithSubtotal): [optional]  # noqa: E501
            quickbooks_code (str): Quickbooks accounting code.. [optional]  # noqa: E501
            restrict_by_postal_codes ([str]): Optional list of postal codes which restrict a coupon to within these postal codes.. [optional]  # noqa: E501
            restrict_by_screen_branding_theme_codes ([CouponRestriction]): Optional list of legacy screen branding theme codes to limit coupon use to only those themes.. [optional]  # noqa: E501
            restrict_by_storefronts ([CouponRestriction]): Optional list of storefronts to limit coupon use to only those storefronts.. [optional]  # noqa: E501
            skip_on_rebill (bool): Skip this coupon when it is on a rebill of an auto order.. [optional]  # noqa: E501
            start_dts (str): Date/time when coupon is valid. [optional]  # noqa: E501
            super_coupon (bool): If true, this coupon can be used with ANY other coupon regardless of the other coupons configuration. [optional]  # noqa: E501
            tiered_amount_off_items (CouponTieredAmountOffItems): [optional]  # noqa: E501
            tiered_amount_off_subtotal (CouponTieredAmountOffSubtotal): [optional]  # noqa: E501
            tiered_percent_off_items (CouponTieredPercentOffItems): [optional]  # noqa: E501
            tiered_percent_off_shipping (CouponTieredPercentOffShipping): [optional]  # noqa: E501
            tiered_percent_off_subtotal (CouponTieredPercentOffSubtotal): [optional]  # noqa: E501
            tiered_percent_off_subtotal_based_on_msrp (CouponTieredPercentOffSubtotalBasedOnMSRP): [optional]  # noqa: E501
            usable_by (str): Who may use this coupon.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', True)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """Coupon - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            affiliate_oid (int): Associates an order with an affiliate when this value is set.. [optional]  # noqa: E501
            allow_multiple_one_time_codes (bool): True if multiple one time codes for this coupon can be used on a cart at the same time.. [optional]  # noqa: E501
            amount_off_items (CouponAmountOffItems): [optional]  # noqa: E501
            amount_off_shipping (CouponAmountOffShipping): [optional]  # noqa: E501
            amount_off_shipping_with_items_purchase (CouponAmountOffShippingWithItemsPurchase): [optional]  # noqa: E501
            amount_off_subtotal (CouponAmountOffSubtotal): [optional]  # noqa: E501
            amount_off_subtotal_and_free_shipping (CouponAmountOffSubtotalFreeShippingWithPurchase): [optional]  # noqa: E501
            amount_off_subtotal_and_shipping (CouponAmountOffSubtotalAndShipping): [optional]  # noqa: E501
            amount_off_subtotal_with_block_purchase (CouponAmountOffSubtotalWithBlockPurchase): [optional]  # noqa: E501
            amount_off_subtotal_with_items_purchase (CouponAmountOffSubtotalWithItemsPurchase): [optional]  # noqa: E501
            amount_off_subtotal_with_purchase (CouponAmountOffSubtotalWithPurchase): [optional]  # noqa: E501
            amount_shipping_with_subtotal (CouponAmountShippingWithSubtotal): [optional]  # noqa: E501
            automatically_apply_coupon_codes (CouponAutomaticallyApplyCouponCodes): [optional]  # noqa: E501
            buy_one_get_one (CouponBuyOneGetOneLimit): [optional]  # noqa: E501
            calculated_description (str): Calculated description displayed to the customer if no description is specified.. [optional]  # noqa: E501
            can_be_used_with_other_coupons (bool): True if this coupon can be used with other coupons in a single order.. [optional]  # noqa: E501
            coupon_oid (int): Coupon oid.. [optional]  # noqa: E501
            coupon_type (str): Coupon type.. [optional]  # noqa: E501
            description (str): Description of the coupon up to 50 characters.. [optional]  # noqa: E501
            discount_item_with_item_purchase (CouponDiscountItemWithItemPurchase): [optional]  # noqa: E501
            discount_items (CouponDiscountItems): [optional]  # noqa: E501
            expiration_dts (str): Date/time when coupon expires. [optional]  # noqa: E501
            free_item_and_shipping_with_subtotal (CouponFreeItemAndShippingWithSubtotal): [optional]  # noqa: E501
            free_item_with_item_purchase (CouponFreeItemWithItemPurchase): [optional]  # noqa: E501
            free_item_with_item_purchase_and_free_shipping (CouponFreeItemWithItemPurchaseAndFreeShipping): [optional]  # noqa: E501
            free_item_with_subtotal (CouponFreeItemWithSubtotal): [optional]  # noqa: E501
            free_items_with_item_purchase (CouponFreeItemsWithItemPurchase): [optional]  # noqa: E501
            free_items_with_mixmatch_purchase (CouponFreeItemsWithMixMatchPurchase): [optional]  # noqa: E501
            free_shipping (CouponFreeShipping): [optional]  # noqa: E501
            free_shipping_specific_items (CouponFreeShippingSpecificItems): [optional]  # noqa: E501
            free_shipping_with_items_purchase (CouponFreeShippingWithItemsPurchase): [optional]  # noqa: E501
            free_shipping_with_subtotal (CouponFreeShippingWithSubtotal): [optional]  # noqa: E501
            hide_from_customer (bool): Hide coupon from customer during checkout.  Often used when coupons are automatic discounting mechanisms.. [optional]  # noqa: E501
            merchant_code (str): Merchant code of coupon up to 20 characters.. [optional]  # noqa: E501
            merchant_notes (str): Internal notes about this coupon.  These are not visible to customer.. [optional]  # noqa: E501
            more_loyalty_cashback (CouponMoreLoyaltyCashback): [optional]  # noqa: E501
            more_loyalty_points (CouponMoreLoyaltyPoints): [optional]  # noqa: E501
            multiple_amounts_off_items (CouponMultipleAmountsOffItems): [optional]  # noqa: E501
            no_discount (CouponNoDiscount): [optional]  # noqa: E501
            percent_more_loyalty_cashback (CouponPercentMoreLoyaltyCashback): [optional]  # noqa: E501
            percent_more_loyalty_points (CouponPercentMoreLoyaltyPoints): [optional]  # noqa: E501
            percent_off_item_with_items_quantity_purchase (CouponPercentOffItemWithItemsQuantityPurchase): [optional]  # noqa: E501
            percent_off_items (CouponPercentOffItems): [optional]  # noqa: E501
            percent_off_items_and_free_shipping (CouponPercentOffItemsAndFreeShipping): [optional]  # noqa: E501
            percent_off_items_with_items_purchase (CouponPercentOffItemsWithItemsPurchase): [optional]  # noqa: E501
            percent_off_msrp_items (CouponPercentOffMsrpItems): [optional]  # noqa: E501
            percent_off_retail_price_items (CouponPercentOffRetailPriceItems): [optional]  # noqa: E501
            percent_off_shipping (CouponPercentOffShipping): [optional]  # noqa: E501
            percent_off_subtotal (CouponPercentOffSubtotal): [optional]  # noqa: E501
            percent_off_subtotal_and_free_shipping (CouponPercentOffSubtotalAndFreeShipping): [optional]  # noqa: E501
            percent_off_subtotal_limit (CouponPercentOffSubtotalLimit): [optional]  # noqa: E501
            percent_off_subtotal_with_items_purchase (CouponPercentOffSubtotalWithItemsPurchase): [optional]  # noqa: E501
            percent_off_subtotal_with_subtotal (CouponPercentOffSubtotalWithSubtotal): [optional]  # noqa: E501
            quickbooks_code (str): Quickbooks accounting code.. [optional]  # noqa: E501
            restrict_by_postal_codes ([str]): Optional list of postal codes which restrict a coupon to within these postal codes.. [optional]  # noqa: E501
            restrict_by_screen_branding_theme_codes ([CouponRestriction]): Optional list of legacy screen branding theme codes to limit coupon use to only those themes.. [optional]  # noqa: E501
            restrict_by_storefronts ([CouponRestriction]): Optional list of storefronts to limit coupon use to only those storefronts.. [optional]  # noqa: E501
            skip_on_rebill (bool): Skip this coupon when it is on a rebill of an auto order.. [optional]  # noqa: E501
            start_dts (str): Date/time when coupon is valid. [optional]  # noqa: E501
            super_coupon (bool): If true, this coupon can be used with ANY other coupon regardless of the other coupons configuration. [optional]  # noqa: E501
            tiered_amount_off_items (CouponTieredAmountOffItems): [optional]  # noqa: E501
            tiered_amount_off_subtotal (CouponTieredAmountOffSubtotal): [optional]  # noqa: E501
            tiered_percent_off_items (CouponTieredPercentOffItems): [optional]  # noqa: E501
            tiered_percent_off_shipping (CouponTieredPercentOffShipping): [optional]  # noqa: E501
            tiered_percent_off_subtotal (CouponTieredPercentOffSubtotal): [optional]  # noqa: E501
            tiered_percent_off_subtotal_based_on_msrp (CouponTieredPercentOffSubtotalBasedOnMSRP): [optional]  # noqa: E501
            usable_by (str): Who may use this coupon.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
