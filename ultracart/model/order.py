"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from ultracart.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from ultracart.exceptions import ApiAttributeError


def lazy_import():
    from ultracart.model.customer import Customer
    from ultracart.model.order_affiliate import OrderAffiliate
    from ultracart.model.order_auto_order import OrderAutoOrder
    from ultracart.model.order_billing import OrderBilling
    from ultracart.model.order_buysafe import OrderBuysafe
    from ultracart.model.order_channel_partner import OrderChannelPartner
    from ultracart.model.order_checkout import OrderCheckout
    from ultracart.model.order_coupon import OrderCoupon
    from ultracart.model.order_digital_order import OrderDigitalOrder
    from ultracart.model.order_edi import OrderEdi
    from ultracart.model.order_fraud_score import OrderFraudScore
    from ultracart.model.order_gift import OrderGift
    from ultracart.model.order_gift_certificate import OrderGiftCertificate
    from ultracart.model.order_internal import OrderInternal
    from ultracart.model.order_item import OrderItem
    from ultracart.model.order_linked_shipment import OrderLinkedShipment
    from ultracart.model.order_marketing import OrderMarketing
    from ultracart.model.order_payment import OrderPayment
    from ultracart.model.order_property import OrderProperty
    from ultracart.model.order_quote import OrderQuote
    from ultracart.model.order_salesforce import OrderSalesforce
    from ultracart.model.order_shipping import OrderShipping
    from ultracart.model.order_summary import OrderSummary
    from ultracart.model.order_tag import OrderTag
    from ultracart.model.order_taxes import OrderTaxes
    globals()['Customer'] = Customer
    globals()['OrderAffiliate'] = OrderAffiliate
    globals()['OrderAutoOrder'] = OrderAutoOrder
    globals()['OrderBilling'] = OrderBilling
    globals()['OrderBuysafe'] = OrderBuysafe
    globals()['OrderChannelPartner'] = OrderChannelPartner
    globals()['OrderCheckout'] = OrderCheckout
    globals()['OrderCoupon'] = OrderCoupon
    globals()['OrderDigitalOrder'] = OrderDigitalOrder
    globals()['OrderEdi'] = OrderEdi
    globals()['OrderFraudScore'] = OrderFraudScore
    globals()['OrderGift'] = OrderGift
    globals()['OrderGiftCertificate'] = OrderGiftCertificate
    globals()['OrderInternal'] = OrderInternal
    globals()['OrderItem'] = OrderItem
    globals()['OrderLinkedShipment'] = OrderLinkedShipment
    globals()['OrderMarketing'] = OrderMarketing
    globals()['OrderPayment'] = OrderPayment
    globals()['OrderProperty'] = OrderProperty
    globals()['OrderQuote'] = OrderQuote
    globals()['OrderSalesforce'] = OrderSalesforce
    globals()['OrderShipping'] = OrderShipping
    globals()['OrderSummary'] = OrderSummary
    globals()['OrderTag'] = OrderTag
    globals()['OrderTaxes'] = OrderTaxes


class Order(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('current_stage',): {
            'ACCOUNTS_RECEIVABLE': "Accounts Receivable",
            'PENDING_CLEARANCE': "Pending Clearance",
            'FRAUD_REVIEW': "Fraud Review",
            'REJECTED': "Rejected",
            'SHIPPING_DEPARTMENT': "Shipping Department",
            'COMPLETED_ORDER': "Completed Order",
            'QUOTE_REQUEST': "Quote Request",
            'QUOTE_SENT': "Quote Sent",
            'LEAST_COST_ROUTING': "Least Cost Routing",
            'UNKNOWN': "Unknown",
            'PRE-ORDERED': "Pre-ordered",
            'ADVANCED_ORDER_ROUTING': "Advanced Order Routing",
        },
    }

    validations = {
        ('currency_code',): {
            'max_length': 3,
        },
        ('language_iso_code',): {
            'max_length': 3,
        },
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'affiliates': ([OrderAffiliate],),  # noqa: E501
            'auto_order': (OrderAutoOrder,),  # noqa: E501
            'billing': (OrderBilling,),  # noqa: E501
            'buysafe': (OrderBuysafe,),  # noqa: E501
            'channel_partner': (OrderChannelPartner,),  # noqa: E501
            'checkout': (OrderCheckout,),  # noqa: E501
            'coupons': ([OrderCoupon],),  # noqa: E501
            'creation_dts': (str,),  # noqa: E501
            'currency_code': (str,),  # noqa: E501
            'current_stage': (str,),  # noqa: E501
            'customer_profile': (Customer,),  # noqa: E501
            'digital_order': (OrderDigitalOrder,),  # noqa: E501
            'edi': (OrderEdi,),  # noqa: E501
            'exchange_rate': (float,),  # noqa: E501
            'fraud_score': (OrderFraudScore,),  # noqa: E501
            'gift': (OrderGift,),  # noqa: E501
            'gift_certificate': (OrderGiftCertificate,),  # noqa: E501
            'internal': (OrderInternal,),  # noqa: E501
            'items': ([OrderItem],),  # noqa: E501
            'language_iso_code': (str,),  # noqa: E501
            'linked_shipment': (OrderLinkedShipment,),  # noqa: E501
            'marketing': (OrderMarketing,),  # noqa: E501
            'merchant_id': (str,),  # noqa: E501
            'order_id': (str,),  # noqa: E501
            'payment': (OrderPayment,),  # noqa: E501
            'properties': ([OrderProperty],),  # noqa: E501
            'quote': (OrderQuote,),  # noqa: E501
            'refund_dts': (str,),  # noqa: E501
            'reject_dts': (str,),  # noqa: E501
            'salesforce': (OrderSalesforce,),  # noqa: E501
            'shipping': (OrderShipping,),  # noqa: E501
            'summary': (OrderSummary,),  # noqa: E501
            'tags': ([OrderTag],),  # noqa: E501
            'taxes': (OrderTaxes,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'affiliates': 'affiliates',  # noqa: E501
        'auto_order': 'auto_order',  # noqa: E501
        'billing': 'billing',  # noqa: E501
        'buysafe': 'buysafe',  # noqa: E501
        'channel_partner': 'channel_partner',  # noqa: E501
        'checkout': 'checkout',  # noqa: E501
        'coupons': 'coupons',  # noqa: E501
        'creation_dts': 'creation_dts',  # noqa: E501
        'currency_code': 'currency_code',  # noqa: E501
        'current_stage': 'current_stage',  # noqa: E501
        'customer_profile': 'customer_profile',  # noqa: E501
        'digital_order': 'digital_order',  # noqa: E501
        'edi': 'edi',  # noqa: E501
        'exchange_rate': 'exchange_rate',  # noqa: E501
        'fraud_score': 'fraud_score',  # noqa: E501
        'gift': 'gift',  # noqa: E501
        'gift_certificate': 'gift_certificate',  # noqa: E501
        'internal': 'internal',  # noqa: E501
        'items': 'items',  # noqa: E501
        'language_iso_code': 'language_iso_code',  # noqa: E501
        'linked_shipment': 'linked_shipment',  # noqa: E501
        'marketing': 'marketing',  # noqa: E501
        'merchant_id': 'merchant_id',  # noqa: E501
        'order_id': 'order_id',  # noqa: E501
        'payment': 'payment',  # noqa: E501
        'properties': 'properties',  # noqa: E501
        'quote': 'quote',  # noqa: E501
        'refund_dts': 'refund_dts',  # noqa: E501
        'reject_dts': 'reject_dts',  # noqa: E501
        'salesforce': 'salesforce',  # noqa: E501
        'shipping': 'shipping',  # noqa: E501
        'summary': 'summary',  # noqa: E501
        'tags': 'Tags',  # noqa: E501
        'taxes': 'taxes',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """Order - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            affiliates ([OrderAffiliate]): Affiliates if any were associated with the order.  The first one in the array sent the order and each subsequent affiliate is the recruiter that earns a downline commission.. [optional]  # noqa: E501
            auto_order (OrderAutoOrder): [optional]  # noqa: E501
            billing (OrderBilling): [optional]  # noqa: E501
            buysafe (OrderBuysafe): [optional]  # noqa: E501
            channel_partner (OrderChannelPartner): [optional]  # noqa: E501
            checkout (OrderCheckout): [optional]  # noqa: E501
            coupons ([OrderCoupon]): Coupons. [optional]  # noqa: E501
            creation_dts (str): Date/time that the order was created. [optional]  # noqa: E501
            currency_code (str): Currency code that the customer used if different than the merchant's base currency code. [optional]  # noqa: E501
            current_stage (str): Current stage that the order is in.. [optional]  # noqa: E501
            customer_profile (Customer): [optional]  # noqa: E501
            digital_order (OrderDigitalOrder): [optional]  # noqa: E501
            edi (OrderEdi): [optional]  # noqa: E501
            exchange_rate (float): Exchange rate at the time the order was placed if currency code is different than the base currency. [optional]  # noqa: E501
            fraud_score (OrderFraudScore): [optional]  # noqa: E501
            gift (OrderGift): [optional]  # noqa: E501
            gift_certificate (OrderGiftCertificate): [optional]  # noqa: E501
            internal (OrderInternal): [optional]  # noqa: E501
            items ([OrderItem]): Items. [optional]  # noqa: E501
            language_iso_code (str): Three letter ISO-639 language code used by the customer during the checkout if different than the default language. [optional]  # noqa: E501
            linked_shipment (OrderLinkedShipment): [optional]  # noqa: E501
            marketing (OrderMarketing): [optional]  # noqa: E501
            merchant_id (str): UltraCart merchant ID owning this order. [optional]  # noqa: E501
            order_id (str): Order ID. [optional]  # noqa: E501
            payment (OrderPayment): [optional]  # noqa: E501
            properties ([OrderProperty]): Properties, available only through update, not through insert due to the nature of how properties are handled internally. [optional]  # noqa: E501
            quote (OrderQuote): [optional]  # noqa: E501
            refund_dts (str): If the order was refunded, the date/time that the last refund occurred. [optional]  # noqa: E501
            reject_dts (str): If the order was rejected, the date/time that the rejection occurred. [optional]  # noqa: E501
            salesforce (OrderSalesforce): [optional]  # noqa: E501
            shipping (OrderShipping): [optional]  # noqa: E501
            summary (OrderSummary): [optional]  # noqa: E501
            tags ([OrderTag]): tags, available only through update, not through insert due to the nature of how tags are handled internally. [optional]  # noqa: E501
            taxes (OrderTaxes): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', True)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """Order - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            affiliates ([OrderAffiliate]): Affiliates if any were associated with the order.  The first one in the array sent the order and each subsequent affiliate is the recruiter that earns a downline commission.. [optional]  # noqa: E501
            auto_order (OrderAutoOrder): [optional]  # noqa: E501
            billing (OrderBilling): [optional]  # noqa: E501
            buysafe (OrderBuysafe): [optional]  # noqa: E501
            channel_partner (OrderChannelPartner): [optional]  # noqa: E501
            checkout (OrderCheckout): [optional]  # noqa: E501
            coupons ([OrderCoupon]): Coupons. [optional]  # noqa: E501
            creation_dts (str): Date/time that the order was created. [optional]  # noqa: E501
            currency_code (str): Currency code that the customer used if different than the merchant's base currency code. [optional]  # noqa: E501
            current_stage (str): Current stage that the order is in.. [optional]  # noqa: E501
            customer_profile (Customer): [optional]  # noqa: E501
            digital_order (OrderDigitalOrder): [optional]  # noqa: E501
            edi (OrderEdi): [optional]  # noqa: E501
            exchange_rate (float): Exchange rate at the time the order was placed if currency code is different than the base currency. [optional]  # noqa: E501
            fraud_score (OrderFraudScore): [optional]  # noqa: E501
            gift (OrderGift): [optional]  # noqa: E501
            gift_certificate (OrderGiftCertificate): [optional]  # noqa: E501
            internal (OrderInternal): [optional]  # noqa: E501
            items ([OrderItem]): Items. [optional]  # noqa: E501
            language_iso_code (str): Three letter ISO-639 language code used by the customer during the checkout if different than the default language. [optional]  # noqa: E501
            linked_shipment (OrderLinkedShipment): [optional]  # noqa: E501
            marketing (OrderMarketing): [optional]  # noqa: E501
            merchant_id (str): UltraCart merchant ID owning this order. [optional]  # noqa: E501
            order_id (str): Order ID. [optional]  # noqa: E501
            payment (OrderPayment): [optional]  # noqa: E501
            properties ([OrderProperty]): Properties, available only through update, not through insert due to the nature of how properties are handled internally. [optional]  # noqa: E501
            quote (OrderQuote): [optional]  # noqa: E501
            refund_dts (str): If the order was refunded, the date/time that the last refund occurred. [optional]  # noqa: E501
            reject_dts (str): If the order was rejected, the date/time that the rejection occurred. [optional]  # noqa: E501
            salesforce (OrderSalesforce): [optional]  # noqa: E501
            shipping (OrderShipping): [optional]  # noqa: E501
            summary (OrderSummary): [optional]  # noqa: E501
            tags ([OrderTag]): tags, available only through update, not through insert due to the nature of how tags are handled internally. [optional]  # noqa: E501
            taxes (OrderTaxes): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
