"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from ultracart.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from ultracart.exceptions import ApiAttributeError


def lazy_import():
    from ultracart.model.currency import Currency
    from ultracart.model.distance import Distance
    from ultracart.model.order_item_edi import OrderItemEdi
    from ultracart.model.order_item_option import OrderItemOption
    from ultracart.model.order_item_property import OrderItemProperty
    from ultracart.model.order_item_tag import OrderItemTag
    from ultracart.model.weight import Weight
    globals()['Currency'] = Currency
    globals()['Distance'] = Distance
    globals()['OrderItemEdi'] = OrderItemEdi
    globals()['OrderItemOption'] = OrderItemOption
    globals()['OrderItemProperty'] = OrderItemProperty
    globals()['OrderItemTag'] = OrderItemTag
    globals()['Weight'] = Weight


class OrderItem(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('tax_product_type',): {
            'EMPTY': "",
            'DIGITAL': "digital",
            'PHYSICAL': "physical",
            'SERVICE': "service",
        },
    }

    validations = {
        ('barcode_gtin12',): {
            'max_length': 12,
        },
        ('barcode_gtin14',): {
            'max_length': 14,
        },
        ('barcode_upc11',): {
            'max_length': 11,
        },
        ('barcode_upc12',): {
            'max_length': 12,
        },
        ('channel_partner_item_id',): {
            'max_length': 30,
        },
        ('country_code_of_origin',): {
            'max_length': 2,
        },
        ('description',): {
            'max_length': 2000,
        },
        ('merchant_item_id',): {
            'max_length': 20,
        },
        ('parent_merchant_item_id',): {
            'max_length': 20,
        },
        ('perishable_class',): {
            'max_length': 50,
        },
        ('quickbooks_class',): {
            'max_length': 31,
        },
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'accounting_code': (str,),  # noqa: E501
            'activation_codes': ([str],),  # noqa: E501
            'arbitrary_unit_cost': (Currency,),  # noqa: E501
            'auto_order_last_rebill_dts': (str,),  # noqa: E501
            'auto_order_schedule': (str,),  # noqa: E501
            'barcode': (str,),  # noqa: E501
            'barcode_gtin12': (str,),  # noqa: E501
            'barcode_gtin14': (str,),  # noqa: E501
            'barcode_upc11': (str,),  # noqa: E501
            'barcode_upc12': (str,),  # noqa: E501
            'channel_partner_item_id': (str,),  # noqa: E501
            'cogs': (float,),  # noqa: E501
            'component_unit_value': (float,),  # noqa: E501
            'cost': (Currency,),  # noqa: E501
            'country_code_of_origin': (str,),  # noqa: E501
            'customs_description': (str,),  # noqa: E501
            'description': (str,),  # noqa: E501
            'discount': (Currency,),  # noqa: E501
            'discount_quantity': (float,),  # noqa: E501
            'discount_shipping_weight': (Weight,),  # noqa: E501
            'distribution_center_code': (str,),  # noqa: E501
            'edi': (OrderItemEdi,),  # noqa: E501
            'exclude_coupon': (bool,),  # noqa: E501
            'free_shipping': (bool,),  # noqa: E501
            'hazmat': (bool,),  # noqa: E501
            'height': (Distance,),  # noqa: E501
            'item_index': (int,),  # noqa: E501
            'item_reference_oid': (int,),  # noqa: E501
            'kit': (bool,),  # noqa: E501
            'kit_component': (bool,),  # noqa: E501
            'length': (Distance,),  # noqa: E501
            'manufacturer_sku': (str,),  # noqa: E501
            'max_days_time_in_transit': (int,),  # noqa: E501
            'merchant_item_id': (str,),  # noqa: E501
            'mix_and_match_group_name': (str,),  # noqa: E501
            'mix_and_match_group_oid': (int,),  # noqa: E501
            'no_shipping_discount': (bool,),  # noqa: E501
            'options': ([OrderItemOption],),  # noqa: E501
            'packed_by_user': (str,),  # noqa: E501
            'parent_item_index': (int,),  # noqa: E501
            'parent_merchant_item_id': (str,),  # noqa: E501
            'perishable_class': (str,),  # noqa: E501
            'pricing_tier_name': (str,),  # noqa: E501
            'properties': ([OrderItemProperty],),  # noqa: E501
            'quantity': (float,),  # noqa: E501
            'quantity_refunded': (float,),  # noqa: E501
            'quickbooks_class': (str,),  # noqa: E501
            'refund_reason': (str,),  # noqa: E501
            'return_reason': (str,),  # noqa: E501
            'ship_separately': (bool,),  # noqa: E501
            'shipped_by_user': (str,),  # noqa: E501
            'shipped_dts': (str,),  # noqa: E501
            'shipping_status': (str,),  # noqa: E501
            'special_product_type': (str,),  # noqa: E501
            'tags': ([OrderItemTag],),  # noqa: E501
            'tax_free': (bool,),  # noqa: E501
            'tax_product_type': (str,),  # noqa: E501
            'taxable_cost': (Currency,),  # noqa: E501
            'total_cost_with_discount': (Currency,),  # noqa: E501
            'total_refunded': (Currency,),  # noqa: E501
            'transmitted_to_distribution_center_dts': (str,),  # noqa: E501
            'unit_cost_with_discount': (Currency,),  # noqa: E501
            'upsell': (bool,),  # noqa: E501
            'weight': (Weight,),  # noqa: E501
            'width': (Distance,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'accounting_code': 'accounting_code',  # noqa: E501
        'activation_codes': 'activation_codes',  # noqa: E501
        'arbitrary_unit_cost': 'arbitrary_unit_cost',  # noqa: E501
        'auto_order_last_rebill_dts': 'auto_order_last_rebill_dts',  # noqa: E501
        'auto_order_schedule': 'auto_order_schedule',  # noqa: E501
        'barcode': 'barcode',  # noqa: E501
        'barcode_gtin12': 'barcode_gtin12',  # noqa: E501
        'barcode_gtin14': 'barcode_gtin14',  # noqa: E501
        'barcode_upc11': 'barcode_upc11',  # noqa: E501
        'barcode_upc12': 'barcode_upc12',  # noqa: E501
        'channel_partner_item_id': 'channel_partner_item_id',  # noqa: E501
        'cogs': 'cogs',  # noqa: E501
        'component_unit_value': 'component_unit_value',  # noqa: E501
        'cost': 'cost',  # noqa: E501
        'country_code_of_origin': 'country_code_of_origin',  # noqa: E501
        'customs_description': 'customs_description',  # noqa: E501
        'description': 'description',  # noqa: E501
        'discount': 'discount',  # noqa: E501
        'discount_quantity': 'discount_quantity',  # noqa: E501
        'discount_shipping_weight': 'discount_shipping_weight',  # noqa: E501
        'distribution_center_code': 'distribution_center_code',  # noqa: E501
        'edi': 'edi',  # noqa: E501
        'exclude_coupon': 'exclude_coupon',  # noqa: E501
        'free_shipping': 'free_shipping',  # noqa: E501
        'hazmat': 'hazmat',  # noqa: E501
        'height': 'height',  # noqa: E501
        'item_index': 'item_index',  # noqa: E501
        'item_reference_oid': 'item_reference_oid',  # noqa: E501
        'kit': 'kit',  # noqa: E501
        'kit_component': 'kit_component',  # noqa: E501
        'length': 'length',  # noqa: E501
        'manufacturer_sku': 'manufacturer_sku',  # noqa: E501
        'max_days_time_in_transit': 'max_days_time_in_transit',  # noqa: E501
        'merchant_item_id': 'merchant_item_id',  # noqa: E501
        'mix_and_match_group_name': 'mix_and_match_group_name',  # noqa: E501
        'mix_and_match_group_oid': 'mix_and_match_group_oid',  # noqa: E501
        'no_shipping_discount': 'no_shipping_discount',  # noqa: E501
        'options': 'options',  # noqa: E501
        'packed_by_user': 'packed_by_user',  # noqa: E501
        'parent_item_index': 'parent_item_index',  # noqa: E501
        'parent_merchant_item_id': 'parent_merchant_item_id',  # noqa: E501
        'perishable_class': 'perishable_class',  # noqa: E501
        'pricing_tier_name': 'pricing_tier_name',  # noqa: E501
        'properties': 'properties',  # noqa: E501
        'quantity': 'quantity',  # noqa: E501
        'quantity_refunded': 'quantity_refunded',  # noqa: E501
        'quickbooks_class': 'quickbooks_class',  # noqa: E501
        'refund_reason': 'refund_reason',  # noqa: E501
        'return_reason': 'return_reason',  # noqa: E501
        'ship_separately': 'ship_separately',  # noqa: E501
        'shipped_by_user': 'shipped_by_user',  # noqa: E501
        'shipped_dts': 'shipped_dts',  # noqa: E501
        'shipping_status': 'shipping_status',  # noqa: E501
        'special_product_type': 'special_product_type',  # noqa: E501
        'tags': 'tags',  # noqa: E501
        'tax_free': 'tax_free',  # noqa: E501
        'tax_product_type': 'tax_product_type',  # noqa: E501
        'taxable_cost': 'taxable_cost',  # noqa: E501
        'total_cost_with_discount': 'total_cost_with_discount',  # noqa: E501
        'total_refunded': 'total_refunded',  # noqa: E501
        'transmitted_to_distribution_center_dts': 'transmitted_to_distribution_center_dts',  # noqa: E501
        'unit_cost_with_discount': 'unit_cost_with_discount',  # noqa: E501
        'upsell': 'upsell',  # noqa: E501
        'weight': 'weight',  # noqa: E501
        'width': 'width',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """OrderItem - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            accounting_code (str): QuickBooks code. [optional]  # noqa: E501
            activation_codes ([str]): Activation codes assigned to this item. [optional]  # noqa: E501
            arbitrary_unit_cost (Currency): [optional]  # noqa: E501
            auto_order_last_rebill_dts (str): Date/time of the last rebill, used only during order insert to help project future rebills. [optional]  # noqa: E501
            auto_order_schedule (str): Auto order schedule, used only during inserts supplying the recurring schedule. [optional]  # noqa: E501
            barcode (str): Barcode. [optional]  # noqa: E501
            barcode_gtin12 (str): Barcode - GTIN 12. [optional]  # noqa: E501
            barcode_gtin14 (str): Barcode - GTIN 14. [optional]  # noqa: E501
            barcode_upc11 (str): Barcode - UPC 11. [optional]  # noqa: E501
            barcode_upc12 (str): Barcode - UPC 12. [optional]  # noqa: E501
            channel_partner_item_id (str): Channel partner item id if this order came through a channel partner and the channel partner item id was mapped to an internal item id. [optional]  # noqa: E501
            cogs (float): Cost of goods sold. [optional]  # noqa: E501
            component_unit_value (float): Value of the kit component item. [optional]  # noqa: E501
            cost (Currency): [optional]  # noqa: E501
            country_code_of_origin (str): Country of origin (ISO-3166 two letter code). [optional]  # noqa: E501
            customs_description (str): Customs description. [optional]  # noqa: E501
            description (str): Description. [optional]  # noqa: E501
            discount (Currency): [optional]  # noqa: E501
            discount_quantity (float): Discount quantity. [optional]  # noqa: E501
            discount_shipping_weight (Weight): [optional]  # noqa: E501
            distribution_center_code (str): Distribution center code responsible for shipping this item. [optional]  # noqa: E501
            edi (OrderItemEdi): [optional]  # noqa: E501
            exclude_coupon (bool): True if this item is excluded from coupons. [optional]  # noqa: E501
            free_shipping (bool): True if the item receives free shipping. [optional]  # noqa: E501
            hazmat (bool): Hazardous materials indicator. [optional]  # noqa: E501
            height (Distance): [optional]  # noqa: E501
            item_index (int): Index of the item on the order (one based index). [optional]  # noqa: E501
            item_reference_oid (int): Item reference object identifier used to linked to auto order item record. [optional]  # noqa: E501
            kit (bool): True if this item is a kit. [optional]  # noqa: E501
            kit_component (bool): True if this item is a kit component. [optional]  # noqa: E501
            length (Distance): [optional]  # noqa: E501
            manufacturer_sku (str): Manufacturer SKU. [optional]  # noqa: E501
            max_days_time_in_transit (int): Maximum days that the item can be in transit before spoilage (perishable products). [optional]  # noqa: E501
            merchant_item_id (str): Item ID. [optional]  # noqa: E501
            mix_and_match_group_name (str): Mix and match group name. [optional]  # noqa: E501
            mix_and_match_group_oid (int): Mix and match group object identifier. [optional]  # noqa: E501
            no_shipping_discount (bool): True if this item is excluded from shipping discounts. [optional]  # noqa: E501
            options ([OrderItemOption]): Options. [optional]  # noqa: E501
            packed_by_user (str): Packed by user. [optional]  # noqa: E501
            parent_item_index (int): If this item is a kit component, this is the item index of the parent item (kit). [optional]  # noqa: E501
            parent_merchant_item_id (str): If this item is a kit component, this is the item id of the parent item (kit). [optional]  # noqa: E501
            perishable_class (str): Perishable class of the item. [optional]  # noqa: E501
            pricing_tier_name (str): Pricing tier that granted the particular price for this item if the customer profile had pricing tiers assigned. [optional]  # noqa: E501
            properties ([OrderItemProperty]): Properties. [optional]  # noqa: E501
            quantity (float): Quantity. [optional]  # noqa: E501
            quantity_refunded (float): Quantity refunded on this item (read only except refund operation). [optional]  # noqa: E501
            quickbooks_class (str): QuickBooks class. [optional]  # noqa: E501
            refund_reason (str): Refund reason code.  This can only be written during a refund operation otherwise this field is read only.. [optional]  # noqa: E501
            return_reason (str): Return reason code.  This can only be written during a refund operation otherwise this field is read only.. [optional]  # noqa: E501
            ship_separately (bool): True if this item ships in a separate box. [optional]  # noqa: E501
            shipped_by_user (str): Shipped by user. [optional]  # noqa: E501
            shipped_dts (str): Date/time that this item was marked shipped. [optional]  # noqa: E501
            shipping_status (str): Shipping status for this item.  This is the replacement for the old order level shipping status.. [optional]  # noqa: E501
            special_product_type (str): Special product type (USPS Media Mail). [optional]  # noqa: E501
            tags ([OrderItemTag]): Tags. [optional]  # noqa: E501
            tax_free (bool): True if the item is tax free. [optional]  # noqa: E501
            tax_product_type (str): Type of product for tax purposes (self or UltraCart Managed taxes). [optional]  # noqa: E501
            taxable_cost (Currency): [optional]  # noqa: E501
            total_cost_with_discount (Currency): [optional]  # noqa: E501
            total_refunded (Currency): [optional]  # noqa: E501
            transmitted_to_distribution_center_dts (str): Date/time that this item was transmitted to the distribution center. [optional]  # noqa: E501
            unit_cost_with_discount (Currency): [optional]  # noqa: E501
            upsell (bool): True if this item was added to the order as part of an upsell. [optional]  # noqa: E501
            weight (Weight): [optional]  # noqa: E501
            width (Distance): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', True)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """OrderItem - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            accounting_code (str): QuickBooks code. [optional]  # noqa: E501
            activation_codes ([str]): Activation codes assigned to this item. [optional]  # noqa: E501
            arbitrary_unit_cost (Currency): [optional]  # noqa: E501
            auto_order_last_rebill_dts (str): Date/time of the last rebill, used only during order insert to help project future rebills. [optional]  # noqa: E501
            auto_order_schedule (str): Auto order schedule, used only during inserts supplying the recurring schedule. [optional]  # noqa: E501
            barcode (str): Barcode. [optional]  # noqa: E501
            barcode_gtin12 (str): Barcode - GTIN 12. [optional]  # noqa: E501
            barcode_gtin14 (str): Barcode - GTIN 14. [optional]  # noqa: E501
            barcode_upc11 (str): Barcode - UPC 11. [optional]  # noqa: E501
            barcode_upc12 (str): Barcode - UPC 12. [optional]  # noqa: E501
            channel_partner_item_id (str): Channel partner item id if this order came through a channel partner and the channel partner item id was mapped to an internal item id. [optional]  # noqa: E501
            cogs (float): Cost of goods sold. [optional]  # noqa: E501
            component_unit_value (float): Value of the kit component item. [optional]  # noqa: E501
            cost (Currency): [optional]  # noqa: E501
            country_code_of_origin (str): Country of origin (ISO-3166 two letter code). [optional]  # noqa: E501
            customs_description (str): Customs description. [optional]  # noqa: E501
            description (str): Description. [optional]  # noqa: E501
            discount (Currency): [optional]  # noqa: E501
            discount_quantity (float): Discount quantity. [optional]  # noqa: E501
            discount_shipping_weight (Weight): [optional]  # noqa: E501
            distribution_center_code (str): Distribution center code responsible for shipping this item. [optional]  # noqa: E501
            edi (OrderItemEdi): [optional]  # noqa: E501
            exclude_coupon (bool): True if this item is excluded from coupons. [optional]  # noqa: E501
            free_shipping (bool): True if the item receives free shipping. [optional]  # noqa: E501
            hazmat (bool): Hazardous materials indicator. [optional]  # noqa: E501
            height (Distance): [optional]  # noqa: E501
            item_index (int): Index of the item on the order (one based index). [optional]  # noqa: E501
            item_reference_oid (int): Item reference object identifier used to linked to auto order item record. [optional]  # noqa: E501
            kit (bool): True if this item is a kit. [optional]  # noqa: E501
            kit_component (bool): True if this item is a kit component. [optional]  # noqa: E501
            length (Distance): [optional]  # noqa: E501
            manufacturer_sku (str): Manufacturer SKU. [optional]  # noqa: E501
            max_days_time_in_transit (int): Maximum days that the item can be in transit before spoilage (perishable products). [optional]  # noqa: E501
            merchant_item_id (str): Item ID. [optional]  # noqa: E501
            mix_and_match_group_name (str): Mix and match group name. [optional]  # noqa: E501
            mix_and_match_group_oid (int): Mix and match group object identifier. [optional]  # noqa: E501
            no_shipping_discount (bool): True if this item is excluded from shipping discounts. [optional]  # noqa: E501
            options ([OrderItemOption]): Options. [optional]  # noqa: E501
            packed_by_user (str): Packed by user. [optional]  # noqa: E501
            parent_item_index (int): If this item is a kit component, this is the item index of the parent item (kit). [optional]  # noqa: E501
            parent_merchant_item_id (str): If this item is a kit component, this is the item id of the parent item (kit). [optional]  # noqa: E501
            perishable_class (str): Perishable class of the item. [optional]  # noqa: E501
            pricing_tier_name (str): Pricing tier that granted the particular price for this item if the customer profile had pricing tiers assigned. [optional]  # noqa: E501
            properties ([OrderItemProperty]): Properties. [optional]  # noqa: E501
            quantity (float): Quantity. [optional]  # noqa: E501
            quantity_refunded (float): Quantity refunded on this item (read only except refund operation). [optional]  # noqa: E501
            quickbooks_class (str): QuickBooks class. [optional]  # noqa: E501
            refund_reason (str): Refund reason code.  This can only be written during a refund operation otherwise this field is read only.. [optional]  # noqa: E501
            return_reason (str): Return reason code.  This can only be written during a refund operation otherwise this field is read only.. [optional]  # noqa: E501
            ship_separately (bool): True if this item ships in a separate box. [optional]  # noqa: E501
            shipped_by_user (str): Shipped by user. [optional]  # noqa: E501
            shipped_dts (str): Date/time that this item was marked shipped. [optional]  # noqa: E501
            shipping_status (str): Shipping status for this item.  This is the replacement for the old order level shipping status.. [optional]  # noqa: E501
            special_product_type (str): Special product type (USPS Media Mail). [optional]  # noqa: E501
            tags ([OrderItemTag]): Tags. [optional]  # noqa: E501
            tax_free (bool): True if the item is tax free. [optional]  # noqa: E501
            tax_product_type (str): Type of product for tax purposes (self or UltraCart Managed taxes). [optional]  # noqa: E501
            taxable_cost (Currency): [optional]  # noqa: E501
            total_cost_with_discount (Currency): [optional]  # noqa: E501
            total_refunded (Currency): [optional]  # noqa: E501
            transmitted_to_distribution_center_dts (str): Date/time that this item was transmitted to the distribution center. [optional]  # noqa: E501
            unit_cost_with_discount (Currency): [optional]  # noqa: E501
            upsell (bool): True if this item was added to the order as part of an upsell. [optional]  # noqa: E501
            weight (Weight): [optional]  # noqa: E501
            width (Distance): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
