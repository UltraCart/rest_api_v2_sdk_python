"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from ultracart.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from ultracart.exceptions import ApiAttributeError


def lazy_import():
    from ultracart.model.item_accounting import ItemAccounting
    from ultracart.model.item_amember import ItemAmember
    from ultracart.model.item_auto_order import ItemAutoOrder
    from ultracart.model.item_cc_bill import ItemCCBill
    from ultracart.model.item_channel_partner_mapping import ItemChannelPartnerMapping
    from ultracart.model.item_chargeback import ItemChargeback
    from ultracart.model.item_checkout import ItemCheckout
    from ultracart.model.item_content import ItemContent
    from ultracart.model.item_digital_delivery import ItemDigitalDelivery
    from ultracart.model.item_ebay import ItemEbay
    from ultracart.model.item_email_notifications import ItemEmailNotifications
    from ultracart.model.item_enrollment123 import ItemEnrollment123
    from ultracart.model.item_fulfillment_addon import ItemFulfillmentAddon
    from ultracart.model.item_gift_certificate import ItemGiftCertificate
    from ultracart.model.item_google_product_search import ItemGoogleProductSearch
    from ultracart.model.item_identifiers import ItemIdentifiers
    from ultracart.model.item_instant_payment_notifications import ItemInstantPaymentNotifications
    from ultracart.model.item_internal import ItemInternal
    from ultracart.model.item_kit_definition import ItemKitDefinition
    from ultracart.model.item_option import ItemOption
    from ultracart.model.item_payment_processing import ItemPaymentProcessing
    from ultracart.model.item_physical import ItemPhysical
    from ultracart.model.item_pricing import ItemPricing
    from ultracart.model.item_property import ItemProperty
    from ultracart.model.item_realtime_pricing import ItemRealtimePricing
    from ultracart.model.item_related import ItemRelated
    from ultracart.model.item_reporting import ItemReporting
    from ultracart.model.item_restriction import ItemRestriction
    from ultracart.model.item_revguard import ItemRevguard
    from ultracart.model.item_reviews import ItemReviews
    from ultracart.model.item_salesforce import ItemSalesforce
    from ultracart.model.item_shipping import ItemShipping
    from ultracart.model.item_tags import ItemTags
    from ultracart.model.item_tax import ItemTax
    from ultracart.model.item_third_party_email_marketing import ItemThirdPartyEmailMarketing
    from ultracart.model.item_variant_item import ItemVariantItem
    from ultracart.model.item_variation import ItemVariation
    from ultracart.model.item_wishlist_member import ItemWishlistMember
    globals()['ItemAccounting'] = ItemAccounting
    globals()['ItemAmember'] = ItemAmember
    globals()['ItemAutoOrder'] = ItemAutoOrder
    globals()['ItemCCBill'] = ItemCCBill
    globals()['ItemChannelPartnerMapping'] = ItemChannelPartnerMapping
    globals()['ItemChargeback'] = ItemChargeback
    globals()['ItemCheckout'] = ItemCheckout
    globals()['ItemContent'] = ItemContent
    globals()['ItemDigitalDelivery'] = ItemDigitalDelivery
    globals()['ItemEbay'] = ItemEbay
    globals()['ItemEmailNotifications'] = ItemEmailNotifications
    globals()['ItemEnrollment123'] = ItemEnrollment123
    globals()['ItemFulfillmentAddon'] = ItemFulfillmentAddon
    globals()['ItemGiftCertificate'] = ItemGiftCertificate
    globals()['ItemGoogleProductSearch'] = ItemGoogleProductSearch
    globals()['ItemIdentifiers'] = ItemIdentifiers
    globals()['ItemInstantPaymentNotifications'] = ItemInstantPaymentNotifications
    globals()['ItemInternal'] = ItemInternal
    globals()['ItemKitDefinition'] = ItemKitDefinition
    globals()['ItemOption'] = ItemOption
    globals()['ItemPaymentProcessing'] = ItemPaymentProcessing
    globals()['ItemPhysical'] = ItemPhysical
    globals()['ItemPricing'] = ItemPricing
    globals()['ItemProperty'] = ItemProperty
    globals()['ItemRealtimePricing'] = ItemRealtimePricing
    globals()['ItemRelated'] = ItemRelated
    globals()['ItemReporting'] = ItemReporting
    globals()['ItemRestriction'] = ItemRestriction
    globals()['ItemRevguard'] = ItemRevguard
    globals()['ItemReviews'] = ItemReviews
    globals()['ItemSalesforce'] = ItemSalesforce
    globals()['ItemShipping'] = ItemShipping
    globals()['ItemTags'] = ItemTags
    globals()['ItemTax'] = ItemTax
    globals()['ItemThirdPartyEmailMarketing'] = ItemThirdPartyEmailMarketing
    globals()['ItemVariantItem'] = ItemVariantItem
    globals()['ItemVariation'] = ItemVariation
    globals()['ItemWishlistMember'] = ItemWishlistMember


class Item(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
        ('description',): {
            'max_length': 512,
        },
        ('merchant_id',): {
            'max_length': 5,
        },
        ('merchant_item_id',): {
            'max_length': 20,
        },
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'accounting': (ItemAccounting,),  # noqa: E501
            'amember': (ItemAmember,),  # noqa: E501
            'auto_order': (ItemAutoOrder,),  # noqa: E501
            'ccbill': (ItemCCBill,),  # noqa: E501
            'channel_partner_item_mappings': ([ItemChannelPartnerMapping],),  # noqa: E501
            'chargeback': (ItemChargeback,),  # noqa: E501
            'checkout': (ItemCheckout,),  # noqa: E501
            'content': (ItemContent,),  # noqa: E501
            'creation_dts': (str,),  # noqa: E501
            'description': (str,),  # noqa: E501
            'description_translated_text_instance_oid': (int,),  # noqa: E501
            'digital_delivery': (ItemDigitalDelivery,),  # noqa: E501
            'ebay': (ItemEbay,),  # noqa: E501
            'email_notifications': (ItemEmailNotifications,),  # noqa: E501
            'enrollment123': (ItemEnrollment123,),  # noqa: E501
            'fulfillment_addons': ([ItemFulfillmentAddon],),  # noqa: E501
            'gift_certificate': (ItemGiftCertificate,),  # noqa: E501
            'google_product_search': (ItemGoogleProductSearch,),  # noqa: E501
            'identifiers': (ItemIdentifiers,),  # noqa: E501
            'inactive': (bool,),  # noqa: E501
            'instant_payment_notifications': (ItemInstantPaymentNotifications,),  # noqa: E501
            'internal': (ItemInternal,),  # noqa: E501
            'kit': (bool,),  # noqa: E501
            'kit_component_only': (bool,),  # noqa: E501
            'kit_definition': (ItemKitDefinition,),  # noqa: E501
            'last_modified_dts': (str,),  # noqa: E501
            'merchant_id': (str,),  # noqa: E501
            'merchant_item_id': (str,),  # noqa: E501
            'merchant_item_oid': (int,),  # noqa: E501
            'options': ([ItemOption],),  # noqa: E501
            'parent_category_id': (int,),  # noqa: E501
            'parent_category_path': (str,),  # noqa: E501
            'payment_processing': (ItemPaymentProcessing,),  # noqa: E501
            'physical': (ItemPhysical,),  # noqa: E501
            'pricing': (ItemPricing,),  # noqa: E501
            'properties': ([ItemProperty],),  # noqa: E501
            'realtime_pricing': (ItemRealtimePricing,),  # noqa: E501
            'recommend_replenishment_days': (int,),  # noqa: E501
            'related': (ItemRelated,),  # noqa: E501
            'reporting': (ItemReporting,),  # noqa: E501
            'restriction': (ItemRestriction,),  # noqa: E501
            'revguard': (ItemRevguard,),  # noqa: E501
            'reviews': (ItemReviews,),  # noqa: E501
            'salesforce': (ItemSalesforce,),  # noqa: E501
            'shipping': (ItemShipping,),  # noqa: E501
            'tags': (ItemTags,),  # noqa: E501
            'tax': (ItemTax,),  # noqa: E501
            'third_party_email_marketing': ([ItemThirdPartyEmailMarketing],),  # noqa: E501
            'variant_items': ([ItemVariantItem],),  # noqa: E501
            'variations': ([ItemVariation],),  # noqa: E501
            'wishlist_member': (ItemWishlistMember,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'accounting': 'accounting',  # noqa: E501
        'amember': 'amember',  # noqa: E501
        'auto_order': 'auto_order',  # noqa: E501
        'ccbill': 'ccbill',  # noqa: E501
        'channel_partner_item_mappings': 'channel_partner_item_mappings',  # noqa: E501
        'chargeback': 'chargeback',  # noqa: E501
        'checkout': 'checkout',  # noqa: E501
        'content': 'content',  # noqa: E501
        'creation_dts': 'creation_dts',  # noqa: E501
        'description': 'description',  # noqa: E501
        'description_translated_text_instance_oid': 'description_translated_text_instance_oid',  # noqa: E501
        'digital_delivery': 'digital_delivery',  # noqa: E501
        'ebay': 'ebay',  # noqa: E501
        'email_notifications': 'email_notifications',  # noqa: E501
        'enrollment123': 'enrollment123',  # noqa: E501
        'fulfillment_addons': 'fulfillment_addons',  # noqa: E501
        'gift_certificate': 'gift_certificate',  # noqa: E501
        'google_product_search': 'google_product_search',  # noqa: E501
        'identifiers': 'identifiers',  # noqa: E501
        'inactive': 'inactive',  # noqa: E501
        'instant_payment_notifications': 'instant_payment_notifications',  # noqa: E501
        'internal': 'internal',  # noqa: E501
        'kit': 'kit',  # noqa: E501
        'kit_component_only': 'kit_component_only',  # noqa: E501
        'kit_definition': 'kit_definition',  # noqa: E501
        'last_modified_dts': 'last_modified_dts',  # noqa: E501
        'merchant_id': 'merchant_id',  # noqa: E501
        'merchant_item_id': 'merchant_item_id',  # noqa: E501
        'merchant_item_oid': 'merchant_item_oid',  # noqa: E501
        'options': 'options',  # noqa: E501
        'parent_category_id': 'parent_category_id',  # noqa: E501
        'parent_category_path': 'parent_category_path',  # noqa: E501
        'payment_processing': 'payment_processing',  # noqa: E501
        'physical': 'physical',  # noqa: E501
        'pricing': 'pricing',  # noqa: E501
        'properties': 'properties',  # noqa: E501
        'realtime_pricing': 'realtime_pricing',  # noqa: E501
        'recommend_replenishment_days': 'recommend_replenishment_days',  # noqa: E501
        'related': 'related',  # noqa: E501
        'reporting': 'reporting',  # noqa: E501
        'restriction': 'restriction',  # noqa: E501
        'revguard': 'revguard',  # noqa: E501
        'reviews': 'reviews',  # noqa: E501
        'salesforce': 'salesforce',  # noqa: E501
        'shipping': 'shipping',  # noqa: E501
        'tags': 'tags',  # noqa: E501
        'tax': 'tax',  # noqa: E501
        'third_party_email_marketing': 'third_party_email_marketing',  # noqa: E501
        'variant_items': 'variant_items',  # noqa: E501
        'variations': 'variations',  # noqa: E501
        'wishlist_member': 'wishlist_member',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """Item - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            accounting (ItemAccounting): [optional]  # noqa: E501
            amember (ItemAmember): [optional]  # noqa: E501
            auto_order (ItemAutoOrder): [optional]  # noqa: E501
            ccbill (ItemCCBill): [optional]  # noqa: E501
            channel_partner_item_mappings ([ItemChannelPartnerMapping]): Channel Partner Item Mapping. [optional]  # noqa: E501
            chargeback (ItemChargeback): [optional]  # noqa: E501
            checkout (ItemCheckout): [optional]  # noqa: E501
            content (ItemContent): [optional]  # noqa: E501
            creation_dts (str): Date/time of creation. [optional]  # noqa: E501
            description (str): Description of the item up to 500 characters.. [optional]  # noqa: E501
            description_translated_text_instance_oid (int): Description translated text instance id. [optional]  # noqa: E501
            digital_delivery (ItemDigitalDelivery): [optional]  # noqa: E501
            ebay (ItemEbay): [optional]  # noqa: E501
            email_notifications (ItemEmailNotifications): [optional]  # noqa: E501
            enrollment123 (ItemEnrollment123): [optional]  # noqa: E501
            fulfillment_addons ([ItemFulfillmentAddon]): Fulfillment Add-ons. [optional]  # noqa: E501
            gift_certificate (ItemGiftCertificate): [optional]  # noqa: E501
            google_product_search (ItemGoogleProductSearch): [optional]  # noqa: E501
            identifiers (ItemIdentifiers): [optional]  # noqa: E501
            inactive (bool): True if this item is inactive and can not be purchased. [optional]  # noqa: E501
            instant_payment_notifications (ItemInstantPaymentNotifications): [optional]  # noqa: E501
            internal (ItemInternal): [optional]  # noqa: E501
            kit (bool): True if this item is a kit. [optional]  # noqa: E501
            kit_component_only (bool): True if this item can only be usd as a kit component. [optional]  # noqa: E501
            kit_definition (ItemKitDefinition): [optional]  # noqa: E501
            last_modified_dts (str): Date/time of last modification. [optional]  # noqa: E501
            merchant_id (str): UltraCart merchant ID owning item. [optional]  # noqa: E501
            merchant_item_id (str): Unique item id assigned to this item. [optional]  # noqa: E501
            merchant_item_oid (int): Unique object identifier for this item. [optional]  # noqa: E501
            options ([ItemOption]): Options. [optional]  # noqa: E501
            parent_category_id (int): Parent category of the item.  Zero indicates the root folder.. [optional]  # noqa: E501
            parent_category_path (str): Parent category path.  / indicates the root folder.. [optional]  # noqa: E501
            payment_processing (ItemPaymentProcessing): [optional]  # noqa: E501
            physical (ItemPhysical): [optional]  # noqa: E501
            pricing (ItemPricing): [optional]  # noqa: E501
            properties ([ItemProperty]): Properties. [optional]  # noqa: E501
            realtime_pricing (ItemRealtimePricing): [optional]  # noqa: E501
            recommend_replenishment_days (int): Number of days to recommend replenishment after.  Null is not configured.  Set to zero to disable.. [optional]  # noqa: E501
            related (ItemRelated): [optional]  # noqa: E501
            reporting (ItemReporting): [optional]  # noqa: E501
            restriction (ItemRestriction): [optional]  # noqa: E501
            revguard (ItemRevguard): [optional]  # noqa: E501
            reviews (ItemReviews): [optional]  # noqa: E501
            salesforce (ItemSalesforce): [optional]  # noqa: E501
            shipping (ItemShipping): [optional]  # noqa: E501
            tags (ItemTags): [optional]  # noqa: E501
            tax (ItemTax): [optional]  # noqa: E501
            third_party_email_marketing ([ItemThirdPartyEmailMarketing]): 3rd Party Email Marketing. [optional]  # noqa: E501
            variant_items ([ItemVariantItem]): Variant Items. [optional]  # noqa: E501
            variations ([ItemVariation]): Variations. [optional]  # noqa: E501
            wishlist_member (ItemWishlistMember): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', True)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """Item - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            accounting (ItemAccounting): [optional]  # noqa: E501
            amember (ItemAmember): [optional]  # noqa: E501
            auto_order (ItemAutoOrder): [optional]  # noqa: E501
            ccbill (ItemCCBill): [optional]  # noqa: E501
            channel_partner_item_mappings ([ItemChannelPartnerMapping]): Channel Partner Item Mapping. [optional]  # noqa: E501
            chargeback (ItemChargeback): [optional]  # noqa: E501
            checkout (ItemCheckout): [optional]  # noqa: E501
            content (ItemContent): [optional]  # noqa: E501
            creation_dts (str): Date/time of creation. [optional]  # noqa: E501
            description (str): Description of the item up to 500 characters.. [optional]  # noqa: E501
            description_translated_text_instance_oid (int): Description translated text instance id. [optional]  # noqa: E501
            digital_delivery (ItemDigitalDelivery): [optional]  # noqa: E501
            ebay (ItemEbay): [optional]  # noqa: E501
            email_notifications (ItemEmailNotifications): [optional]  # noqa: E501
            enrollment123 (ItemEnrollment123): [optional]  # noqa: E501
            fulfillment_addons ([ItemFulfillmentAddon]): Fulfillment Add-ons. [optional]  # noqa: E501
            gift_certificate (ItemGiftCertificate): [optional]  # noqa: E501
            google_product_search (ItemGoogleProductSearch): [optional]  # noqa: E501
            identifiers (ItemIdentifiers): [optional]  # noqa: E501
            inactive (bool): True if this item is inactive and can not be purchased. [optional]  # noqa: E501
            instant_payment_notifications (ItemInstantPaymentNotifications): [optional]  # noqa: E501
            internal (ItemInternal): [optional]  # noqa: E501
            kit (bool): True if this item is a kit. [optional]  # noqa: E501
            kit_component_only (bool): True if this item can only be usd as a kit component. [optional]  # noqa: E501
            kit_definition (ItemKitDefinition): [optional]  # noqa: E501
            last_modified_dts (str): Date/time of last modification. [optional]  # noqa: E501
            merchant_id (str): UltraCart merchant ID owning item. [optional]  # noqa: E501
            merchant_item_id (str): Unique item id assigned to this item. [optional]  # noqa: E501
            merchant_item_oid (int): Unique object identifier for this item. [optional]  # noqa: E501
            options ([ItemOption]): Options. [optional]  # noqa: E501
            parent_category_id (int): Parent category of the item.  Zero indicates the root folder.. [optional]  # noqa: E501
            parent_category_path (str): Parent category path.  / indicates the root folder.. [optional]  # noqa: E501
            payment_processing (ItemPaymentProcessing): [optional]  # noqa: E501
            physical (ItemPhysical): [optional]  # noqa: E501
            pricing (ItemPricing): [optional]  # noqa: E501
            properties ([ItemProperty]): Properties. [optional]  # noqa: E501
            realtime_pricing (ItemRealtimePricing): [optional]  # noqa: E501
            recommend_replenishment_days (int): Number of days to recommend replenishment after.  Null is not configured.  Set to zero to disable.. [optional]  # noqa: E501
            related (ItemRelated): [optional]  # noqa: E501
            reporting (ItemReporting): [optional]  # noqa: E501
            restriction (ItemRestriction): [optional]  # noqa: E501
            revguard (ItemRevguard): [optional]  # noqa: E501
            reviews (ItemReviews): [optional]  # noqa: E501
            salesforce (ItemSalesforce): [optional]  # noqa: E501
            shipping (ItemShipping): [optional]  # noqa: E501
            tags (ItemTags): [optional]  # noqa: E501
            tax (ItemTax): [optional]  # noqa: E501
            third_party_email_marketing ([ItemThirdPartyEmailMarketing]): 3rd Party Email Marketing. [optional]  # noqa: E501
            variant_items ([ItemVariantItem]): Variant Items. [optional]  # noqa: E501
            variations ([ItemVariation]): Variations. [optional]  # noqa: E501
            wishlist_member (ItemWishlistMember): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
