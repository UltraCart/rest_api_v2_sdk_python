"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from ultracart.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from ultracart.exceptions import ApiAttributeError


def lazy_import():
    from ultracart.model.channel_partner_order_item import ChannelPartnerOrderItem
    from ultracart.model.channel_partner_order_transaction import ChannelPartnerOrderTransaction
    globals()['ChannelPartnerOrderItem'] = ChannelPartnerOrderItem
    globals()['ChannelPartnerOrderTransaction'] = ChannelPartnerOrderTransaction


class ChannelPartnerOrder(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('payment_method',): {
            'AFFIRM': "Affirm",
            'AMAZON': "Amazon",
            'CHECK': "Check",
            'COD': "COD",
            'CREDIT_CARD': "Credit Card",
            'LOANHERO': "LoanHero",
            'MONEY_ORDER': "Money Order",
            'PAYPAL': "PayPal",
            'PURCHASE_ORDER': "Purchase Order",
            'QUOTE_REQUEST': "Quote Request",
            'WIRE_TRANSFER': "Wire Transfer",
        },
    }

    validations = {
        ('billto_address1',): {
            'max_length': 50,
        },
        ('billto_address2',): {
            'max_length': 50,
        },
        ('billto_city',): {
            'max_length': 32,
        },
        ('billto_company',): {
            'max_length': 50,
        },
        ('billto_country_code',): {
            'max_length': 2,
        },
        ('billto_day_phone',): {
            'max_length': 25,
        },
        ('billto_evening_phone',): {
            'max_length': 25,
        },
        ('billto_first_name',): {
            'max_length': 30,
        },
        ('billto_last_name',): {
            'max_length': 30,
        },
        ('billto_postal_code',): {
            'max_length': 20,
        },
        ('billto_state_region',): {
            'max_length': 32,
        },
        ('billto_title',): {
            'max_length': 50,
        },
        ('cc_email',): {
            'max_length': 100,
        },
        ('custom_field1',): {
            'max_length': 50,
        },
        ('custom_field2',): {
            'max_length': 50,
        },
        ('custom_field3',): {
            'max_length': 50,
        },
        ('custom_field4',): {
            'max_length': 50,
        },
        ('custom_field5',): {
            'max_length': 75,
        },
        ('custom_field6',): {
            'max_length': 50,
        },
        ('custom_field7',): {
            'max_length': 50,
        },
        ('email',): {
            'max_length': 100,
        },
        ('gift_email',): {
            'max_length': 100,
        },
        ('gift_message',): {
            'max_length': 10000,
        },
        ('screen_branding_theme_code',): {
            'max_length': 10,
        },
        ('shipto_address1',): {
            'max_length': 50,
        },
        ('shipto_address2',): {
            'max_length': 50,
        },
        ('shipto_city',): {
            'max_length': 32,
        },
        ('shipto_company',): {
            'max_length': 50,
        },
        ('shipto_country_code',): {
            'max_length': 2,
        },
        ('shipto_day_phone',): {
            'max_length': 25,
        },
        ('shipto_evening_phone',): {
            'max_length': 25,
        },
        ('shipto_first_name',): {
            'max_length': 30,
        },
        ('shipto_last_name',): {
            'max_length': 30,
        },
        ('shipto_postal_code',): {
            'max_length': 20,
        },
        ('shipto_state_region',): {
            'max_length': 32,
        },
        ('shipto_title',): {
            'max_length': 50,
        },
        ('special_instructions',): {
            'max_length': 10000,
        },
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'advertising_source': (str,),  # noqa: E501
            'affiliate_id': (str,),  # noqa: E501
            'affiliate_sub_id': (str,),  # noqa: E501
            'arbitrary_shipping_handling_total': (float,),  # noqa: E501
            'arbitrary_tax': (float,),  # noqa: E501
            'arbitrary_tax_rate': (float,),  # noqa: E501
            'arbitrary_taxable_subtotal': (float,),  # noqa: E501
            'associate_with_customer_profile_if_present': (bool,),  # noqa: E501
            'auto_approve_purchase_order': (bool,),  # noqa: E501
            'billto_address1': (str,),  # noqa: E501
            'billto_address2': (str,),  # noqa: E501
            'billto_city': (str,),  # noqa: E501
            'billto_company': (str,),  # noqa: E501
            'billto_country_code': (str,),  # noqa: E501
            'billto_day_phone': (str,),  # noqa: E501
            'billto_evening_phone': (str,),  # noqa: E501
            'billto_first_name': (str,),  # noqa: E501
            'billto_last_name': (str,),  # noqa: E501
            'billto_postal_code': (str,),  # noqa: E501
            'billto_state_region': (str,),  # noqa: E501
            'billto_title': (str,),  # noqa: E501
            'cc_email': (str,),  # noqa: E501
            'channel_partner_order_id': (str,),  # noqa: E501
            'consider_recurring': (bool,),  # noqa: E501
            'coupons': ([str],),  # noqa: E501
            'credit_card_authorization_amount': (float,),  # noqa: E501
            'credit_card_authorization_dts': (str,),  # noqa: E501
            'credit_card_authorization_number': (str,),  # noqa: E501
            'credit_card_expiration_month': (int,),  # noqa: E501
            'credit_card_expiration_year': (int,),  # noqa: E501
            'credit_card_type': (str,),  # noqa: E501
            'custom_field1': (str,),  # noqa: E501
            'custom_field2': (str,),  # noqa: E501
            'custom_field3': (str,),  # noqa: E501
            'custom_field4': (str,),  # noqa: E501
            'custom_field5': (str,),  # noqa: E501
            'custom_field6': (str,),  # noqa: E501
            'custom_field7': (str,),  # noqa: E501
            'delivery_date': (str,),  # noqa: E501
            'email': (str,),  # noqa: E501
            'gift': (bool,),  # noqa: E501
            'gift_email': (str,),  # noqa: E501
            'gift_message': (str,),  # noqa: E501
            'hosted_fields_card_token': (str,),  # noqa: E501
            'hosted_fields_cvv_token': (str,),  # noqa: E501
            'insurance_application_id': (str,),  # noqa: E501
            'insurance_claim_id': (str,),  # noqa: E501
            'ip_address': (str,),  # noqa: E501
            'items': ([ChannelPartnerOrderItem],),  # noqa: E501
            'least_cost_route': (bool,),  # noqa: E501
            'least_cost_route_shipping_methods': ([str],),  # noqa: E501
            'mailing_list_opt_in': (bool,),  # noqa: E501
            'no_realtime_payment_processing': (bool,),  # noqa: E501
            'payment_method': (str,),  # noqa: E501
            'purchase_order_number': (str,),  # noqa: E501
            'rotating_transaction_gateway_code': (str,),  # noqa: E501
            'screen_branding_theme_code': (str,),  # noqa: E501
            'ship_on_date': (str,),  # noqa: E501
            'ship_to_residential': (bool,),  # noqa: E501
            'shipping_method': (str,),  # noqa: E501
            'shipto_address1': (str,),  # noqa: E501
            'shipto_address2': (str,),  # noqa: E501
            'shipto_city': (str,),  # noqa: E501
            'shipto_company': (str,),  # noqa: E501
            'shipto_country_code': (str,),  # noqa: E501
            'shipto_day_phone': (str,),  # noqa: E501
            'shipto_evening_phone': (str,),  # noqa: E501
            'shipto_first_name': (str,),  # noqa: E501
            'shipto_last_name': (str,),  # noqa: E501
            'shipto_postal_code': (str,),  # noqa: E501
            'shipto_state_region': (str,),  # noqa: E501
            'shipto_title': (str,),  # noqa: E501
            'skip_payment_processing': (bool,),  # noqa: E501
            'special_instructions': (str,),  # noqa: E501
            'store_completed': (bool,),  # noqa: E501
            'store_if_payment_declines': (bool,),  # noqa: E501
            'tax_county': (str,),  # noqa: E501
            'tax_exempt': (bool,),  # noqa: E501
            'transaction': (ChannelPartnerOrderTransaction,),  # noqa: E501
            'treat_warnings_as_errors': (bool,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'advertising_source': 'advertisingSource',  # noqa: E501
        'affiliate_id': 'affiliate_id',  # noqa: E501
        'affiliate_sub_id': 'affiliate_sub_id',  # noqa: E501
        'arbitrary_shipping_handling_total': 'arbitrary_shipping_handling_total',  # noqa: E501
        'arbitrary_tax': 'arbitrary_tax',  # noqa: E501
        'arbitrary_tax_rate': 'arbitrary_tax_rate',  # noqa: E501
        'arbitrary_taxable_subtotal': 'arbitrary_taxable_subtotal',  # noqa: E501
        'associate_with_customer_profile_if_present': 'associate_with_customer_profile_if_present',  # noqa: E501
        'auto_approve_purchase_order': 'auto_approve_purchase_order',  # noqa: E501
        'billto_address1': 'billto_address1',  # noqa: E501
        'billto_address2': 'billto_address2',  # noqa: E501
        'billto_city': 'billto_city',  # noqa: E501
        'billto_company': 'billto_company',  # noqa: E501
        'billto_country_code': 'billto_country_code',  # noqa: E501
        'billto_day_phone': 'billto_day_phone',  # noqa: E501
        'billto_evening_phone': 'billto_evening_phone',  # noqa: E501
        'billto_first_name': 'billto_first_name',  # noqa: E501
        'billto_last_name': 'billto_last_name',  # noqa: E501
        'billto_postal_code': 'billto_postal_code',  # noqa: E501
        'billto_state_region': 'billto_state_region',  # noqa: E501
        'billto_title': 'billto_title',  # noqa: E501
        'cc_email': 'cc_email',  # noqa: E501
        'channel_partner_order_id': 'channel_partner_order_id',  # noqa: E501
        'consider_recurring': 'consider_recurring',  # noqa: E501
        'coupons': 'coupons',  # noqa: E501
        'credit_card_authorization_amount': 'credit_card_authorization_amount',  # noqa: E501
        'credit_card_authorization_dts': 'credit_card_authorization_dts',  # noqa: E501
        'credit_card_authorization_number': 'credit_card_authorization_number',  # noqa: E501
        'credit_card_expiration_month': 'credit_card_expiration_month',  # noqa: E501
        'credit_card_expiration_year': 'credit_card_expiration_year',  # noqa: E501
        'credit_card_type': 'credit_card_type',  # noqa: E501
        'custom_field1': 'custom_field1',  # noqa: E501
        'custom_field2': 'custom_field2',  # noqa: E501
        'custom_field3': 'custom_field3',  # noqa: E501
        'custom_field4': 'custom_field4',  # noqa: E501
        'custom_field5': 'custom_field5',  # noqa: E501
        'custom_field6': 'custom_field6',  # noqa: E501
        'custom_field7': 'custom_field7',  # noqa: E501
        'delivery_date': 'delivery_date',  # noqa: E501
        'email': 'email',  # noqa: E501
        'gift': 'gift',  # noqa: E501
        'gift_email': 'gift_email',  # noqa: E501
        'gift_message': 'gift_message',  # noqa: E501
        'hosted_fields_card_token': 'hosted_fields_card_token',  # noqa: E501
        'hosted_fields_cvv_token': 'hosted_fields_cvv_token',  # noqa: E501
        'insurance_application_id': 'insurance_application_id',  # noqa: E501
        'insurance_claim_id': 'insurance_claim_id',  # noqa: E501
        'ip_address': 'ip_address',  # noqa: E501
        'items': 'items',  # noqa: E501
        'least_cost_route': 'least_cost_route',  # noqa: E501
        'least_cost_route_shipping_methods': 'least_cost_route_shipping_methods',  # noqa: E501
        'mailing_list_opt_in': 'mailing_list_opt_in',  # noqa: E501
        'no_realtime_payment_processing': 'no_realtime_payment_processing',  # noqa: E501
        'payment_method': 'payment_method',  # noqa: E501
        'purchase_order_number': 'purchase_order_number',  # noqa: E501
        'rotating_transaction_gateway_code': 'rotating_transaction_gateway_code',  # noqa: E501
        'screen_branding_theme_code': 'screen_branding_theme_code',  # noqa: E501
        'ship_on_date': 'ship_on_date',  # noqa: E501
        'ship_to_residential': 'ship_to_residential',  # noqa: E501
        'shipping_method': 'shipping_method',  # noqa: E501
        'shipto_address1': 'shipto_address1',  # noqa: E501
        'shipto_address2': 'shipto_address2',  # noqa: E501
        'shipto_city': 'shipto_city',  # noqa: E501
        'shipto_company': 'shipto_company',  # noqa: E501
        'shipto_country_code': 'shipto_country_code',  # noqa: E501
        'shipto_day_phone': 'shipto_day_phone',  # noqa: E501
        'shipto_evening_phone': 'shipto_evening_phone',  # noqa: E501
        'shipto_first_name': 'shipto_first_name',  # noqa: E501
        'shipto_last_name': 'shipto_last_name',  # noqa: E501
        'shipto_postal_code': 'shipto_postal_code',  # noqa: E501
        'shipto_state_region': 'shipto_state_region',  # noqa: E501
        'shipto_title': 'shipto_title',  # noqa: E501
        'skip_payment_processing': 'skip_payment_processing',  # noqa: E501
        'special_instructions': 'special_instructions',  # noqa: E501
        'store_completed': 'store_completed',  # noqa: E501
        'store_if_payment_declines': 'store_if_payment_declines',  # noqa: E501
        'tax_county': 'tax_county',  # noqa: E501
        'tax_exempt': 'tax_exempt',  # noqa: E501
        'transaction': 'transaction',  # noqa: E501
        'treat_warnings_as_errors': 'treat_warnings_as_errors',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """ChannelPartnerOrder - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            advertising_source (str): advertising_source. [optional]  # noqa: E501
            affiliate_id (str): Affiliate Id. [optional]  # noqa: E501
            affiliate_sub_id (str): Affiliate Sub Id. [optional]  # noqa: E501
            arbitrary_shipping_handling_total (float): Arbitrary shipping handling total. [optional]  # noqa: E501
            arbitrary_tax (float): Arbitrary tax for overriding calculated taxes. [optional]  # noqa: E501
            arbitrary_tax_rate (float): Arbitrary tax rate. [optional]  # noqa: E501
            arbitrary_taxable_subtotal (float): Arbitrary taxable subtotal. [optional]  # noqa: E501
            associate_with_customer_profile_if_present (bool): If true any matching customer profile based on email is associated with this order. [optional]  # noqa: E501
            auto_approve_purchase_order (bool): If true any purchase orders are automatically approved. [optional]  # noqa: E501
            billto_address1 (str): Billing Address line 1. [optional]  # noqa: E501
            billto_address2 (str): Billing Address line 2. [optional]  # noqa: E501
            billto_city (str): Billing City. [optional]  # noqa: E501
            billto_company (str): Billing Company. [optional]  # noqa: E501
            billto_country_code (str): Billing ISO-3166 two letter country code. [optional]  # noqa: E501
            billto_day_phone (str): Billing Day phone. [optional]  # noqa: E501
            billto_evening_phone (str): Billing Evening phone. [optional]  # noqa: E501
            billto_first_name (str): Billing First name. [optional]  # noqa: E501
            billto_last_name (str): Billing Last name. [optional]  # noqa: E501
            billto_postal_code (str): Billing Postal code. [optional]  # noqa: E501
            billto_state_region (str): Billing State for United States otherwise region or province for other countries. [optional]  # noqa: E501
            billto_title (str): Billing Title. [optional]  # noqa: E501
            cc_email (str): CC email.. [optional]  # noqa: E501
            channel_partner_order_id (str): The id for this order within the channel partner system.. [optional]  # noqa: E501
            consider_recurring (bool): If true this order is marked as an auto order (recurring). [optional]  # noqa: E501
            coupons ([str]): Array of coupon codes. [optional]  # noqa: E501
            credit_card_authorization_amount (float): The amount authorized externally. [optional]  # noqa: E501
            credit_card_authorization_dts (str): Date/Time of credit card authorization in ISO8601 format. [optional]  # noqa: E501
            credit_card_authorization_number (str): The reference number provided by an externally processed transaction. [optional]  # noqa: E501
            credit_card_expiration_month (int): Credit card expiration month. [optional]  # noqa: E501
            credit_card_expiration_year (int): Credit card expiration year. [optional]  # noqa: E501
            credit_card_type (str): Credit card type. [optional]  # noqa: E501
            custom_field1 (str): Custom field 1. [optional]  # noqa: E501
            custom_field2 (str): Custom field 2. [optional]  # noqa: E501
            custom_field3 (str): Custom field 3. [optional]  # noqa: E501
            custom_field4 (str): Custom field 4. [optional]  # noqa: E501
            custom_field5 (str): Custom field 5. [optional]  # noqa: E501
            custom_field6 (str): Custom field 6. [optional]  # noqa: E501
            custom_field7 (str): Custom field 7. [optional]  # noqa: E501
            delivery_date (str): Date the customer is requesting delivery on. Typically used for perishable product delivery.. [optional]  # noqa: E501
            email (str): Email. [optional]  # noqa: E501
            gift (bool): True if this order is a gift. [optional]  # noqa: E501
            gift_email (str): Email address of the gift recipient. [optional]  # noqa: E501
            gift_message (str): Message to the gift recipient. [optional]  # noqa: E501
            hosted_fields_card_token (str): The token provided by UltraCart hosted fields when a credit card number is uploaded into the system.  This is the only way to provide a credit card number.. [optional]  # noqa: E501
            hosted_fields_cvv_token (str): The token provided by UltraCart hosted fields when a credit card cvv is uploaded into the system.  This is the only way to provide a cvv number.. [optional]  # noqa: E501
            insurance_application_id (str): Insurance application id. [optional]  # noqa: E501
            insurance_claim_id (str): Insurance claim id. [optional]  # noqa: E501
            ip_address (str): IP Address of the customer. [optional]  # noqa: E501
            items ([ChannelPartnerOrderItem]): Items. [optional]  # noqa: E501
            least_cost_route (bool): If true the least expensive shipping method is automatically chosen during the order import. [optional]  # noqa: E501
            least_cost_route_shipping_methods ([str]): An optional array of shipping methods to restict choices if least_cost_route is true. [optional]  # noqa: E501
            mailing_list_opt_in (bool): If true the customer is subscribed to any configured mailing lists. [optional]  # noqa: E501
            no_realtime_payment_processing (bool): If true no payment processing is done and the order is placed into Accounts Receivable. [optional]  # noqa: E501
            payment_method (str): Payment method. [optional]  # noqa: E501
            purchase_order_number (str): Purchase order number. [optional]  # noqa: E501
            rotating_transaction_gateway_code (str): The rotating transaction gateway code for the gateway used to charge this order. [optional]  # noqa: E501
            screen_branding_theme_code (str): Screen branding theme code. [optional]  # noqa: E501
            ship_on_date (str): Date the customer is requesting that the order ship on.  Typically used for perishable product delivery.. [optional]  # noqa: E501
            ship_to_residential (bool): True if the shipping adress is residential.  Effects the methods that are available to the customer as well as the price of the shipping method.. [optional]  # noqa: E501
            shipping_method (str): Shipping method. [optional]  # noqa: E501
            shipto_address1 (str): Shipping Address line 1. [optional]  # noqa: E501
            shipto_address2 (str): Shipping Address line 2. [optional]  # noqa: E501
            shipto_city (str): Shipping City. [optional]  # noqa: E501
            shipto_company (str): Shipping Company. [optional]  # noqa: E501
            shipto_country_code (str): Shipping ISO-3166 two letter country code. [optional]  # noqa: E501
            shipto_day_phone (str): Shipping Day phone. [optional]  # noqa: E501
            shipto_evening_phone (str): Shipping Evening phone. [optional]  # noqa: E501
            shipto_first_name (str): Shipping First name. [optional]  # noqa: E501
            shipto_last_name (str): Shipping Last name. [optional]  # noqa: E501
            shipto_postal_code (str): Shipping Postal code. [optional]  # noqa: E501
            shipto_state_region (str): Shipping State for United States otherwise region or province for other countries. [optional]  # noqa: E501
            shipto_title (str): Shipping Title. [optional]  # noqa: E501
            skip_payment_processing (bool): If true the order is placed directly into the shipping department. [optional]  # noqa: E501
            special_instructions (str): Special instructions from the customer regarding shipping. [optional]  # noqa: E501
            store_completed (bool): If true the order bypasses shipping and is marked completed. [optional]  # noqa: E501
            store_if_payment_declines (bool): If true any failed payments are placed into Accounts Receivable.  If false any failed payments result in a rejected order resulting in errors thrown during the insert routine. [optional]  # noqa: E501
            tax_county (str): The optional shipping county used to determine exact taxes. [optional]  # noqa: E501
            tax_exempt (bool): If true this order is marked as being tax exempt. [optional]  # noqa: E501
            transaction (ChannelPartnerOrderTransaction): [optional]  # noqa: E501
            treat_warnings_as_errors (bool): If true all warnings are considered errors, this is true by default. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', True)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """ChannelPartnerOrder - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            advertising_source (str): advertising_source. [optional]  # noqa: E501
            affiliate_id (str): Affiliate Id. [optional]  # noqa: E501
            affiliate_sub_id (str): Affiliate Sub Id. [optional]  # noqa: E501
            arbitrary_shipping_handling_total (float): Arbitrary shipping handling total. [optional]  # noqa: E501
            arbitrary_tax (float): Arbitrary tax for overriding calculated taxes. [optional]  # noqa: E501
            arbitrary_tax_rate (float): Arbitrary tax rate. [optional]  # noqa: E501
            arbitrary_taxable_subtotal (float): Arbitrary taxable subtotal. [optional]  # noqa: E501
            associate_with_customer_profile_if_present (bool): If true any matching customer profile based on email is associated with this order. [optional]  # noqa: E501
            auto_approve_purchase_order (bool): If true any purchase orders are automatically approved. [optional]  # noqa: E501
            billto_address1 (str): Billing Address line 1. [optional]  # noqa: E501
            billto_address2 (str): Billing Address line 2. [optional]  # noqa: E501
            billto_city (str): Billing City. [optional]  # noqa: E501
            billto_company (str): Billing Company. [optional]  # noqa: E501
            billto_country_code (str): Billing ISO-3166 two letter country code. [optional]  # noqa: E501
            billto_day_phone (str): Billing Day phone. [optional]  # noqa: E501
            billto_evening_phone (str): Billing Evening phone. [optional]  # noqa: E501
            billto_first_name (str): Billing First name. [optional]  # noqa: E501
            billto_last_name (str): Billing Last name. [optional]  # noqa: E501
            billto_postal_code (str): Billing Postal code. [optional]  # noqa: E501
            billto_state_region (str): Billing State for United States otherwise region or province for other countries. [optional]  # noqa: E501
            billto_title (str): Billing Title. [optional]  # noqa: E501
            cc_email (str): CC email.. [optional]  # noqa: E501
            channel_partner_order_id (str): The id for this order within the channel partner system.. [optional]  # noqa: E501
            consider_recurring (bool): If true this order is marked as an auto order (recurring). [optional]  # noqa: E501
            coupons ([str]): Array of coupon codes. [optional]  # noqa: E501
            credit_card_authorization_amount (float): The amount authorized externally. [optional]  # noqa: E501
            credit_card_authorization_dts (str): Date/Time of credit card authorization in ISO8601 format. [optional]  # noqa: E501
            credit_card_authorization_number (str): The reference number provided by an externally processed transaction. [optional]  # noqa: E501
            credit_card_expiration_month (int): Credit card expiration month. [optional]  # noqa: E501
            credit_card_expiration_year (int): Credit card expiration year. [optional]  # noqa: E501
            credit_card_type (str): Credit card type. [optional]  # noqa: E501
            custom_field1 (str): Custom field 1. [optional]  # noqa: E501
            custom_field2 (str): Custom field 2. [optional]  # noqa: E501
            custom_field3 (str): Custom field 3. [optional]  # noqa: E501
            custom_field4 (str): Custom field 4. [optional]  # noqa: E501
            custom_field5 (str): Custom field 5. [optional]  # noqa: E501
            custom_field6 (str): Custom field 6. [optional]  # noqa: E501
            custom_field7 (str): Custom field 7. [optional]  # noqa: E501
            delivery_date (str): Date the customer is requesting delivery on. Typically used for perishable product delivery.. [optional]  # noqa: E501
            email (str): Email. [optional]  # noqa: E501
            gift (bool): True if this order is a gift. [optional]  # noqa: E501
            gift_email (str): Email address of the gift recipient. [optional]  # noqa: E501
            gift_message (str): Message to the gift recipient. [optional]  # noqa: E501
            hosted_fields_card_token (str): The token provided by UltraCart hosted fields when a credit card number is uploaded into the system.  This is the only way to provide a credit card number.. [optional]  # noqa: E501
            hosted_fields_cvv_token (str): The token provided by UltraCart hosted fields when a credit card cvv is uploaded into the system.  This is the only way to provide a cvv number.. [optional]  # noqa: E501
            insurance_application_id (str): Insurance application id. [optional]  # noqa: E501
            insurance_claim_id (str): Insurance claim id. [optional]  # noqa: E501
            ip_address (str): IP Address of the customer. [optional]  # noqa: E501
            items ([ChannelPartnerOrderItem]): Items. [optional]  # noqa: E501
            least_cost_route (bool): If true the least expensive shipping method is automatically chosen during the order import. [optional]  # noqa: E501
            least_cost_route_shipping_methods ([str]): An optional array of shipping methods to restict choices if least_cost_route is true. [optional]  # noqa: E501
            mailing_list_opt_in (bool): If true the customer is subscribed to any configured mailing lists. [optional]  # noqa: E501
            no_realtime_payment_processing (bool): If true no payment processing is done and the order is placed into Accounts Receivable. [optional]  # noqa: E501
            payment_method (str): Payment method. [optional]  # noqa: E501
            purchase_order_number (str): Purchase order number. [optional]  # noqa: E501
            rotating_transaction_gateway_code (str): The rotating transaction gateway code for the gateway used to charge this order. [optional]  # noqa: E501
            screen_branding_theme_code (str): Screen branding theme code. [optional]  # noqa: E501
            ship_on_date (str): Date the customer is requesting that the order ship on.  Typically used for perishable product delivery.. [optional]  # noqa: E501
            ship_to_residential (bool): True if the shipping adress is residential.  Effects the methods that are available to the customer as well as the price of the shipping method.. [optional]  # noqa: E501
            shipping_method (str): Shipping method. [optional]  # noqa: E501
            shipto_address1 (str): Shipping Address line 1. [optional]  # noqa: E501
            shipto_address2 (str): Shipping Address line 2. [optional]  # noqa: E501
            shipto_city (str): Shipping City. [optional]  # noqa: E501
            shipto_company (str): Shipping Company. [optional]  # noqa: E501
            shipto_country_code (str): Shipping ISO-3166 two letter country code. [optional]  # noqa: E501
            shipto_day_phone (str): Shipping Day phone. [optional]  # noqa: E501
            shipto_evening_phone (str): Shipping Evening phone. [optional]  # noqa: E501
            shipto_first_name (str): Shipping First name. [optional]  # noqa: E501
            shipto_last_name (str): Shipping Last name. [optional]  # noqa: E501
            shipto_postal_code (str): Shipping Postal code. [optional]  # noqa: E501
            shipto_state_region (str): Shipping State for United States otherwise region or province for other countries. [optional]  # noqa: E501
            shipto_title (str): Shipping Title. [optional]  # noqa: E501
            skip_payment_processing (bool): If true the order is placed directly into the shipping department. [optional]  # noqa: E501
            special_instructions (str): Special instructions from the customer regarding shipping. [optional]  # noqa: E501
            store_completed (bool): If true the order bypasses shipping and is marked completed. [optional]  # noqa: E501
            store_if_payment_declines (bool): If true any failed payments are placed into Accounts Receivable.  If false any failed payments result in a rejected order resulting in errors thrown during the insert routine. [optional]  # noqa: E501
            tax_county (str): The optional shipping county used to determine exact taxes. [optional]  # noqa: E501
            tax_exempt (bool): If true this order is marked as being tax exempt. [optional]  # noqa: E501
            transaction (ChannelPartnerOrderTransaction): [optional]  # noqa: E501
            treat_warnings_as_errors (bool): If true all warnings are considered errors, this is true by default. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
