"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from ultracart.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from ultracart.exceptions import ApiAttributeError


def lazy_import():
    from ultracart.model.auto_order_item import AutoOrderItem
    from ultracart.model.auto_order_log import AutoOrderLog
    from ultracart.model.auto_order_management import AutoOrderManagement
    from ultracart.model.order import Order
    globals()['AutoOrderItem'] = AutoOrderItem
    globals()['AutoOrderLog'] = AutoOrderLog
    globals()['AutoOrderManagement'] = AutoOrderManagement
    globals()['Order'] = Order


class AutoOrder(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('status',): {
            'ACTIVE': "active",
            'CANCELED': "canceled",
            'DISABLED': "disabled",
        },
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'auto_order_code': (str,),  # noqa: E501
            'auto_order_oid': (int,),  # noqa: E501
            'cancel_after_next_x_orders': (int,),  # noqa: E501
            'cancel_downgrade': (bool,),  # noqa: E501
            'cancel_reason': (str,),  # noqa: E501
            'cancel_upgrade': (bool,),  # noqa: E501
            'canceled_by_user': (str,),  # noqa: E501
            'canceled_dts': (str,),  # noqa: E501
            'completed': (bool,),  # noqa: E501
            'credit_card_attempt': (int,),  # noqa: E501
            'disabled_dts': (str,),  # noqa: E501
            'enabled': (bool,),  # noqa: E501
            'failure_reason': (str,),  # noqa: E501
            'items': ([AutoOrderItem],),  # noqa: E501
            'logs': ([AutoOrderLog],),  # noqa: E501
            'management': (AutoOrderManagement,),  # noqa: E501
            'next_attempt': (str,),  # noqa: E501
            'original_order': (Order,),  # noqa: E501
            'original_order_id': (str,),  # noqa: E501
            'override_affiliate_id': (int,),  # noqa: E501
            'rebill_orders': ([Order],),  # noqa: E501
            'rotating_transaction_gateway_code': (str,),  # noqa: E501
            'status': (str,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'auto_order_code': 'auto_order_code',  # noqa: E501
        'auto_order_oid': 'auto_order_oid',  # noqa: E501
        'cancel_after_next_x_orders': 'cancel_after_next_x_orders',  # noqa: E501
        'cancel_downgrade': 'cancel_downgrade',  # noqa: E501
        'cancel_reason': 'cancel_reason',  # noqa: E501
        'cancel_upgrade': 'cancel_upgrade',  # noqa: E501
        'canceled_by_user': 'canceled_by_user',  # noqa: E501
        'canceled_dts': 'canceled_dts',  # noqa: E501
        'completed': 'completed',  # noqa: E501
        'credit_card_attempt': 'credit_card_attempt',  # noqa: E501
        'disabled_dts': 'disabled_dts',  # noqa: E501
        'enabled': 'enabled',  # noqa: E501
        'failure_reason': 'failure_reason',  # noqa: E501
        'items': 'items',  # noqa: E501
        'logs': 'logs',  # noqa: E501
        'management': 'management',  # noqa: E501
        'next_attempt': 'next_attempt',  # noqa: E501
        'original_order': 'original_order',  # noqa: E501
        'original_order_id': 'original_order_id',  # noqa: E501
        'override_affiliate_id': 'override_affiliate_id',  # noqa: E501
        'rebill_orders': 'rebill_orders',  # noqa: E501
        'rotating_transaction_gateway_code': 'rotating_transaction_gateway_code',  # noqa: E501
        'status': 'status',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """AutoOrder - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            auto_order_code (str): Unique code assigned to this auto order. [optional]  # noqa: E501
            auto_order_oid (int): Auto order object identifier. [optional]  # noqa: E501
            cancel_after_next_x_orders (int): Cancel this auto order after X additional rebills. [optional]  # noqa: E501
            cancel_downgrade (bool): True if the auto order was canceled because the customer purchased a downgrade item. [optional]  # noqa: E501
            cancel_reason (str): The reason this auto order was canceled by either merchant or customer. [optional]  # noqa: E501
            cancel_upgrade (bool): True if the auto order was canceled because the customer purchased an upgrade item. [optional]  # noqa: E501
            canceled_by_user (str): The user that canceled the auto order. [optional]  # noqa: E501
            canceled_dts (str): The date/time that the auto order was canceled. [optional]  # noqa: E501
            completed (bool): True if the auto order ran successfully to completion. [optional]  # noqa: E501
            credit_card_attempt (int): The number of credit card attempts that have taken place. [optional]  # noqa: E501
            disabled_dts (str): The date/time the auto order was disabled due to failed rebills. [optional]  # noqa: E501
            enabled (bool): True if this auto order is enabled. [optional]  # noqa: E501
            failure_reason (str): The reason this auto order failed during the last rebill attempt. [optional]  # noqa: E501
            items ([AutoOrderItem]): The items that are setup to rebill. [optional]  # noqa: E501
            logs ([AutoOrderLog]): Logs associated with this auto order. [optional]  # noqa: E501
            management (AutoOrderManagement): [optional]  # noqa: E501
            next_attempt (str): The next time that the auto order will be attempted for processing. [optional]  # noqa: E501
            original_order (Order): [optional]  # noqa: E501
            original_order_id (str): The original order id that this auto order is associated with.. [optional]  # noqa: E501
            override_affiliate_id (int): Override the affiliate id given credit for rebills of this auto order. [optional]  # noqa: E501
            rebill_orders ([Order]): Rebill orders that have taken place on this auto order. [optional]  # noqa: E501
            rotating_transaction_gateway_code (str): The RTG code associated with this order for future rebills. [optional]  # noqa: E501
            status (str): The status of the auto order. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', True)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """AutoOrder - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            auto_order_code (str): Unique code assigned to this auto order. [optional]  # noqa: E501
            auto_order_oid (int): Auto order object identifier. [optional]  # noqa: E501
            cancel_after_next_x_orders (int): Cancel this auto order after X additional rebills. [optional]  # noqa: E501
            cancel_downgrade (bool): True if the auto order was canceled because the customer purchased a downgrade item. [optional]  # noqa: E501
            cancel_reason (str): The reason this auto order was canceled by either merchant or customer. [optional]  # noqa: E501
            cancel_upgrade (bool): True if the auto order was canceled because the customer purchased an upgrade item. [optional]  # noqa: E501
            canceled_by_user (str): The user that canceled the auto order. [optional]  # noqa: E501
            canceled_dts (str): The date/time that the auto order was canceled. [optional]  # noqa: E501
            completed (bool): True if the auto order ran successfully to completion. [optional]  # noqa: E501
            credit_card_attempt (int): The number of credit card attempts that have taken place. [optional]  # noqa: E501
            disabled_dts (str): The date/time the auto order was disabled due to failed rebills. [optional]  # noqa: E501
            enabled (bool): True if this auto order is enabled. [optional]  # noqa: E501
            failure_reason (str): The reason this auto order failed during the last rebill attempt. [optional]  # noqa: E501
            items ([AutoOrderItem]): The items that are setup to rebill. [optional]  # noqa: E501
            logs ([AutoOrderLog]): Logs associated with this auto order. [optional]  # noqa: E501
            management (AutoOrderManagement): [optional]  # noqa: E501
            next_attempt (str): The next time that the auto order will be attempted for processing. [optional]  # noqa: E501
            original_order (Order): [optional]  # noqa: E501
            original_order_id (str): The original order id that this auto order is associated with.. [optional]  # noqa: E501
            override_affiliate_id (int): Override the affiliate id given credit for rebills of this auto order. [optional]  # noqa: E501
            rebill_orders ([Order]): Rebill orders that have taken place on this auto order. [optional]  # noqa: E501
            rotating_transaction_gateway_code (str): The RTG code associated with this order for future rebills. [optional]  # noqa: E501
            status (str): The status of the auto order. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
