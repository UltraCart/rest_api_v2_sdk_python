"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from ultracart.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from ultracart.exceptions import ApiAttributeError


def lazy_import():
    from ultracart.model.geo_point import GeoPoint
    from ultracart.model.screen_recording_ad_platform import ScreenRecordingAdPlatform
    from ultracart.model.screen_recording_page_view import ScreenRecordingPageView
    from ultracart.model.screen_recording_store_front import ScreenRecordingStoreFront
    from ultracart.model.screen_recording_user_agent import ScreenRecordingUserAgent
    from ultracart.model.screen_recording_user_property import ScreenRecordingUserProperty
    globals()['GeoPoint'] = GeoPoint
    globals()['ScreenRecordingAdPlatform'] = ScreenRecordingAdPlatform
    globals()['ScreenRecordingPageView'] = ScreenRecordingPageView
    globals()['ScreenRecordingStoreFront'] = ScreenRecordingStoreFront
    globals()['ScreenRecordingUserAgent'] = ScreenRecordingUserAgent
    globals()['ScreenRecordingUserProperty'] = ScreenRecordingUserProperty


class ScreenRecording(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'ad_platform': (ScreenRecordingAdPlatform,),  # noqa: E501
            'analytics_client_oid': (int,),  # noqa: E501
            'analytics_session_dts': (int,),  # noqa: E501
            'analytics_session_oid': (int,),  # noqa: E501
            'communications_campaign_name': (str,),  # noqa: E501
            'communications_campaign_uuid': (str,),  # noqa: E501
            'communications_email_subject': (str,),  # noqa: E501
            'communications_email_uuid': (str,),  # noqa: E501
            'communications_flow_name': (str,),  # noqa: E501
            'communications_flow_uuid': (str,),  # noqa: E501
            'email': (str,),  # noqa: E501
            'email_domain': (str,),  # noqa: E501
            'end_timestamp': (str,),  # noqa: E501
            'esp_customer_uuid': (str,),  # noqa: E501
            'events_gz_size': (int,),  # noqa: E501
            'events_json_key': (str,),  # noqa: E501
            'favorite': (bool,),  # noqa: E501
            'favorites': ([int],),  # noqa: E501
            'geolocation': (GeoPoint,),  # noqa: E501
            'geolocation_country': (str,),  # noqa: E501
            'geolocation_state': (str,),  # noqa: E501
            'language_iso_code': (str,),  # noqa: E501
            'merchant_id': (str,),  # noqa: E501
            'merchant_notes': (str,),  # noqa: E501
            'missing_external_tracking': (bool,),  # noqa: E501
            'order_id': (str,),  # noqa: E501
            'page_view_count': (int,),  # noqa: E501
            'page_views': ([ScreenRecordingPageView],),  # noqa: E501
            'preferred_language': (str,),  # noqa: E501
            'referrer_domain': (str,),  # noqa: E501
            'rrweb_version': (str,),  # noqa: E501
            'screen_recording_uuid': (str,),  # noqa: E501
            'signed_download_url': (str,),  # noqa: E501
            'start_timestamp': (str,),  # noqa: E501
            'storefront_oids': ([int],),  # noqa: E501
            'storefronts': ([ScreenRecordingStoreFront],),  # noqa: E501
            'tags': ([str],),  # noqa: E501
            'time_on_site': (int,),  # noqa: E501
            'ucacid': (str,),  # noqa: E501
            'user_agent': (ScreenRecordingUserAgent,),  # noqa: E501
            'user_agent_raw': (str,),  # noqa: E501
            'user_ip': (str,),  # noqa: E501
            'user_properties': ([ScreenRecordingUserProperty],),  # noqa: E501
            'utm_campaign': (str,),  # noqa: E501
            'utm_source': (str,),  # noqa: E501
            'visitor_first_seen': (str,),  # noqa: E501
            'visitor_number': (int,),  # noqa: E501
            'watched': (bool,),  # noqa: E501
            'window_height': (int,),  # noqa: E501
            'window_width': (int,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'ad_platform': 'ad_platform',  # noqa: E501
        'analytics_client_oid': 'analytics_client_oid',  # noqa: E501
        'analytics_session_dts': 'analytics_session_dts',  # noqa: E501
        'analytics_session_oid': 'analytics_session_oid',  # noqa: E501
        'communications_campaign_name': 'communications_campaign_name',  # noqa: E501
        'communications_campaign_uuid': 'communications_campaign_uuid',  # noqa: E501
        'communications_email_subject': 'communications_email_subject',  # noqa: E501
        'communications_email_uuid': 'communications_email_uuid',  # noqa: E501
        'communications_flow_name': 'communications_flow_name',  # noqa: E501
        'communications_flow_uuid': 'communications_flow_uuid',  # noqa: E501
        'email': 'email',  # noqa: E501
        'email_domain': 'email_domain',  # noqa: E501
        'end_timestamp': 'end_timestamp',  # noqa: E501
        'esp_customer_uuid': 'esp_customer_uuid',  # noqa: E501
        'events_gz_size': 'events_gz_size',  # noqa: E501
        'events_json_key': 'events_json_key',  # noqa: E501
        'favorite': 'favorite',  # noqa: E501
        'favorites': 'favorites',  # noqa: E501
        'geolocation': 'geolocation',  # noqa: E501
        'geolocation_country': 'geolocation_country',  # noqa: E501
        'geolocation_state': 'geolocation_state',  # noqa: E501
        'language_iso_code': 'language_iso_code',  # noqa: E501
        'merchant_id': 'merchant_id',  # noqa: E501
        'merchant_notes': 'merchant_notes',  # noqa: E501
        'missing_external_tracking': 'missing_external_tracking',  # noqa: E501
        'order_id': 'order_id',  # noqa: E501
        'page_view_count': 'page_view_count',  # noqa: E501
        'page_views': 'page_views',  # noqa: E501
        'preferred_language': 'preferred_language',  # noqa: E501
        'referrer_domain': 'referrer_domain',  # noqa: E501
        'rrweb_version': 'rrweb_version',  # noqa: E501
        'screen_recording_uuid': 'screen_recording_uuid',  # noqa: E501
        'signed_download_url': 'signed_download_url',  # noqa: E501
        'start_timestamp': 'start_timestamp',  # noqa: E501
        'storefront_oids': 'storefront_oids',  # noqa: E501
        'storefronts': 'storefronts',  # noqa: E501
        'tags': 'tags',  # noqa: E501
        'time_on_site': 'time_on_site',  # noqa: E501
        'ucacid': 'ucacid',  # noqa: E501
        'user_agent': 'user_agent',  # noqa: E501
        'user_agent_raw': 'user_agent_raw',  # noqa: E501
        'user_ip': 'user_ip',  # noqa: E501
        'user_properties': 'user_properties',  # noqa: E501
        'utm_campaign': 'utm_campaign',  # noqa: E501
        'utm_source': 'utm_source',  # noqa: E501
        'visitor_first_seen': 'visitor_first_seen',  # noqa: E501
        'visitor_number': 'visitor_number',  # noqa: E501
        'watched': 'watched',  # noqa: E501
        'window_height': 'window_height',  # noqa: E501
        'window_width': 'window_width',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """ScreenRecording - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            ad_platform (ScreenRecordingAdPlatform): [optional]  # noqa: E501
            analytics_client_oid (int): [optional]  # noqa: E501
            analytics_session_dts (int): [optional]  # noqa: E501
            analytics_session_oid (int): [optional]  # noqa: E501
            communications_campaign_name (str): Campaign Name. [optional]  # noqa: E501
            communications_campaign_uuid (str): Campaign UUID. [optional]  # noqa: E501
            communications_email_subject (str): Email subject. [optional]  # noqa: E501
            communications_email_uuid (str): Email UUID. [optional]  # noqa: E501
            communications_flow_name (str): Flow Name. [optional]  # noqa: E501
            communications_flow_uuid (str): Flow UUID. [optional]  # noqa: E501
            email (str): [optional]  # noqa: E501
            email_domain (str): [optional]  # noqa: E501
            end_timestamp (str): Ending timestamp. [optional]  # noqa: E501
            esp_customer_uuid (str): [optional]  # noqa: E501
            events_gz_size (int): [optional]  # noqa: E501
            events_json_key (str): [optional]  # noqa: E501
            favorite (bool): True if the user calling the API has favorited this particular screen recording.. [optional]  # noqa: E501
            favorites ([int]): Array of user ids that favorited this particular screen recording.. [optional]  # noqa: E501
            geolocation (GeoPoint): [optional]  # noqa: E501
            geolocation_country (str): [optional]  # noqa: E501
            geolocation_state (str): [optional]  # noqa: E501
            language_iso_code (str): Language ISO code. [optional]  # noqa: E501
            merchant_id (str): [optional]  # noqa: E501
            merchant_notes (str): [optional]  # noqa: E501
            missing_external_tracking (bool): True if external page view was not tracked. [optional]  # noqa: E501
            order_id (str): [optional]  # noqa: E501
            page_view_count (int): [optional]  # noqa: E501
            page_views ([ScreenRecordingPageView]): [optional]  # noqa: E501
            preferred_language (str): ISO 3 Letter language code that the customer would prefer. [optional]  # noqa: E501
            referrer_domain (str): [optional]  # noqa: E501
            rrweb_version (str): [optional]  # noqa: E501
            screen_recording_uuid (str): [optional]  # noqa: E501
            signed_download_url (str): [optional]  # noqa: E501
            start_timestamp (str): Starting timestamp. [optional]  # noqa: E501
            storefront_oids ([int]): [optional]  # noqa: E501
            storefronts ([ScreenRecordingStoreFront]): [optional]  # noqa: E501
            tags ([str]): [optional]  # noqa: E501
            time_on_site (int): [optional]  # noqa: E501
            ucacid (str): [optional]  # noqa: E501
            user_agent (ScreenRecordingUserAgent): [optional]  # noqa: E501
            user_agent_raw (str): [optional]  # noqa: E501
            user_ip (str): [optional]  # noqa: E501
            user_properties ([ScreenRecordingUserProperty]): [optional]  # noqa: E501
            utm_campaign (str): UTM Campaign. [optional]  # noqa: E501
            utm_source (str): UTM Source. [optional]  # noqa: E501
            visitor_first_seen (str): Timestamp this visitor was first seen. [optional]  # noqa: E501
            visitor_number (int): [optional]  # noqa: E501
            watched (bool): [optional]  # noqa: E501
            window_height (int): [optional]  # noqa: E501
            window_width (int): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', True)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """ScreenRecording - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            ad_platform (ScreenRecordingAdPlatform): [optional]  # noqa: E501
            analytics_client_oid (int): [optional]  # noqa: E501
            analytics_session_dts (int): [optional]  # noqa: E501
            analytics_session_oid (int): [optional]  # noqa: E501
            communications_campaign_name (str): Campaign Name. [optional]  # noqa: E501
            communications_campaign_uuid (str): Campaign UUID. [optional]  # noqa: E501
            communications_email_subject (str): Email subject. [optional]  # noqa: E501
            communications_email_uuid (str): Email UUID. [optional]  # noqa: E501
            communications_flow_name (str): Flow Name. [optional]  # noqa: E501
            communications_flow_uuid (str): Flow UUID. [optional]  # noqa: E501
            email (str): [optional]  # noqa: E501
            email_domain (str): [optional]  # noqa: E501
            end_timestamp (str): Ending timestamp. [optional]  # noqa: E501
            esp_customer_uuid (str): [optional]  # noqa: E501
            events_gz_size (int): [optional]  # noqa: E501
            events_json_key (str): [optional]  # noqa: E501
            favorite (bool): True if the user calling the API has favorited this particular screen recording.. [optional]  # noqa: E501
            favorites ([int]): Array of user ids that favorited this particular screen recording.. [optional]  # noqa: E501
            geolocation (GeoPoint): [optional]  # noqa: E501
            geolocation_country (str): [optional]  # noqa: E501
            geolocation_state (str): [optional]  # noqa: E501
            language_iso_code (str): Language ISO code. [optional]  # noqa: E501
            merchant_id (str): [optional]  # noqa: E501
            merchant_notes (str): [optional]  # noqa: E501
            missing_external_tracking (bool): True if external page view was not tracked. [optional]  # noqa: E501
            order_id (str): [optional]  # noqa: E501
            page_view_count (int): [optional]  # noqa: E501
            page_views ([ScreenRecordingPageView]): [optional]  # noqa: E501
            preferred_language (str): ISO 3 Letter language code that the customer would prefer. [optional]  # noqa: E501
            referrer_domain (str): [optional]  # noqa: E501
            rrweb_version (str): [optional]  # noqa: E501
            screen_recording_uuid (str): [optional]  # noqa: E501
            signed_download_url (str): [optional]  # noqa: E501
            start_timestamp (str): Starting timestamp. [optional]  # noqa: E501
            storefront_oids ([int]): [optional]  # noqa: E501
            storefronts ([ScreenRecordingStoreFront]): [optional]  # noqa: E501
            tags ([str]): [optional]  # noqa: E501
            time_on_site (int): [optional]  # noqa: E501
            ucacid (str): [optional]  # noqa: E501
            user_agent (ScreenRecordingUserAgent): [optional]  # noqa: E501
            user_agent_raw (str): [optional]  # noqa: E501
            user_ip (str): [optional]  # noqa: E501
            user_properties ([ScreenRecordingUserProperty]): [optional]  # noqa: E501
            utm_campaign (str): UTM Campaign. [optional]  # noqa: E501
            utm_source (str): UTM Source. [optional]  # noqa: E501
            visitor_first_seen (str): Timestamp this visitor was first seen. [optional]  # noqa: E501
            visitor_number (int): [optional]  # noqa: E501
            watched (bool): [optional]  # noqa: E501
            window_height (int): [optional]  # noqa: E501
            window_width (int): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
