"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from ultracart.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from ultracart.exceptions import ApiAttributeError


def lazy_import():
    from ultracart.model.library_item_account import LibraryItemAccount
    from ultracart.model.library_item_asset import LibraryItemAsset
    from ultracart.model.library_item_attribute import LibraryItemAttribute
    from ultracart.model.library_item_email import LibraryItemEmail
    from ultracart.model.library_item_published_meta import LibraryItemPublishedMeta
    from ultracart.model.library_item_purchased_meta import LibraryItemPurchasedMeta
    from ultracart.model.library_item_screenshot import LibraryItemScreenshot
    globals()['LibraryItemAccount'] = LibraryItemAccount
    globals()['LibraryItemAsset'] = LibraryItemAsset
    globals()['LibraryItemAttribute'] = LibraryItemAttribute
    globals()['LibraryItemEmail'] = LibraryItemEmail
    globals()['LibraryItemPublishedMeta'] = LibraryItemPublishedMeta
    globals()['LibraryItemPurchasedMeta'] = LibraryItemPurchasedMeta
    globals()['LibraryItemScreenshot'] = LibraryItemScreenshot


class LibraryItem(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'assets': ([LibraryItemAsset],),  # noqa: E501
            'attributes': ([LibraryItemAttribute],),  # noqa: E501
            'categories': ([str],),  # noqa: E501
            'content': (str,),  # noqa: E501
            'content_type': (str,),  # noqa: E501
            'description': (str,),  # noqa: E501
            'industries': ([str],),  # noqa: E501
            'library_item_oid': (int,),  # noqa: E501
            'merchant_id': (str,),  # noqa: E501
            'my_purchased_version': (int,),  # noqa: E501
            'original_object_id': (str,),  # noqa: E501
            'price': (float,),  # noqa: E501
            'price_formatted': (str,),  # noqa: E501
            'published': (bool,),  # noqa: E501
            'published_dts': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'published_from_library_item_oid': (int,),  # noqa: E501
            'published_meta': (LibraryItemPublishedMeta,),  # noqa: E501
            'published_version': (int,),  # noqa: E501
            'purchased': (bool,),  # noqa: E501
            'purchased_from_library_item_oid': (int,),  # noqa: E501
            'purchased_meta': (LibraryItemPurchasedMeta,),  # noqa: E501
            'purchased_version': (int,),  # noqa: E501
            'rejected': (bool,),  # noqa: E501
            'rejected_reason': (str,),  # noqa: E501
            'release_notes': (str,),  # noqa: E501
            'release_version': (int,),  # noqa: E501
            'reviewed': (bool,),  # noqa: E501
            'reviewed_dts': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'screenshots': ([LibraryItemScreenshot],),  # noqa: E501
            'share_with_accounts': ([LibraryItemAccount],),  # noqa: E501
            'share_with_other_emails': ([LibraryItemEmail],),  # noqa: E501
            'shared': (bool,),  # noqa: E501
            'source': (bool,),  # noqa: E501
            'source_to_library_item_oid': (int,),  # noqa: E501
            'source_version': (int,),  # noqa: E501
            'style': (str,),  # noqa: E501
            'times_purchased': (int,),  # noqa: E501
            'title': (str,),  # noqa: E501
            'type': (str,),  # noqa: E501
            'under_review': (bool,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'assets': 'assets',  # noqa: E501
        'attributes': 'attributes',  # noqa: E501
        'categories': 'categories',  # noqa: E501
        'content': 'content',  # noqa: E501
        'content_type': 'content_type',  # noqa: E501
        'description': 'description',  # noqa: E501
        'industries': 'industries',  # noqa: E501
        'library_item_oid': 'library_item_oid',  # noqa: E501
        'merchant_id': 'merchant_id',  # noqa: E501
        'my_purchased_version': 'my_purchased_version',  # noqa: E501
        'original_object_id': 'original_object_id',  # noqa: E501
        'price': 'price',  # noqa: E501
        'price_formatted': 'price_formatted',  # noqa: E501
        'published': 'published',  # noqa: E501
        'published_dts': 'published_dts',  # noqa: E501
        'published_from_library_item_oid': 'published_from_library_item_oid',  # noqa: E501
        'published_meta': 'published_meta',  # noqa: E501
        'published_version': 'published_version',  # noqa: E501
        'purchased': 'purchased',  # noqa: E501
        'purchased_from_library_item_oid': 'purchased_from_library_item_oid',  # noqa: E501
        'purchased_meta': 'purchased_meta',  # noqa: E501
        'purchased_version': 'purchased_version',  # noqa: E501
        'rejected': 'rejected',  # noqa: E501
        'rejected_reason': 'rejected_reason',  # noqa: E501
        'release_notes': 'release_notes',  # noqa: E501
        'release_version': 'release_version',  # noqa: E501
        'reviewed': 'reviewed',  # noqa: E501
        'reviewed_dts': 'reviewed_dts',  # noqa: E501
        'screenshots': 'screenshots',  # noqa: E501
        'share_with_accounts': 'share_with_accounts',  # noqa: E501
        'share_with_other_emails': 'share_with_other_emails',  # noqa: E501
        'shared': 'shared',  # noqa: E501
        'source': 'source',  # noqa: E501
        'source_to_library_item_oid': 'source_to_library_item_oid',  # noqa: E501
        'source_version': 'source_version',  # noqa: E501
        'style': 'style',  # noqa: E501
        'times_purchased': 'times_purchased',  # noqa: E501
        'title': 'title',  # noqa: E501
        'type': 'type',  # noqa: E501
        'under_review': 'under_review',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """LibraryItem - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            assets ([LibraryItemAsset]): [optional]  # noqa: E501
            attributes ([LibraryItemAttribute]): [optional]  # noqa: E501
            categories ([str]): [optional]  # noqa: E501
            content (str): [optional]  # noqa: E501
            content_type (str): [optional]  # noqa: E501
            description (str): [optional]  # noqa: E501
            industries ([str]): [optional]  # noqa: E501
            library_item_oid (int): [optional]  # noqa: E501
            merchant_id (str): [optional]  # noqa: E501
            my_purchased_version (int): If this is a public item and the merchant has already purchased it, this is their version.  If not yet purchased, this will be zero.  This value will only be populated during a searchPublicItems() call.. [optional]  # noqa: E501
            original_object_id (str): This id points to the original object that was added to the library. For flows and campaigns, this is a uuid string.  For upsells, it is an oid integer.  For transactional_emails, it is an email name.. [optional]  # noqa: E501
            price (float): The price of the published item.  Null for any private library items.. [optional]  # noqa: E501
            price_formatted (str): The formatted price of the published item.  Null for any private library items.. [optional]  # noqa: E501
            published (bool): True if this library item is a published item (not source). [optional]  # noqa: E501
            published_dts (bool, date, datetime, dict, float, int, list, str, none_type): The timestamp of the last published version. [optional]  # noqa: E501
            published_from_library_item_oid (int): The source item used to publish this item.  This allows for comparisons between source and published. [optional]  # noqa: E501
            published_meta (LibraryItemPublishedMeta): [optional]  # noqa: E501
            published_version (int): The source version when this item was published.  This allows for out-of-date alerts to be shown when there is a difference between source and published. [optional]  # noqa: E501
            purchased (bool): True if this library item has been purchased. [optional]  # noqa: E501
            purchased_from_library_item_oid (int): The published item that was purchased to make this item.  This allows for comparisons between published and purchased. [optional]  # noqa: E501
            purchased_meta (LibraryItemPurchasedMeta): [optional]  # noqa: E501
            purchased_version (int): The published version when this item was purchased.  This allows for out-of-date alerts to be shown when there is a difference between published and purchased. [optional]  # noqa: E501
            rejected (bool): Any published library reviewed by UltraCart staff for malicious or inappropriate content will have this flag set to true.  This is always false for non-published items. [optional]  # noqa: E501
            rejected_reason (str): Any rejected published item will have this field populated with the reason.. [optional]  # noqa: E501
            release_notes (str): Release notes specific to each published version and only appearing on public items.. [optional]  # noqa: E501
            release_version (int): This counter records how many times a library item has been published.  This is used to show version history.. [optional]  # noqa: E501
            reviewed (bool): Any published library items must be reviewed by UltraCart staff for malicious content.  This flag shows the status of that review.  This is always false for non-published items. [optional]  # noqa: E501
            reviewed_dts (bool, date, datetime, dict, float, int, list, str, none_type): This is the timestamp for a published items formal review by UltraCart staff for malicious content.. [optional]  # noqa: E501
            screenshots ([LibraryItemScreenshot]): [optional]  # noqa: E501
            share_with_accounts ([LibraryItemAccount]): [optional]  # noqa: E501
            share_with_other_emails ([LibraryItemEmail]): [optional]  # noqa: E501
            shared (bool): True if this item is shared from another merchant account. [optional]  # noqa: E501
            source (bool): True if this library item has been published. [optional]  # noqa: E501
            source_to_library_item_oid (int): This oid points to the published library item, if there is one.. [optional]  # noqa: E501
            source_version (int): The version of this item.  Increment every time the item is saved.. [optional]  # noqa: E501
            style (str): [optional]  # noqa: E501
            times_purchased (int): [optional]  # noqa: E501
            title (str): [optional]  # noqa: E501
            type (str): [optional]  # noqa: E501
            under_review (bool): True if this library item was published but is awaiting review from UltraCart staff.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', True)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """LibraryItem - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            assets ([LibraryItemAsset]): [optional]  # noqa: E501
            attributes ([LibraryItemAttribute]): [optional]  # noqa: E501
            categories ([str]): [optional]  # noqa: E501
            content (str): [optional]  # noqa: E501
            content_type (str): [optional]  # noqa: E501
            description (str): [optional]  # noqa: E501
            industries ([str]): [optional]  # noqa: E501
            library_item_oid (int): [optional]  # noqa: E501
            merchant_id (str): [optional]  # noqa: E501
            my_purchased_version (int): If this is a public item and the merchant has already purchased it, this is their version.  If not yet purchased, this will be zero.  This value will only be populated during a searchPublicItems() call.. [optional]  # noqa: E501
            original_object_id (str): This id points to the original object that was added to the library. For flows and campaigns, this is a uuid string.  For upsells, it is an oid integer.  For transactional_emails, it is an email name.. [optional]  # noqa: E501
            price (float): The price of the published item.  Null for any private library items.. [optional]  # noqa: E501
            price_formatted (str): The formatted price of the published item.  Null for any private library items.. [optional]  # noqa: E501
            published (bool): True if this library item is a published item (not source). [optional]  # noqa: E501
            published_dts (bool, date, datetime, dict, float, int, list, str, none_type): The timestamp of the last published version. [optional]  # noqa: E501
            published_from_library_item_oid (int): The source item used to publish this item.  This allows for comparisons between source and published. [optional]  # noqa: E501
            published_meta (LibraryItemPublishedMeta): [optional]  # noqa: E501
            published_version (int): The source version when this item was published.  This allows for out-of-date alerts to be shown when there is a difference between source and published. [optional]  # noqa: E501
            purchased (bool): True if this library item has been purchased. [optional]  # noqa: E501
            purchased_from_library_item_oid (int): The published item that was purchased to make this item.  This allows for comparisons between published and purchased. [optional]  # noqa: E501
            purchased_meta (LibraryItemPurchasedMeta): [optional]  # noqa: E501
            purchased_version (int): The published version when this item was purchased.  This allows for out-of-date alerts to be shown when there is a difference between published and purchased. [optional]  # noqa: E501
            rejected (bool): Any published library reviewed by UltraCart staff for malicious or inappropriate content will have this flag set to true.  This is always false for non-published items. [optional]  # noqa: E501
            rejected_reason (str): Any rejected published item will have this field populated with the reason.. [optional]  # noqa: E501
            release_notes (str): Release notes specific to each published version and only appearing on public items.. [optional]  # noqa: E501
            release_version (int): This counter records how many times a library item has been published.  This is used to show version history.. [optional]  # noqa: E501
            reviewed (bool): Any published library items must be reviewed by UltraCart staff for malicious content.  This flag shows the status of that review.  This is always false for non-published items. [optional]  # noqa: E501
            reviewed_dts (bool, date, datetime, dict, float, int, list, str, none_type): This is the timestamp for a published items formal review by UltraCart staff for malicious content.. [optional]  # noqa: E501
            screenshots ([LibraryItemScreenshot]): [optional]  # noqa: E501
            share_with_accounts ([LibraryItemAccount]): [optional]  # noqa: E501
            share_with_other_emails ([LibraryItemEmail]): [optional]  # noqa: E501
            shared (bool): True if this item is shared from another merchant account. [optional]  # noqa: E501
            source (bool): True if this library item has been published. [optional]  # noqa: E501
            source_to_library_item_oid (int): This oid points to the published library item, if there is one.. [optional]  # noqa: E501
            source_version (int): The version of this item.  Increment every time the item is saved.. [optional]  # noqa: E501
            style (str): [optional]  # noqa: E501
            times_purchased (int): [optional]  # noqa: E501
            title (str): [optional]  # noqa: E501
            type (str): [optional]  # noqa: E501
            under_review (bool): True if this library item was published but is awaiting review from UltraCart staff.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
