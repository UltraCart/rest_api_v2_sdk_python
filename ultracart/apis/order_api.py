# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..api_client import ApiClient


class OrderApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def cancel_order(self, order_id, **kwargs):
        """
        Cancel an order
        Cancel an order on the UltraCart account.  If the success flag is false, then consult the error message for why it failed. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cancel_order(order_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str order_id: The order id to cancel. (required)
        :return: BaseResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cancel_order_with_http_info(order_id, **kwargs)
        else:
            (data) = self.cancel_order_with_http_info(order_id, **kwargs)
            return data

    def cancel_order_with_http_info(self, order_id, **kwargs):
        """
        Cancel an order
        Cancel an order on the UltraCart account.  If the success flag is false, then consult the error message for why it failed. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cancel_order_with_http_info(order_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str order_id: The order id to cancel. (required)
        :return: BaseResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_id']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cancel_order" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params) or (params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `cancel_order`")


        collection_formats = {}

        path_params = {}
        if 'order_id' in params:
            path_params['order_id'] = params['order_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/order/orders/{order_id}/cancel', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='BaseResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_order(self, order_id, **kwargs):
        """
        Delete an order
        Delete an order on the UltraCart account. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_order(order_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str order_id: The order id to delete. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_order_with_http_info(order_id, **kwargs)
        else:
            (data) = self.delete_order_with_http_info(order_id, **kwargs)
            return data

    def delete_order_with_http_info(self, order_id, **kwargs):
        """
        Delete an order
        Delete an order on the UltraCart account. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_order_with_http_info(order_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str order_id: The order id to delete. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_id']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_order" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params) or (params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `delete_order`")


        collection_formats = {}

        path_params = {}
        if 'order_id' in params:
            path_params['order_id'] = params['order_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/order/orders/{order_id}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def format(self, order_id, format_options, **kwargs):
        """
        Format order
        Format the order for display at text or html 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.format(order_id, format_options, async=True)
        >>> result = thread.get()

        :param async bool
        :param str order_id: The order id to format (required)
        :param OrderFormat format_options: Format options (required)
        :return: OrderFormatResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.format_with_http_info(order_id, format_options, **kwargs)
        else:
            (data) = self.format_with_http_info(order_id, format_options, **kwargs)
            return data

    def format_with_http_info(self, order_id, format_options, **kwargs):
        """
        Format order
        Format the order for display at text or html 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.format_with_http_info(order_id, format_options, async=True)
        >>> result = thread.get()

        :param async bool
        :param str order_id: The order id to format (required)
        :param OrderFormat format_options: Format options (required)
        :return: OrderFormatResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_id', 'format_options']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method format" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params) or (params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `format`")
        # verify the required parameter 'format_options' is set
        if ('format_options' not in params) or (params['format_options'] is None):
            raise ValueError("Missing the required parameter `format_options` when calling `format`")


        collection_formats = {}

        path_params = {}
        if 'order_id' in params:
            path_params['order_id'] = params['order_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'format_options' in params:
            body_params = params['format_options']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/order/orders/{order_id}/format', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='OrderFormatResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_order(self, order_id, **kwargs):
        """
        Retrieve an order
        Retrieves a single order using the specified order id. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_order(order_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str order_id: The order id to retrieve. (required)
        :param str expand: The object expansion to perform on the result.  See documentation for examples
        :return: OrderResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_order_with_http_info(order_id, **kwargs)
        else:
            (data) = self.get_order_with_http_info(order_id, **kwargs)
            return data

    def get_order_with_http_info(self, order_id, **kwargs):
        """
        Retrieve an order
        Retrieves a single order using the specified order id. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_order_with_http_info(order_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str order_id: The order id to retrieve. (required)
        :param str expand: The object expansion to perform on the result.  See documentation for examples
        :return: OrderResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_id', 'expand']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_order" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params) or (params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `get_order`")


        collection_formats = {}

        path_params = {}
        if 'order_id' in params:
            path_params['order_id'] = params['order_id']

        query_params = []
        if 'expand' in params:
            query_params.append(('_expand', params['expand']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/order/orders/{order_id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='OrderResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_orders(self, **kwargs):
        """
        Retrieve orders
        Retrieves a group of orders from the account.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the orders returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_orders(async=True)
        >>> result = thread.get()

        :param async bool
        :param str order_id: Order Id
        :param str payment_method: Payment Method
        :param str company: Company
        :param str first_name: First Name
        :param str last_name: Last Name
        :param str city: City
        :param str state_region: State/Region
        :param str postal_code: Postal Code
        :param str country_code: Country Code (ISO-3166 two letter)
        :param str phone: Phone
        :param str email: Email
        :param str cc_email: CC Email
        :param float total: Total
        :param str screen_branding_theme_code: Screen Branding Theme Code
        :param str storefront_host_name: StoreFront Host Name
        :param str creation_date_begin: Creation Date Begin
        :param str creation_date_end: Creation Date End
        :param str payment_date_begin: Payment Date Begin
        :param str payment_date_end: Payment Date End
        :param str shipment_date_begin: Shipment Date Begin
        :param str shipment_date_end: Shipment Date End
        :param str rma: RMA
        :param str purchase_order_number: Purchase Order Number
        :param str item_id: Item Id
        :param str current_stage: Current Stage
        :param str channel_partner_code: Channel Partner Code
        :param str channel_partner_order_id: Channel Partner Order ID
        :param int customer_profile_oid: null
        :param int limit: The maximum number of records to return on this one API call. (Maximum 200)
        :param int offset: Pagination of the record set.  Offset is a zero based index.
        :param str sort: The sort order of the orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
        :param str expand: The object expansion to perform on the result.
        :return: OrdersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_orders_with_http_info(**kwargs)
        else:
            (data) = self.get_orders_with_http_info(**kwargs)
            return data

    def get_orders_with_http_info(self, **kwargs):
        """
        Retrieve orders
        Retrieves a group of orders from the account.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the orders returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_orders_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str order_id: Order Id
        :param str payment_method: Payment Method
        :param str company: Company
        :param str first_name: First Name
        :param str last_name: Last Name
        :param str city: City
        :param str state_region: State/Region
        :param str postal_code: Postal Code
        :param str country_code: Country Code (ISO-3166 two letter)
        :param str phone: Phone
        :param str email: Email
        :param str cc_email: CC Email
        :param float total: Total
        :param str screen_branding_theme_code: Screen Branding Theme Code
        :param str storefront_host_name: StoreFront Host Name
        :param str creation_date_begin: Creation Date Begin
        :param str creation_date_end: Creation Date End
        :param str payment_date_begin: Payment Date Begin
        :param str payment_date_end: Payment Date End
        :param str shipment_date_begin: Shipment Date Begin
        :param str shipment_date_end: Shipment Date End
        :param str rma: RMA
        :param str purchase_order_number: Purchase Order Number
        :param str item_id: Item Id
        :param str current_stage: Current Stage
        :param str channel_partner_code: Channel Partner Code
        :param str channel_partner_order_id: Channel Partner Order ID
        :param int customer_profile_oid: null
        :param int limit: The maximum number of records to return on this one API call. (Maximum 200)
        :param int offset: Pagination of the record set.  Offset is a zero based index.
        :param str sort: The sort order of the orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
        :param str expand: The object expansion to perform on the result.
        :return: OrdersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_id', 'payment_method', 'company', 'first_name', 'last_name', 'city', 'state_region', 'postal_code', 'country_code', 'phone', 'email', 'cc_email', 'total', 'screen_branding_theme_code', 'storefront_host_name', 'creation_date_begin', 'creation_date_end', 'payment_date_begin', 'payment_date_end', 'shipment_date_begin', 'shipment_date_end', 'rma', 'purchase_order_number', 'item_id', 'current_stage', 'channel_partner_code', 'channel_partner_order_id', 'customer_profile_oid', 'limit', 'offset', 'sort', 'expand']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_orders" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'order_id' in params:
            query_params.append(('order_id', params['order_id']))
        if 'payment_method' in params:
            query_params.append(('payment_method', params['payment_method']))
        if 'company' in params:
            query_params.append(('company', params['company']))
        if 'first_name' in params:
            query_params.append(('first_name', params['first_name']))
        if 'last_name' in params:
            query_params.append(('last_name', params['last_name']))
        if 'city' in params:
            query_params.append(('city', params['city']))
        if 'state_region' in params:
            query_params.append(('state_region', params['state_region']))
        if 'postal_code' in params:
            query_params.append(('postal_code', params['postal_code']))
        if 'country_code' in params:
            query_params.append(('country_code', params['country_code']))
        if 'phone' in params:
            query_params.append(('phone', params['phone']))
        if 'email' in params:
            query_params.append(('email', params['email']))
        if 'cc_email' in params:
            query_params.append(('cc_email', params['cc_email']))
        if 'total' in params:
            query_params.append(('total', params['total']))
        if 'screen_branding_theme_code' in params:
            query_params.append(('screen_branding_theme_code', params['screen_branding_theme_code']))
        if 'storefront_host_name' in params:
            query_params.append(('storefront_host_name', params['storefront_host_name']))
        if 'creation_date_begin' in params:
            query_params.append(('creation_date_begin', params['creation_date_begin']))
        if 'creation_date_end' in params:
            query_params.append(('creation_date_end', params['creation_date_end']))
        if 'payment_date_begin' in params:
            query_params.append(('payment_date_begin', params['payment_date_begin']))
        if 'payment_date_end' in params:
            query_params.append(('payment_date_end', params['payment_date_end']))
        if 'shipment_date_begin' in params:
            query_params.append(('shipment_date_begin', params['shipment_date_begin']))
        if 'shipment_date_end' in params:
            query_params.append(('shipment_date_end', params['shipment_date_end']))
        if 'rma' in params:
            query_params.append(('rma', params['rma']))
        if 'purchase_order_number' in params:
            query_params.append(('purchase_order_number', params['purchase_order_number']))
        if 'item_id' in params:
            query_params.append(('item_id', params['item_id']))
        if 'current_stage' in params:
            query_params.append(('current_stage', params['current_stage']))
        if 'channel_partner_code' in params:
            query_params.append(('channel_partner_code', params['channel_partner_code']))
        if 'channel_partner_order_id' in params:
            query_params.append(('channel_partner_order_id', params['channel_partner_order_id']))
        if 'customer_profile_oid' in params:
            query_params.append(('customer_profile_oid', params['customer_profile_oid']))
        if 'limit' in params:
            query_params.append(('_limit', params['limit']))
        if 'offset' in params:
            query_params.append(('_offset', params['offset']))
        if 'sort' in params:
            query_params.append(('_sort', params['sort']))
        if 'expand' in params:
            query_params.append(('_expand', params['expand']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/order/orders', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='OrdersResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_orders_by_query(self, order_query, **kwargs):
        """
        Retrieve orders
        Retrieves a group of orders from the account based on a query object.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the orders returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_orders_by_query(order_query, async=True)
        >>> result = thread.get()

        :param async bool
        :param OrderQuery order_query: Order query (required)
        :param int limit: The maximum number of records to return on this one API call. (Maximum 200)
        :param int offset: Pagination of the record set.  Offset is a zero based index.
        :param str sort: The sort order of the orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
        :param str expand: The object expansion to perform on the result.
        :return: OrdersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_orders_by_query_with_http_info(order_query, **kwargs)
        else:
            (data) = self.get_orders_by_query_with_http_info(order_query, **kwargs)
            return data

    def get_orders_by_query_with_http_info(self, order_query, **kwargs):
        """
        Retrieve orders
        Retrieves a group of orders from the account based on a query object.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the orders returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_orders_by_query_with_http_info(order_query, async=True)
        >>> result = thread.get()

        :param async bool
        :param OrderQuery order_query: Order query (required)
        :param int limit: The maximum number of records to return on this one API call. (Maximum 200)
        :param int offset: Pagination of the record set.  Offset is a zero based index.
        :param str sort: The sort order of the orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
        :param str expand: The object expansion to perform on the result.
        :return: OrdersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_query', 'limit', 'offset', 'sort', 'expand']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_orders_by_query" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_query' is set
        if ('order_query' not in params) or (params['order_query'] is None):
            raise ValueError("Missing the required parameter `order_query` when calling `get_orders_by_query`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('_limit', params['limit']))
        if 'offset' in params:
            query_params.append(('_offset', params['offset']))
        if 'sort' in params:
            query_params.append(('_sort', params['sort']))
        if 'expand' in params:
            query_params.append(('_expand', params['expand']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'order_query' in params:
            body_params = params['order_query']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/order/orders/query', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='OrdersResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def refund_order(self, order, order_id, **kwargs):
        """
        Refund an order
        Perform a refund operation on an order and then update the order if successful 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.refund_order(order, order_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param Order order: Order to refund (required)
        :param str order_id: The order id to refund. (required)
        :param bool reject_after_refund: Reject order after refund
        :param bool skip_customer_notification: Skip customer email notification
        :param bool auto_order_cancel: Cancel associated auto orders
        :param bool manual_refund: Consider a manual refund done externally
        :param bool reverse_affiliate_transactions: Reverse affiliate transactions
        :param str expand: The object expansion to perform on the result.  See documentation for examples
        :return: OrderResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.refund_order_with_http_info(order, order_id, **kwargs)
        else:
            (data) = self.refund_order_with_http_info(order, order_id, **kwargs)
            return data

    def refund_order_with_http_info(self, order, order_id, **kwargs):
        """
        Refund an order
        Perform a refund operation on an order and then update the order if successful 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.refund_order_with_http_info(order, order_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param Order order: Order to refund (required)
        :param str order_id: The order id to refund. (required)
        :param bool reject_after_refund: Reject order after refund
        :param bool skip_customer_notification: Skip customer email notification
        :param bool auto_order_cancel: Cancel associated auto orders
        :param bool manual_refund: Consider a manual refund done externally
        :param bool reverse_affiliate_transactions: Reverse affiliate transactions
        :param str expand: The object expansion to perform on the result.  See documentation for examples
        :return: OrderResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order', 'order_id', 'reject_after_refund', 'skip_customer_notification', 'auto_order_cancel', 'manual_refund', 'reverse_affiliate_transactions', 'expand']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method refund_order" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order' is set
        if ('order' not in params) or (params['order'] is None):
            raise ValueError("Missing the required parameter `order` when calling `refund_order`")
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params) or (params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `refund_order`")


        collection_formats = {}

        path_params = {}
        if 'order_id' in params:
            path_params['order_id'] = params['order_id']

        query_params = []
        if 'reject_after_refund' in params:
            query_params.append(('reject_after_refund', params['reject_after_refund']))
        if 'skip_customer_notification' in params:
            query_params.append(('skip_customer_notification', params['skip_customer_notification']))
        if 'auto_order_cancel' in params:
            query_params.append(('auto_order_cancel', params['auto_order_cancel']))
        if 'manual_refund' in params:
            query_params.append(('manual_refund', params['manual_refund']))
        if 'reverse_affiliate_transactions' in params:
            query_params.append(('reverse_affiliate_transactions', params['reverse_affiliate_transactions']))
        if 'expand' in params:
            query_params.append(('_expand', params['expand']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'order' in params:
            body_params = params['order']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json; charset=UTF-8'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/order/orders/{order_id}/refund', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='OrderResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def resend_receipt(self, order_id, **kwargs):
        """
        Resend receipt
        Resend the receipt for an order on the UltraCart account. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resend_receipt(order_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str order_id: The order id to resend the receipt for. (required)
        :return: BaseResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resend_receipt_with_http_info(order_id, **kwargs)
        else:
            (data) = self.resend_receipt_with_http_info(order_id, **kwargs)
            return data

    def resend_receipt_with_http_info(self, order_id, **kwargs):
        """
        Resend receipt
        Resend the receipt for an order on the UltraCart account. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resend_receipt_with_http_info(order_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str order_id: The order id to resend the receipt for. (required)
        :return: BaseResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_id']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resend_receipt" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params) or (params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `resend_receipt`")


        collection_formats = {}

        path_params = {}
        if 'order_id' in params:
            path_params['order_id'] = params['order_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/order/orders/{order_id}/resend_receipt', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='BaseResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def resend_shipment_confirmation(self, order_id, **kwargs):
        """
        Resend shipment confirmation
        Resend shipment confirmation for an order on the UltraCart account. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resend_shipment_confirmation(order_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str order_id: The order id to resend the shipment notification for. (required)
        :return: BaseResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resend_shipment_confirmation_with_http_info(order_id, **kwargs)
        else:
            (data) = self.resend_shipment_confirmation_with_http_info(order_id, **kwargs)
            return data

    def resend_shipment_confirmation_with_http_info(self, order_id, **kwargs):
        """
        Resend shipment confirmation
        Resend shipment confirmation for an order on the UltraCart account. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resend_shipment_confirmation_with_http_info(order_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str order_id: The order id to resend the shipment notification for. (required)
        :return: BaseResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_id']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resend_shipment_confirmation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params) or (params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `resend_shipment_confirmation`")


        collection_formats = {}

        path_params = {}
        if 'order_id' in params:
            path_params['order_id'] = params['order_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/order/orders/{order_id}/resend_shipment_confirmation', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='BaseResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_order(self, order, order_id, **kwargs):
        """
        Update an order
        Update a new order on the UltraCart account. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_order(order, order_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param Order order: Order to update (required)
        :param str order_id: The order id to update. (required)
        :param str expand: The object expansion to perform on the result.  See documentation for examples
        :return: OrderResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_order_with_http_info(order, order_id, **kwargs)
        else:
            (data) = self.update_order_with_http_info(order, order_id, **kwargs)
            return data

    def update_order_with_http_info(self, order, order_id, **kwargs):
        """
        Update an order
        Update a new order on the UltraCart account. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_order_with_http_info(order, order_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param Order order: Order to update (required)
        :param str order_id: The order id to update. (required)
        :param str expand: The object expansion to perform on the result.  See documentation for examples
        :return: OrderResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order', 'order_id', 'expand']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_order" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order' is set
        if ('order' not in params) or (params['order'] is None):
            raise ValueError("Missing the required parameter `order` when calling `update_order`")
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params) or (params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `update_order`")


        collection_formats = {}

        path_params = {}
        if 'order_id' in params:
            path_params['order_id'] = params['order_id']

        query_params = []
        if 'expand' in params:
            query_params.append(('_expand', params['expand']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'order' in params:
            body_params = params['order']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json; charset=UTF-8'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/order/orders/{order_id}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='OrderResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
