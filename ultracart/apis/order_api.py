# coding: utf-8

"""
    UltraCart Rest API V2

    This is the next generation UltraCart REST API...

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class OrderApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def order_orders_get(self, **kwargs):
        """
        Retrieve orders
        Retrieves a group of orders from the account.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the orders returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.order_orders_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str order_id: Order Id
        :param str payment_method: Payment Method
        :param str company: Company
        :param str first_name: First Name
        :param str last_name: Last Name
        :param str city: City
        :param str state_region: State/Region
        :param str postal_code: Postal Code
        :param str country_code: Country Code (ISO-3166 two letter)
        :param str phone: Phone
        :param str email: Email
        :param str cc_email: CC Email
        :param float total: Total
        :param str screen_branding_theme_code: Screen Branding Theme Code
        :param str storefront_host_name: StoreFront Host Name
        :param str creation_date_begin: Creation Date Begin
        :param str creation_date_end: Creation Date End
        :param str payment_date_begin: Payment Date Begin
        :param str payment_date_end: Payment Date End
        :param str shipment_date_begin: Shipment Date Begin
        :param str shipment_date_end: Shipment Date End
        :param str rma: RMA
        :param str purchase_order_number: Purchase Order Number
        :param str item_id: Item Id
        :param str current_stage: Current Stage
        :param str channel_partner_code: Channel Partner Code
        :param str channel_partner_order_id: Channel Partner Order ID
        :param int limit: The maximum number of records to return on this one API call. (Maximum 200)
        :param int offset: Pagination of the record set.  Offset is a zero based index.
        :param str sort: The sort order of the orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
        :param str expand: The object expansion to perform on the result.
        :return: OrdersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.order_orders_get_with_http_info(**kwargs)
        else:
            (data) = self.order_orders_get_with_http_info(**kwargs)
            return data

    def order_orders_get_with_http_info(self, **kwargs):
        """
        Retrieve orders
        Retrieves a group of orders from the account.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the orders returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.order_orders_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str order_id: Order Id
        :param str payment_method: Payment Method
        :param str company: Company
        :param str first_name: First Name
        :param str last_name: Last Name
        :param str city: City
        :param str state_region: State/Region
        :param str postal_code: Postal Code
        :param str country_code: Country Code (ISO-3166 two letter)
        :param str phone: Phone
        :param str email: Email
        :param str cc_email: CC Email
        :param float total: Total
        :param str screen_branding_theme_code: Screen Branding Theme Code
        :param str storefront_host_name: StoreFront Host Name
        :param str creation_date_begin: Creation Date Begin
        :param str creation_date_end: Creation Date End
        :param str payment_date_begin: Payment Date Begin
        :param str payment_date_end: Payment Date End
        :param str shipment_date_begin: Shipment Date Begin
        :param str shipment_date_end: Shipment Date End
        :param str rma: RMA
        :param str purchase_order_number: Purchase Order Number
        :param str item_id: Item Id
        :param str current_stage: Current Stage
        :param str channel_partner_code: Channel Partner Code
        :param str channel_partner_order_id: Channel Partner Order ID
        :param int limit: The maximum number of records to return on this one API call. (Maximum 200)
        :param int offset: Pagination of the record set.  Offset is a zero based index.
        :param str sort: The sort order of the orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
        :param str expand: The object expansion to perform on the result.
        :return: OrdersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_id', 'payment_method', 'company', 'first_name', 'last_name', 'city', 'state_region', 'postal_code', 'country_code', 'phone', 'email', 'cc_email', 'total', 'screen_branding_theme_code', 'storefront_host_name', 'creation_date_begin', 'creation_date_end', 'payment_date_begin', 'payment_date_end', 'shipment_date_begin', 'shipment_date_end', 'rma', 'purchase_order_number', 'item_id', 'current_stage', 'channel_partner_code', 'channel_partner_order_id', 'limit', 'offset', 'sort', 'expand']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method order_orders_get" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/order/orders'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'order_id' in params:
            query_params['order_id'] = params['order_id']
        if 'payment_method' in params:
            query_params['payment_method'] = params['payment_method']
        if 'company' in params:
            query_params['company'] = params['company']
        if 'first_name' in params:
            query_params['first_name'] = params['first_name']
        if 'last_name' in params:
            query_params['last_name'] = params['last_name']
        if 'city' in params:
            query_params['city'] = params['city']
        if 'state_region' in params:
            query_params['state_region'] = params['state_region']
        if 'postal_code' in params:
            query_params['postal_code'] = params['postal_code']
        if 'country_code' in params:
            query_params['country_code'] = params['country_code']
        if 'phone' in params:
            query_params['phone'] = params['phone']
        if 'email' in params:
            query_params['email'] = params['email']
        if 'cc_email' in params:
            query_params['cc_email'] = params['cc_email']
        if 'total' in params:
            query_params['total'] = params['total']
        if 'screen_branding_theme_code' in params:
            query_params['screen_branding_theme_code'] = params['screen_branding_theme_code']
        if 'storefront_host_name' in params:
            query_params['storefront_host_name'] = params['storefront_host_name']
        if 'creation_date_begin' in params:
            query_params['creation_date_begin'] = params['creation_date_begin']
        if 'creation_date_end' in params:
            query_params['creation_date_end'] = params['creation_date_end']
        if 'payment_date_begin' in params:
            query_params['payment_date_begin'] = params['payment_date_begin']
        if 'payment_date_end' in params:
            query_params['payment_date_end'] = params['payment_date_end']
        if 'shipment_date_begin' in params:
            query_params['shipment_date_begin'] = params['shipment_date_begin']
        if 'shipment_date_end' in params:
            query_params['shipment_date_end'] = params['shipment_date_end']
        if 'rma' in params:
            query_params['rma'] = params['rma']
        if 'purchase_order_number' in params:
            query_params['purchase_order_number'] = params['purchase_order_number']
        if 'item_id' in params:
            query_params['item_id'] = params['item_id']
        if 'current_stage' in params:
            query_params['current_stage'] = params['current_stage']
        if 'channel_partner_code' in params:
            query_params['channel_partner_code'] = params['channel_partner_code']
        if 'channel_partner_order_id' in params:
            query_params['channel_partner_order_id'] = params['channel_partner_order_id']
        if 'limit' in params:
            query_params['_limit'] = params['limit']
        if 'offset' in params:
            query_params['_offset'] = params['offset']
        if 'sort' in params:
            query_params['_sort'] = params['sort']
        if 'expand' in params:
            query_params['_expand'] = params['expand']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='OrdersResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def order_orders_order_id_cancel_post(self, order_id, **kwargs):
        """
        Cancel an order
        Cancel an order on the UltraCart account.  If the success flag is false, then consult the error message for why it failed. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.order_orders_order_id_cancel_post(order_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str order_id: The order id to cancel. (required)
        :return: BaseResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.order_orders_order_id_cancel_post_with_http_info(order_id, **kwargs)
        else:
            (data) = self.order_orders_order_id_cancel_post_with_http_info(order_id, **kwargs)
            return data

    def order_orders_order_id_cancel_post_with_http_info(self, order_id, **kwargs):
        """
        Cancel an order
        Cancel an order on the UltraCart account.  If the success flag is false, then consult the error message for why it failed. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.order_orders_order_id_cancel_post_with_http_info(order_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str order_id: The order id to cancel. (required)
        :return: BaseResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method order_orders_order_id_cancel_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params) or (params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `order_orders_order_id_cancel_post`")

        resource_path = '/order/orders/{order_id}/cancel'.replace('{format}', 'json')
        path_params = {}
        if 'order_id' in params:
            path_params['order_id'] = params['order_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='BaseResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def order_orders_order_id_delete(self, order_id, **kwargs):
        """
        Delete an order
        Delete an order on the UltraCart account. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.order_orders_order_id_delete(order_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str order_id: The order id to delete. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.order_orders_order_id_delete_with_http_info(order_id, **kwargs)
        else:
            (data) = self.order_orders_order_id_delete_with_http_info(order_id, **kwargs)
            return data

    def order_orders_order_id_delete_with_http_info(self, order_id, **kwargs):
        """
        Delete an order
        Delete an order on the UltraCart account. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.order_orders_order_id_delete_with_http_info(order_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str order_id: The order id to delete. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method order_orders_order_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params) or (params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `order_orders_order_id_delete`")

        resource_path = '/order/orders/{order_id}'.replace('{format}', 'json')
        path_params = {}
        if 'order_id' in params:
            path_params['order_id'] = params['order_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def order_orders_order_id_get(self, order_id, **kwargs):
        """
        Retrieve an order
        Retrieves a single order using the specified order id. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.order_orders_order_id_get(order_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str order_id: The order id to retrieve. (required)
        :param str expand: The object expansion to perform on the result.  See documentation for examples
        :return: OrderResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.order_orders_order_id_get_with_http_info(order_id, **kwargs)
        else:
            (data) = self.order_orders_order_id_get_with_http_info(order_id, **kwargs)
            return data

    def order_orders_order_id_get_with_http_info(self, order_id, **kwargs):
        """
        Retrieve an order
        Retrieves a single order using the specified order id. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.order_orders_order_id_get_with_http_info(order_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str order_id: The order id to retrieve. (required)
        :param str expand: The object expansion to perform on the result.  See documentation for examples
        :return: OrderResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_id', 'expand']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method order_orders_order_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params) or (params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `order_orders_order_id_get`")

        resource_path = '/order/orders/{order_id}'.replace('{format}', 'json')
        path_params = {}
        if 'order_id' in params:
            path_params['order_id'] = params['order_id']

        query_params = {}
        if 'expand' in params:
            query_params['_expand'] = params['expand']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='OrderResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def order_orders_order_id_put(self, order, order_id, **kwargs):
        """
        Update an order
        Update a new order on the UltraCart account. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.order_orders_order_id_put(order, order_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Order order: Order to update (required)
        :param str order_id: The order id to update. (required)
        :param str expand: The object expansion to perform on the result.  See documentation for examples
        :return: OrderResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.order_orders_order_id_put_with_http_info(order, order_id, **kwargs)
        else:
            (data) = self.order_orders_order_id_put_with_http_info(order, order_id, **kwargs)
            return data

    def order_orders_order_id_put_with_http_info(self, order, order_id, **kwargs):
        """
        Update an order
        Update a new order on the UltraCart account. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.order_orders_order_id_put_with_http_info(order, order_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Order order: Order to update (required)
        :param str order_id: The order id to update. (required)
        :param str expand: The object expansion to perform on the result.  See documentation for examples
        :return: OrderResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order', 'order_id', 'expand']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method order_orders_order_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order' is set
        if ('order' not in params) or (params['order'] is None):
            raise ValueError("Missing the required parameter `order` when calling `order_orders_order_id_put`")
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params) or (params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `order_orders_order_id_put`")

        resource_path = '/order/orders/{order_id}'.replace('{format}', 'json')
        path_params = {}
        if 'order_id' in params:
            path_params['order_id'] = params['order_id']

        query_params = {}
        if 'expand' in params:
            query_params['_expand'] = params['expand']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'order' in params:
            body_params = params['order']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json; charset=UTF-8'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='OrderResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def order_orders_order_id_resend_receipt_post(self, order_id, **kwargs):
        """
        Resend receipt
        Resend the receipt for an order on the UltraCart account. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.order_orders_order_id_resend_receipt_post(order_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str order_id: The order id to resend the receipt for. (required)
        :return: BaseResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.order_orders_order_id_resend_receipt_post_with_http_info(order_id, **kwargs)
        else:
            (data) = self.order_orders_order_id_resend_receipt_post_with_http_info(order_id, **kwargs)
            return data

    def order_orders_order_id_resend_receipt_post_with_http_info(self, order_id, **kwargs):
        """
        Resend receipt
        Resend the receipt for an order on the UltraCart account. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.order_orders_order_id_resend_receipt_post_with_http_info(order_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str order_id: The order id to resend the receipt for. (required)
        :return: BaseResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method order_orders_order_id_resend_receipt_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params) or (params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `order_orders_order_id_resend_receipt_post`")

        resource_path = '/order/orders/{order_id}/resend_receipt'.replace('{format}', 'json')
        path_params = {}
        if 'order_id' in params:
            path_params['order_id'] = params['order_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='BaseResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def order_orders_order_id_resend_shipment_confirmation_post(self, order_id, **kwargs):
        """
        Resend shipment confirmation
        Resend shipment confirmation for an order on the UltraCart account. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.order_orders_order_id_resend_shipment_confirmation_post(order_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str order_id: The order id to resend the shipment notification for. (required)
        :return: BaseResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.order_orders_order_id_resend_shipment_confirmation_post_with_http_info(order_id, **kwargs)
        else:
            (data) = self.order_orders_order_id_resend_shipment_confirmation_post_with_http_info(order_id, **kwargs)
            return data

    def order_orders_order_id_resend_shipment_confirmation_post_with_http_info(self, order_id, **kwargs):
        """
        Resend shipment confirmation
        Resend shipment confirmation for an order on the UltraCart account. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.order_orders_order_id_resend_shipment_confirmation_post_with_http_info(order_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str order_id: The order id to resend the shipment notification for. (required)
        :return: BaseResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method order_orders_order_id_resend_shipment_confirmation_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params) or (params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `order_orders_order_id_resend_shipment_confirmation_post`")

        resource_path = '/order/orders/{order_id}/resend_shipment_confirmation'.replace('{format}', 'json')
        path_params = {}
        if 'order_id' in params:
            path_params['order_id'] = params['order_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='BaseResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
