# coding: utf-8

"""
    UltraCart Rest API V2

    This is the next generation UltraCart REST API...

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class ChargebackApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def delete_chargeback(self, chargeback_dispute_oid, **kwargs):
        """
        Delete a chargeback
        Delete a chargeback on the UltraCart account. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_chargeback(chargeback_dispute_oid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int chargeback_dispute_oid: The chargeback_dispute_oid to delete. (required)
        :return: ChargebackDisputeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_chargeback_with_http_info(chargeback_dispute_oid, **kwargs)
        else:
            (data) = self.delete_chargeback_with_http_info(chargeback_dispute_oid, **kwargs)
            return data

    def delete_chargeback_with_http_info(self, chargeback_dispute_oid, **kwargs):
        """
        Delete a chargeback
        Delete a chargeback on the UltraCart account. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_chargeback_with_http_info(chargeback_dispute_oid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int chargeback_dispute_oid: The chargeback_dispute_oid to delete. (required)
        :return: ChargebackDisputeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['chargeback_dispute_oid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_chargeback" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'chargeback_dispute_oid' is set
        if ('chargeback_dispute_oid' not in params) or (params['chargeback_dispute_oid'] is None):
            raise ValueError("Missing the required parameter `chargeback_dispute_oid` when calling `delete_chargeback`")

        resource_path = '/chargeback/chargebacks/{chargeback_dispute_oid}'.replace('{format}', 'json')
        path_params = {}
        if 'chargeback_dispute_oid' in params:
            path_params['chargeback_dispute_oid'] = params['chargeback_dispute_oid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json; charset=UTF-8'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ChargebackDisputeResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_chargeback_dispute(self, chargeback_dispute_oid, **kwargs):
        """
        Retrieve a chargeback
        Retrieves a single chargeback using the specified chargeback dispute oid. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_chargeback_dispute(chargeback_dispute_oid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int chargeback_dispute_oid: The chargeback dispute oid to retrieve. (required)
        :param str expand: The object expansion to perform on the result.  See documentation for examples
        :return: ChargebackDisputeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_chargeback_dispute_with_http_info(chargeback_dispute_oid, **kwargs)
        else:
            (data) = self.get_chargeback_dispute_with_http_info(chargeback_dispute_oid, **kwargs)
            return data

    def get_chargeback_dispute_with_http_info(self, chargeback_dispute_oid, **kwargs):
        """
        Retrieve a chargeback
        Retrieves a single chargeback using the specified chargeback dispute oid. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_chargeback_dispute_with_http_info(chargeback_dispute_oid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int chargeback_dispute_oid: The chargeback dispute oid to retrieve. (required)
        :param str expand: The object expansion to perform on the result.  See documentation for examples
        :return: ChargebackDisputeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['chargeback_dispute_oid', 'expand']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_chargeback_dispute" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'chargeback_dispute_oid' is set
        if ('chargeback_dispute_oid' not in params) or (params['chargeback_dispute_oid'] is None):
            raise ValueError("Missing the required parameter `chargeback_dispute_oid` when calling `get_chargeback_dispute`")

        resource_path = '/chargeback/chargebacks/{chargeback_dispute_oid}'.replace('{format}', 'json')
        path_params = {}
        if 'chargeback_dispute_oid' in params:
            path_params['chargeback_dispute_oid'] = params['chargeback_dispute_oid']

        query_params = {}
        if 'expand' in params:
            query_params['_expand'] = params['expand']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ChargebackDisputeResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_chargeback_disputes(self, **kwargs):
        """
        Retrieve chargebacks
        Retrieves chargebacks from the account.  If no parameters are specified, all chargebacks will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_chargeback_disputes(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str order_id: Order Id
        :param str case_number: Case number
        :param str status: Status
        :param str expiration_dts_start: Expiration dts start
        :param str expiration_dts_end: Expiration dts end
        :param str chargeback_dts_start: Chargeback dts start
        :param str chargeback_dts_end: Chargeback dts end
        :param int limit: The maximum number of records to return on this one API call. (Max 200)
        :param int offset: Pagination of the record set.  Offset is a zero based index.
        :param str since: Fetch chargebacks that have been created/modified since this date/time.
        :param str sort: The sort order of the chargebacks.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
        :param str expand: The object expansion to perform on the result.  See documentation for examples
        :return: ChargebackDisputesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_chargeback_disputes_with_http_info(**kwargs)
        else:
            (data) = self.get_chargeback_disputes_with_http_info(**kwargs)
            return data

    def get_chargeback_disputes_with_http_info(self, **kwargs):
        """
        Retrieve chargebacks
        Retrieves chargebacks from the account.  If no parameters are specified, all chargebacks will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_chargeback_disputes_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str order_id: Order Id
        :param str case_number: Case number
        :param str status: Status
        :param str expiration_dts_start: Expiration dts start
        :param str expiration_dts_end: Expiration dts end
        :param str chargeback_dts_start: Chargeback dts start
        :param str chargeback_dts_end: Chargeback dts end
        :param int limit: The maximum number of records to return on this one API call. (Max 200)
        :param int offset: Pagination of the record set.  Offset is a zero based index.
        :param str since: Fetch chargebacks that have been created/modified since this date/time.
        :param str sort: The sort order of the chargebacks.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
        :param str expand: The object expansion to perform on the result.  See documentation for examples
        :return: ChargebackDisputesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_id', 'case_number', 'status', 'expiration_dts_start', 'expiration_dts_end', 'chargeback_dts_start', 'chargeback_dts_end', 'limit', 'offset', 'since', 'sort', 'expand']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_chargeback_disputes" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/chargeback/chargebacks'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'order_id' in params:
            query_params['order_id'] = params['order_id']
        if 'case_number' in params:
            query_params['case_number'] = params['case_number']
        if 'status' in params:
            query_params['status'] = params['status']
        if 'expiration_dts_start' in params:
            query_params['expiration_dts_start'] = params['expiration_dts_start']
        if 'expiration_dts_end' in params:
            query_params['expiration_dts_end'] = params['expiration_dts_end']
        if 'chargeback_dts_start' in params:
            query_params['chargeback_dts_start'] = params['chargeback_dts_start']
        if 'chargeback_dts_end' in params:
            query_params['chargeback_dts_end'] = params['chargeback_dts_end']
        if 'limit' in params:
            query_params['_limit'] = params['limit']
        if 'offset' in params:
            query_params['_offset'] = params['offset']
        if 'since' in params:
            query_params['_since'] = params['since']
        if 'sort' in params:
            query_params['_sort'] = params['sort']
        if 'expand' in params:
            query_params['_expand'] = params['expand']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ChargebackDisputesResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def insert_chargeback(self, chargeback, **kwargs):
        """
        Insert a chargeback
        Insert a chargeback on the UltraCart account. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.insert_chargeback(chargeback, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ChargebackDispute chargeback: Chargeback to insert (required)
        :param str expand: The object expansion to perform on the result.  See documentation for examples
        :return: ChargebackDisputeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.insert_chargeback_with_http_info(chargeback, **kwargs)
        else:
            (data) = self.insert_chargeback_with_http_info(chargeback, **kwargs)
            return data

    def insert_chargeback_with_http_info(self, chargeback, **kwargs):
        """
        Insert a chargeback
        Insert a chargeback on the UltraCart account. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.insert_chargeback_with_http_info(chargeback, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ChargebackDispute chargeback: Chargeback to insert (required)
        :param str expand: The object expansion to perform on the result.  See documentation for examples
        :return: ChargebackDisputeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['chargeback', 'expand']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method insert_chargeback" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'chargeback' is set
        if ('chargeback' not in params) or (params['chargeback'] is None):
            raise ValueError("Missing the required parameter `chargeback` when calling `insert_chargeback`")

        resource_path = '/chargeback/chargebacks'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'expand' in params:
            query_params['_expand'] = params['expand']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'chargeback' in params:
            body_params = params['chargeback']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json; charset=UTF-8'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ChargebackDisputeResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def update_chargeback(self, chargeback, chargeback_dispute_oid, **kwargs):
        """
        Update a chargeback
        Update a chargeback on the UltraCart account. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_chargeback(chargeback, chargeback_dispute_oid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ChargebackDispute chargeback: Chargeback to update (required)
        :param int chargeback_dispute_oid: The chargeback_dispute_oid to update. (required)
        :param str expand: The object expansion to perform on the result.  See documentation for examples
        :return: ChargebackDisputeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_chargeback_with_http_info(chargeback, chargeback_dispute_oid, **kwargs)
        else:
            (data) = self.update_chargeback_with_http_info(chargeback, chargeback_dispute_oid, **kwargs)
            return data

    def update_chargeback_with_http_info(self, chargeback, chargeback_dispute_oid, **kwargs):
        """
        Update a chargeback
        Update a chargeback on the UltraCart account. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_chargeback_with_http_info(chargeback, chargeback_dispute_oid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ChargebackDispute chargeback: Chargeback to update (required)
        :param int chargeback_dispute_oid: The chargeback_dispute_oid to update. (required)
        :param str expand: The object expansion to perform on the result.  See documentation for examples
        :return: ChargebackDisputeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['chargeback', 'chargeback_dispute_oid', 'expand']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_chargeback" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'chargeback' is set
        if ('chargeback' not in params) or (params['chargeback'] is None):
            raise ValueError("Missing the required parameter `chargeback` when calling `update_chargeback`")
        # verify the required parameter 'chargeback_dispute_oid' is set
        if ('chargeback_dispute_oid' not in params) or (params['chargeback_dispute_oid'] is None):
            raise ValueError("Missing the required parameter `chargeback_dispute_oid` when calling `update_chargeback`")

        resource_path = '/chargeback/chargebacks/{chargeback_dispute_oid}'.replace('{format}', 'json')
        path_params = {}
        if 'chargeback_dispute_oid' in params:
            path_params['chargeback_dispute_oid'] = params['chargeback_dispute_oid']

        query_params = {}
        if 'expand' in params:
            query_params['_expand'] = params['expand']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'chargeback' in params:
            body_params = params['chargeback']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json; charset=UTF-8'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ChargebackDisputeResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
