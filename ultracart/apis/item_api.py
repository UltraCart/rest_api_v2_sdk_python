# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..api_client import ApiClient


class ItemApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_item(self, merchant_item_oid, **kwargs):
        """
        Delete an item
        Delete an item on the UltraCart account. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_item(merchant_item_oid, async=True)
        >>> result = thread.get()

        :param async bool
        :param int merchant_item_oid: The item oid to delete. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_item_with_http_info(merchant_item_oid, **kwargs)
        else:
            (data) = self.delete_item_with_http_info(merchant_item_oid, **kwargs)
            return data

    def delete_item_with_http_info(self, merchant_item_oid, **kwargs):
        """
        Delete an item
        Delete an item on the UltraCart account. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_item_with_http_info(merchant_item_oid, async=True)
        >>> result = thread.get()

        :param async bool
        :param int merchant_item_oid: The item oid to delete. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['merchant_item_oid']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'merchant_item_oid' is set
        if ('merchant_item_oid' not in params) or (params['merchant_item_oid'] is None):
            raise ValueError("Missing the required parameter `merchant_item_oid` when calling `delete_item`")


        collection_formats = {}

        path_params = {}
        if 'merchant_item_oid' in params:
            path_params['merchant_item_oid'] = params['merchant_item_oid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/item/items/{merchant_item_oid}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_item(self, merchant_item_oid, **kwargs):
        """
        Retrieve an item
        Retrieves a single item using the specified item oid. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_item(merchant_item_oid, async=True)
        >>> result = thread.get()

        :param async bool
        :param int merchant_item_oid: The item oid to retrieve. (required)
        :param str expand: The object expansion to perform on the result.  See documentation for examples
        :param bool placeholders: Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
        :return: ItemResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_item_with_http_info(merchant_item_oid, **kwargs)
        else:
            (data) = self.get_item_with_http_info(merchant_item_oid, **kwargs)
            return data

    def get_item_with_http_info(self, merchant_item_oid, **kwargs):
        """
        Retrieve an item
        Retrieves a single item using the specified item oid. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_item_with_http_info(merchant_item_oid, async=True)
        >>> result = thread.get()

        :param async bool
        :param int merchant_item_oid: The item oid to retrieve. (required)
        :param str expand: The object expansion to perform on the result.  See documentation for examples
        :param bool placeholders: Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
        :return: ItemResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['merchant_item_oid', 'expand', 'placeholders']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'merchant_item_oid' is set
        if ('merchant_item_oid' not in params) or (params['merchant_item_oid'] is None):
            raise ValueError("Missing the required parameter `merchant_item_oid` when calling `get_item`")


        collection_formats = {}

        path_params = {}
        if 'merchant_item_oid' in params:
            path_params['merchant_item_oid'] = params['merchant_item_oid']

        query_params = []
        if 'expand' in params:
            query_params.append(('_expand', params['expand']))
        if 'placeholders' in params:
            query_params.append(('_placeholders', params['placeholders']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/item/items/{merchant_item_oid}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ItemResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_item_by_merchant_item_id(self, merchant_item_id, **kwargs):
        """
        Retrieve an item by item id
        Retrieves a single item using the specified item id. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_item_by_merchant_item_id(merchant_item_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str merchant_item_id: The item id to retrieve. (required)
        :param str expand: The object expansion to perform on the result.  See documentation for examples
        :param bool placeholders: Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
        :return: ItemResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_item_by_merchant_item_id_with_http_info(merchant_item_id, **kwargs)
        else:
            (data) = self.get_item_by_merchant_item_id_with_http_info(merchant_item_id, **kwargs)
            return data

    def get_item_by_merchant_item_id_with_http_info(self, merchant_item_id, **kwargs):
        """
        Retrieve an item by item id
        Retrieves a single item using the specified item id. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_item_by_merchant_item_id_with_http_info(merchant_item_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str merchant_item_id: The item id to retrieve. (required)
        :param str expand: The object expansion to perform on the result.  See documentation for examples
        :param bool placeholders: Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
        :return: ItemResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['merchant_item_id', 'expand', 'placeholders']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_item_by_merchant_item_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'merchant_item_id' is set
        if ('merchant_item_id' not in params) or (params['merchant_item_id'] is None):
            raise ValueError("Missing the required parameter `merchant_item_id` when calling `get_item_by_merchant_item_id`")


        collection_formats = {}

        path_params = {}
        if 'merchant_item_id' in params:
            path_params['merchant_item_id'] = params['merchant_item_id']

        query_params = []
        if 'expand' in params:
            query_params.append(('_expand', params['expand']))
        if 'placeholders' in params:
            query_params.append(('_placeholders', params['placeholders']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/item/items/merchant_item_id/{merchant_item_id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ItemResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_items(self, **kwargs):
        """
        Retrieve items
        Retrieves a group of items from the account.  If no parameters are specified, all items will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_items(async=True)
        >>> result = thread.get()

        :param async bool
        :param int parent_category_id: The parent category object id to retrieve items for.  Unspecified means all items on the account.  0 = root
        :param str parent_category_path: The parent category path to retrieve items for.  Unspecified means all items on the account.  / = root
        :param int limit: The maximum number of records to return on this one API call. (Default 100, Max 2000)
        :param int offset: Pagination of the record set.  Offset is a zero based index.
        :param str since: Fetch items that have been created/modified since this date/time.
        :param str sort: The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
        :param str expand: The object expansion to perform on the result.  See documentation for examples
        :param bool placeholders: Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
        :return: ItemsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_items_with_http_info(**kwargs)
        else:
            (data) = self.get_items_with_http_info(**kwargs)
            return data

    def get_items_with_http_info(self, **kwargs):
        """
        Retrieve items
        Retrieves a group of items from the account.  If no parameters are specified, all items will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_items_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int parent_category_id: The parent category object id to retrieve items for.  Unspecified means all items on the account.  0 = root
        :param str parent_category_path: The parent category path to retrieve items for.  Unspecified means all items on the account.  / = root
        :param int limit: The maximum number of records to return on this one API call. (Default 100, Max 2000)
        :param int offset: Pagination of the record set.  Offset is a zero based index.
        :param str since: Fetch items that have been created/modified since this date/time.
        :param str sort: The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
        :param str expand: The object expansion to perform on the result.  See documentation for examples
        :param bool placeholders: Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
        :return: ItemsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['parent_category_id', 'parent_category_path', 'limit', 'offset', 'since', 'sort', 'expand', 'placeholders']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_items" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'parent_category_id' in params:
            query_params.append(('parent_category_id', params['parent_category_id']))
        if 'parent_category_path' in params:
            query_params.append(('parent_category_path', params['parent_category_path']))
        if 'limit' in params:
            query_params.append(('_limit', params['limit']))
        if 'offset' in params:
            query_params.append(('_offset', params['offset']))
        if 'since' in params:
            query_params.append(('_since', params['since']))
        if 'sort' in params:
            query_params.append(('_sort', params['sort']))
        if 'expand' in params:
            query_params.append(('_expand', params['expand']))
        if 'placeholders' in params:
            query_params.append(('_placeholders', params['placeholders']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/item/items', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ItemsResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_pricing_tiers(self, **kwargs):
        """
        Retrieve pricing tiers
        Retrieves the pricing tiers 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_pricing_tiers(async=True)
        >>> result = thread.get()

        :param async bool
        :param str expand: The object expansion to perform on the result.  See documentation for examples
        :return: PricingTiersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_pricing_tiers_with_http_info(**kwargs)
        else:
            (data) = self.get_pricing_tiers_with_http_info(**kwargs)
            return data

    def get_pricing_tiers_with_http_info(self, **kwargs):
        """
        Retrieve pricing tiers
        Retrieves the pricing tiers 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_pricing_tiers_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str expand: The object expansion to perform on the result.  See documentation for examples
        :return: PricingTiersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['expand']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pricing_tiers" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'expand' in params:
            query_params.append(('_expand', params['expand']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/item/pricing_tiers', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PricingTiersResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def insert_item(self, item, **kwargs):
        """
        Create an item
        Create a new item on the UltraCart account. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.insert_item(item, async=True)
        >>> result = thread.get()

        :param async bool
        :param Item item: Item to create (required)
        :param str expand: The object expansion to perform on the result.  See documentation for examples
        :param bool placeholders: Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
        :return: ItemResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.insert_item_with_http_info(item, **kwargs)
        else:
            (data) = self.insert_item_with_http_info(item, **kwargs)
            return data

    def insert_item_with_http_info(self, item, **kwargs):
        """
        Create an item
        Create a new item on the UltraCart account. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.insert_item_with_http_info(item, async=True)
        >>> result = thread.get()

        :param async bool
        :param Item item: Item to create (required)
        :param str expand: The object expansion to perform on the result.  See documentation for examples
        :param bool placeholders: Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
        :return: ItemResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['item', 'expand', 'placeholders']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method insert_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'item' is set
        if ('item' not in params) or (params['item'] is None):
            raise ValueError("Missing the required parameter `item` when calling `insert_item`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'expand' in params:
            query_params.append(('_expand', params['expand']))
        if 'placeholders' in params:
            query_params.append(('_placeholders', params['placeholders']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'item' in params:
            body_params = params['item']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json; charset=UTF-8'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/item/items', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ItemResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_item(self, item, merchant_item_oid, **kwargs):
        """
        Update an item
        Update a new item on the UltraCart account. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_item(item, merchant_item_oid, async=True)
        >>> result = thread.get()

        :param async bool
        :param Item item: Item to update (required)
        :param int merchant_item_oid: The item oid to update. (required)
        :param str expand: The object expansion to perform on the result.  See documentation for examples
        :param bool placeholders: Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
        :return: ItemResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_item_with_http_info(item, merchant_item_oid, **kwargs)
        else:
            (data) = self.update_item_with_http_info(item, merchant_item_oid, **kwargs)
            return data

    def update_item_with_http_info(self, item, merchant_item_oid, **kwargs):
        """
        Update an item
        Update a new item on the UltraCart account. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_item_with_http_info(item, merchant_item_oid, async=True)
        >>> result = thread.get()

        :param async bool
        :param Item item: Item to update (required)
        :param int merchant_item_oid: The item oid to update. (required)
        :param str expand: The object expansion to perform on the result.  See documentation for examples
        :param bool placeholders: Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
        :return: ItemResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['item', 'merchant_item_oid', 'expand', 'placeholders']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'item' is set
        if ('item' not in params) or (params['item'] is None):
            raise ValueError("Missing the required parameter `item` when calling `update_item`")
        # verify the required parameter 'merchant_item_oid' is set
        if ('merchant_item_oid' not in params) or (params['merchant_item_oid'] is None):
            raise ValueError("Missing the required parameter `merchant_item_oid` when calling `update_item`")


        collection_formats = {}

        path_params = {}
        if 'merchant_item_oid' in params:
            path_params['merchant_item_oid'] = params['merchant_item_oid']

        query_params = []
        if 'expand' in params:
            query_params.append(('_expand', params['expand']))
        if 'placeholders' in params:
            query_params.append(('_placeholders', params['placeholders']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'item' in params:
            body_params = params['item']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json; charset=UTF-8'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/item/items/{merchant_item_oid}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ItemResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_items(self, items_request, **kwargs):
        """
        Update multiple items
        Update multiple item on the UltraCart account. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_items(items_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param ItemsRequest items_request: Items to update (synchronous maximum 20 / asynchronous maximum 100) (required)
        :param str expand: The object expansion to perform on the result.  See documentation for examples
        :param bool placeholders: Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
        :param bool async: True if the operation should be run async.  No result returned
        :return: ItemsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_items_with_http_info(items_request, **kwargs)
        else:
            (data) = self.update_items_with_http_info(items_request, **kwargs)
            return data

    def update_items_with_http_info(self, items_request, **kwargs):
        """
        Update multiple items
        Update multiple item on the UltraCart account. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_items_with_http_info(items_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param ItemsRequest items_request: Items to update (synchronous maximum 20 / asynchronous maximum 100) (required)
        :param str expand: The object expansion to perform on the result.  See documentation for examples
        :param bool placeholders: Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
        :param bool async: True if the operation should be run async.  No result returned
        :return: ItemsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['items_request', 'expand', 'placeholders', 'async']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'items_request' is set
        if ('items_request' not in params) or (params['items_request'] is None):
            raise ValueError("Missing the required parameter `items_request` when calling `update_items`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'expand' in params:
            query_params.append(('_expand', params['expand']))
        if 'placeholders' in params:
            query_params.append(('_placeholders', params['placeholders']))
        if 'async' in params:
            query_params.append(('_async', params['async']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'items_request' in params:
            body_params = params['items_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json; charset=UTF-8'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/item/items/batch', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ItemsResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def upload_temporary_multimedia(self, file, **kwargs):
        """
        Upload an image to the temporary multimedia.
        Uploads an image and returns back meta information about the image as well as the identifier needed for the item update. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.upload_temporary_multimedia(file, async=True)
        >>> result = thread.get()

        :param async bool
        :param file file: File to upload (required)
        :return: TempMultimediaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.upload_temporary_multimedia_with_http_info(file, **kwargs)
        else:
            (data) = self.upload_temporary_multimedia_with_http_info(file, **kwargs)
            return data

    def upload_temporary_multimedia_with_http_info(self, file, **kwargs):
        """
        Upload an image to the temporary multimedia.
        Uploads an image and returns back meta information about the image as well as the identifier needed for the item update. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.upload_temporary_multimedia_with_http_info(file, async=True)
        >>> result = thread.get()

        :param async bool
        :param file file: File to upload (required)
        :return: TempMultimediaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_temporary_multimedia" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file' is set
        if ('file' not in params) or (params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `upload_temporary_multimedia`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['multipart/form-data'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/item/temp_multimedia', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TempMultimediaResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
