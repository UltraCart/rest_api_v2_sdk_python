# coding: utf-8

"""
    UltraCart Rest API V2

    This is the next generation UltraCart REST API...

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..api_client import ApiClient


class FulfillmentApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def acknowledge_orders(self, distribution_center_code, order_ids, **kwargs):
        """
        Acknowledge receipt of orders.
        Acknowledge receipt of orders so that they are removed from the fulfillment queue.  This method must be called after receiving and order (via webhook) or retrieving (via retrieve orders method). 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.acknowledge_orders(distribution_center_code, order_ids, async=True)
        >>> result = thread.get()

        :param async bool
        :param str distribution_center_code: Distribution center code (required)
        :param list[str] order_ids: Orders to acknowledge receipt of (limit 100) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.acknowledge_orders_with_http_info(distribution_center_code, order_ids, **kwargs)
        else:
            (data) = self.acknowledge_orders_with_http_info(distribution_center_code, order_ids, **kwargs)
            return data

    def acknowledge_orders_with_http_info(self, distribution_center_code, order_ids, **kwargs):
        """
        Acknowledge receipt of orders.
        Acknowledge receipt of orders so that they are removed from the fulfillment queue.  This method must be called after receiving and order (via webhook) or retrieving (via retrieve orders method). 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.acknowledge_orders_with_http_info(distribution_center_code, order_ids, async=True)
        >>> result = thread.get()

        :param async bool
        :param str distribution_center_code: Distribution center code (required)
        :param list[str] order_ids: Orders to acknowledge receipt of (limit 100) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['distribution_center_code', 'order_ids']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method acknowledge_orders" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'distribution_center_code' is set
        if ('distribution_center_code' not in params) or (params['distribution_center_code'] is None):
            raise ValueError("Missing the required parameter `distribution_center_code` when calling `acknowledge_orders`")
        # verify the required parameter 'order_ids' is set
        if ('order_ids' not in params) or (params['order_ids'] is None):
            raise ValueError("Missing the required parameter `order_ids` when calling `acknowledge_orders`")


        collection_formats = {}

        path_params = {}
        if 'distribution_center_code' in params:
            path_params['distribution_center_code'] = params['distribution_center_code']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'order_ids' in params:
            body_params = params['order_ids']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/fulfillment/distribution_centers/{distribution_center_code}/acknowledgements', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_distribution_center_orders(self, distribution_center_code, **kwargs):
        """
        Retrieve orders queued up for this distribution center.
        Retrieves up to 100 orders that are queued up in this distribution center.  You must acknowledge them before additional new orders will be returned.  There is NO record chunking.  You'll get the same 100 records again and again until you acknowledge orders.  The orders that are returned contain only items for this distribution center and are by default completely expanded with billing, buysafe, channel_partner, checkout, coupons, customer_profile, edi, gift, gift_certificate, internal, items, payment, shipping, summary, taxes. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_distribution_center_orders(distribution_center_code, async=True)
        >>> result = thread.get()

        :param async bool
        :param str distribution_center_code: Distribution center code (required)
        :return: OrdersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_distribution_center_orders_with_http_info(distribution_center_code, **kwargs)
        else:
            (data) = self.get_distribution_center_orders_with_http_info(distribution_center_code, **kwargs)
            return data

    def get_distribution_center_orders_with_http_info(self, distribution_center_code, **kwargs):
        """
        Retrieve orders queued up for this distribution center.
        Retrieves up to 100 orders that are queued up in this distribution center.  You must acknowledge them before additional new orders will be returned.  There is NO record chunking.  You'll get the same 100 records again and again until you acknowledge orders.  The orders that are returned contain only items for this distribution center and are by default completely expanded with billing, buysafe, channel_partner, checkout, coupons, customer_profile, edi, gift, gift_certificate, internal, items, payment, shipping, summary, taxes. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_distribution_center_orders_with_http_info(distribution_center_code, async=True)
        >>> result = thread.get()

        :param async bool
        :param str distribution_center_code: Distribution center code (required)
        :return: OrdersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['distribution_center_code']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_distribution_center_orders" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'distribution_center_code' is set
        if ('distribution_center_code' not in params) or (params['distribution_center_code'] is None):
            raise ValueError("Missing the required parameter `distribution_center_code` when calling `get_distribution_center_orders`")


        collection_formats = {}

        path_params = {}
        if 'distribution_center_code' in params:
            path_params['distribution_center_code'] = params['distribution_center_code']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/fulfillment/distribution_centers/{distribution_center_code}/orders', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='OrdersResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_distribution_centers(self, **kwargs):
        """
        Retrieve distribution centers
        Retrieves the distribution centers that this user has access to. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_distribution_centers(async=True)
        >>> result = thread.get()

        :param async bool
        :return: DistributionCentersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_distribution_centers_with_http_info(**kwargs)
        else:
            (data) = self.get_distribution_centers_with_http_info(**kwargs)
            return data

    def get_distribution_centers_with_http_info(self, **kwargs):
        """
        Retrieve distribution centers
        Retrieves the distribution centers that this user has access to. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_distribution_centers_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: DistributionCentersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_distribution_centers" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/fulfillment/distribution_centers', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DistributionCentersResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def ship_orders(self, distribution_center_code, shipments, **kwargs):
        """
        Mark orders as shipped
        Store the tracking information and mark the order shipped for this distribution center. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.ship_orders(distribution_center_code, shipments, async=True)
        >>> result = thread.get()

        :param async bool
        :param str distribution_center_code: Distribution center code (required)
        :param list[FulfillmentShipment] shipments: Orders to mark shipped (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.ship_orders_with_http_info(distribution_center_code, shipments, **kwargs)
        else:
            (data) = self.ship_orders_with_http_info(distribution_center_code, shipments, **kwargs)
            return data

    def ship_orders_with_http_info(self, distribution_center_code, shipments, **kwargs):
        """
        Mark orders as shipped
        Store the tracking information and mark the order shipped for this distribution center. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.ship_orders_with_http_info(distribution_center_code, shipments, async=True)
        >>> result = thread.get()

        :param async bool
        :param str distribution_center_code: Distribution center code (required)
        :param list[FulfillmentShipment] shipments: Orders to mark shipped (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['distribution_center_code', 'shipments']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ship_orders" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'distribution_center_code' is set
        if ('distribution_center_code' not in params) or (params['distribution_center_code'] is None):
            raise ValueError("Missing the required parameter `distribution_center_code` when calling `ship_orders`")
        # verify the required parameter 'shipments' is set
        if ('shipments' not in params) or (params['shipments'] is None):
            raise ValueError("Missing the required parameter `shipments` when calling `ship_orders`")


        collection_formats = {}

        path_params = {}
        if 'distribution_center_code' in params:
            path_params['distribution_center_code'] = params['distribution_center_code']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'shipments' in params:
            body_params = params['shipments']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/fulfillment/distribution_centers/{distribution_center_code}/shipments', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_inventory(self, distribution_center_code, inventories, **kwargs):
        """
        Update inventory
        Update the inventory for items associated with this distribution center 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_inventory(distribution_center_code, inventories, async=True)
        >>> result = thread.get()

        :param async bool
        :param str distribution_center_code: Distribution center code (required)
        :param list[FulfillmentInventory] inventories: Inventory updates (limit 500) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_inventory_with_http_info(distribution_center_code, inventories, **kwargs)
        else:
            (data) = self.update_inventory_with_http_info(distribution_center_code, inventories, **kwargs)
            return data

    def update_inventory_with_http_info(self, distribution_center_code, inventories, **kwargs):
        """
        Update inventory
        Update the inventory for items associated with this distribution center 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_inventory_with_http_info(distribution_center_code, inventories, async=True)
        >>> result = thread.get()

        :param async bool
        :param str distribution_center_code: Distribution center code (required)
        :param list[FulfillmentInventory] inventories: Inventory updates (limit 500) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['distribution_center_code', 'inventories']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_inventory" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'distribution_center_code' is set
        if ('distribution_center_code' not in params) or (params['distribution_center_code'] is None):
            raise ValueError("Missing the required parameter `distribution_center_code` when calling `update_inventory`")
        # verify the required parameter 'inventories' is set
        if ('inventories' not in params) or (params['inventories'] is None):
            raise ValueError("Missing the required parameter `inventories` when calling `update_inventory`")


        collection_formats = {}

        path_params = {}
        if 'distribution_center_code' in params:
            path_params['distribution_center_code'] = params['distribution_center_code']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'inventories' in params:
            body_params = params['inventories']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/fulfillment/distribution_centers/{distribution_center_code}/inventory', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
