# coding: utf-8

"""
    UltraCart Rest API V2

    This is the next generation UltraCart REST API...

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class CouponApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def delete_coupon(self, coupon_oid, **kwargs):
        """
        Delete a coupon
        Delete a coupon on the UltraCart account. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_coupon(coupon_oid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int coupon_oid: The coupon_oid to delete. (required)
        :return: CouponResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_coupon_with_http_info(coupon_oid, **kwargs)
        else:
            (data) = self.delete_coupon_with_http_info(coupon_oid, **kwargs)
            return data

    def delete_coupon_with_http_info(self, coupon_oid, **kwargs):
        """
        Delete a coupon
        Delete a coupon on the UltraCart account. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_coupon_with_http_info(coupon_oid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int coupon_oid: The coupon_oid to delete. (required)
        :return: CouponResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['coupon_oid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_coupon" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'coupon_oid' is set
        if ('coupon_oid' not in params) or (params['coupon_oid'] is None):
            raise ValueError("Missing the required parameter `coupon_oid` when calling `delete_coupon`")

        resource_path = '/coupon/coupons/{coupon_oid}'.replace('{format}', 'json')
        path_params = {}
        if 'coupon_oid' in params:
            path_params['coupon_oid'] = params['coupon_oid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CouponResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def generate_coupon_codes(self, coupon_oid, quantity, **kwargs):
        """
        Generates one time codes for a coupon
        Generate one time codes for a coupon 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.generate_coupon_codes(coupon_oid, quantity, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int coupon_oid: The coupon oid to generate codes. (required)
        :param int quantity: The quantity of codes to generate. (required)
        :return: CouponCodesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.generate_coupon_codes_with_http_info(coupon_oid, quantity, **kwargs)
        else:
            (data) = self.generate_coupon_codes_with_http_info(coupon_oid, quantity, **kwargs)
            return data

    def generate_coupon_codes_with_http_info(self, coupon_oid, quantity, **kwargs):
        """
        Generates one time codes for a coupon
        Generate one time codes for a coupon 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.generate_coupon_codes_with_http_info(coupon_oid, quantity, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int coupon_oid: The coupon oid to generate codes. (required)
        :param int quantity: The quantity of codes to generate. (required)
        :return: CouponCodesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['coupon_oid', 'quantity']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method generate_coupon_codes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'coupon_oid' is set
        if ('coupon_oid' not in params) or (params['coupon_oid'] is None):
            raise ValueError("Missing the required parameter `coupon_oid` when calling `generate_coupon_codes`")
        # verify the required parameter 'quantity' is set
        if ('quantity' not in params) or (params['quantity'] is None):
            raise ValueError("Missing the required parameter `quantity` when calling `generate_coupon_codes`")

        resource_path = '/coupon/coupons/{coupon_oid}/generate_codes/{quantity}'.replace('{format}', 'json')
        path_params = {}
        if 'coupon_oid' in params:
            path_params['coupon_oid'] = params['coupon_oid']
        if 'quantity' in params:
            path_params['quantity'] = params['quantity']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json; charset=UTF-8'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CouponCodesResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_coupon(self, coupon_oid, **kwargs):
        """
        Retrieve a coupon
        Retrieves a single coupon using the specified coupon profile oid. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_coupon(coupon_oid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int coupon_oid: The coupon oid to retrieve. (required)
        :param str expand: The object expansion to perform on the result.  See documentation for examples
        :return: CouponResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_coupon_with_http_info(coupon_oid, **kwargs)
        else:
            (data) = self.get_coupon_with_http_info(coupon_oid, **kwargs)
            return data

    def get_coupon_with_http_info(self, coupon_oid, **kwargs):
        """
        Retrieve a coupon
        Retrieves a single coupon using the specified coupon profile oid. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_coupon_with_http_info(coupon_oid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int coupon_oid: The coupon oid to retrieve. (required)
        :param str expand: The object expansion to perform on the result.  See documentation for examples
        :return: CouponResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['coupon_oid', 'expand']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_coupon" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'coupon_oid' is set
        if ('coupon_oid' not in params) or (params['coupon_oid'] is None):
            raise ValueError("Missing the required parameter `coupon_oid` when calling `get_coupon`")

        resource_path = '/coupon/coupons/{coupon_oid}'.replace('{format}', 'json')
        path_params = {}
        if 'coupon_oid' in params:
            path_params['coupon_oid'] = params['coupon_oid']

        query_params = {}
        if 'expand' in params:
            query_params['_expand'] = params['expand']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CouponResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_coupons(self, **kwargs):
        """
        Retrieve coupons
        Retrieves coupons for this account.  If no parameters are specified, all coupons will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_coupons(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str merchant_code: Merchant code
        :param str description: Description
        :param str coupon_type: Coupon type
        :param str start_date_begin: Start date begin
        :param str start_date_end: Start date end
        :param str expiration_date_begin: Expiration date begin
        :param str expiration_date_end: Expiration date end
        :param int affiliate_oid: Affiliate oid
        :param bool exclude_expired: Exclude expired
        :param int limit: The maximum number of records to return on this one API call. (Max 200)
        :param int offset: Pagination of the record set.  Offset is a zero based index.
        :param str sort: The sort order of the coupons.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
        :param str expand: The object expansion to perform on the result.  See documentation for examples
        :return: CouponsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_coupons_with_http_info(**kwargs)
        else:
            (data) = self.get_coupons_with_http_info(**kwargs)
            return data

    def get_coupons_with_http_info(self, **kwargs):
        """
        Retrieve coupons
        Retrieves coupons for this account.  If no parameters are specified, all coupons will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_coupons_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str merchant_code: Merchant code
        :param str description: Description
        :param str coupon_type: Coupon type
        :param str start_date_begin: Start date begin
        :param str start_date_end: Start date end
        :param str expiration_date_begin: Expiration date begin
        :param str expiration_date_end: Expiration date end
        :param int affiliate_oid: Affiliate oid
        :param bool exclude_expired: Exclude expired
        :param int limit: The maximum number of records to return on this one API call. (Max 200)
        :param int offset: Pagination of the record set.  Offset is a zero based index.
        :param str sort: The sort order of the coupons.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
        :param str expand: The object expansion to perform on the result.  See documentation for examples
        :return: CouponsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['merchant_code', 'description', 'coupon_type', 'start_date_begin', 'start_date_end', 'expiration_date_begin', 'expiration_date_end', 'affiliate_oid', 'exclude_expired', 'limit', 'offset', 'sort', 'expand']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_coupons" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/coupon/coupons'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'merchant_code' in params:
            query_params['merchant_code'] = params['merchant_code']
        if 'description' in params:
            query_params['description'] = params['description']
        if 'coupon_type' in params:
            query_params['coupon_type'] = params['coupon_type']
        if 'start_date_begin' in params:
            query_params['start_date_begin'] = params['start_date_begin']
        if 'start_date_end' in params:
            query_params['start_date_end'] = params['start_date_end']
        if 'expiration_date_begin' in params:
            query_params['expiration_date_begin'] = params['expiration_date_begin']
        if 'expiration_date_end' in params:
            query_params['expiration_date_end'] = params['expiration_date_end']
        if 'affiliate_oid' in params:
            query_params['affiliate_oid'] = params['affiliate_oid']
        if 'exclude_expired' in params:
            query_params['exclude_expired'] = params['exclude_expired']
        if 'limit' in params:
            query_params['_limit'] = params['limit']
        if 'offset' in params:
            query_params['_offset'] = params['offset']
        if 'sort' in params:
            query_params['_sort'] = params['sort']
        if 'expand' in params:
            query_params['_expand'] = params['expand']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CouponsResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_coupons_by_query(self, coupon_query, **kwargs):
        """
        Retrieve coupons by query
        Retrieves coupons from the account.  If no parameters are specified, all coupons will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_coupons_by_query(coupon_query, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CouponQuery coupon_query: Coupon query (required)
        :param int limit: The maximum number of records to return on this one API call. (Max 200)
        :param int offset: Pagination of the record set.  Offset is a zero based index.
        :param str sort: The sort order of the coupons.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
        :param str expand: The object expansion to perform on the result.  See documentation for examples
        :return: CouponsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_coupons_by_query_with_http_info(coupon_query, **kwargs)
        else:
            (data) = self.get_coupons_by_query_with_http_info(coupon_query, **kwargs)
            return data

    def get_coupons_by_query_with_http_info(self, coupon_query, **kwargs):
        """
        Retrieve coupons by query
        Retrieves coupons from the account.  If no parameters are specified, all coupons will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_coupons_by_query_with_http_info(coupon_query, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CouponQuery coupon_query: Coupon query (required)
        :param int limit: The maximum number of records to return on this one API call. (Max 200)
        :param int offset: Pagination of the record set.  Offset is a zero based index.
        :param str sort: The sort order of the coupons.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
        :param str expand: The object expansion to perform on the result.  See documentation for examples
        :return: CouponsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['coupon_query', 'limit', 'offset', 'sort', 'expand']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_coupons_by_query" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'coupon_query' is set
        if ('coupon_query' not in params) or (params['coupon_query'] is None):
            raise ValueError("Missing the required parameter `coupon_query` when calling `get_coupons_by_query`")

        resource_path = '/coupon/coupons/query'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'limit' in params:
            query_params['_limit'] = params['limit']
        if 'offset' in params:
            query_params['_offset'] = params['offset']
        if 'sort' in params:
            query_params['_sort'] = params['sort']
        if 'expand' in params:
            query_params['_expand'] = params['expand']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'coupon_query' in params:
            body_params = params['coupon_query']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CouponsResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_editor_values(self, **kwargs):
        """
        Retrieve values needed for a coupon editor
        Retrieve values needed for a coupon editor 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_editor_values(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: CouponEditorValues
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_editor_values_with_http_info(**kwargs)
        else:
            (data) = self.get_editor_values_with_http_info(**kwargs)
            return data

    def get_editor_values_with_http_info(self, **kwargs):
        """
        Retrieve values needed for a coupon editor
        Retrieve values needed for a coupon editor 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_editor_values_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: CouponEditorValues
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_editor_values" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/coupon/editor_values'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CouponEditorValues',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def insert_coupon(self, coupon, **kwargs):
        """
        Insert a coupon
        Insert a coupon on the UltraCart account. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.insert_coupon(coupon, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Coupon coupon: Coupon to insert (required)
        :param str expand: The object expansion to perform on the result.  See documentation for examples
        :return: CouponResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.insert_coupon_with_http_info(coupon, **kwargs)
        else:
            (data) = self.insert_coupon_with_http_info(coupon, **kwargs)
            return data

    def insert_coupon_with_http_info(self, coupon, **kwargs):
        """
        Insert a coupon
        Insert a coupon on the UltraCart account. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.insert_coupon_with_http_info(coupon, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Coupon coupon: Coupon to insert (required)
        :param str expand: The object expansion to perform on the result.  See documentation for examples
        :return: CouponResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['coupon', 'expand']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method insert_coupon" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'coupon' is set
        if ('coupon' not in params) or (params['coupon'] is None):
            raise ValueError("Missing the required parameter `coupon` when calling `insert_coupon`")

        resource_path = '/coupon/coupons'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'expand' in params:
            query_params['_expand'] = params['expand']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'coupon' in params:
            body_params = params['coupon']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json; charset=UTF-8'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CouponResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def update_coupon(self, coupon, coupon_oid, **kwargs):
        """
        Update a coupon
        Update a coupon on the UltraCart account. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_coupon(coupon, coupon_oid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Coupon coupon: Coupon to update (required)
        :param int coupon_oid: The coupon_oid to update. (required)
        :param str expand: The object expansion to perform on the result.  See documentation for examples
        :return: CouponResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_coupon_with_http_info(coupon, coupon_oid, **kwargs)
        else:
            (data) = self.update_coupon_with_http_info(coupon, coupon_oid, **kwargs)
            return data

    def update_coupon_with_http_info(self, coupon, coupon_oid, **kwargs):
        """
        Update a coupon
        Update a coupon on the UltraCart account. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_coupon_with_http_info(coupon, coupon_oid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Coupon coupon: Coupon to update (required)
        :param int coupon_oid: The coupon_oid to update. (required)
        :param str expand: The object expansion to perform on the result.  See documentation for examples
        :return: CouponResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['coupon', 'coupon_oid', 'expand']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_coupon" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'coupon' is set
        if ('coupon' not in params) or (params['coupon'] is None):
            raise ValueError("Missing the required parameter `coupon` when calling `update_coupon`")
        # verify the required parameter 'coupon_oid' is set
        if ('coupon_oid' not in params) or (params['coupon_oid'] is None):
            raise ValueError("Missing the required parameter `coupon_oid` when calling `update_coupon`")

        resource_path = '/coupon/coupons/{coupon_oid}'.replace('{format}', 'json')
        path_params = {}
        if 'coupon_oid' in params:
            path_params['coupon_oid'] = params['coupon_oid']

        query_params = {}
        if 'expand' in params:
            query_params['_expand'] = params['expand']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'coupon' in params:
            body_params = params['coupon']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json; charset=UTF-8'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CouponResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
