# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..api_client import ApiClient


class TaxApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_tax_provider_self_city(self, city, tax_city, **kwargs):
        """
        Deletes a Self tax provider city
        Deletes a Self tax provider city. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_tax_provider_self_city(city, tax_city, async=True)
        >>> result = thread.get()

        :param async bool
        :param str city: The city being deleted. (required)
        :param TaxCity tax_city: tax city to be deleted (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_tax_provider_self_city_with_http_info(city, tax_city, **kwargs)
        else:
            (data) = self.delete_tax_provider_self_city_with_http_info(city, tax_city, **kwargs)
            return data

    def delete_tax_provider_self_city_with_http_info(self, city, tax_city, **kwargs):
        """
        Deletes a Self tax provider city
        Deletes a Self tax provider city. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_tax_provider_self_city_with_http_info(city, tax_city, async=True)
        >>> result = thread.get()

        :param async bool
        :param str city: The city being deleted. (required)
        :param TaxCity tax_city: tax city to be deleted (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['city', 'tax_city']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_tax_provider_self_city" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'city' is set
        if ('city' not in params) or (params['city'] is None):
            raise ValueError("Missing the required parameter `city` when calling `delete_tax_provider_self_city`")
        # verify the required parameter 'tax_city' is set
        if ('tax_city' not in params) or (params['tax_city'] is None):
            raise ValueError("Missing the required parameter `tax_city` when calling `delete_tax_provider_self_city`")


        collection_formats = {}

        path_params = {}
        if 'city' in params:
            path_params['city'] = params['city']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tax_city' in params:
            body_params = params['tax_city']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/tax/providers/self/city/{city}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_tax_provider_self_country(self, country_code, tax_country, **kwargs):
        """
        Deletes a Self tax provider country
        Deletes a Self tax provider country. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_tax_provider_self_country(country_code, tax_country, async=True)
        >>> result = thread.get()

        :param async bool
        :param str country_code: The country code being deleted. (required)
        :param TaxCountry tax_country: tax country to be deleted (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_tax_provider_self_country_with_http_info(country_code, tax_country, **kwargs)
        else:
            (data) = self.delete_tax_provider_self_country_with_http_info(country_code, tax_country, **kwargs)
            return data

    def delete_tax_provider_self_country_with_http_info(self, country_code, tax_country, **kwargs):
        """
        Deletes a Self tax provider country
        Deletes a Self tax provider country. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_tax_provider_self_country_with_http_info(country_code, tax_country, async=True)
        >>> result = thread.get()

        :param async bool
        :param str country_code: The country code being deleted. (required)
        :param TaxCountry tax_country: tax country to be deleted (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['country_code', 'tax_country']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_tax_provider_self_country" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'country_code' is set
        if ('country_code' not in params) or (params['country_code'] is None):
            raise ValueError("Missing the required parameter `country_code` when calling `delete_tax_provider_self_country`")
        # verify the required parameter 'tax_country' is set
        if ('tax_country' not in params) or (params['tax_country'] is None):
            raise ValueError("Missing the required parameter `tax_country` when calling `delete_tax_provider_self_country`")


        collection_formats = {}

        path_params = {}
        if 'country_code' in params:
            path_params['countryCode'] = params['country_code']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tax_country' in params:
            body_params = params['tax_country']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/tax/providers/self/country/{countryCode}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_tax_provider_self_county(self, county, tax_county, **kwargs):
        """
        Deletes a Self tax provider county
        Deletes a Self tax provider county. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_tax_provider_self_county(county, tax_county, async=True)
        >>> result = thread.get()

        :param async bool
        :param str county: The county being deleted. (required)
        :param TaxCounty tax_county: tax county to be deleted (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_tax_provider_self_county_with_http_info(county, tax_county, **kwargs)
        else:
            (data) = self.delete_tax_provider_self_county_with_http_info(county, tax_county, **kwargs)
            return data

    def delete_tax_provider_self_county_with_http_info(self, county, tax_county, **kwargs):
        """
        Deletes a Self tax provider county
        Deletes a Self tax provider county. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_tax_provider_self_county_with_http_info(county, tax_county, async=True)
        >>> result = thread.get()

        :param async bool
        :param str county: The county being deleted. (required)
        :param TaxCounty tax_county: tax county to be deleted (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['county', 'tax_county']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_tax_provider_self_county" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'county' is set
        if ('county' not in params) or (params['county'] is None):
            raise ValueError("Missing the required parameter `county` when calling `delete_tax_provider_self_county`")
        # verify the required parameter 'tax_county' is set
        if ('tax_county' not in params) or (params['tax_county'] is None):
            raise ValueError("Missing the required parameter `tax_county` when calling `delete_tax_provider_self_county`")


        collection_formats = {}

        path_params = {}
        if 'county' in params:
            path_params['county'] = params['county']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tax_county' in params:
            body_params = params['tax_county']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/tax/providers/self/county/{county}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_tax_provider_self_postal_code(self, postal_code, tax_postal_code, **kwargs):
        """
        Deletes a Self tax provider postalCode
        Deletes a Self tax provider postalCode. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_tax_provider_self_postal_code(postal_code, tax_postal_code, async=True)
        >>> result = thread.get()

        :param async bool
        :param str postal_code: The postal code being deleted. (required)
        :param TaxPostalCode tax_postal_code: tax postal code to be deleted (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_tax_provider_self_postal_code_with_http_info(postal_code, tax_postal_code, **kwargs)
        else:
            (data) = self.delete_tax_provider_self_postal_code_with_http_info(postal_code, tax_postal_code, **kwargs)
            return data

    def delete_tax_provider_self_postal_code_with_http_info(self, postal_code, tax_postal_code, **kwargs):
        """
        Deletes a Self tax provider postalCode
        Deletes a Self tax provider postalCode. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_tax_provider_self_postal_code_with_http_info(postal_code, tax_postal_code, async=True)
        >>> result = thread.get()

        :param async bool
        :param str postal_code: The postal code being deleted. (required)
        :param TaxPostalCode tax_postal_code: tax postal code to be deleted (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['postal_code', 'tax_postal_code']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_tax_provider_self_postal_code" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'postal_code' is set
        if ('postal_code' not in params) or (params['postal_code'] is None):
            raise ValueError("Missing the required parameter `postal_code` when calling `delete_tax_provider_self_postal_code`")
        # verify the required parameter 'tax_postal_code' is set
        if ('tax_postal_code' not in params) or (params['tax_postal_code'] is None):
            raise ValueError("Missing the required parameter `tax_postal_code` when calling `delete_tax_provider_self_postal_code`")


        collection_formats = {}

        path_params = {}
        if 'postal_code' in params:
            path_params['postal_code'] = params['postal_code']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tax_postal_code' in params:
            body_params = params['tax_postal_code']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/tax/providers/self/postalCode/{postal_code}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_tax_provider_self_state(self, state_code, tax_state, **kwargs):
        """
        Deletes a Self tax provider state
        Deletes a Self tax provider state. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_tax_provider_self_state(state_code, tax_state, async=True)
        >>> result = thread.get()

        :param async bool
        :param str state_code: The state code being deleted. (required)
        :param TaxState tax_state: tax state to be deleted (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_tax_provider_self_state_with_http_info(state_code, tax_state, **kwargs)
        else:
            (data) = self.delete_tax_provider_self_state_with_http_info(state_code, tax_state, **kwargs)
            return data

    def delete_tax_provider_self_state_with_http_info(self, state_code, tax_state, **kwargs):
        """
        Deletes a Self tax provider state
        Deletes a Self tax provider state. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_tax_provider_self_state_with_http_info(state_code, tax_state, async=True)
        >>> result = thread.get()

        :param async bool
        :param str state_code: The state code being deleted. (required)
        :param TaxState tax_state: tax state to be deleted (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['state_code', 'tax_state']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_tax_provider_self_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'state_code' is set
        if ('state_code' not in params) or (params['state_code'] is None):
            raise ValueError("Missing the required parameter `state_code` when calling `delete_tax_provider_self_state`")
        # verify the required parameter 'tax_state' is set
        if ('tax_state' not in params) or (params['tax_state'] is None):
            raise ValueError("Missing the required parameter `tax_state` when calling `delete_tax_provider_self_state`")


        collection_formats = {}

        path_params = {}
        if 'state_code' in params:
            path_params['stateCode'] = params['state_code']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tax_state' in params:
            body_params = params['tax_state']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/tax/providers/self/state/{stateCode}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_tax_provider_avalara(self, **kwargs):
        """
        Retrieve the Avalara tax provider
        Retrieves the Avalara tax provider. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_tax_provider_avalara(async=True)
        >>> result = thread.get()

        :param async bool
        :return: TaxProviderAvalara
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_tax_provider_avalara_with_http_info(**kwargs)
        else:
            (data) = self.get_tax_provider_avalara_with_http_info(**kwargs)
            return data

    def get_tax_provider_avalara_with_http_info(self, **kwargs):
        """
        Retrieve the Avalara tax provider
        Retrieves the Avalara tax provider. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_tax_provider_avalara_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: TaxProviderAvalara
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tax_provider_avalara" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/tax/providers/avalara', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TaxProviderAvalara',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_tax_provider_avalara_companies(self, tax_provider_avalara, **kwargs):
        """
        Returns Avalara Tax companies configured by the merchant
        Returns Avalara Tax companies configured by the merchant 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_tax_provider_avalara_companies(tax_provider_avalara, async=True)
        >>> result = thread.get()

        :param async bool
        :param TaxProviderAvalara tax_provider_avalara: TaxProviderAvalara object (required)
        :return: TaxProviderAvalaraCompaniesResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_tax_provider_avalara_companies_with_http_info(tax_provider_avalara, **kwargs)
        else:
            (data) = self.get_tax_provider_avalara_companies_with_http_info(tax_provider_avalara, **kwargs)
            return data

    def get_tax_provider_avalara_companies_with_http_info(self, tax_provider_avalara, **kwargs):
        """
        Returns Avalara Tax companies configured by the merchant
        Returns Avalara Tax companies configured by the merchant 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_tax_provider_avalara_companies_with_http_info(tax_provider_avalara, async=True)
        >>> result = thread.get()

        :param async bool
        :param TaxProviderAvalara tax_provider_avalara: TaxProviderAvalara object (required)
        :return: TaxProviderAvalaraCompaniesResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tax_provider_avalara']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tax_provider_avalara_companies" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tax_provider_avalara' is set
        if ('tax_provider_avalara' not in params) or (params['tax_provider_avalara'] is None):
            raise ValueError("Missing the required parameter `tax_provider_avalara` when calling `get_tax_provider_avalara_companies`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tax_provider_avalara' in params:
            body_params = params['tax_provider_avalara']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/tax/providers/avalara/companies', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TaxProviderAvalaraCompaniesResult',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_tax_provider_avalara_test(self, **kwargs):
        """
        Attempts to connect to Avalara and returns back the response
        Attempts to connect to Avalara and returns back the response. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_tax_provider_avalara_test(async=True)
        >>> result = thread.get()

        :param async bool
        :return: TaxProviderTestResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_tax_provider_avalara_test_with_http_info(**kwargs)
        else:
            (data) = self.get_tax_provider_avalara_test_with_http_info(**kwargs)
            return data

    def get_tax_provider_avalara_test_with_http_info(self, **kwargs):
        """
        Attempts to connect to Avalara and returns back the response
        Attempts to connect to Avalara and returns back the response. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_tax_provider_avalara_test_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: TaxProviderTestResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tax_provider_avalara_test" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/tax/providers/avalara/test', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TaxProviderTestResult',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_tax_provider_self(self, **kwargs):
        """
        Retrieve the Self tax provider
        Retrieves the Self tax provider. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_tax_provider_self(async=True)
        >>> result = thread.get()

        :param async bool
        :return: TaxProviderSelf
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_tax_provider_self_with_http_info(**kwargs)
        else:
            (data) = self.get_tax_provider_self_with_http_info(**kwargs)
            return data

    def get_tax_provider_self_with_http_info(self, **kwargs):
        """
        Retrieve the Self tax provider
        Retrieves the Self tax provider. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_tax_provider_self_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: TaxProviderSelf
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tax_provider_self" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/tax/providers/self', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TaxProviderSelf',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_tax_provider_self_countries(self, **kwargs):
        """
        Retrieve the Self tax provider countries
        Retrieves the Self tax provider countries. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_tax_provider_self_countries(async=True)
        >>> result = thread.get()

        :param async bool
        :return: TaxProviderSelfCountriesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_tax_provider_self_countries_with_http_info(**kwargs)
        else:
            (data) = self.get_tax_provider_self_countries_with_http_info(**kwargs)
            return data

    def get_tax_provider_self_countries_with_http_info(self, **kwargs):
        """
        Retrieve the Self tax provider countries
        Retrieves the Self tax provider countries. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_tax_provider_self_countries_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: TaxProviderSelfCountriesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tax_provider_self_countries" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/tax/providers/self/countries', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TaxProviderSelfCountriesResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_tax_provider_self_regions_by_country_code(self, country_code, **kwargs):
        """
        Retrieve the Self tax provider regions for a given country code
        Retrieves the Self tax provider regions for a given country code. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_tax_provider_self_regions_by_country_code(country_code, async=True)
        >>> result = thread.get()

        :param async bool
        :param str country_code: The country code regions desired. (required)
        :return: TaxProviderSelfRegionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_tax_provider_self_regions_by_country_code_with_http_info(country_code, **kwargs)
        else:
            (data) = self.get_tax_provider_self_regions_by_country_code_with_http_info(country_code, **kwargs)
            return data

    def get_tax_provider_self_regions_by_country_code_with_http_info(self, country_code, **kwargs):
        """
        Retrieve the Self tax provider regions for a given country code
        Retrieves the Self tax provider regions for a given country code. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_tax_provider_self_regions_by_country_code_with_http_info(country_code, async=True)
        >>> result = thread.get()

        :param async bool
        :param str country_code: The country code regions desired. (required)
        :return: TaxProviderSelfRegionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['country_code']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tax_provider_self_regions_by_country_code" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'country_code' is set
        if ('country_code' not in params) or (params['country_code'] is None):
            raise ValueError("Missing the required parameter `country_code` when calling `get_tax_provider_self_regions_by_country_code`")


        collection_formats = {}

        path_params = {}
        if 'country_code' in params:
            path_params['countryCode'] = params['country_code']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/tax/providers/self/regions/{countryCode}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TaxProviderSelfRegionsResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_tax_provider_tax_jar(self, **kwargs):
        """
        Retrieve the TaxJar tax provider
        Retrieves the TaxJar tax provider. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_tax_provider_tax_jar(async=True)
        >>> result = thread.get()

        :param async bool
        :return: TaxProviderTaxJar
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_tax_provider_tax_jar_with_http_info(**kwargs)
        else:
            (data) = self.get_tax_provider_tax_jar_with_http_info(**kwargs)
            return data

    def get_tax_provider_tax_jar_with_http_info(self, **kwargs):
        """
        Retrieve the TaxJar tax provider
        Retrieves the TaxJar tax provider. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_tax_provider_tax_jar_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: TaxProviderTaxJar
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tax_provider_tax_jar" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/tax/providers/taxjar', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TaxProviderTaxJar',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_tax_provider_tax_jar_test(self, **kwargs):
        """
        Attempts to connect to TaxJar and returns back the response
        Attempts to connect to TaxJar and returns back the response. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_tax_provider_tax_jar_test(async=True)
        >>> result = thread.get()

        :param async bool
        :return: TaxProviderTestResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_tax_provider_tax_jar_test_with_http_info(**kwargs)
        else:
            (data) = self.get_tax_provider_tax_jar_test_with_http_info(**kwargs)
            return data

    def get_tax_provider_tax_jar_test_with_http_info(self, **kwargs):
        """
        Attempts to connect to TaxJar and returns back the response
        Attempts to connect to TaxJar and returns back the response. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_tax_provider_tax_jar_test_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: TaxProviderTestResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tax_provider_tax_jar_test" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/tax/providers/taxjar/test', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TaxProviderTestResult',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_tax_provider_ultra_cart(self, **kwargs):
        """
        Retrieve the UltraCart tax provider
        Retrieves the UltraCart tax provider. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_tax_provider_ultra_cart(async=True)
        >>> result = thread.get()

        :param async bool
        :return: TaxProviderUltraCart
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_tax_provider_ultra_cart_with_http_info(**kwargs)
        else:
            (data) = self.get_tax_provider_ultra_cart_with_http_info(**kwargs)
            return data

    def get_tax_provider_ultra_cart_with_http_info(self, **kwargs):
        """
        Retrieve the UltraCart tax provider
        Retrieves the UltraCart tax provider. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_tax_provider_ultra_cart_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: TaxProviderUltraCart
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tax_provider_ultra_cart" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/tax/providers/ultracart', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TaxProviderUltraCart',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_tax_providers(self, **kwargs):
        """
        Retrieve tax methods
        Retrieves tax methods for this account. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_tax_providers(async=True)
        >>> result = thread.get()

        :param async bool
        :param int limit: The maximum number of records to return on this one API call. (Max 200)
        :param int offset: Pagination of the record set.  Offset is a zero based index.
        :param str expand: The object expansion to perform on the result.  See documentation for examples
        :return: TaxProvidersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_tax_providers_with_http_info(**kwargs)
        else:
            (data) = self.get_tax_providers_with_http_info(**kwargs)
            return data

    def get_tax_providers_with_http_info(self, **kwargs):
        """
        Retrieve tax methods
        Retrieves tax methods for this account. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_tax_providers_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int limit: The maximum number of records to return on this one API call. (Max 200)
        :param int offset: Pagination of the record set.  Offset is a zero based index.
        :param str expand: The object expansion to perform on the result.  See documentation for examples
        :return: TaxProvidersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'offset', 'expand']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tax_providers" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('_limit', params['limit']))
        if 'offset' in params:
            query_params.append(('_offset', params['offset']))
        if 'expand' in params:
            query_params.append(('_expand', params['expand']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/tax/providers', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TaxProvidersResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def set_active_tax_provider(self, provider_name, **kwargs):
        """
        Toggle a tax provider to active
        Toggle a tax provider to active. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.set_active_tax_provider(provider_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str provider_name: The tax provider to set active. (required)
        :return: TaxProviderActivateResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.set_active_tax_provider_with_http_info(provider_name, **kwargs)
        else:
            (data) = self.set_active_tax_provider_with_http_info(provider_name, **kwargs)
            return data

    def set_active_tax_provider_with_http_info(self, provider_name, **kwargs):
        """
        Toggle a tax provider to active
        Toggle a tax provider to active. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.set_active_tax_provider_with_http_info(provider_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str provider_name: The tax provider to set active. (required)
        :return: TaxProviderActivateResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['provider_name']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_active_tax_provider" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'provider_name' is set
        if ('provider_name' not in params) or (params['provider_name'] is None):
            raise ValueError("Missing the required parameter `provider_name` when calling `set_active_tax_provider`")


        collection_formats = {}

        path_params = {}
        if 'provider_name' in params:
            path_params['providerName'] = params['provider_name']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/tax/providers/setActive/{providerName}', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TaxProviderActivateResult',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_tax_provider_avalara(self, tax_provider_avalara, **kwargs):
        """
        Update the Avalara tax provider
        Update the Avalara tax provider. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_tax_provider_avalara(tax_provider_avalara, async=True)
        >>> result = thread.get()

        :param async bool
        :param TaxProviderAvalara tax_provider_avalara: TaxProviderAvalara object (required)
        :return: TaxProviderAvalara
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_tax_provider_avalara_with_http_info(tax_provider_avalara, **kwargs)
        else:
            (data) = self.update_tax_provider_avalara_with_http_info(tax_provider_avalara, **kwargs)
            return data

    def update_tax_provider_avalara_with_http_info(self, tax_provider_avalara, **kwargs):
        """
        Update the Avalara tax provider
        Update the Avalara tax provider. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_tax_provider_avalara_with_http_info(tax_provider_avalara, async=True)
        >>> result = thread.get()

        :param async bool
        :param TaxProviderAvalara tax_provider_avalara: TaxProviderAvalara object (required)
        :return: TaxProviderAvalara
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tax_provider_avalara']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_tax_provider_avalara" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tax_provider_avalara' is set
        if ('tax_provider_avalara' not in params) or (params['tax_provider_avalara'] is None):
            raise ValueError("Missing the required parameter `tax_provider_avalara` when calling `update_tax_provider_avalara`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tax_provider_avalara' in params:
            body_params = params['tax_provider_avalara']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/tax/providers/avalara', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TaxProviderAvalara',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_tax_provider_self(self, tax_provider_self, **kwargs):
        """
        Update the Self tax provider
        Update the Self tax provider. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_tax_provider_self(tax_provider_self, async=True)
        >>> result = thread.get()

        :param async bool
        :param TaxProviderSelf tax_provider_self: TaxProviderSelf object (required)
        :return: TaxProviderSelf
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_tax_provider_self_with_http_info(tax_provider_self, **kwargs)
        else:
            (data) = self.update_tax_provider_self_with_http_info(tax_provider_self, **kwargs)
            return data

    def update_tax_provider_self_with_http_info(self, tax_provider_self, **kwargs):
        """
        Update the Self tax provider
        Update the Self tax provider. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_tax_provider_self_with_http_info(tax_provider_self, async=True)
        >>> result = thread.get()

        :param async bool
        :param TaxProviderSelf tax_provider_self: TaxProviderSelf object (required)
        :return: TaxProviderSelf
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tax_provider_self']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_tax_provider_self" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tax_provider_self' is set
        if ('tax_provider_self' not in params) or (params['tax_provider_self'] is None):
            raise ValueError("Missing the required parameter `tax_provider_self` when calling `update_tax_provider_self`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tax_provider_self' in params:
            body_params = params['tax_provider_self']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/tax/providers/self', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TaxProviderSelf',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_tax_provider_self_city(self, city, tax_city, **kwargs):
        """
        Updates a Self tax provider city
        Updates a Self tax provider city. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_tax_provider_self_city(city, tax_city, async=True)
        >>> result = thread.get()

        :param async bool
        :param str city: The city being updated. (required)
        :param TaxCity tax_city: tax city to be updated (required)
        :return: TaxCity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_tax_provider_self_city_with_http_info(city, tax_city, **kwargs)
        else:
            (data) = self.update_tax_provider_self_city_with_http_info(city, tax_city, **kwargs)
            return data

    def update_tax_provider_self_city_with_http_info(self, city, tax_city, **kwargs):
        """
        Updates a Self tax provider city
        Updates a Self tax provider city. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_tax_provider_self_city_with_http_info(city, tax_city, async=True)
        >>> result = thread.get()

        :param async bool
        :param str city: The city being updated. (required)
        :param TaxCity tax_city: tax city to be updated (required)
        :return: TaxCity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['city', 'tax_city']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_tax_provider_self_city" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'city' is set
        if ('city' not in params) or (params['city'] is None):
            raise ValueError("Missing the required parameter `city` when calling `update_tax_provider_self_city`")
        # verify the required parameter 'tax_city' is set
        if ('tax_city' not in params) or (params['tax_city'] is None):
            raise ValueError("Missing the required parameter `tax_city` when calling `update_tax_provider_self_city`")


        collection_formats = {}

        path_params = {}
        if 'city' in params:
            path_params['city'] = params['city']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tax_city' in params:
            body_params = params['tax_city']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/tax/providers/self/city/{city}', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TaxCity',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_tax_provider_self_country(self, country_code, tax_country, **kwargs):
        """
        Updates a Self tax provider country
        Updates a Self tax provider country. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_tax_provider_self_country(country_code, tax_country, async=True)
        >>> result = thread.get()

        :param async bool
        :param str country_code: The country code being updated. (required)
        :param TaxCountry tax_country: tax country to be updated (required)
        :return: TaxCountry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_tax_provider_self_country_with_http_info(country_code, tax_country, **kwargs)
        else:
            (data) = self.update_tax_provider_self_country_with_http_info(country_code, tax_country, **kwargs)
            return data

    def update_tax_provider_self_country_with_http_info(self, country_code, tax_country, **kwargs):
        """
        Updates a Self tax provider country
        Updates a Self tax provider country. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_tax_provider_self_country_with_http_info(country_code, tax_country, async=True)
        >>> result = thread.get()

        :param async bool
        :param str country_code: The country code being updated. (required)
        :param TaxCountry tax_country: tax country to be updated (required)
        :return: TaxCountry
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['country_code', 'tax_country']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_tax_provider_self_country" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'country_code' is set
        if ('country_code' not in params) or (params['country_code'] is None):
            raise ValueError("Missing the required parameter `country_code` when calling `update_tax_provider_self_country`")
        # verify the required parameter 'tax_country' is set
        if ('tax_country' not in params) or (params['tax_country'] is None):
            raise ValueError("Missing the required parameter `tax_country` when calling `update_tax_provider_self_country`")


        collection_formats = {}

        path_params = {}
        if 'country_code' in params:
            path_params['countryCode'] = params['country_code']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tax_country' in params:
            body_params = params['tax_country']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/tax/providers/self/country/{countryCode}', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TaxCountry',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_tax_provider_self_county(self, county, tax_county, **kwargs):
        """
        Updates a Self tax provider county
        Updates a Self tax provider county. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_tax_provider_self_county(county, tax_county, async=True)
        >>> result = thread.get()

        :param async bool
        :param str county: The county being updated. (required)
        :param TaxCounty tax_county: tax county to be updated (required)
        :return: TaxCounty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_tax_provider_self_county_with_http_info(county, tax_county, **kwargs)
        else:
            (data) = self.update_tax_provider_self_county_with_http_info(county, tax_county, **kwargs)
            return data

    def update_tax_provider_self_county_with_http_info(self, county, tax_county, **kwargs):
        """
        Updates a Self tax provider county
        Updates a Self tax provider county. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_tax_provider_self_county_with_http_info(county, tax_county, async=True)
        >>> result = thread.get()

        :param async bool
        :param str county: The county being updated. (required)
        :param TaxCounty tax_county: tax county to be updated (required)
        :return: TaxCounty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['county', 'tax_county']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_tax_provider_self_county" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'county' is set
        if ('county' not in params) or (params['county'] is None):
            raise ValueError("Missing the required parameter `county` when calling `update_tax_provider_self_county`")
        # verify the required parameter 'tax_county' is set
        if ('tax_county' not in params) or (params['tax_county'] is None):
            raise ValueError("Missing the required parameter `tax_county` when calling `update_tax_provider_self_county`")


        collection_formats = {}

        path_params = {}
        if 'county' in params:
            path_params['county'] = params['county']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tax_county' in params:
            body_params = params['tax_county']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/tax/providers/self/county/{county}', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TaxCounty',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_tax_provider_self_postal_code(self, postal_code, tax_postal_code, **kwargs):
        """
        Updates a Self tax provider postalCode
        Updates a Self tax provider postalCode. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_tax_provider_self_postal_code(postal_code, tax_postal_code, async=True)
        >>> result = thread.get()

        :param async bool
        :param str postal_code: The postal code being updated. (required)
        :param TaxPostalCode tax_postal_code: tax postal code to be updated (required)
        :return: TaxPostalCode
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_tax_provider_self_postal_code_with_http_info(postal_code, tax_postal_code, **kwargs)
        else:
            (data) = self.update_tax_provider_self_postal_code_with_http_info(postal_code, tax_postal_code, **kwargs)
            return data

    def update_tax_provider_self_postal_code_with_http_info(self, postal_code, tax_postal_code, **kwargs):
        """
        Updates a Self tax provider postalCode
        Updates a Self tax provider postalCode. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_tax_provider_self_postal_code_with_http_info(postal_code, tax_postal_code, async=True)
        >>> result = thread.get()

        :param async bool
        :param str postal_code: The postal code being updated. (required)
        :param TaxPostalCode tax_postal_code: tax postal code to be updated (required)
        :return: TaxPostalCode
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['postal_code', 'tax_postal_code']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_tax_provider_self_postal_code" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'postal_code' is set
        if ('postal_code' not in params) or (params['postal_code'] is None):
            raise ValueError("Missing the required parameter `postal_code` when calling `update_tax_provider_self_postal_code`")
        # verify the required parameter 'tax_postal_code' is set
        if ('tax_postal_code' not in params) or (params['tax_postal_code'] is None):
            raise ValueError("Missing the required parameter `tax_postal_code` when calling `update_tax_provider_self_postal_code`")


        collection_formats = {}

        path_params = {}
        if 'postal_code' in params:
            path_params['postal_code'] = params['postal_code']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tax_postal_code' in params:
            body_params = params['tax_postal_code']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/tax/providers/self/postalCode/{postal_code}', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TaxPostalCode',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_tax_provider_self_state(self, state_code, tax_state, **kwargs):
        """
        Updates a Self tax provider state
        Updates a Self tax provider state. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_tax_provider_self_state(state_code, tax_state, async=True)
        >>> result = thread.get()

        :param async bool
        :param str state_code: The state code being updated. (required)
        :param TaxState tax_state: tax state to be updated (required)
        :return: TaxState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_tax_provider_self_state_with_http_info(state_code, tax_state, **kwargs)
        else:
            (data) = self.update_tax_provider_self_state_with_http_info(state_code, tax_state, **kwargs)
            return data

    def update_tax_provider_self_state_with_http_info(self, state_code, tax_state, **kwargs):
        """
        Updates a Self tax provider state
        Updates a Self tax provider state. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_tax_provider_self_state_with_http_info(state_code, tax_state, async=True)
        >>> result = thread.get()

        :param async bool
        :param str state_code: The state code being updated. (required)
        :param TaxState tax_state: tax state to be updated (required)
        :return: TaxState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['state_code', 'tax_state']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_tax_provider_self_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'state_code' is set
        if ('state_code' not in params) or (params['state_code'] is None):
            raise ValueError("Missing the required parameter `state_code` when calling `update_tax_provider_self_state`")
        # verify the required parameter 'tax_state' is set
        if ('tax_state' not in params) or (params['tax_state'] is None):
            raise ValueError("Missing the required parameter `tax_state` when calling `update_tax_provider_self_state`")


        collection_formats = {}

        path_params = {}
        if 'state_code' in params:
            path_params['stateCode'] = params['state_code']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tax_state' in params:
            body_params = params['tax_state']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/tax/providers/self/state/{stateCode}', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TaxState',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_tax_provider_tax_jar(self, tax_provider_tax_jar, **kwargs):
        """
        Update the TaxJar tax provider
        Update the TaxJar tax provider. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_tax_provider_tax_jar(tax_provider_tax_jar, async=True)
        >>> result = thread.get()

        :param async bool
        :param TaxProviderTaxJar tax_provider_tax_jar: TaxProviderTaxJar object (required)
        :return: TaxProviderTaxJar
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_tax_provider_tax_jar_with_http_info(tax_provider_tax_jar, **kwargs)
        else:
            (data) = self.update_tax_provider_tax_jar_with_http_info(tax_provider_tax_jar, **kwargs)
            return data

    def update_tax_provider_tax_jar_with_http_info(self, tax_provider_tax_jar, **kwargs):
        """
        Update the TaxJar tax provider
        Update the TaxJar tax provider. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_tax_provider_tax_jar_with_http_info(tax_provider_tax_jar, async=True)
        >>> result = thread.get()

        :param async bool
        :param TaxProviderTaxJar tax_provider_tax_jar: TaxProviderTaxJar object (required)
        :return: TaxProviderTaxJar
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tax_provider_tax_jar']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_tax_provider_tax_jar" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tax_provider_tax_jar' is set
        if ('tax_provider_tax_jar' not in params) or (params['tax_provider_tax_jar'] is None):
            raise ValueError("Missing the required parameter `tax_provider_tax_jar` when calling `update_tax_provider_tax_jar`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tax_provider_tax_jar' in params:
            body_params = params['tax_provider_tax_jar']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/tax/providers/taxjar', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TaxProviderTaxJar',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_tax_provider_ultra_cart(self, tax_provider_ultracart, **kwargs):
        """
        Update the UltraCart tax provider
        Update the UltraCart tax provider. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_tax_provider_ultra_cart(tax_provider_ultracart, async=True)
        >>> result = thread.get()

        :param async bool
        :param TaxProviderUltraCart tax_provider_ultracart: TaxProviderUltraCart object (required)
        :return: TaxProviderUltraCart
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_tax_provider_ultra_cart_with_http_info(tax_provider_ultracart, **kwargs)
        else:
            (data) = self.update_tax_provider_ultra_cart_with_http_info(tax_provider_ultracart, **kwargs)
            return data

    def update_tax_provider_ultra_cart_with_http_info(self, tax_provider_ultracart, **kwargs):
        """
        Update the UltraCart tax provider
        Update the UltraCart tax provider. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_tax_provider_ultra_cart_with_http_info(tax_provider_ultracart, async=True)
        >>> result = thread.get()

        :param async bool
        :param TaxProviderUltraCart tax_provider_ultracart: TaxProviderUltraCart object (required)
        :return: TaxProviderUltraCart
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tax_provider_ultracart']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_tax_provider_ultra_cart" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tax_provider_ultracart' is set
        if ('tax_provider_ultracart' not in params) or (params['tax_provider_ultracart'] is None):
            raise ValueError("Missing the required parameter `tax_provider_ultracart` when calling `update_tax_provider_ultra_cart`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tax_provider_ultracart' in params:
            body_params = params['tax_provider_ultracart']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/tax/providers/ultracart', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TaxProviderUltraCart',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
