# coding: utf-8

"""
    UltraCart Rest API V2

    This is the next generation UltraCart REST API...

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class AutoorderApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def auto_order_auto_orders_auto_order_oid_get(self, auto_order_oid, **kwargs):
        """
        Retrieve an auto order
        Retrieves a single auto order using the specified auto order oid. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.auto_order_auto_orders_auto_order_oid_get(auto_order_oid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int auto_order_oid: The auto order oid to retrieve. (required)
        :param str expand: The object expansion to perform on the result.  See documentation for examples
        :return: AutoOrderResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.auto_order_auto_orders_auto_order_oid_get_with_http_info(auto_order_oid, **kwargs)
        else:
            (data) = self.auto_order_auto_orders_auto_order_oid_get_with_http_info(auto_order_oid, **kwargs)
            return data

    def auto_order_auto_orders_auto_order_oid_get_with_http_info(self, auto_order_oid, **kwargs):
        """
        Retrieve an auto order
        Retrieves a single auto order using the specified auto order oid. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.auto_order_auto_orders_auto_order_oid_get_with_http_info(auto_order_oid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int auto_order_oid: The auto order oid to retrieve. (required)
        :param str expand: The object expansion to perform on the result.  See documentation for examples
        :return: AutoOrderResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auto_order_oid', 'expand']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auto_order_auto_orders_auto_order_oid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'auto_order_oid' is set
        if ('auto_order_oid' not in params) or (params['auto_order_oid'] is None):
            raise ValueError("Missing the required parameter `auto_order_oid` when calling `auto_order_auto_orders_auto_order_oid_get`")

        resource_path = '/auto_order/auto_orders/{auto_order_oid}'.replace('{format}', 'json')
        path_params = {}
        if 'auto_order_oid' in params:
            path_params['auto_order_oid'] = params['auto_order_oid']

        query_params = {}
        if 'expand' in params:
            query_params['_expand'] = params['expand']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AutoOrderResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def auto_order_auto_orders_auto_order_oid_put(self, auto_order, auto_order_oid, **kwargs):
        """
        Update an auto order
        Update an auto order on the UltraCart account. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.auto_order_auto_orders_auto_order_oid_put(auto_order, auto_order_oid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AutoOrder auto_order: Auto order to update (required)
        :param int auto_order_oid: The auto order oid to update. (required)
        :return: AutoOrderResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.auto_order_auto_orders_auto_order_oid_put_with_http_info(auto_order, auto_order_oid, **kwargs)
        else:
            (data) = self.auto_order_auto_orders_auto_order_oid_put_with_http_info(auto_order, auto_order_oid, **kwargs)
            return data

    def auto_order_auto_orders_auto_order_oid_put_with_http_info(self, auto_order, auto_order_oid, **kwargs):
        """
        Update an auto order
        Update an auto order on the UltraCart account. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.auto_order_auto_orders_auto_order_oid_put_with_http_info(auto_order, auto_order_oid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AutoOrder auto_order: Auto order to update (required)
        :param int auto_order_oid: The auto order oid to update. (required)
        :return: AutoOrderResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auto_order', 'auto_order_oid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auto_order_auto_orders_auto_order_oid_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'auto_order' is set
        if ('auto_order' not in params) or (params['auto_order'] is None):
            raise ValueError("Missing the required parameter `auto_order` when calling `auto_order_auto_orders_auto_order_oid_put`")
        # verify the required parameter 'auto_order_oid' is set
        if ('auto_order_oid' not in params) or (params['auto_order_oid'] is None):
            raise ValueError("Missing the required parameter `auto_order_oid` when calling `auto_order_auto_orders_auto_order_oid_put`")

        resource_path = '/auto_order/auto_orders/{auto_order_oid}'.replace('{format}', 'json')
        path_params = {}
        if 'auto_order_oid' in params:
            path_params['auto_order_oid'] = params['auto_order_oid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'auto_order' in params:
            body_params = params['auto_order']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json; charset=UTF-8'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AutoOrderResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def auto_order_auto_orders_get(self, **kwargs):
        """
        Retrieve auto orders
        Retrieves auto orders from the account.  If no parameters are specified, all auto orders will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.auto_order_auto_orders_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str auto_order_code: Auto order code
        :param str original_order_id: Original order id
        :param str first_name: First name
        :param str last_name: Last name
        :param str company: Company
        :param str city: City
        :param str state: State
        :param str postal_code: Postal code
        :param str country_code: Country code (ISO-3166 two letter)
        :param str phone: Phone
        :param str email: Email
        :param str original_order_date_begin: Original order date begin
        :param str original_order_date_end: Original order date end
        :param str next_shipment_date_begin: Next shipment date begin
        :param str next_shipment_date_end: Next shipment date end
        :param str card_type: Card type
        :param str item_id: Item ID
        :param str status: Status
        :param int limit: The maximum number of records to return on this one API call. (Max 200)
        :param int offset: Pagination of the record set.  Offset is a zero based index.
        :param str since: Fetch auto orders that have been created/modified since this date/time.
        :param str sort: The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
        :param str expand: The object expansion to perform on the result.  See documentation for examples
        :return: AutoOrdersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.auto_order_auto_orders_get_with_http_info(**kwargs)
        else:
            (data) = self.auto_order_auto_orders_get_with_http_info(**kwargs)
            return data

    def auto_order_auto_orders_get_with_http_info(self, **kwargs):
        """
        Retrieve auto orders
        Retrieves auto orders from the account.  If no parameters are specified, all auto orders will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.auto_order_auto_orders_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str auto_order_code: Auto order code
        :param str original_order_id: Original order id
        :param str first_name: First name
        :param str last_name: Last name
        :param str company: Company
        :param str city: City
        :param str state: State
        :param str postal_code: Postal code
        :param str country_code: Country code (ISO-3166 two letter)
        :param str phone: Phone
        :param str email: Email
        :param str original_order_date_begin: Original order date begin
        :param str original_order_date_end: Original order date end
        :param str next_shipment_date_begin: Next shipment date begin
        :param str next_shipment_date_end: Next shipment date end
        :param str card_type: Card type
        :param str item_id: Item ID
        :param str status: Status
        :param int limit: The maximum number of records to return on this one API call. (Max 200)
        :param int offset: Pagination of the record set.  Offset is a zero based index.
        :param str since: Fetch auto orders that have been created/modified since this date/time.
        :param str sort: The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
        :param str expand: The object expansion to perform on the result.  See documentation for examples
        :return: AutoOrdersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auto_order_code', 'original_order_id', 'first_name', 'last_name', 'company', 'city', 'state', 'postal_code', 'country_code', 'phone', 'email', 'original_order_date_begin', 'original_order_date_end', 'next_shipment_date_begin', 'next_shipment_date_end', 'card_type', 'item_id', 'status', 'limit', 'offset', 'since', 'sort', 'expand']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auto_order_auto_orders_get" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/auto_order/auto_orders'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'auto_order_code' in params:
            query_params['auto_order_code'] = params['auto_order_code']
        if 'original_order_id' in params:
            query_params['original_order_id'] = params['original_order_id']
        if 'first_name' in params:
            query_params['first_name'] = params['first_name']
        if 'last_name' in params:
            query_params['last_name'] = params['last_name']
        if 'company' in params:
            query_params['company'] = params['company']
        if 'city' in params:
            query_params['city'] = params['city']
        if 'state' in params:
            query_params['state'] = params['state']
        if 'postal_code' in params:
            query_params['postal_code'] = params['postal_code']
        if 'country_code' in params:
            query_params['country_code'] = params['country_code']
        if 'phone' in params:
            query_params['phone'] = params['phone']
        if 'email' in params:
            query_params['email'] = params['email']
        if 'original_order_date_begin' in params:
            query_params['original_order_date_begin'] = params['original_order_date_begin']
        if 'original_order_date_end' in params:
            query_params['original_order_date_end'] = params['original_order_date_end']
        if 'next_shipment_date_begin' in params:
            query_params['next_shipment_date_begin'] = params['next_shipment_date_begin']
        if 'next_shipment_date_end' in params:
            query_params['next_shipment_date_end'] = params['next_shipment_date_end']
        if 'card_type' in params:
            query_params['card_type'] = params['card_type']
        if 'item_id' in params:
            query_params['item_id'] = params['item_id']
        if 'status' in params:
            query_params['status'] = params['status']
        if 'limit' in params:
            query_params['_limit'] = params['limit']
        if 'offset' in params:
            query_params['_offset'] = params['offset']
        if 'since' in params:
            query_params['_since'] = params['since']
        if 'sort' in params:
            query_params['_sort'] = params['sort']
        if 'expand' in params:
            query_params['_expand'] = params['expand']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AutoOrdersResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
