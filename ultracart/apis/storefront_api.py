# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..api_client import ApiClient


class StorefrontApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def archive_email_list(self, storefront_oid, email_list_uuid, **kwargs):
        """
        Archive email list
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.archive_email_list(storefront_oid, email_list_uuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param str email_list_uuid: null (required)
        :return: EmailListArchiveResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.archive_email_list_with_http_info(storefront_oid, email_list_uuid, **kwargs)
        else:
            (data) = self.archive_email_list_with_http_info(storefront_oid, email_list_uuid, **kwargs)
            return data

    def archive_email_list_with_http_info(self, storefront_oid, email_list_uuid, **kwargs):
        """
        Archive email list
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.archive_email_list_with_http_info(storefront_oid, email_list_uuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param str email_list_uuid: null (required)
        :return: EmailListArchiveResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storefront_oid', 'email_list_uuid']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method archive_email_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storefront_oid' is set
        if ('storefront_oid' not in params) or (params['storefront_oid'] is None):
            raise ValueError("Missing the required parameter `storefront_oid` when calling `archive_email_list`")
        # verify the required parameter 'email_list_uuid' is set
        if ('email_list_uuid' not in params) or (params['email_list_uuid'] is None):
            raise ValueError("Missing the required parameter `email_list_uuid` when calling `archive_email_list`")


        collection_formats = {}

        path_params = {}
        if 'storefront_oid' in params:
            path_params['storefront_oid'] = params['storefront_oid']
        if 'email_list_uuid' in params:
            path_params['email_list_uuid'] = params['email_list_uuid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/storefront/{storefront_oid}/email/lists/{email_list_uuid}/archive', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EmailListArchiveResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def archive_email_segment(self, storefront_oid, email_segment_uuid, **kwargs):
        """
        Archive email segment
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.archive_email_segment(storefront_oid, email_segment_uuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param str email_segment_uuid: null (required)
        :return: EmailSegmentArchiveResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.archive_email_segment_with_http_info(storefront_oid, email_segment_uuid, **kwargs)
        else:
            (data) = self.archive_email_segment_with_http_info(storefront_oid, email_segment_uuid, **kwargs)
            return data

    def archive_email_segment_with_http_info(self, storefront_oid, email_segment_uuid, **kwargs):
        """
        Archive email segment
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.archive_email_segment_with_http_info(storefront_oid, email_segment_uuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param str email_segment_uuid: null (required)
        :return: EmailSegmentArchiveResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storefront_oid', 'email_segment_uuid']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method archive_email_segment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storefront_oid' is set
        if ('storefront_oid' not in params) or (params['storefront_oid'] is None):
            raise ValueError("Missing the required parameter `storefront_oid` when calling `archive_email_segment`")
        # verify the required parameter 'email_segment_uuid' is set
        if ('email_segment_uuid' not in params) or (params['email_segment_uuid'] is None):
            raise ValueError("Missing the required parameter `email_segment_uuid` when calling `archive_email_segment`")


        collection_formats = {}

        path_params = {}
        if 'storefront_oid' in params:
            path_params['storefront_oid'] = params['storefront_oid']
        if 'email_segment_uuid' in params:
            path_params['email_segment_uuid'] = params['email_segment_uuid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/archive', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EmailSegmentArchiveResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def check_download_email_segment(self, storefront_oid, email_segment_uuid, email_segment_rebuild_uuid, **kwargs):
        """
        Check download of email segment
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.check_download_email_segment(storefront_oid, email_segment_uuid, email_segment_rebuild_uuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param str email_segment_uuid: null (required)
        :param str email_segment_rebuild_uuid: null (required)
        :return: EmailSegmentDownloadPrepareResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.check_download_email_segment_with_http_info(storefront_oid, email_segment_uuid, email_segment_rebuild_uuid, **kwargs)
        else:
            (data) = self.check_download_email_segment_with_http_info(storefront_oid, email_segment_uuid, email_segment_rebuild_uuid, **kwargs)
            return data

    def check_download_email_segment_with_http_info(self, storefront_oid, email_segment_uuid, email_segment_rebuild_uuid, **kwargs):
        """
        Check download of email segment
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.check_download_email_segment_with_http_info(storefront_oid, email_segment_uuid, email_segment_rebuild_uuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param str email_segment_uuid: null (required)
        :param str email_segment_rebuild_uuid: null (required)
        :return: EmailSegmentDownloadPrepareResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storefront_oid', 'email_segment_uuid', 'email_segment_rebuild_uuid']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method check_download_email_segment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storefront_oid' is set
        if ('storefront_oid' not in params) or (params['storefront_oid'] is None):
            raise ValueError("Missing the required parameter `storefront_oid` when calling `check_download_email_segment`")
        # verify the required parameter 'email_segment_uuid' is set
        if ('email_segment_uuid' not in params) or (params['email_segment_uuid'] is None):
            raise ValueError("Missing the required parameter `email_segment_uuid` when calling `check_download_email_segment`")
        # verify the required parameter 'email_segment_rebuild_uuid' is set
        if ('email_segment_rebuild_uuid' not in params) or (params['email_segment_rebuild_uuid'] is None):
            raise ValueError("Missing the required parameter `email_segment_rebuild_uuid` when calling `check_download_email_segment`")


        collection_formats = {}

        path_params = {}
        if 'storefront_oid' in params:
            path_params['storefront_oid'] = params['storefront_oid']
        if 'email_segment_uuid' in params:
            path_params['email_segment_uuid'] = params['email_segment_uuid']
        if 'email_segment_rebuild_uuid' in params:
            path_params['email_segment_rebuild_uuid'] = params['email_segment_rebuild_uuid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/downloadPrepare/{email_segment_rebuild_uuid}', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EmailSegmentDownloadPrepareResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def clone_email_campaign(self, storefront_oid, email_campaign_uuid, **kwargs):
        """
        Clone email campaign
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.clone_email_campaign(storefront_oid, email_campaign_uuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param str email_campaign_uuid: null (required)
        :return: EmailCampaignResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.clone_email_campaign_with_http_info(storefront_oid, email_campaign_uuid, **kwargs)
        else:
            (data) = self.clone_email_campaign_with_http_info(storefront_oid, email_campaign_uuid, **kwargs)
            return data

    def clone_email_campaign_with_http_info(self, storefront_oid, email_campaign_uuid, **kwargs):
        """
        Clone email campaign
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.clone_email_campaign_with_http_info(storefront_oid, email_campaign_uuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param str email_campaign_uuid: null (required)
        :return: EmailCampaignResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storefront_oid', 'email_campaign_uuid']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clone_email_campaign" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storefront_oid' is set
        if ('storefront_oid' not in params) or (params['storefront_oid'] is None):
            raise ValueError("Missing the required parameter `storefront_oid` when calling `clone_email_campaign`")
        # verify the required parameter 'email_campaign_uuid' is set
        if ('email_campaign_uuid' not in params) or (params['email_campaign_uuid'] is None):
            raise ValueError("Missing the required parameter `email_campaign_uuid` when calling `clone_email_campaign`")


        collection_formats = {}

        path_params = {}
        if 'storefront_oid' in params:
            path_params['storefront_oid'] = params['storefront_oid']
        if 'email_campaign_uuid' in params:
            path_params['email_campaign_uuid'] = params['email_campaign_uuid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}/clone', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EmailCampaignResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def clone_email_flow(self, storefront_oid, email_flow_uuid, **kwargs):
        """
        Clone email flow
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.clone_email_flow(storefront_oid, email_flow_uuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param str email_flow_uuid: null (required)
        :return: EmailFlowResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.clone_email_flow_with_http_info(storefront_oid, email_flow_uuid, **kwargs)
        else:
            (data) = self.clone_email_flow_with_http_info(storefront_oid, email_flow_uuid, **kwargs)
            return data

    def clone_email_flow_with_http_info(self, storefront_oid, email_flow_uuid, **kwargs):
        """
        Clone email flow
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.clone_email_flow_with_http_info(storefront_oid, email_flow_uuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param str email_flow_uuid: null (required)
        :return: EmailFlowResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storefront_oid', 'email_flow_uuid']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clone_email_flow" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storefront_oid' is set
        if ('storefront_oid' not in params) or (params['storefront_oid'] is None):
            raise ValueError("Missing the required parameter `storefront_oid` when calling `clone_email_flow`")
        # verify the required parameter 'email_flow_uuid' is set
        if ('email_flow_uuid' not in params) or (params['email_flow_uuid'] is None):
            raise ValueError("Missing the required parameter `email_flow_uuid` when calling `clone_email_flow`")


        collection_formats = {}

        path_params = {}
        if 'storefront_oid' in params:
            path_params['storefront_oid'] = params['storefront_oid']
        if 'email_flow_uuid' in params:
            path_params['email_flow_uuid'] = params['email_flow_uuid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/storefront/{storefront_oid}/email/flows/{email_flow_uuid}/clone', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EmailFlowResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_email_sending_domain(self, domain, **kwargs):
        """
        Create email campaign
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_email_sending_domain(domain, async=True)
        >>> result = thread.get()

        :param async bool
        :param str domain: null (required)
        :return: EmailSendingDomainResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_email_sending_domain_with_http_info(domain, **kwargs)
        else:
            (data) = self.create_email_sending_domain_with_http_info(domain, **kwargs)
            return data

    def create_email_sending_domain_with_http_info(self, domain, **kwargs):
        """
        Create email campaign
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_email_sending_domain_with_http_info(domain, async=True)
        >>> result = thread.get()

        :param async bool
        :param str domain: null (required)
        :return: EmailSendingDomainResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_email_sending_domain" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain' is set
        if ('domain' not in params) or (params['domain'] is None):
            raise ValueError("Missing the required parameter `domain` when calling `create_email_sending_domain`")


        collection_formats = {}

        path_params = {}
        if 'domain' in params:
            path_params['domain'] = params['domain']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/storefront/email/sending_domains/{domain}/create', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EmailSendingDomainResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_email_email(self, storefront_oid, commseq_email_uuid, **kwargs):
        """
        Delete email email
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_email_email(storefront_oid, commseq_email_uuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param str commseq_email_uuid: null (required)
        :return: BaseResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_email_email_with_http_info(storefront_oid, commseq_email_uuid, **kwargs)
        else:
            (data) = self.delete_email_email_with_http_info(storefront_oid, commseq_email_uuid, **kwargs)
            return data

    def delete_email_email_with_http_info(self, storefront_oid, commseq_email_uuid, **kwargs):
        """
        Delete email email
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_email_email_with_http_info(storefront_oid, commseq_email_uuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param str commseq_email_uuid: null (required)
        :return: BaseResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storefront_oid', 'commseq_email_uuid']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_email_email" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storefront_oid' is set
        if ('storefront_oid' not in params) or (params['storefront_oid'] is None):
            raise ValueError("Missing the required parameter `storefront_oid` when calling `delete_email_email`")
        # verify the required parameter 'commseq_email_uuid' is set
        if ('commseq_email_uuid' not in params) or (params['commseq_email_uuid'] is None):
            raise ValueError("Missing the required parameter `commseq_email_uuid` when calling `delete_email_email`")


        collection_formats = {}

        path_params = {}
        if 'storefront_oid' in params:
            path_params['storefront_oid'] = params['storefront_oid']
        if 'commseq_email_uuid' in params:
            path_params['commseq_email_uuid'] = params['commseq_email_uuid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='BaseResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_email_list_customer(self, storefront_oid, email_list_uuid, email_customer_uuid, **kwargs):
        """
        Delete email list customer
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_email_list_customer(storefront_oid, email_list_uuid, email_customer_uuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param str email_list_uuid: null (required)
        :param str email_customer_uuid: null (required)
        :return: BaseResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_email_list_customer_with_http_info(storefront_oid, email_list_uuid, email_customer_uuid, **kwargs)
        else:
            (data) = self.delete_email_list_customer_with_http_info(storefront_oid, email_list_uuid, email_customer_uuid, **kwargs)
            return data

    def delete_email_list_customer_with_http_info(self, storefront_oid, email_list_uuid, email_customer_uuid, **kwargs):
        """
        Delete email list customer
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_email_list_customer_with_http_info(storefront_oid, email_list_uuid, email_customer_uuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param str email_list_uuid: null (required)
        :param str email_customer_uuid: null (required)
        :return: BaseResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storefront_oid', 'email_list_uuid', 'email_customer_uuid']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_email_list_customer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storefront_oid' is set
        if ('storefront_oid' not in params) or (params['storefront_oid'] is None):
            raise ValueError("Missing the required parameter `storefront_oid` when calling `delete_email_list_customer`")
        # verify the required parameter 'email_list_uuid' is set
        if ('email_list_uuid' not in params) or (params['email_list_uuid'] is None):
            raise ValueError("Missing the required parameter `email_list_uuid` when calling `delete_email_list_customer`")
        # verify the required parameter 'email_customer_uuid' is set
        if ('email_customer_uuid' not in params) or (params['email_customer_uuid'] is None):
            raise ValueError("Missing the required parameter `email_customer_uuid` when calling `delete_email_list_customer`")


        collection_formats = {}

        path_params = {}
        if 'storefront_oid' in params:
            path_params['storefront_oid'] = params['storefront_oid']
        if 'email_list_uuid' in params:
            path_params['email_list_uuid'] = params['email_list_uuid']
        if 'email_customer_uuid' in params:
            path_params['email_customer_uuid'] = params['email_customer_uuid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/storefront/{storefront_oid}/email/lists/{email_list_uuid}/customers/{email_customer_uuid}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='BaseResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_email_sending_domain(self, domain, **kwargs):
        """
        delete email campaign
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_email_sending_domain(domain, async=True)
        >>> result = thread.get()

        :param async bool
        :param str domain: null (required)
        :return: BaseResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_email_sending_domain_with_http_info(domain, **kwargs)
        else:
            (data) = self.delete_email_sending_domain_with_http_info(domain, **kwargs)
            return data

    def delete_email_sending_domain_with_http_info(self, domain, **kwargs):
        """
        delete email campaign
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_email_sending_domain_with_http_info(domain, async=True)
        >>> result = thread.get()

        :param async bool
        :param str domain: null (required)
        :return: BaseResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_email_sending_domain" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain' is set
        if ('domain' not in params) or (params['domain'] is None):
            raise ValueError("Missing the required parameter `domain` when calling `delete_email_sending_domain`")


        collection_formats = {}

        path_params = {}
        if 'domain' in params:
            path_params['domain'] = params['domain']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/storefront/email/sending_domains/{domain}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='BaseResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_experiment(self, storefront_oid, storefront_experiment_oid, **kwargs):
        """
        Delete experiment
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_experiment(storefront_oid, storefront_experiment_oid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param int storefront_experiment_oid: null (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_experiment_with_http_info(storefront_oid, storefront_experiment_oid, **kwargs)
        else:
            (data) = self.delete_experiment_with_http_info(storefront_oid, storefront_experiment_oid, **kwargs)
            return data

    def delete_experiment_with_http_info(self, storefront_oid, storefront_experiment_oid, **kwargs):
        """
        Delete experiment
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_experiment_with_http_info(storefront_oid, storefront_experiment_oid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param int storefront_experiment_oid: null (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storefront_oid', 'storefront_experiment_oid']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_experiment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storefront_oid' is set
        if ('storefront_oid' not in params) or (params['storefront_oid'] is None):
            raise ValueError("Missing the required parameter `storefront_oid` when calling `delete_experiment`")
        # verify the required parameter 'storefront_experiment_oid' is set
        if ('storefront_experiment_oid' not in params) or (params['storefront_experiment_oid'] is None):
            raise ValueError("Missing the required parameter `storefront_experiment_oid` when calling `delete_experiment`")


        collection_formats = {}

        path_params = {}
        if 'storefront_oid' in params:
            path_params['storefront_oid'] = params['storefront_oid']
        if 'storefront_experiment_oid' in params:
            path_params['storefront_experiment_oid'] = params['storefront_experiment_oid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/storefront/{storefront_oid}/experiments/{storefront_experiment_oid}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def geocode_address(self, storefront_oid, geocode_request, **kwargs):
        """
        Obtain lat/long for an address
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.geocode_address(storefront_oid, geocode_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param GeocodeRequest geocode_request: geocode request (required)
        :return: GeocodeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.geocode_address_with_http_info(storefront_oid, geocode_request, **kwargs)
        else:
            (data) = self.geocode_address_with_http_info(storefront_oid, geocode_request, **kwargs)
            return data

    def geocode_address_with_http_info(self, storefront_oid, geocode_request, **kwargs):
        """
        Obtain lat/long for an address
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.geocode_address_with_http_info(storefront_oid, geocode_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param GeocodeRequest geocode_request: geocode request (required)
        :return: GeocodeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storefront_oid', 'geocode_request']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method geocode_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storefront_oid' is set
        if ('storefront_oid' not in params) or (params['storefront_oid'] is None):
            raise ValueError("Missing the required parameter `storefront_oid` when calling `geocode_address`")
        # verify the required parameter 'geocode_request' is set
        if ('geocode_request' not in params) or (params['geocode_request'] is None):
            raise ValueError("Missing the required parameter `geocode_request` when calling `geocode_address`")


        collection_formats = {}

        path_params = {}
        if 'storefront_oid' in params:
            path_params['storefront_oid'] = params['storefront_oid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'geocode_request' in params:
            body_params = params['geocode_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/storefront/{storefront_oid}/email/geocode', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GeocodeResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_countries(self, storefront_oid, **kwargs):
        """
        Get countries
        Obtain a list of all the countries 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_countries(storefront_oid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :return: CountriesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_countries_with_http_info(storefront_oid, **kwargs)
        else:
            (data) = self.get_countries_with_http_info(storefront_oid, **kwargs)
            return data

    def get_countries_with_http_info(self, storefront_oid, **kwargs):
        """
        Get countries
        Obtain a list of all the countries 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_countries_with_http_info(storefront_oid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :return: CountriesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storefront_oid']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_countries" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storefront_oid' is set
        if ('storefront_oid' not in params) or (params['storefront_oid'] is None):
            raise ValueError("Missing the required parameter `storefront_oid` when calling `get_countries`")


        collection_formats = {}

        path_params = {}
        if 'storefront_oid' in params:
            path_params['storefront_oid'] = params['storefront_oid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/storefront/{storefront_oid}/email/countries', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CountriesResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_email_base_templates(self, storefront_oid, **kwargs):
        """
        Get email communication base templates
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_email_base_templates(storefront_oid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :return: EmailBaseTemplateListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_email_base_templates_with_http_info(storefront_oid, **kwargs)
        else:
            (data) = self.get_email_base_templates_with_http_info(storefront_oid, **kwargs)
            return data

    def get_email_base_templates_with_http_info(self, storefront_oid, **kwargs):
        """
        Get email communication base templates
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_email_base_templates_with_http_info(storefront_oid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :return: EmailBaseTemplateListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storefront_oid']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_email_base_templates" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storefront_oid' is set
        if ('storefront_oid' not in params) or (params['storefront_oid'] is None):
            raise ValueError("Missing the required parameter `storefront_oid` when calling `get_email_base_templates`")


        collection_formats = {}

        path_params = {}
        if 'storefront_oid' in params:
            path_params['storefront_oid'] = params['storefront_oid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/storefront/{storefront_oid}/email/baseTemplates', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EmailBaseTemplateListResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_email_campaign(self, storefront_oid, email_campaign_uuid, **kwargs):
        """
        Get email campaign
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_email_campaign(storefront_oid, email_campaign_uuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param str email_campaign_uuid: null (required)
        :return: EmailCampaignResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_email_campaign_with_http_info(storefront_oid, email_campaign_uuid, **kwargs)
        else:
            (data) = self.get_email_campaign_with_http_info(storefront_oid, email_campaign_uuid, **kwargs)
            return data

    def get_email_campaign_with_http_info(self, storefront_oid, email_campaign_uuid, **kwargs):
        """
        Get email campaign
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_email_campaign_with_http_info(storefront_oid, email_campaign_uuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param str email_campaign_uuid: null (required)
        :return: EmailCampaignResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storefront_oid', 'email_campaign_uuid']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_email_campaign" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storefront_oid' is set
        if ('storefront_oid' not in params) or (params['storefront_oid'] is None):
            raise ValueError("Missing the required parameter `storefront_oid` when calling `get_email_campaign`")
        # verify the required parameter 'email_campaign_uuid' is set
        if ('email_campaign_uuid' not in params) or (params['email_campaign_uuid'] is None):
            raise ValueError("Missing the required parameter `email_campaign_uuid` when calling `get_email_campaign`")


        collection_formats = {}

        path_params = {}
        if 'storefront_oid' in params:
            path_params['storefront_oid'] = params['storefront_oid']
        if 'email_campaign_uuid' in params:
            path_params['email_campaign_uuid'] = params['email_campaign_uuid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EmailCampaignResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_email_campaigns(self, storefront_oid, **kwargs):
        """
        Get email campaigns
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_email_campaigns(storefront_oid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :return: EmailCampaignsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_email_campaigns_with_http_info(storefront_oid, **kwargs)
        else:
            (data) = self.get_email_campaigns_with_http_info(storefront_oid, **kwargs)
            return data

    def get_email_campaigns_with_http_info(self, storefront_oid, **kwargs):
        """
        Get email campaigns
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_email_campaigns_with_http_info(storefront_oid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :return: EmailCampaignsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storefront_oid']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_email_campaigns" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storefront_oid' is set
        if ('storefront_oid' not in params) or (params['storefront_oid'] is None):
            raise ValueError("Missing the required parameter `storefront_oid` when calling `get_email_campaigns`")


        collection_formats = {}

        path_params = {}
        if 'storefront_oid' in params:
            path_params['storefront_oid'] = params['storefront_oid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/storefront/{storefront_oid}/email/campaigns', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EmailCampaignsResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_email_campaigns_with_stats(self, storefront_oid, stat_days, **kwargs):
        """
        Get email campaigns with stats
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_email_campaigns_with_stats(storefront_oid, stat_days, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param str stat_days: null (required)
        :return: EmailCampaignsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_email_campaigns_with_stats_with_http_info(storefront_oid, stat_days, **kwargs)
        else:
            (data) = self.get_email_campaigns_with_stats_with_http_info(storefront_oid, stat_days, **kwargs)
            return data

    def get_email_campaigns_with_stats_with_http_info(self, storefront_oid, stat_days, **kwargs):
        """
        Get email campaigns with stats
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_email_campaigns_with_stats_with_http_info(storefront_oid, stat_days, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param str stat_days: null (required)
        :return: EmailCampaignsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storefront_oid', 'stat_days']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_email_campaigns_with_stats" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storefront_oid' is set
        if ('storefront_oid' not in params) or (params['storefront_oid'] is None):
            raise ValueError("Missing the required parameter `storefront_oid` when calling `get_email_campaigns_with_stats`")
        # verify the required parameter 'stat_days' is set
        if ('stat_days' not in params) or (params['stat_days'] is None):
            raise ValueError("Missing the required parameter `stat_days` when calling `get_email_campaigns_with_stats`")


        collection_formats = {}

        path_params = {}
        if 'storefront_oid' in params:
            path_params['storefront_oid'] = params['storefront_oid']
        if 'stat_days' in params:
            path_params['stat_days'] = params['stat_days']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/storefront/{storefront_oid}/email/campaignsWithStats/{stat_days}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EmailCampaignsResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_email_commseq(self, storefront_oid, commseq_uuid, **kwargs):
        """
        Get email commseq
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_email_commseq(storefront_oid, commseq_uuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param str commseq_uuid: null (required)
        :return: EmailCommseqResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_email_commseq_with_http_info(storefront_oid, commseq_uuid, **kwargs)
        else:
            (data) = self.get_email_commseq_with_http_info(storefront_oid, commseq_uuid, **kwargs)
            return data

    def get_email_commseq_with_http_info(self, storefront_oid, commseq_uuid, **kwargs):
        """
        Get email commseq
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_email_commseq_with_http_info(storefront_oid, commseq_uuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param str commseq_uuid: null (required)
        :return: EmailCommseqResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storefront_oid', 'commseq_uuid']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_email_commseq" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storefront_oid' is set
        if ('storefront_oid' not in params) or (params['storefront_oid'] is None):
            raise ValueError("Missing the required parameter `storefront_oid` when calling `get_email_commseq`")
        # verify the required parameter 'commseq_uuid' is set
        if ('commseq_uuid' not in params) or (params['commseq_uuid'] is None):
            raise ValueError("Missing the required parameter `commseq_uuid` when calling `get_email_commseq`")


        collection_formats = {}

        path_params = {}
        if 'storefront_oid' in params:
            path_params['storefront_oid'] = params['storefront_oid']
        if 'commseq_uuid' in params:
            path_params['commseq_uuid'] = params['commseq_uuid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EmailCommseqResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_email_commseq_email_stats(self, storefront_oid, commseq_uuid, stats_request, **kwargs):
        """
        Get email communication sequence emails stats
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_email_commseq_email_stats(storefront_oid, commseq_uuid, stats_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param str commseq_uuid: null (required)
        :param EmailStatSummaryRequest stats_request: StatsRequest (required)
        :return: EmailStatSummaryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_email_commseq_email_stats_with_http_info(storefront_oid, commseq_uuid, stats_request, **kwargs)
        else:
            (data) = self.get_email_commseq_email_stats_with_http_info(storefront_oid, commseq_uuid, stats_request, **kwargs)
            return data

    def get_email_commseq_email_stats_with_http_info(self, storefront_oid, commseq_uuid, stats_request, **kwargs):
        """
        Get email communication sequence emails stats
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_email_commseq_email_stats_with_http_info(storefront_oid, commseq_uuid, stats_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param str commseq_uuid: null (required)
        :param EmailStatSummaryRequest stats_request: StatsRequest (required)
        :return: EmailStatSummaryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storefront_oid', 'commseq_uuid', 'stats_request']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_email_commseq_email_stats" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storefront_oid' is set
        if ('storefront_oid' not in params) or (params['storefront_oid'] is None):
            raise ValueError("Missing the required parameter `storefront_oid` when calling `get_email_commseq_email_stats`")
        # verify the required parameter 'commseq_uuid' is set
        if ('commseq_uuid' not in params) or (params['commseq_uuid'] is None):
            raise ValueError("Missing the required parameter `commseq_uuid` when calling `get_email_commseq_email_stats`")
        # verify the required parameter 'stats_request' is set
        if ('stats_request' not in params) or (params['stats_request'] is None):
            raise ValueError("Missing the required parameter `stats_request` when calling `get_email_commseq_email_stats`")


        collection_formats = {}

        path_params = {}
        if 'storefront_oid' in params:
            path_params['storefront_oid'] = params['storefront_oid']
        if 'commseq_uuid' in params:
            path_params['commseq_uuid'] = params['commseq_uuid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'stats_request' in params:
            body_params = params['stats_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/emailStats', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EmailStatSummaryResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_email_commseq_stat_overall(self, storefront_oid, commseq_uuid, **kwargs):
        """
        Get communication sequence stats overall
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_email_commseq_stat_overall(storefront_oid, commseq_uuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param str commseq_uuid: null (required)
        :return: EmailCommseqStatResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_email_commseq_stat_overall_with_http_info(storefront_oid, commseq_uuid, **kwargs)
        else:
            (data) = self.get_email_commseq_stat_overall_with_http_info(storefront_oid, commseq_uuid, **kwargs)
            return data

    def get_email_commseq_stat_overall_with_http_info(self, storefront_oid, commseq_uuid, **kwargs):
        """
        Get communication sequence stats overall
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_email_commseq_stat_overall_with_http_info(storefront_oid, commseq_uuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param str commseq_uuid: null (required)
        :return: EmailCommseqStatResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storefront_oid', 'commseq_uuid']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_email_commseq_stat_overall" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storefront_oid' is set
        if ('storefront_oid' not in params) or (params['storefront_oid'] is None):
            raise ValueError("Missing the required parameter `storefront_oid` when calling `get_email_commseq_stat_overall`")
        # verify the required parameter 'commseq_uuid' is set
        if ('commseq_uuid' not in params) or (params['commseq_uuid'] is None):
            raise ValueError("Missing the required parameter `commseq_uuid` when calling `get_email_commseq_stat_overall`")


        collection_formats = {}

        path_params = {}
        if 'storefront_oid' in params:
            path_params['storefront_oid'] = params['storefront_oid']
        if 'commseq_uuid' in params:
            path_params['commseq_uuid'] = params['commseq_uuid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/stat', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EmailCommseqStatResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_email_commseq_step_waiting(self, storefront_oid, commseq_uuid, waiting_request, **kwargs):
        """
        Get email communication sequence customers waiting at each requested step
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_email_commseq_step_waiting(storefront_oid, commseq_uuid, waiting_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param str commseq_uuid: null (required)
        :param EmailStepWaitingRequest waiting_request: WaitingRequest (required)
        :return: EmailStepWaitingResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_email_commseq_step_waiting_with_http_info(storefront_oid, commseq_uuid, waiting_request, **kwargs)
        else:
            (data) = self.get_email_commseq_step_waiting_with_http_info(storefront_oid, commseq_uuid, waiting_request, **kwargs)
            return data

    def get_email_commseq_step_waiting_with_http_info(self, storefront_oid, commseq_uuid, waiting_request, **kwargs):
        """
        Get email communication sequence customers waiting at each requested step
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_email_commseq_step_waiting_with_http_info(storefront_oid, commseq_uuid, waiting_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param str commseq_uuid: null (required)
        :param EmailStepWaitingRequest waiting_request: WaitingRequest (required)
        :return: EmailStepWaitingResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storefront_oid', 'commseq_uuid', 'waiting_request']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_email_commseq_step_waiting" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storefront_oid' is set
        if ('storefront_oid' not in params) or (params['storefront_oid'] is None):
            raise ValueError("Missing the required parameter `storefront_oid` when calling `get_email_commseq_step_waiting`")
        # verify the required parameter 'commseq_uuid' is set
        if ('commseq_uuid' not in params) or (params['commseq_uuid'] is None):
            raise ValueError("Missing the required parameter `commseq_uuid` when calling `get_email_commseq_step_waiting`")
        # verify the required parameter 'waiting_request' is set
        if ('waiting_request' not in params) or (params['waiting_request'] is None):
            raise ValueError("Missing the required parameter `waiting_request` when calling `get_email_commseq_step_waiting`")


        collection_formats = {}

        path_params = {}
        if 'storefront_oid' in params:
            path_params['storefront_oid'] = params['storefront_oid']
        if 'commseq_uuid' in params:
            path_params['commseq_uuid'] = params['commseq_uuid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'waiting_request' in params:
            body_params = params['waiting_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/waiting', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EmailStepWaitingResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_email_commseqs(self, storefront_oid, **kwargs):
        """
        Get email commseqs
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_email_commseqs(storefront_oid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :return: EmailCommseqsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_email_commseqs_with_http_info(storefront_oid, **kwargs)
        else:
            (data) = self.get_email_commseqs_with_http_info(storefront_oid, **kwargs)
            return data

    def get_email_commseqs_with_http_info(self, storefront_oid, **kwargs):
        """
        Get email commseqs
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_email_commseqs_with_http_info(storefront_oid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :return: EmailCommseqsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storefront_oid']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_email_commseqs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storefront_oid' is set
        if ('storefront_oid' not in params) or (params['storefront_oid'] is None):
            raise ValueError("Missing the required parameter `storefront_oid` when calling `get_email_commseqs`")


        collection_formats = {}

        path_params = {}
        if 'storefront_oid' in params:
            path_params['storefront_oid'] = params['storefront_oid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/storefront/{storefront_oid}/email/commseqs', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EmailCommseqsResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_email_dashboard_activity(self, storefront_oid, **kwargs):
        """
        Get email dashboard activity
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_email_dashboard_activity(storefront_oid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param int last_records: null
        :return: EmailDashboardActivityResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_email_dashboard_activity_with_http_info(storefront_oid, **kwargs)
        else:
            (data) = self.get_email_dashboard_activity_with_http_info(storefront_oid, **kwargs)
            return data

    def get_email_dashboard_activity_with_http_info(self, storefront_oid, **kwargs):
        """
        Get email dashboard activity
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_email_dashboard_activity_with_http_info(storefront_oid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param int last_records: null
        :return: EmailDashboardActivityResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storefront_oid', 'last_records']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_email_dashboard_activity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storefront_oid' is set
        if ('storefront_oid' not in params) or (params['storefront_oid'] is None):
            raise ValueError("Missing the required parameter `storefront_oid` when calling `get_email_dashboard_activity`")


        collection_formats = {}

        path_params = {}
        if 'storefront_oid' in params:
            path_params['storefront_oid'] = params['storefront_oid']

        query_params = []
        if 'last_records' in params:
            query_params.append(('last_records', params['last_records']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/storefront/{storefront_oid}/email/dashboard_activity', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EmailDashboardActivityResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_email_dashboard_stats(self, storefront_oid, **kwargs):
        """
        Get dashboard stats
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_email_dashboard_stats(storefront_oid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param int days: null
        :return: EmailDashboardStatsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_email_dashboard_stats_with_http_info(storefront_oid, **kwargs)
        else:
            (data) = self.get_email_dashboard_stats_with_http_info(storefront_oid, **kwargs)
            return data

    def get_email_dashboard_stats_with_http_info(self, storefront_oid, **kwargs):
        """
        Get dashboard stats
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_email_dashboard_stats_with_http_info(storefront_oid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param int days: null
        :return: EmailDashboardStatsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storefront_oid', 'days']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_email_dashboard_stats" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storefront_oid' is set
        if ('storefront_oid' not in params) or (params['storefront_oid'] is None):
            raise ValueError("Missing the required parameter `storefront_oid` when calling `get_email_dashboard_stats`")


        collection_formats = {}

        path_params = {}
        if 'storefront_oid' in params:
            path_params['storefront_oid'] = params['storefront_oid']

        query_params = []
        if 'days' in params:
            query_params.append(('days', params['days']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/storefront/{storefront_oid}/email/dashboard_stats', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EmailDashboardStatsResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_email_email(self, storefront_oid, commseq_email_uuid, **kwargs):
        """
        Get email email
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_email_email(storefront_oid, commseq_email_uuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param str commseq_email_uuid: null (required)
        :return: EmailCommseqEmailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_email_email_with_http_info(storefront_oid, commseq_email_uuid, **kwargs)
        else:
            (data) = self.get_email_email_with_http_info(storefront_oid, commseq_email_uuid, **kwargs)
            return data

    def get_email_email_with_http_info(self, storefront_oid, commseq_email_uuid, **kwargs):
        """
        Get email email
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_email_email_with_http_info(storefront_oid, commseq_email_uuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param str commseq_email_uuid: null (required)
        :return: EmailCommseqEmailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storefront_oid', 'commseq_email_uuid']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_email_email" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storefront_oid' is set
        if ('storefront_oid' not in params) or (params['storefront_oid'] is None):
            raise ValueError("Missing the required parameter `storefront_oid` when calling `get_email_email`")
        # verify the required parameter 'commseq_email_uuid' is set
        if ('commseq_email_uuid' not in params) or (params['commseq_email_uuid'] is None):
            raise ValueError("Missing the required parameter `commseq_email_uuid` when calling `get_email_email`")


        collection_formats = {}

        path_params = {}
        if 'storefront_oid' in params:
            path_params['storefront_oid'] = params['storefront_oid']
        if 'commseq_email_uuid' in params:
            path_params['commseq_email_uuid'] = params['commseq_email_uuid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EmailCommseqEmailResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_email_emails(self, storefront_oid, **kwargs):
        """
        Get email emails
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_email_emails(storefront_oid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :return: EmailCommseqEmailsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_email_emails_with_http_info(storefront_oid, **kwargs)
        else:
            (data) = self.get_email_emails_with_http_info(storefront_oid, **kwargs)
            return data

    def get_email_emails_with_http_info(self, storefront_oid, **kwargs):
        """
        Get email emails
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_email_emails_with_http_info(storefront_oid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :return: EmailCommseqEmailsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storefront_oid']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_email_emails" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storefront_oid' is set
        if ('storefront_oid' not in params) or (params['storefront_oid'] is None):
            raise ValueError("Missing the required parameter `storefront_oid` when calling `get_email_emails`")


        collection_formats = {}

        path_params = {}
        if 'storefront_oid' in params:
            path_params['storefront_oid'] = params['storefront_oid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/storefront/{storefront_oid}/email/emails', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EmailCommseqEmailsResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_email_emails_multiple(self, storefront_oid, email_commseq_emails_request, **kwargs):
        """
        Get email emails multiple
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_email_emails_multiple(storefront_oid, email_commseq_emails_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param EmailCommseqEmailsRequest email_commseq_emails_request: Request of email uuids (required)
        :return: EmailCommseqEmailsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_email_emails_multiple_with_http_info(storefront_oid, email_commseq_emails_request, **kwargs)
        else:
            (data) = self.get_email_emails_multiple_with_http_info(storefront_oid, email_commseq_emails_request, **kwargs)
            return data

    def get_email_emails_multiple_with_http_info(self, storefront_oid, email_commseq_emails_request, **kwargs):
        """
        Get email emails multiple
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_email_emails_multiple_with_http_info(storefront_oid, email_commseq_emails_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param EmailCommseqEmailsRequest email_commseq_emails_request: Request of email uuids (required)
        :return: EmailCommseqEmailsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storefront_oid', 'email_commseq_emails_request']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_email_emails_multiple" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storefront_oid' is set
        if ('storefront_oid' not in params) or (params['storefront_oid'] is None):
            raise ValueError("Missing the required parameter `storefront_oid` when calling `get_email_emails_multiple`")
        # verify the required parameter 'email_commseq_emails_request' is set
        if ('email_commseq_emails_request' not in params) or (params['email_commseq_emails_request'] is None):
            raise ValueError("Missing the required parameter `email_commseq_emails_request` when calling `get_email_emails_multiple`")


        collection_formats = {}

        path_params = {}
        if 'storefront_oid' in params:
            path_params['storefront_oid'] = params['storefront_oid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'email_commseq_emails_request' in params:
            body_params = params['email_commseq_emails_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/storefront/{storefront_oid}/email/emails/multiple', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EmailCommseqEmailsResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_email_flow(self, storefront_oid, email_flow_uuid, **kwargs):
        """
        Get email flow
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_email_flow(storefront_oid, email_flow_uuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param str email_flow_uuid: null (required)
        :return: EmailFlowResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_email_flow_with_http_info(storefront_oid, email_flow_uuid, **kwargs)
        else:
            (data) = self.get_email_flow_with_http_info(storefront_oid, email_flow_uuid, **kwargs)
            return data

    def get_email_flow_with_http_info(self, storefront_oid, email_flow_uuid, **kwargs):
        """
        Get email flow
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_email_flow_with_http_info(storefront_oid, email_flow_uuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param str email_flow_uuid: null (required)
        :return: EmailFlowResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storefront_oid', 'email_flow_uuid']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_email_flow" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storefront_oid' is set
        if ('storefront_oid' not in params) or (params['storefront_oid'] is None):
            raise ValueError("Missing the required parameter `storefront_oid` when calling `get_email_flow`")
        # verify the required parameter 'email_flow_uuid' is set
        if ('email_flow_uuid' not in params) or (params['email_flow_uuid'] is None):
            raise ValueError("Missing the required parameter `email_flow_uuid` when calling `get_email_flow`")


        collection_formats = {}

        path_params = {}
        if 'storefront_oid' in params:
            path_params['storefront_oid'] = params['storefront_oid']
        if 'email_flow_uuid' in params:
            path_params['email_flow_uuid'] = params['email_flow_uuid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/storefront/{storefront_oid}/email/flows/{email_flow_uuid}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EmailFlowResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_email_flows(self, storefront_oid, **kwargs):
        """
        Get email flows
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_email_flows(storefront_oid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :return: EmailFlowsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_email_flows_with_http_info(storefront_oid, **kwargs)
        else:
            (data) = self.get_email_flows_with_http_info(storefront_oid, **kwargs)
            return data

    def get_email_flows_with_http_info(self, storefront_oid, **kwargs):
        """
        Get email flows
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_email_flows_with_http_info(storefront_oid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :return: EmailFlowsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storefront_oid']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_email_flows" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storefront_oid' is set
        if ('storefront_oid' not in params) or (params['storefront_oid'] is None):
            raise ValueError("Missing the required parameter `storefront_oid` when calling `get_email_flows`")


        collection_formats = {}

        path_params = {}
        if 'storefront_oid' in params:
            path_params['storefront_oid'] = params['storefront_oid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/storefront/{storefront_oid}/email/flows', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EmailFlowsResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_email_list(self, storefront_oid, email_list_uuid, **kwargs):
        """
        Get email list
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_email_list(storefront_oid, email_list_uuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param str email_list_uuid: null (required)
        :return: EmailListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_email_list_with_http_info(storefront_oid, email_list_uuid, **kwargs)
        else:
            (data) = self.get_email_list_with_http_info(storefront_oid, email_list_uuid, **kwargs)
            return data

    def get_email_list_with_http_info(self, storefront_oid, email_list_uuid, **kwargs):
        """
        Get email list
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_email_list_with_http_info(storefront_oid, email_list_uuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param str email_list_uuid: null (required)
        :return: EmailListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storefront_oid', 'email_list_uuid']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_email_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storefront_oid' is set
        if ('storefront_oid' not in params) or (params['storefront_oid'] is None):
            raise ValueError("Missing the required parameter `storefront_oid` when calling `get_email_list`")
        # verify the required parameter 'email_list_uuid' is set
        if ('email_list_uuid' not in params) or (params['email_list_uuid'] is None):
            raise ValueError("Missing the required parameter `email_list_uuid` when calling `get_email_list`")


        collection_formats = {}

        path_params = {}
        if 'storefront_oid' in params:
            path_params['storefront_oid'] = params['storefront_oid']
        if 'email_list_uuid' in params:
            path_params['email_list_uuid'] = params['email_list_uuid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/storefront/{storefront_oid}/email/lists/{email_list_uuid}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EmailListResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_email_list_customer_editor_url(self, storefront_oid, email_list_uuid, email_customer_uuid, **kwargs):
        """
        Get email list customers
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_email_list_customer_editor_url(storefront_oid, email_list_uuid, email_customer_uuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param str email_list_uuid: null (required)
        :param str email_customer_uuid: null (required)
        :return: EmailCustomerEditorUrlResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_email_list_customer_editor_url_with_http_info(storefront_oid, email_list_uuid, email_customer_uuid, **kwargs)
        else:
            (data) = self.get_email_list_customer_editor_url_with_http_info(storefront_oid, email_list_uuid, email_customer_uuid, **kwargs)
            return data

    def get_email_list_customer_editor_url_with_http_info(self, storefront_oid, email_list_uuid, email_customer_uuid, **kwargs):
        """
        Get email list customers
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_email_list_customer_editor_url_with_http_info(storefront_oid, email_list_uuid, email_customer_uuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param str email_list_uuid: null (required)
        :param str email_customer_uuid: null (required)
        :return: EmailCustomerEditorUrlResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storefront_oid', 'email_list_uuid', 'email_customer_uuid']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_email_list_customer_editor_url" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storefront_oid' is set
        if ('storefront_oid' not in params) or (params['storefront_oid'] is None):
            raise ValueError("Missing the required parameter `storefront_oid` when calling `get_email_list_customer_editor_url`")
        # verify the required parameter 'email_list_uuid' is set
        if ('email_list_uuid' not in params) or (params['email_list_uuid'] is None):
            raise ValueError("Missing the required parameter `email_list_uuid` when calling `get_email_list_customer_editor_url`")
        # verify the required parameter 'email_customer_uuid' is set
        if ('email_customer_uuid' not in params) or (params['email_customer_uuid'] is None):
            raise ValueError("Missing the required parameter `email_customer_uuid` when calling `get_email_list_customer_editor_url`")


        collection_formats = {}

        path_params = {}
        if 'storefront_oid' in params:
            path_params['storefront_oid'] = params['storefront_oid']
        if 'email_list_uuid' in params:
            path_params['email_list_uuid'] = params['email_list_uuid']
        if 'email_customer_uuid' in params:
            path_params['email_customer_uuid'] = params['email_customer_uuid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/storefront/{storefront_oid}/email/lists/{email_list_uuid}/customers/{email_customer_uuid}/editor_url', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EmailCustomerEditorUrlResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_email_list_customers(self, storefront_oid, email_list_uuid, **kwargs):
        """
        Get email list customers
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_email_list_customers(storefront_oid, email_list_uuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param str email_list_uuid: null (required)
        :param int page_number: null
        :param int page_size: null
        :return: EmailListCustomersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_email_list_customers_with_http_info(storefront_oid, email_list_uuid, **kwargs)
        else:
            (data) = self.get_email_list_customers_with_http_info(storefront_oid, email_list_uuid, **kwargs)
            return data

    def get_email_list_customers_with_http_info(self, storefront_oid, email_list_uuid, **kwargs):
        """
        Get email list customers
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_email_list_customers_with_http_info(storefront_oid, email_list_uuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param str email_list_uuid: null (required)
        :param int page_number: null
        :param int page_size: null
        :return: EmailListCustomersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storefront_oid', 'email_list_uuid', 'page_number', 'page_size']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_email_list_customers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storefront_oid' is set
        if ('storefront_oid' not in params) or (params['storefront_oid'] is None):
            raise ValueError("Missing the required parameter `storefront_oid` when calling `get_email_list_customers`")
        # verify the required parameter 'email_list_uuid' is set
        if ('email_list_uuid' not in params) or (params['email_list_uuid'] is None):
            raise ValueError("Missing the required parameter `email_list_uuid` when calling `get_email_list_customers`")


        collection_formats = {}

        path_params = {}
        if 'storefront_oid' in params:
            path_params['storefront_oid'] = params['storefront_oid']
        if 'email_list_uuid' in params:
            path_params['email_list_uuid'] = params['email_list_uuid']

        query_params = []
        if 'page_number' in params:
            query_params.append(('pageNumber', params['page_number']))
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/storefront/{storefront_oid}/email/lists/{email_list_uuid}/customers', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EmailListCustomersResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_email_lists(self, storefront_oid, **kwargs):
        """
        Get email lists
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_email_lists(storefront_oid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :return: EmailListsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_email_lists_with_http_info(storefront_oid, **kwargs)
        else:
            (data) = self.get_email_lists_with_http_info(storefront_oid, **kwargs)
            return data

    def get_email_lists_with_http_info(self, storefront_oid, **kwargs):
        """
        Get email lists
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_email_lists_with_http_info(storefront_oid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :return: EmailListsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storefront_oid']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_email_lists" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storefront_oid' is set
        if ('storefront_oid' not in params) or (params['storefront_oid'] is None):
            raise ValueError("Missing the required parameter `storefront_oid` when calling `get_email_lists`")


        collection_formats = {}

        path_params = {}
        if 'storefront_oid' in params:
            path_params['storefront_oid'] = params['storefront_oid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/storefront/{storefront_oid}/email/lists', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EmailListsResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_email_segment(self, storefront_oid, email_segment_uuid, **kwargs):
        """
        Get email segment
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_email_segment(storefront_oid, email_segment_uuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param str email_segment_uuid: null (required)
        :return: EmailSegmentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_email_segment_with_http_info(storefront_oid, email_segment_uuid, **kwargs)
        else:
            (data) = self.get_email_segment_with_http_info(storefront_oid, email_segment_uuid, **kwargs)
            return data

    def get_email_segment_with_http_info(self, storefront_oid, email_segment_uuid, **kwargs):
        """
        Get email segment
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_email_segment_with_http_info(storefront_oid, email_segment_uuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param str email_segment_uuid: null (required)
        :return: EmailSegmentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storefront_oid', 'email_segment_uuid']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_email_segment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storefront_oid' is set
        if ('storefront_oid' not in params) or (params['storefront_oid'] is None):
            raise ValueError("Missing the required parameter `storefront_oid` when calling `get_email_segment`")
        # verify the required parameter 'email_segment_uuid' is set
        if ('email_segment_uuid' not in params) or (params['email_segment_uuid'] is None):
            raise ValueError("Missing the required parameter `email_segment_uuid` when calling `get_email_segment`")


        collection_formats = {}

        path_params = {}
        if 'storefront_oid' in params:
            path_params['storefront_oid'] = params['storefront_oid']
        if 'email_segment_uuid' in params:
            path_params['email_segment_uuid'] = params['email_segment_uuid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/storefront/{storefront_oid}/email/segments/{email_segment_uuid}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EmailSegmentResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_email_segment_customer_editor_url(self, storefront_oid, email_segment_uuid, email_customer_uuid, **kwargs):
        """
        Get email segment customers editor URL
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_email_segment_customer_editor_url(storefront_oid, email_segment_uuid, email_customer_uuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param str email_segment_uuid: null (required)
        :param str email_customer_uuid: null (required)
        :return: EmailCustomerEditorUrlResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_email_segment_customer_editor_url_with_http_info(storefront_oid, email_segment_uuid, email_customer_uuid, **kwargs)
        else:
            (data) = self.get_email_segment_customer_editor_url_with_http_info(storefront_oid, email_segment_uuid, email_customer_uuid, **kwargs)
            return data

    def get_email_segment_customer_editor_url_with_http_info(self, storefront_oid, email_segment_uuid, email_customer_uuid, **kwargs):
        """
        Get email segment customers editor URL
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_email_segment_customer_editor_url_with_http_info(storefront_oid, email_segment_uuid, email_customer_uuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param str email_segment_uuid: null (required)
        :param str email_customer_uuid: null (required)
        :return: EmailCustomerEditorUrlResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storefront_oid', 'email_segment_uuid', 'email_customer_uuid']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_email_segment_customer_editor_url" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storefront_oid' is set
        if ('storefront_oid' not in params) or (params['storefront_oid'] is None):
            raise ValueError("Missing the required parameter `storefront_oid` when calling `get_email_segment_customer_editor_url`")
        # verify the required parameter 'email_segment_uuid' is set
        if ('email_segment_uuid' not in params) or (params['email_segment_uuid'] is None):
            raise ValueError("Missing the required parameter `email_segment_uuid` when calling `get_email_segment_customer_editor_url`")
        # verify the required parameter 'email_customer_uuid' is set
        if ('email_customer_uuid' not in params) or (params['email_customer_uuid'] is None):
            raise ValueError("Missing the required parameter `email_customer_uuid` when calling `get_email_segment_customer_editor_url`")


        collection_formats = {}

        path_params = {}
        if 'storefront_oid' in params:
            path_params['storefront_oid'] = params['storefront_oid']
        if 'email_segment_uuid' in params:
            path_params['email_segment_uuid'] = params['email_segment_uuid']
        if 'email_customer_uuid' in params:
            path_params['email_customer_uuid'] = params['email_customer_uuid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/customers/{email_customer_uuid}/editor_url', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EmailCustomerEditorUrlResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_email_segment_customers(self, storefront_oid, email_segment_uuid, **kwargs):
        """
        Get email segment customers
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_email_segment_customers(storefront_oid, email_segment_uuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param str email_segment_uuid: null (required)
        :param int page_number: null
        :param int page_size: null
        :return: EmailSegmentCustomersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_email_segment_customers_with_http_info(storefront_oid, email_segment_uuid, **kwargs)
        else:
            (data) = self.get_email_segment_customers_with_http_info(storefront_oid, email_segment_uuid, **kwargs)
            return data

    def get_email_segment_customers_with_http_info(self, storefront_oid, email_segment_uuid, **kwargs):
        """
        Get email segment customers
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_email_segment_customers_with_http_info(storefront_oid, email_segment_uuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param str email_segment_uuid: null (required)
        :param int page_number: null
        :param int page_size: null
        :return: EmailSegmentCustomersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storefront_oid', 'email_segment_uuid', 'page_number', 'page_size']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_email_segment_customers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storefront_oid' is set
        if ('storefront_oid' not in params) or (params['storefront_oid'] is None):
            raise ValueError("Missing the required parameter `storefront_oid` when calling `get_email_segment_customers`")
        # verify the required parameter 'email_segment_uuid' is set
        if ('email_segment_uuid' not in params) or (params['email_segment_uuid'] is None):
            raise ValueError("Missing the required parameter `email_segment_uuid` when calling `get_email_segment_customers`")


        collection_formats = {}

        path_params = {}
        if 'storefront_oid' in params:
            path_params['storefront_oid'] = params['storefront_oid']
        if 'email_segment_uuid' in params:
            path_params['email_segment_uuid'] = params['email_segment_uuid']

        query_params = []
        if 'page_number' in params:
            query_params.append(('pageNumber', params['page_number']))
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/customers', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EmailSegmentCustomersResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_email_segments(self, storefront_oid, **kwargs):
        """
        Get email segments
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_email_segments(storefront_oid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :return: EmailSegmentsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_email_segments_with_http_info(storefront_oid, **kwargs)
        else:
            (data) = self.get_email_segments_with_http_info(storefront_oid, **kwargs)
            return data

    def get_email_segments_with_http_info(self, storefront_oid, **kwargs):
        """
        Get email segments
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_email_segments_with_http_info(storefront_oid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :return: EmailSegmentsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storefront_oid']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_email_segments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storefront_oid' is set
        if ('storefront_oid' not in params) or (params['storefront_oid'] is None):
            raise ValueError("Missing the required parameter `storefront_oid` when calling `get_email_segments`")


        collection_formats = {}

        path_params = {}
        if 'storefront_oid' in params:
            path_params['storefront_oid'] = params['storefront_oid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/storefront/{storefront_oid}/email/segments', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EmailSegmentsResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_email_sending_domain(self, domain, **kwargs):
        """
        Get email sending domain
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_email_sending_domain(domain, async=True)
        >>> result = thread.get()

        :param async bool
        :param str domain: null (required)
        :return: EmailSendingDomainResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_email_sending_domain_with_http_info(domain, **kwargs)
        else:
            (data) = self.get_email_sending_domain_with_http_info(domain, **kwargs)
            return data

    def get_email_sending_domain_with_http_info(self, domain, **kwargs):
        """
        Get email sending domain
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_email_sending_domain_with_http_info(domain, async=True)
        >>> result = thread.get()

        :param async bool
        :param str domain: null (required)
        :return: EmailSendingDomainResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_email_sending_domain" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain' is set
        if ('domain' not in params) or (params['domain'] is None):
            raise ValueError("Missing the required parameter `domain` when calling `get_email_sending_domain`")


        collection_formats = {}

        path_params = {}
        if 'domain' in params:
            path_params['domain'] = params['domain']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/storefront/email/sending_domain/{domain}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EmailSendingDomainResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_email_sending_domain_status(self, domain, **kwargs):
        """
        Get email sending domain status
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_email_sending_domain_status(domain, async=True)
        >>> result = thread.get()

        :param async bool
        :param str domain: null (required)
        :return: EmailSendingDomainResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_email_sending_domain_status_with_http_info(domain, **kwargs)
        else:
            (data) = self.get_email_sending_domain_status_with_http_info(domain, **kwargs)
            return data

    def get_email_sending_domain_status_with_http_info(self, domain, **kwargs):
        """
        Get email sending domain status
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_email_sending_domain_status_with_http_info(domain, async=True)
        >>> result = thread.get()

        :param async bool
        :param str domain: null (required)
        :return: EmailSendingDomainResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_email_sending_domain_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain' is set
        if ('domain' not in params) or (params['domain'] is None):
            raise ValueError("Missing the required parameter `domain` when calling `get_email_sending_domain_status`")


        collection_formats = {}

        path_params = {}
        if 'domain' in params:
            path_params['domain'] = params['domain']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/storefront/email/sending_domains/{domain}/status', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EmailSendingDomainResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_email_sending_domains(self, **kwargs):
        """
        Get email sending domains
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_email_sending_domains(async=True)
        >>> result = thread.get()

        :param async bool
        :return: EmailSendingDomainsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_email_sending_domains_with_http_info(**kwargs)
        else:
            (data) = self.get_email_sending_domains_with_http_info(**kwargs)
            return data

    def get_email_sending_domains_with_http_info(self, **kwargs):
        """
        Get email sending domains
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_email_sending_domains_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: EmailSendingDomainsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_email_sending_domains" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/storefront/email/sending_domains', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EmailSendingDomainsResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_email_template(self, storefront_oid, email_template_oid, **kwargs):
        """
        Get email template
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_email_template(storefront_oid, email_template_oid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param int email_template_oid: null (required)
        :return: EmailTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_email_template_with_http_info(storefront_oid, email_template_oid, **kwargs)
        else:
            (data) = self.get_email_template_with_http_info(storefront_oid, email_template_oid, **kwargs)
            return data

    def get_email_template_with_http_info(self, storefront_oid, email_template_oid, **kwargs):
        """
        Get email template
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_email_template_with_http_info(storefront_oid, email_template_oid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param int email_template_oid: null (required)
        :return: EmailTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storefront_oid', 'email_template_oid']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_email_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storefront_oid' is set
        if ('storefront_oid' not in params) or (params['storefront_oid'] is None):
            raise ValueError("Missing the required parameter `storefront_oid` when calling `get_email_template`")
        # verify the required parameter 'email_template_oid' is set
        if ('email_template_oid' not in params) or (params['email_template_oid'] is None):
            raise ValueError("Missing the required parameter `email_template_oid` when calling `get_email_template`")


        collection_formats = {}

        path_params = {}
        if 'storefront_oid' in params:
            path_params['storefront_oid'] = params['storefront_oid']
        if 'email_template_oid' in params:
            path_params['email_template_oid'] = params['email_template_oid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/storefront/{storefront_oid}/email/templates/{email_template_oid}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EmailTemplate',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_email_templates(self, storefront_oid, **kwargs):
        """
        Get email templates
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_email_templates(storefront_oid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param str trigger_type: null
        :return: EmailTemplatesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_email_templates_with_http_info(storefront_oid, **kwargs)
        else:
            (data) = self.get_email_templates_with_http_info(storefront_oid, **kwargs)
            return data

    def get_email_templates_with_http_info(self, storefront_oid, **kwargs):
        """
        Get email templates
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_email_templates_with_http_info(storefront_oid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param str trigger_type: null
        :return: EmailTemplatesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storefront_oid', 'trigger_type']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_email_templates" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storefront_oid' is set
        if ('storefront_oid' not in params) or (params['storefront_oid'] is None):
            raise ValueError("Missing the required parameter `storefront_oid` when calling `get_email_templates`")


        collection_formats = {}

        path_params = {}
        if 'storefront_oid' in params:
            path_params['storefront_oid'] = params['storefront_oid']

        query_params = []
        if 'trigger_type' in params:
            query_params.append(('trigger_type', params['trigger_type']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/storefront/{storefront_oid}/email/templates', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EmailTemplatesResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_email_third_party_providers(self, storefront_oid, **kwargs):
        """
        Get a list of third party email providers
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_email_third_party_providers(storefront_oid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :return: EmailThirdPartyProvidersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_email_third_party_providers_with_http_info(storefront_oid, **kwargs)
        else:
            (data) = self.get_email_third_party_providers_with_http_info(storefront_oid, **kwargs)
            return data

    def get_email_third_party_providers_with_http_info(self, storefront_oid, **kwargs):
        """
        Get a list of third party email providers
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_email_third_party_providers_with_http_info(storefront_oid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :return: EmailThirdPartyProvidersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storefront_oid']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_email_third_party_providers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storefront_oid' is set
        if ('storefront_oid' not in params) or (params['storefront_oid'] is None):
            raise ValueError("Missing the required parameter `storefront_oid` when calling `get_email_third_party_providers`")


        collection_formats = {}

        path_params = {}
        if 'storefront_oid' in params:
            path_params['storefront_oid'] = params['storefront_oid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/storefront/{storefront_oid}/email/third_party_providers', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EmailThirdPartyProvidersResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_experiments(self, storefront_oid, **kwargs):
        """
        Get experiments
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_experiments(storefront_oid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :return: ExperimentsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_experiments_with_http_info(storefront_oid, **kwargs)
        else:
            (data) = self.get_experiments_with_http_info(storefront_oid, **kwargs)
            return data

    def get_experiments_with_http_info(self, storefront_oid, **kwargs):
        """
        Get experiments
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_experiments_with_http_info(storefront_oid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :return: ExperimentsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storefront_oid']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_experiments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storefront_oid' is set
        if ('storefront_oid' not in params) or (params['storefront_oid'] is None):
            raise ValueError("Missing the required parameter `storefront_oid` when calling `get_experiments`")


        collection_formats = {}

        path_params = {}
        if 'storefront_oid' in params:
            path_params['storefront_oid'] = params['storefront_oid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/storefront/{storefront_oid}/experiments', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ExperimentsResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_histogram_property_names(self, storefront_oid, **kwargs):
        """
        Get histogram property names
        Obtain a list of property names for a given property type 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_histogram_property_names(storefront_oid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param str property_type: null
        :return: EmailHistogramPropertyNamesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_histogram_property_names_with_http_info(storefront_oid, **kwargs)
        else:
            (data) = self.get_histogram_property_names_with_http_info(storefront_oid, **kwargs)
            return data

    def get_histogram_property_names_with_http_info(self, storefront_oid, **kwargs):
        """
        Get histogram property names
        Obtain a list of property names for a given property type 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_histogram_property_names_with_http_info(storefront_oid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param str property_type: null
        :return: EmailHistogramPropertyNamesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storefront_oid', 'property_type']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_histogram_property_names" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storefront_oid' is set
        if ('storefront_oid' not in params) or (params['storefront_oid'] is None):
            raise ValueError("Missing the required parameter `storefront_oid` when calling `get_histogram_property_names`")


        collection_formats = {}

        path_params = {}
        if 'storefront_oid' in params:
            path_params['storefront_oid'] = params['storefront_oid']

        query_params = []
        if 'property_type' in params:
            query_params.append(('property_type', params['property_type']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/storefront/{storefront_oid}/email/histogram/property_names', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EmailHistogramPropertyNamesResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_histogram_property_values(self, storefront_oid, **kwargs):
        """
        Get histogram property values
        Obtain a list of property values for a given property name and type 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_histogram_property_values(storefront_oid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param str property_name: null
        :param str property_type: null
        :param int limit: null
        :return: EmailHistogramPropertyValuesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_histogram_property_values_with_http_info(storefront_oid, **kwargs)
        else:
            (data) = self.get_histogram_property_values_with_http_info(storefront_oid, **kwargs)
            return data

    def get_histogram_property_values_with_http_info(self, storefront_oid, **kwargs):
        """
        Get histogram property values
        Obtain a list of property values for a given property name and type 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_histogram_property_values_with_http_info(storefront_oid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param str property_name: null
        :param str property_type: null
        :param int limit: null
        :return: EmailHistogramPropertyValuesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storefront_oid', 'property_name', 'property_type', 'limit']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_histogram_property_values" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storefront_oid' is set
        if ('storefront_oid' not in params) or (params['storefront_oid'] is None):
            raise ValueError("Missing the required parameter `storefront_oid` when calling `get_histogram_property_values`")


        collection_formats = {}

        path_params = {}
        if 'storefront_oid' in params:
            path_params['storefront_oid'] = params['storefront_oid']

        query_params = []
        if 'property_name' in params:
            query_params.append(('property_name', params['property_name']))
        if 'property_type' in params:
            query_params.append(('property_type', params['property_type']))
        if 'limit' in params:
            query_params.append(('limit', params['limit']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/storefront/{storefront_oid}/email/histogram/property_values', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EmailHistogramPropertyValuesResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def import_email_third_party_provider_list(self, storefront_oid, import_request, **kwargs):
        """
        Import a third party provider list
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.import_email_third_party_provider_list(storefront_oid, import_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param EmailThirdPartyListImportRequest import_request: lists to import (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.import_email_third_party_provider_list_with_http_info(storefront_oid, import_request, **kwargs)
        else:
            (data) = self.import_email_third_party_provider_list_with_http_info(storefront_oid, import_request, **kwargs)
            return data

    def import_email_third_party_provider_list_with_http_info(self, storefront_oid, import_request, **kwargs):
        """
        Import a third party provider list
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.import_email_third_party_provider_list_with_http_info(storefront_oid, import_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param EmailThirdPartyListImportRequest import_request: lists to import (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storefront_oid', 'import_request']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method import_email_third_party_provider_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storefront_oid' is set
        if ('storefront_oid' not in params) or (params['storefront_oid'] is None):
            raise ValueError("Missing the required parameter `storefront_oid` when calling `import_email_third_party_provider_list`")
        # verify the required parameter 'import_request' is set
        if ('import_request' not in params) or (params['import_request'] is None):
            raise ValueError("Missing the required parameter `import_request` when calling `import_email_third_party_provider_list`")


        collection_formats = {}

        path_params = {}
        if 'storefront_oid' in params:
            path_params['storefront_oid'] = params['storefront_oid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'import_request' in params:
            body_params = params['import_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/storefront/{storefront_oid}/email/third_party_providers/import', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def insert_email_campaign(self, storefront_oid, email_campaign, **kwargs):
        """
        Insert email campaign
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.insert_email_campaign(storefront_oid, email_campaign, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param EmailCampaign email_campaign: Email campaign (required)
        :return: EmailCampaignResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.insert_email_campaign_with_http_info(storefront_oid, email_campaign, **kwargs)
        else:
            (data) = self.insert_email_campaign_with_http_info(storefront_oid, email_campaign, **kwargs)
            return data

    def insert_email_campaign_with_http_info(self, storefront_oid, email_campaign, **kwargs):
        """
        Insert email campaign
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.insert_email_campaign_with_http_info(storefront_oid, email_campaign, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param EmailCampaign email_campaign: Email campaign (required)
        :return: EmailCampaignResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storefront_oid', 'email_campaign']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method insert_email_campaign" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storefront_oid' is set
        if ('storefront_oid' not in params) or (params['storefront_oid'] is None):
            raise ValueError("Missing the required parameter `storefront_oid` when calling `insert_email_campaign`")
        # verify the required parameter 'email_campaign' is set
        if ('email_campaign' not in params) or (params['email_campaign'] is None):
            raise ValueError("Missing the required parameter `email_campaign` when calling `insert_email_campaign`")


        collection_formats = {}

        path_params = {}
        if 'storefront_oid' in params:
            path_params['storefront_oid'] = params['storefront_oid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'email_campaign' in params:
            body_params = params['email_campaign']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/storefront/{storefront_oid}/email/campaigns', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EmailCampaignResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def insert_email_commseq(self, storefront_oid, email_commseq, **kwargs):
        """
        Insert email commseq
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.insert_email_commseq(storefront_oid, email_commseq, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param EmailCommseq email_commseq: Email commseq (required)
        :return: EmailCommseqResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.insert_email_commseq_with_http_info(storefront_oid, email_commseq, **kwargs)
        else:
            (data) = self.insert_email_commseq_with_http_info(storefront_oid, email_commseq, **kwargs)
            return data

    def insert_email_commseq_with_http_info(self, storefront_oid, email_commseq, **kwargs):
        """
        Insert email commseq
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.insert_email_commseq_with_http_info(storefront_oid, email_commseq, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param EmailCommseq email_commseq: Email commseq (required)
        :return: EmailCommseqResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storefront_oid', 'email_commseq']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method insert_email_commseq" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storefront_oid' is set
        if ('storefront_oid' not in params) or (params['storefront_oid'] is None):
            raise ValueError("Missing the required parameter `storefront_oid` when calling `insert_email_commseq`")
        # verify the required parameter 'email_commseq' is set
        if ('email_commseq' not in params) or (params['email_commseq'] is None):
            raise ValueError("Missing the required parameter `email_commseq` when calling `insert_email_commseq`")


        collection_formats = {}

        path_params = {}
        if 'storefront_oid' in params:
            path_params['storefront_oid'] = params['storefront_oid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'email_commseq' in params:
            body_params = params['email_commseq']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/storefront/{storefront_oid}/email/commseqs', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EmailCommseqResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def insert_email_email(self, storefront_oid, email_commseq_email, **kwargs):
        """
        Insert email email
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.insert_email_email(storefront_oid, email_commseq_email, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param EmailCommseqEmail email_commseq_email: Email email (required)
        :return: EmailCommseqEmailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.insert_email_email_with_http_info(storefront_oid, email_commseq_email, **kwargs)
        else:
            (data) = self.insert_email_email_with_http_info(storefront_oid, email_commseq_email, **kwargs)
            return data

    def insert_email_email_with_http_info(self, storefront_oid, email_commseq_email, **kwargs):
        """
        Insert email email
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.insert_email_email_with_http_info(storefront_oid, email_commseq_email, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param EmailCommseqEmail email_commseq_email: Email email (required)
        :return: EmailCommseqEmailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storefront_oid', 'email_commseq_email']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method insert_email_email" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storefront_oid' is set
        if ('storefront_oid' not in params) or (params['storefront_oid'] is None):
            raise ValueError("Missing the required parameter `storefront_oid` when calling `insert_email_email`")
        # verify the required parameter 'email_commseq_email' is set
        if ('email_commseq_email' not in params) or (params['email_commseq_email'] is None):
            raise ValueError("Missing the required parameter `email_commseq_email` when calling `insert_email_email`")


        collection_formats = {}

        path_params = {}
        if 'storefront_oid' in params:
            path_params['storefront_oid'] = params['storefront_oid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'email_commseq_email' in params:
            body_params = params['email_commseq_email']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/storefront/{storefront_oid}/email/emails', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EmailCommseqEmailResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def insert_email_flow(self, storefront_oid, email_flow, **kwargs):
        """
        Insert email flow
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.insert_email_flow(storefront_oid, email_flow, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param EmailFlow email_flow: Email flow (required)
        :return: EmailFlowResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.insert_email_flow_with_http_info(storefront_oid, email_flow, **kwargs)
        else:
            (data) = self.insert_email_flow_with_http_info(storefront_oid, email_flow, **kwargs)
            return data

    def insert_email_flow_with_http_info(self, storefront_oid, email_flow, **kwargs):
        """
        Insert email flow
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.insert_email_flow_with_http_info(storefront_oid, email_flow, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param EmailFlow email_flow: Email flow (required)
        :return: EmailFlowResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storefront_oid', 'email_flow']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method insert_email_flow" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storefront_oid' is set
        if ('storefront_oid' not in params) or (params['storefront_oid'] is None):
            raise ValueError("Missing the required parameter `storefront_oid` when calling `insert_email_flow`")
        # verify the required parameter 'email_flow' is set
        if ('email_flow' not in params) or (params['email_flow'] is None):
            raise ValueError("Missing the required parameter `email_flow` when calling `insert_email_flow`")


        collection_formats = {}

        path_params = {}
        if 'storefront_oid' in params:
            path_params['storefront_oid'] = params['storefront_oid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'email_flow' in params:
            body_params = params['email_flow']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/storefront/{storefront_oid}/email/flows', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EmailFlowResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def insert_email_list(self, storefront_oid, email_list, **kwargs):
        """
        Insert email list
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.insert_email_list(storefront_oid, email_list, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param EmailList email_list: Email list (required)
        :return: EmailListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.insert_email_list_with_http_info(storefront_oid, email_list, **kwargs)
        else:
            (data) = self.insert_email_list_with_http_info(storefront_oid, email_list, **kwargs)
            return data

    def insert_email_list_with_http_info(self, storefront_oid, email_list, **kwargs):
        """
        Insert email list
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.insert_email_list_with_http_info(storefront_oid, email_list, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param EmailList email_list: Email list (required)
        :return: EmailListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storefront_oid', 'email_list']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method insert_email_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storefront_oid' is set
        if ('storefront_oid' not in params) or (params['storefront_oid'] is None):
            raise ValueError("Missing the required parameter `storefront_oid` when calling `insert_email_list`")
        # verify the required parameter 'email_list' is set
        if ('email_list' not in params) or (params['email_list'] is None):
            raise ValueError("Missing the required parameter `email_list` when calling `insert_email_list`")


        collection_formats = {}

        path_params = {}
        if 'storefront_oid' in params:
            path_params['storefront_oid'] = params['storefront_oid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'email_list' in params:
            body_params = params['email_list']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/storefront/{storefront_oid}/email/lists', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EmailListResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def insert_email_segment(self, storefront_oid, email_segment, **kwargs):
        """
        Insert email segment
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.insert_email_segment(storefront_oid, email_segment, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param EmailSegment email_segment: Email segment (required)
        :return: EmailSegmentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.insert_email_segment_with_http_info(storefront_oid, email_segment, **kwargs)
        else:
            (data) = self.insert_email_segment_with_http_info(storefront_oid, email_segment, **kwargs)
            return data

    def insert_email_segment_with_http_info(self, storefront_oid, email_segment, **kwargs):
        """
        Insert email segment
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.insert_email_segment_with_http_info(storefront_oid, email_segment, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param EmailSegment email_segment: Email segment (required)
        :return: EmailSegmentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storefront_oid', 'email_segment']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method insert_email_segment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storefront_oid' is set
        if ('storefront_oid' not in params) or (params['storefront_oid'] is None):
            raise ValueError("Missing the required parameter `storefront_oid` when calling `insert_email_segment`")
        # verify the required parameter 'email_segment' is set
        if ('email_segment' not in params) or (params['email_segment'] is None):
            raise ValueError("Missing the required parameter `email_segment` when calling `insert_email_segment`")


        collection_formats = {}

        path_params = {}
        if 'storefront_oid' in params:
            path_params['storefront_oid'] = params['storefront_oid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'email_segment' in params:
            body_params = params['email_segment']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/storefront/{storefront_oid}/email/segments', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EmailSegmentResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def prepare_download_email_segment(self, storefront_oid, email_segment_uuid, **kwargs):
        """
        Prepare download of email segment
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.prepare_download_email_segment(storefront_oid, email_segment_uuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param str email_segment_uuid: null (required)
        :return: EmailSegmentDownloadPrepareResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.prepare_download_email_segment_with_http_info(storefront_oid, email_segment_uuid, **kwargs)
        else:
            (data) = self.prepare_download_email_segment_with_http_info(storefront_oid, email_segment_uuid, **kwargs)
            return data

    def prepare_download_email_segment_with_http_info(self, storefront_oid, email_segment_uuid, **kwargs):
        """
        Prepare download of email segment
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.prepare_download_email_segment_with_http_info(storefront_oid, email_segment_uuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param str email_segment_uuid: null (required)
        :return: EmailSegmentDownloadPrepareResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storefront_oid', 'email_segment_uuid']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method prepare_download_email_segment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storefront_oid' is set
        if ('storefront_oid' not in params) or (params['storefront_oid'] is None):
            raise ValueError("Missing the required parameter `storefront_oid` when calling `prepare_download_email_segment`")
        # verify the required parameter 'email_segment_uuid' is set
        if ('email_segment_uuid' not in params) or (params['email_segment_uuid'] is None):
            raise ValueError("Missing the required parameter `email_segment_uuid` when calling `prepare_download_email_segment`")


        collection_formats = {}

        path_params = {}
        if 'storefront_oid' in params:
            path_params['storefront_oid'] = params['storefront_oid']
        if 'email_segment_uuid' in params:
            path_params['email_segment_uuid'] = params['email_segment_uuid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/downloadPrepare', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EmailSegmentDownloadPrepareResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def search(self, **kwargs):
        """
        Searches for all matching values
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.search(async=True)
        >>> result = thread.get()

        :param async bool
        :param str category: null
        :param str matches: null
        :param int max_hits: null
        :return: LookupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.search_with_http_info(**kwargs)
        else:
            (data) = self.search_with_http_info(**kwargs)
            return data

    def search_with_http_info(self, **kwargs):
        """
        Searches for all matching values
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.search_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str category: null
        :param str matches: null
        :param int max_hits: null
        :return: LookupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['category', 'matches', 'max_hits']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'category' in params:
            query_params.append(('category', params['category']))
        if 'matches' in params:
            query_params.append(('matches', params['matches']))
        if 'max_hits' in params:
            query_params.append(('max_hits', params['max_hits']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/storefront/search', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='LookupResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def search_email_list_customers(self, storefront_oid, email_list_uuid, **kwargs):
        """
        Search email list customers
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.search_email_list_customers(storefront_oid, email_list_uuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param str email_list_uuid: null (required)
        :param str starts_with: null
        :return: EmailListCustomersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.search_email_list_customers_with_http_info(storefront_oid, email_list_uuid, **kwargs)
        else:
            (data) = self.search_email_list_customers_with_http_info(storefront_oid, email_list_uuid, **kwargs)
            return data

    def search_email_list_customers_with_http_info(self, storefront_oid, email_list_uuid, **kwargs):
        """
        Search email list customers
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.search_email_list_customers_with_http_info(storefront_oid, email_list_uuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param str email_list_uuid: null (required)
        :param str starts_with: null
        :return: EmailListCustomersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storefront_oid', 'email_list_uuid', 'starts_with']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_email_list_customers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storefront_oid' is set
        if ('storefront_oid' not in params) or (params['storefront_oid'] is None):
            raise ValueError("Missing the required parameter `storefront_oid` when calling `search_email_list_customers`")
        # verify the required parameter 'email_list_uuid' is set
        if ('email_list_uuid' not in params) or (params['email_list_uuid'] is None):
            raise ValueError("Missing the required parameter `email_list_uuid` when calling `search_email_list_customers`")


        collection_formats = {}

        path_params = {}
        if 'storefront_oid' in params:
            path_params['storefront_oid'] = params['storefront_oid']
        if 'email_list_uuid' in params:
            path_params['email_list_uuid'] = params['email_list_uuid']

        query_params = []
        if 'starts_with' in params:
            query_params.append(('startsWith', params['starts_with']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/storefront/{storefront_oid}/email/lists/{email_list_uuid}/search', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EmailListCustomersResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def search_email_segment_customers(self, storefront_oid, email_segment_uuid, **kwargs):
        """
        Search email segment customers
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.search_email_segment_customers(storefront_oid, email_segment_uuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param str email_segment_uuid: null (required)
        :param str starts_with: null
        :return: EmailSegmentCustomersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.search_email_segment_customers_with_http_info(storefront_oid, email_segment_uuid, **kwargs)
        else:
            (data) = self.search_email_segment_customers_with_http_info(storefront_oid, email_segment_uuid, **kwargs)
            return data

    def search_email_segment_customers_with_http_info(self, storefront_oid, email_segment_uuid, **kwargs):
        """
        Search email segment customers
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.search_email_segment_customers_with_http_info(storefront_oid, email_segment_uuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param str email_segment_uuid: null (required)
        :param str starts_with: null
        :return: EmailSegmentCustomersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storefront_oid', 'email_segment_uuid', 'starts_with']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_email_segment_customers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storefront_oid' is set
        if ('storefront_oid' not in params) or (params['storefront_oid'] is None):
            raise ValueError("Missing the required parameter `storefront_oid` when calling `search_email_segment_customers`")
        # verify the required parameter 'email_segment_uuid' is set
        if ('email_segment_uuid' not in params) or (params['email_segment_uuid'] is None):
            raise ValueError("Missing the required parameter `email_segment_uuid` when calling `search_email_segment_customers`")


        collection_formats = {}

        path_params = {}
        if 'storefront_oid' in params:
            path_params['storefront_oid'] = params['storefront_oid']
        if 'email_segment_uuid' in params:
            path_params['email_segment_uuid'] = params['email_segment_uuid']

        query_params = []
        if 'starts_with' in params:
            query_params.append(('startsWith', params['starts_with']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/search', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EmailSegmentCustomersResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def start_email_campaign(self, storefront_oid, email_campaign_uuid, **kwargs):
        """
        Start email campaign
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.start_email_campaign(storefront_oid, email_campaign_uuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param str email_campaign_uuid: null (required)
        :return: BaseResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.start_email_campaign_with_http_info(storefront_oid, email_campaign_uuid, **kwargs)
        else:
            (data) = self.start_email_campaign_with_http_info(storefront_oid, email_campaign_uuid, **kwargs)
            return data

    def start_email_campaign_with_http_info(self, storefront_oid, email_campaign_uuid, **kwargs):
        """
        Start email campaign
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.start_email_campaign_with_http_info(storefront_oid, email_campaign_uuid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param str email_campaign_uuid: null (required)
        :return: BaseResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storefront_oid', 'email_campaign_uuid']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method start_email_campaign" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storefront_oid' is set
        if ('storefront_oid' not in params) or (params['storefront_oid'] is None):
            raise ValueError("Missing the required parameter `storefront_oid` when calling `start_email_campaign`")
        # verify the required parameter 'email_campaign_uuid' is set
        if ('email_campaign_uuid' not in params) or (params['email_campaign_uuid'] is None):
            raise ValueError("Missing the required parameter `email_campaign_uuid` when calling `start_email_campaign`")


        collection_formats = {}

        path_params = {}
        if 'storefront_oid' in params:
            path_params['storefront_oid'] = params['storefront_oid']
        if 'email_campaign_uuid' in params:
            path_params['email_campaign_uuid'] = params['email_campaign_uuid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}/start', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='BaseResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def subscribe_to_email_list(self, storefront_oid, email_list_uuid, customers, **kwargs):
        """
        Subscribe customers to email list
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.subscribe_to_email_list(storefront_oid, email_list_uuid, customers, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param str email_list_uuid: null (required)
        :param list[EmailCustomer] customers: Customers (required)
        :return: EmailListSubscribeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.subscribe_to_email_list_with_http_info(storefront_oid, email_list_uuid, customers, **kwargs)
        else:
            (data) = self.subscribe_to_email_list_with_http_info(storefront_oid, email_list_uuid, customers, **kwargs)
            return data

    def subscribe_to_email_list_with_http_info(self, storefront_oid, email_list_uuid, customers, **kwargs):
        """
        Subscribe customers to email list
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.subscribe_to_email_list_with_http_info(storefront_oid, email_list_uuid, customers, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param str email_list_uuid: null (required)
        :param list[EmailCustomer] customers: Customers (required)
        :return: EmailListSubscribeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storefront_oid', 'email_list_uuid', 'customers']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method subscribe_to_email_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storefront_oid' is set
        if ('storefront_oid' not in params) or (params['storefront_oid'] is None):
            raise ValueError("Missing the required parameter `storefront_oid` when calling `subscribe_to_email_list`")
        # verify the required parameter 'email_list_uuid' is set
        if ('email_list_uuid' not in params) or (params['email_list_uuid'] is None):
            raise ValueError("Missing the required parameter `email_list_uuid` when calling `subscribe_to_email_list`")
        # verify the required parameter 'customers' is set
        if ('customers' not in params) or (params['customers'] is None):
            raise ValueError("Missing the required parameter `customers` when calling `subscribe_to_email_list`")


        collection_formats = {}

        path_params = {}
        if 'storefront_oid' in params:
            path_params['storefront_oid'] = params['storefront_oid']
        if 'email_list_uuid' in params:
            path_params['email_list_uuid'] = params['email_list_uuid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'customers' in params:
            body_params = params['customers']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/storefront/{storefront_oid}/email/lists/{email_list_uuid}/subscribe', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EmailListSubscribeResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_email_campaign(self, storefront_oid, email_campaign_uuid, email_campaign, **kwargs):
        """
        Update email campaign
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_email_campaign(storefront_oid, email_campaign_uuid, email_campaign, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param str email_campaign_uuid: null (required)
        :param EmailCampaign email_campaign: Email campaign (required)
        :return: EmailCampaignResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_email_campaign_with_http_info(storefront_oid, email_campaign_uuid, email_campaign, **kwargs)
        else:
            (data) = self.update_email_campaign_with_http_info(storefront_oid, email_campaign_uuid, email_campaign, **kwargs)
            return data

    def update_email_campaign_with_http_info(self, storefront_oid, email_campaign_uuid, email_campaign, **kwargs):
        """
        Update email campaign
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_email_campaign_with_http_info(storefront_oid, email_campaign_uuid, email_campaign, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param str email_campaign_uuid: null (required)
        :param EmailCampaign email_campaign: Email campaign (required)
        :return: EmailCampaignResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storefront_oid', 'email_campaign_uuid', 'email_campaign']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_email_campaign" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storefront_oid' is set
        if ('storefront_oid' not in params) or (params['storefront_oid'] is None):
            raise ValueError("Missing the required parameter `storefront_oid` when calling `update_email_campaign`")
        # verify the required parameter 'email_campaign_uuid' is set
        if ('email_campaign_uuid' not in params) or (params['email_campaign_uuid'] is None):
            raise ValueError("Missing the required parameter `email_campaign_uuid` when calling `update_email_campaign`")
        # verify the required parameter 'email_campaign' is set
        if ('email_campaign' not in params) or (params['email_campaign'] is None):
            raise ValueError("Missing the required parameter `email_campaign` when calling `update_email_campaign`")


        collection_formats = {}

        path_params = {}
        if 'storefront_oid' in params:
            path_params['storefront_oid'] = params['storefront_oid']
        if 'email_campaign_uuid' in params:
            path_params['email_campaign_uuid'] = params['email_campaign_uuid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'email_campaign' in params:
            body_params = params['email_campaign']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EmailCampaignResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_email_commseq(self, storefront_oid, commseq_uuid, email_commseq, **kwargs):
        """
        Update email commseq
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_email_commseq(storefront_oid, commseq_uuid, email_commseq, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param str commseq_uuid: null (required)
        :param EmailCommseq email_commseq: Email commseq (required)
        :return: EmailCommseqResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_email_commseq_with_http_info(storefront_oid, commseq_uuid, email_commseq, **kwargs)
        else:
            (data) = self.update_email_commseq_with_http_info(storefront_oid, commseq_uuid, email_commseq, **kwargs)
            return data

    def update_email_commseq_with_http_info(self, storefront_oid, commseq_uuid, email_commseq, **kwargs):
        """
        Update email commseq
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_email_commseq_with_http_info(storefront_oid, commseq_uuid, email_commseq, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param str commseq_uuid: null (required)
        :param EmailCommseq email_commseq: Email commseq (required)
        :return: EmailCommseqResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storefront_oid', 'commseq_uuid', 'email_commseq']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_email_commseq" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storefront_oid' is set
        if ('storefront_oid' not in params) or (params['storefront_oid'] is None):
            raise ValueError("Missing the required parameter `storefront_oid` when calling `update_email_commseq`")
        # verify the required parameter 'commseq_uuid' is set
        if ('commseq_uuid' not in params) or (params['commseq_uuid'] is None):
            raise ValueError("Missing the required parameter `commseq_uuid` when calling `update_email_commseq`")
        # verify the required parameter 'email_commseq' is set
        if ('email_commseq' not in params) or (params['email_commseq'] is None):
            raise ValueError("Missing the required parameter `email_commseq` when calling `update_email_commseq`")


        collection_formats = {}

        path_params = {}
        if 'storefront_oid' in params:
            path_params['storefront_oid'] = params['storefront_oid']
        if 'commseq_uuid' in params:
            path_params['commseq_uuid'] = params['commseq_uuid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'email_commseq' in params:
            body_params = params['email_commseq']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EmailCommseqResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_email_email(self, storefront_oid, commseq_email_uuid, email_commseq_email, **kwargs):
        """
        Update email email
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_email_email(storefront_oid, commseq_email_uuid, email_commseq_email, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param str commseq_email_uuid: null (required)
        :param EmailCommseqEmail email_commseq_email: Email commseq email (required)
        :return: EmailCommseqEmailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_email_email_with_http_info(storefront_oid, commseq_email_uuid, email_commseq_email, **kwargs)
        else:
            (data) = self.update_email_email_with_http_info(storefront_oid, commseq_email_uuid, email_commseq_email, **kwargs)
            return data

    def update_email_email_with_http_info(self, storefront_oid, commseq_email_uuid, email_commseq_email, **kwargs):
        """
        Update email email
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_email_email_with_http_info(storefront_oid, commseq_email_uuid, email_commseq_email, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param str commseq_email_uuid: null (required)
        :param EmailCommseqEmail email_commseq_email: Email commseq email (required)
        :return: EmailCommseqEmailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storefront_oid', 'commseq_email_uuid', 'email_commseq_email']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_email_email" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storefront_oid' is set
        if ('storefront_oid' not in params) or (params['storefront_oid'] is None):
            raise ValueError("Missing the required parameter `storefront_oid` when calling `update_email_email`")
        # verify the required parameter 'commseq_email_uuid' is set
        if ('commseq_email_uuid' not in params) or (params['commseq_email_uuid'] is None):
            raise ValueError("Missing the required parameter `commseq_email_uuid` when calling `update_email_email`")
        # verify the required parameter 'email_commseq_email' is set
        if ('email_commseq_email' not in params) or (params['email_commseq_email'] is None):
            raise ValueError("Missing the required parameter `email_commseq_email` when calling `update_email_email`")


        collection_formats = {}

        path_params = {}
        if 'storefront_oid' in params:
            path_params['storefront_oid'] = params['storefront_oid']
        if 'commseq_email_uuid' in params:
            path_params['commseq_email_uuid'] = params['commseq_email_uuid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'email_commseq_email' in params:
            body_params = params['email_commseq_email']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EmailCommseqEmailResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_email_flow(self, storefront_oid, email_flow_uuid, email_flow, **kwargs):
        """
        Update email flow
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_email_flow(storefront_oid, email_flow_uuid, email_flow, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param str email_flow_uuid: null (required)
        :param EmailFlow email_flow: Email flow (required)
        :return: EmailFlowResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_email_flow_with_http_info(storefront_oid, email_flow_uuid, email_flow, **kwargs)
        else:
            (data) = self.update_email_flow_with_http_info(storefront_oid, email_flow_uuid, email_flow, **kwargs)
            return data

    def update_email_flow_with_http_info(self, storefront_oid, email_flow_uuid, email_flow, **kwargs):
        """
        Update email flow
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_email_flow_with_http_info(storefront_oid, email_flow_uuid, email_flow, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param str email_flow_uuid: null (required)
        :param EmailFlow email_flow: Email flow (required)
        :return: EmailFlowResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storefront_oid', 'email_flow_uuid', 'email_flow']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_email_flow" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storefront_oid' is set
        if ('storefront_oid' not in params) or (params['storefront_oid'] is None):
            raise ValueError("Missing the required parameter `storefront_oid` when calling `update_email_flow`")
        # verify the required parameter 'email_flow_uuid' is set
        if ('email_flow_uuid' not in params) or (params['email_flow_uuid'] is None):
            raise ValueError("Missing the required parameter `email_flow_uuid` when calling `update_email_flow`")
        # verify the required parameter 'email_flow' is set
        if ('email_flow' not in params) or (params['email_flow'] is None):
            raise ValueError("Missing the required parameter `email_flow` when calling `update_email_flow`")


        collection_formats = {}

        path_params = {}
        if 'storefront_oid' in params:
            path_params['storefront_oid'] = params['storefront_oid']
        if 'email_flow_uuid' in params:
            path_params['email_flow_uuid'] = params['email_flow_uuid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'email_flow' in params:
            body_params = params['email_flow']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/storefront/{storefront_oid}/email/flows/{email_flow_uuid}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EmailFlowResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_email_list(self, storefront_oid, email_list_uuid, email_list, **kwargs):
        """
        Update email list
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_email_list(storefront_oid, email_list_uuid, email_list, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param str email_list_uuid: null (required)
        :param EmailList email_list: Email list (required)
        :return: EmailListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_email_list_with_http_info(storefront_oid, email_list_uuid, email_list, **kwargs)
        else:
            (data) = self.update_email_list_with_http_info(storefront_oid, email_list_uuid, email_list, **kwargs)
            return data

    def update_email_list_with_http_info(self, storefront_oid, email_list_uuid, email_list, **kwargs):
        """
        Update email list
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_email_list_with_http_info(storefront_oid, email_list_uuid, email_list, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param str email_list_uuid: null (required)
        :param EmailList email_list: Email list (required)
        :return: EmailListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storefront_oid', 'email_list_uuid', 'email_list']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_email_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storefront_oid' is set
        if ('storefront_oid' not in params) or (params['storefront_oid'] is None):
            raise ValueError("Missing the required parameter `storefront_oid` when calling `update_email_list`")
        # verify the required parameter 'email_list_uuid' is set
        if ('email_list_uuid' not in params) or (params['email_list_uuid'] is None):
            raise ValueError("Missing the required parameter `email_list_uuid` when calling `update_email_list`")
        # verify the required parameter 'email_list' is set
        if ('email_list' not in params) or (params['email_list'] is None):
            raise ValueError("Missing the required parameter `email_list` when calling `update_email_list`")


        collection_formats = {}

        path_params = {}
        if 'storefront_oid' in params:
            path_params['storefront_oid'] = params['storefront_oid']
        if 'email_list_uuid' in params:
            path_params['email_list_uuid'] = params['email_list_uuid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'email_list' in params:
            body_params = params['email_list']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/storefront/{storefront_oid}/email/lists/{email_list_uuid}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EmailListResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_email_segment(self, storefront_oid, email_segment_uuid, email_segment, **kwargs):
        """
        Update email segment
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_email_segment(storefront_oid, email_segment_uuid, email_segment, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param str email_segment_uuid: null (required)
        :param EmailSegment email_segment: Email segment (required)
        :return: EmailSegmentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_email_segment_with_http_info(storefront_oid, email_segment_uuid, email_segment, **kwargs)
        else:
            (data) = self.update_email_segment_with_http_info(storefront_oid, email_segment_uuid, email_segment, **kwargs)
            return data

    def update_email_segment_with_http_info(self, storefront_oid, email_segment_uuid, email_segment, **kwargs):
        """
        Update email segment
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_email_segment_with_http_info(storefront_oid, email_segment_uuid, email_segment, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param str email_segment_uuid: null (required)
        :param EmailSegment email_segment: Email segment (required)
        :return: EmailSegmentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storefront_oid', 'email_segment_uuid', 'email_segment']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_email_segment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storefront_oid' is set
        if ('storefront_oid' not in params) or (params['storefront_oid'] is None):
            raise ValueError("Missing the required parameter `storefront_oid` when calling `update_email_segment`")
        # verify the required parameter 'email_segment_uuid' is set
        if ('email_segment_uuid' not in params) or (params['email_segment_uuid'] is None):
            raise ValueError("Missing the required parameter `email_segment_uuid` when calling `update_email_segment`")
        # verify the required parameter 'email_segment' is set
        if ('email_segment' not in params) or (params['email_segment'] is None):
            raise ValueError("Missing the required parameter `email_segment` when calling `update_email_segment`")


        collection_formats = {}

        path_params = {}
        if 'storefront_oid' in params:
            path_params['storefront_oid'] = params['storefront_oid']
        if 'email_segment_uuid' in params:
            path_params['email_segment_uuid'] = params['email_segment_uuid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'email_segment' in params:
            body_params = params['email_segment']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/storefront/{storefront_oid}/email/segments/{email_segment_uuid}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EmailSegmentResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_experiment(self, storefront_oid, storefront_experiment_oid, experiment, **kwargs):
        """
        Update experiment
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_experiment(storefront_oid, storefront_experiment_oid, experiment, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param int storefront_experiment_oid: null (required)
        :param Experiment experiment: Experiment (required)
        :return: ExperimentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_experiment_with_http_info(storefront_oid, storefront_experiment_oid, experiment, **kwargs)
        else:
            (data) = self.update_experiment_with_http_info(storefront_oid, storefront_experiment_oid, experiment, **kwargs)
            return data

    def update_experiment_with_http_info(self, storefront_oid, storefront_experiment_oid, experiment, **kwargs):
        """
        Update experiment
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_experiment_with_http_info(storefront_oid, storefront_experiment_oid, experiment, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storefront_oid: null (required)
        :param int storefront_experiment_oid: null (required)
        :param Experiment experiment: Experiment (required)
        :return: ExperimentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storefront_oid', 'storefront_experiment_oid', 'experiment']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_experiment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storefront_oid' is set
        if ('storefront_oid' not in params) or (params['storefront_oid'] is None):
            raise ValueError("Missing the required parameter `storefront_oid` when calling `update_experiment`")
        # verify the required parameter 'storefront_experiment_oid' is set
        if ('storefront_experiment_oid' not in params) or (params['storefront_experiment_oid'] is None):
            raise ValueError("Missing the required parameter `storefront_experiment_oid` when calling `update_experiment`")
        # verify the required parameter 'experiment' is set
        if ('experiment' not in params) or (params['experiment'] is None):
            raise ValueError("Missing the required parameter `experiment` when calling `update_experiment`")


        collection_formats = {}

        path_params = {}
        if 'storefront_oid' in params:
            path_params['storefront_oid'] = params['storefront_oid']
        if 'storefront_experiment_oid' in params:
            path_params['storefront_experiment_oid'] = params['storefront_experiment_oid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'experiment' in params:
            body_params = params['experiment']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api('/storefront/{storefront_oid}/experiments/{storefront_experiment_oid}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ExperimentResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
