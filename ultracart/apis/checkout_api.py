# coding: utf-8

"""
    UltraCart Rest API V2

    This is the next generation UltraCart REST API...

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class CheckoutApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def city_state(self, cart, **kwargs):
        """
        City/State for Zip
        Look up the city and state for the shipping zip code.  Useful for building an auto complete for parts of the shipping address 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.city_state(cart, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Cart cart: Cart (required)
        :return: CityStateZip
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.city_state_with_http_info(cart, **kwargs)
        else:
            (data) = self.city_state_with_http_info(cart, **kwargs)
            return data

    def city_state_with_http_info(self, cart, **kwargs):
        """
        City/State for Zip
        Look up the city and state for the shipping zip code.  Useful for building an auto complete for parts of the shipping address 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.city_state_with_http_info(cart, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Cart cart: Cart (required)
        :return: CityStateZip
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cart']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method city_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cart' is set
        if ('cart' not in params) or (params['cart'] is None):
            raise ValueError("Missing the required parameter `cart` when calling `city_state`")

        resource_path = '/checkout/city_state'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'cart' in params:
            body_params = params['cart']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CityStateZip',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def finalize_order(self, finalize_request, **kwargs):
        """
        Finalize Order
        Finalize the cart into an order.  This method can not be called with browser key authentication.  It is ONLY meant for server side code to call. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.finalize_order(finalize_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CartFinalizeOrderRequest finalize_request: Finalize request (required)
        :return: CartFinalizeOrderResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.finalize_order_with_http_info(finalize_request, **kwargs)
        else:
            (data) = self.finalize_order_with_http_info(finalize_request, **kwargs)
            return data

    def finalize_order_with_http_info(self, finalize_request, **kwargs):
        """
        Finalize Order
        Finalize the cart into an order.  This method can not be called with browser key authentication.  It is ONLY meant for server side code to call. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.finalize_order_with_http_info(finalize_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CartFinalizeOrderRequest finalize_request: Finalize request (required)
        :return: CartFinalizeOrderResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['finalize_request']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method finalize_order" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'finalize_request' is set
        if ('finalize_request' not in params) or (params['finalize_request'] is None):
            raise ValueError("Missing the required parameter `finalize_request` when calling `finalize_order`")

        resource_path = '/checkout/cart/finalizeOrder'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'finalize_request' in params:
            body_params = params['finalize_request']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CartFinalizeOrderResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_cart(self, **kwargs):
        """
        Get cart
        If the cookie is set on the browser making the request then it will return their active cart.  Otherwise it will create a new cart. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_cart(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str expand: The object expansion to perform on the result.  See documentation for examples
        :return: CartResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_cart_with_http_info(**kwargs)
        else:
            (data) = self.get_cart_with_http_info(**kwargs)
            return data

    def get_cart_with_http_info(self, **kwargs):
        """
        Get cart
        If the cookie is set on the browser making the request then it will return their active cart.  Otherwise it will create a new cart. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_cart_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str expand: The object expansion to perform on the result.  See documentation for examples
        :return: CartResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['expand']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cart" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/checkout/cart'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'expand' in params:
            query_params['_expand'] = params['expand']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CartResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_cart_by_cart_id(self, cart_id, **kwargs):
        """
        Get cart (by cart id)
        Get a cart specified by the cart_id parameter. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_cart_by_cart_id(cart_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str cart_id: Cart ID to retrieve (required)
        :param str expand: The object expansion to perform on the result.  See documentation for examples
        :return: CartResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_cart_by_cart_id_with_http_info(cart_id, **kwargs)
        else:
            (data) = self.get_cart_by_cart_id_with_http_info(cart_id, **kwargs)
            return data

    def get_cart_by_cart_id_with_http_info(self, cart_id, **kwargs):
        """
        Get cart (by cart id)
        Get a cart specified by the cart_id parameter. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_cart_by_cart_id_with_http_info(cart_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str cart_id: Cart ID to retrieve (required)
        :param str expand: The object expansion to perform on the result.  See documentation for examples
        :return: CartResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cart_id', 'expand']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cart_by_cart_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cart_id' is set
        if ('cart_id' not in params) or (params['cart_id'] is None):
            raise ValueError("Missing the required parameter `cart_id` when calling `get_cart_by_cart_id`")

        resource_path = '/checkout/cart/{cart_id}'.replace('{format}', 'json')
        path_params = {}
        if 'cart_id' in params:
            path_params['cart_id'] = params['cart_id']

        query_params = {}
        if 'expand' in params:
            query_params['_expand'] = params['expand']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CartResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_cart_by_return_code(self, return_code, **kwargs):
        """
        Get cart (by return code)
        Get a cart specified by the return code parameter. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_cart_by_return_code(return_code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str return_code: Return code to lookup cart ID by (required)
        :param str expand: The object expansion to perform on the result.  See documentation for examples
        :return: CartResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_cart_by_return_code_with_http_info(return_code, **kwargs)
        else:
            (data) = self.get_cart_by_return_code_with_http_info(return_code, **kwargs)
            return data

    def get_cart_by_return_code_with_http_info(self, return_code, **kwargs):
        """
        Get cart (by return code)
        Get a cart specified by the return code parameter. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_cart_by_return_code_with_http_info(return_code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str return_code: Return code to lookup cart ID by (required)
        :param str expand: The object expansion to perform on the result.  See documentation for examples
        :return: CartResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['return_code', 'expand']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cart_by_return_code" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'return_code' is set
        if ('return_code' not in params) or (params['return_code'] is None):
            raise ValueError("Missing the required parameter `return_code` when calling `get_cart_by_return_code`")

        resource_path = '/checkout/return/{return_code}'.replace('{format}', 'json')
        path_params = {}
        if 'return_code' in params:
            path_params['return_code'] = params['return_code']

        query_params = {}
        if 'expand' in params:
            query_params['_expand'] = params['expand']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CartResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def handoff_cart(self, handoff_request, **kwargs):
        """
        Handoff cart
        Handoff the browser to UltraCart for view cart on StoreFront, transfer to PayPal, transfer to Affirm or finalization of the order (including upsell processing). 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.handoff_cart(handoff_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CheckoutHandoffRequest handoff_request: Handoff request (required)
        :param str expand: The object expansion to perform on the result.  See documentation for examples
        :return: CheckoutHandoffResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.handoff_cart_with_http_info(handoff_request, **kwargs)
        else:
            (data) = self.handoff_cart_with_http_info(handoff_request, **kwargs)
            return data

    def handoff_cart_with_http_info(self, handoff_request, **kwargs):
        """
        Handoff cart
        Handoff the browser to UltraCart for view cart on StoreFront, transfer to PayPal, transfer to Affirm or finalization of the order (including upsell processing). 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.handoff_cart_with_http_info(handoff_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CheckoutHandoffRequest handoff_request: Handoff request (required)
        :param str expand: The object expansion to perform on the result.  See documentation for examples
        :return: CheckoutHandoffResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['handoff_request', 'expand']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method handoff_cart" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'handoff_request' is set
        if ('handoff_request' not in params) or (params['handoff_request'] is None):
            raise ValueError("Missing the required parameter `handoff_request` when calling `handoff_cart`")

        resource_path = '/checkout/cart/handoff'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'expand' in params:
            query_params['_expand'] = params['expand']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'handoff_request' in params:
            body_params = params['handoff_request']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CheckoutHandoffResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def login(self, login_request, **kwargs):
        """
        Profile login
        Login in to the customer profile specified by cart.billing.email and password 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.login(login_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CartProfileLoginRequest login_request: Login request (required)
        :param str expand: The object expansion to perform on the result.  See documentation for examples
        :return: CartProfileLoginResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.login_with_http_info(login_request, **kwargs)
        else:
            (data) = self.login_with_http_info(login_request, **kwargs)
            return data

    def login_with_http_info(self, login_request, **kwargs):
        """
        Profile login
        Login in to the customer profile specified by cart.billing.email and password 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.login_with_http_info(login_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CartProfileLoginRequest login_request: Login request (required)
        :param str expand: The object expansion to perform on the result.  See documentation for examples
        :return: CartProfileLoginResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['login_request', 'expand']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method login" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'login_request' is set
        if ('login_request' not in params) or (params['login_request'] is None):
            raise ValueError("Missing the required parameter `login_request` when calling `login`")

        resource_path = '/checkout/cart/profile/login'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'expand' in params:
            query_params['_expand'] = params['expand']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'login_request' in params:
            body_params = params['login_request']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CartProfileLoginResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def logout(self, cart, **kwargs):
        """
        Profile logout
        Log the cart out of the current profile.  No error will occur if they are not logged in. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.logout(cart, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Cart cart: Cart (required)
        :param str expand: The object expansion to perform on the result.  See documentation for examples
        :return: CartResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.logout_with_http_info(cart, **kwargs)
        else:
            (data) = self.logout_with_http_info(cart, **kwargs)
            return data

    def logout_with_http_info(self, cart, **kwargs):
        """
        Profile logout
        Log the cart out of the current profile.  No error will occur if they are not logged in. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.logout_with_http_info(cart, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Cart cart: Cart (required)
        :param str expand: The object expansion to perform on the result.  See documentation for examples
        :return: CartResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cart', 'expand']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method logout" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cart' is set
        if ('cart' not in params) or (params['cart'] is None):
            raise ValueError("Missing the required parameter `cart` when calling `logout`")

        resource_path = '/checkout/cart/profile/logout'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'expand' in params:
            query_params['_expand'] = params['expand']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'cart' in params:
            body_params = params['cart']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CartResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def register(self, register_request, **kwargs):
        """
        Profile registration
        Register a new customer profile.  Requires the cart.billing object to be populated along with the password. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.register(register_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CartProfileRegisterRequest register_request: Register request (required)
        :param str expand: The object expansion to perform on the result.  See documentation for examples
        :return: CartProfileRegisterResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.register_with_http_info(register_request, **kwargs)
        else:
            (data) = self.register_with_http_info(register_request, **kwargs)
            return data

    def register_with_http_info(self, register_request, **kwargs):
        """
        Profile registration
        Register a new customer profile.  Requires the cart.billing object to be populated along with the password. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.register_with_http_info(register_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CartProfileRegisterRequest register_request: Register request (required)
        :param str expand: The object expansion to perform on the result.  See documentation for examples
        :return: CartProfileRegisterResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['register_request', 'expand']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method register" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'register_request' is set
        if ('register_request' not in params) or (params['register_request'] is None):
            raise ValueError("Missing the required parameter `register_request` when calling `register`")

        resource_path = '/checkout/cart/profile/register'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'expand' in params:
            query_params['_expand'] = params['expand']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'register_request' in params:
            body_params = params['register_request']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CartProfileRegisterResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def related_items_for_cart(self, cart, **kwargs):
        """
        Related items
        Retrieve all the related items for the cart contents.  Expansion is limited to content, content.assignments, content.attributes, content.multimedia, content.multimedia.thumbnails, options, pricing, and pricing.tiers. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.related_items_for_cart(cart, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Cart cart: Cart (required)
        :param str expand: The object expansion to perform on the result.  See item resource documentation for examples
        :return: ItemsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.related_items_for_cart_with_http_info(cart, **kwargs)
        else:
            (data) = self.related_items_for_cart_with_http_info(cart, **kwargs)
            return data

    def related_items_for_cart_with_http_info(self, cart, **kwargs):
        """
        Related items
        Retrieve all the related items for the cart contents.  Expansion is limited to content, content.assignments, content.attributes, content.multimedia, content.multimedia.thumbnails, options, pricing, and pricing.tiers. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.related_items_for_cart_with_http_info(cart, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Cart cart: Cart (required)
        :param str expand: The object expansion to perform on the result.  See item resource documentation for examples
        :return: ItemsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cart', 'expand']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method related_items_for_cart" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cart' is set
        if ('cart' not in params) or (params['cart'] is None):
            raise ValueError("Missing the required parameter `cart` when calling `related_items_for_cart`")

        resource_path = '/checkout/related_items'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'expand' in params:
            query_params['_expand'] = params['expand']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'cart' in params:
            body_params = params['cart']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ItemsResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def related_items_for_item(self, item_id, cart, **kwargs):
        """
        Related items (specific item)
        Retrieve all the related items for the cart contents.  Expansion is limited to content, content.assignments, content.attributes, content.multimedia, content.multimedia.thumbnails, options, pricing, and pricing.tiers. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.related_items_for_item(item_id, cart, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str item_id: Item ID to retrieve related items for (required)
        :param Cart cart: Cart (required)
        :param str expand: The object expansion to perform on the result.  See item resource documentation for examples
        :return: ItemsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.related_items_for_item_with_http_info(item_id, cart, **kwargs)
        else:
            (data) = self.related_items_for_item_with_http_info(item_id, cart, **kwargs)
            return data

    def related_items_for_item_with_http_info(self, item_id, cart, **kwargs):
        """
        Related items (specific item)
        Retrieve all the related items for the cart contents.  Expansion is limited to content, content.assignments, content.attributes, content.multimedia, content.multimedia.thumbnails, options, pricing, and pricing.tiers. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.related_items_for_item_with_http_info(item_id, cart, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str item_id: Item ID to retrieve related items for (required)
        :param Cart cart: Cart (required)
        :param str expand: The object expansion to perform on the result.  See item resource documentation for examples
        :return: ItemsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['item_id', 'cart', 'expand']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method related_items_for_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params) or (params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `related_items_for_item`")
        # verify the required parameter 'cart' is set
        if ('cart' not in params) or (params['cart'] is None):
            raise ValueError("Missing the required parameter `cart` when calling `related_items_for_item`")

        resource_path = '/checkout/relatedItems/{item_id}'.replace('{format}', 'json')
        path_params = {}
        if 'item_id' in params:
            path_params['item_id'] = params['item_id']

        query_params = {}
        if 'expand' in params:
            query_params['_expand'] = params['expand']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'cart' in params:
            body_params = params['cart']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ItemsResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def setup_browser_key(self, browser_key_request, **kwargs):
        """
        Setup Browser Application
        Setup a browser key authenticated application with checkout permissions.  This REST call must be made with an authentication scheme that is not browser key.  The new application will be linked to the application that makes this call.  If this application is disabled / deleted, then so will the application setup by this call.  The purpose of this call is to allow an OAuth applicaiton, such as the Wordpress plugin, to setup the proper browser based authentication for the REST checkout API to use. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.setup_browser_key(browser_key_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CheckoutSetupBrowserKeyRequest browser_key_request: Setup browser key request (required)
        :return: CheckoutSetupBrowserKeyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.setup_browser_key_with_http_info(browser_key_request, **kwargs)
        else:
            (data) = self.setup_browser_key_with_http_info(browser_key_request, **kwargs)
            return data

    def setup_browser_key_with_http_info(self, browser_key_request, **kwargs):
        """
        Setup Browser Application
        Setup a browser key authenticated application with checkout permissions.  This REST call must be made with an authentication scheme that is not browser key.  The new application will be linked to the application that makes this call.  If this application is disabled / deleted, then so will the application setup by this call.  The purpose of this call is to allow an OAuth applicaiton, such as the Wordpress plugin, to setup the proper browser based authentication for the REST checkout API to use. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.setup_browser_key_with_http_info(browser_key_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CheckoutSetupBrowserKeyRequest browser_key_request: Setup browser key request (required)
        :return: CheckoutSetupBrowserKeyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['browser_key_request']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method setup_browser_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'browser_key_request' is set
        if ('browser_key_request' not in params) or (params['browser_key_request'] is None):
            raise ValueError("Missing the required parameter `browser_key_request` when calling `setup_browser_key`")

        resource_path = '/checkout/browser_key'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'browser_key_request' in params:
            body_params = params['browser_key_request']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CheckoutSetupBrowserKeyResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def update_cart(self, cart, **kwargs):
        """
        Update cart
        Update the cart. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_cart(cart, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Cart cart: Cart (required)
        :param str expand: The object expansion to perform on the result.  See documentation for examples
        :return: CartResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_cart_with_http_info(cart, **kwargs)
        else:
            (data) = self.update_cart_with_http_info(cart, **kwargs)
            return data

    def update_cart_with_http_info(self, cart, **kwargs):
        """
        Update cart
        Update the cart. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_cart_with_http_info(cart, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Cart cart: Cart (required)
        :param str expand: The object expansion to perform on the result.  See documentation for examples
        :return: CartResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cart', 'expand']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_cart" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cart' is set
        if ('cart' not in params) or (params['cart'] is None):
            raise ValueError("Missing the required parameter `cart` when calling `update_cart`")

        resource_path = '/checkout/cart'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'expand' in params:
            query_params['_expand'] = params['expand']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'cart' in params:
            body_params = params['cart']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CartResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def validate_cart(self, validation_request, **kwargs):
        """
        Validate
        Validate the cart for errors.  Specific checks can be passed and multiple validations can occur throughout your checkout flow. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.validate_cart(validation_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CartValidationRequest validation_request: Validation request (required)
        :param str expand: The object expansion to perform on the result.  See documentation for examples
        :return: CartValidationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.validate_cart_with_http_info(validation_request, **kwargs)
        else:
            (data) = self.validate_cart_with_http_info(validation_request, **kwargs)
            return data

    def validate_cart_with_http_info(self, validation_request, **kwargs):
        """
        Validate
        Validate the cart for errors.  Specific checks can be passed and multiple validations can occur throughout your checkout flow. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.validate_cart_with_http_info(validation_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CartValidationRequest validation_request: Validation request (required)
        :param str expand: The object expansion to perform on the result.  See documentation for examples
        :return: CartValidationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['validation_request', 'expand']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method validate_cart" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'validation_request' is set
        if ('validation_request' not in params) or (params['validation_request'] is None):
            raise ValueError("Missing the required parameter `validation_request` when calling `validate_cart`")

        resource_path = '/checkout/cart/validate'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'expand' in params:
            query_params['_expand'] = params['expand']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'validation_request' in params:
            body_params = params['validation_request']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CartValidationResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
