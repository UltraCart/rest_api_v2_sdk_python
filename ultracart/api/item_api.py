"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from ultracart.api_client import ApiClient, Endpoint as _Endpoint
from ultracart.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from ultracart.model.error_response import ErrorResponse
from ultracart.model.item import Item
from ultracart.model.item_digital_item import ItemDigitalItem
from ultracart.model.item_digital_item_response import ItemDigitalItemResponse
from ultracart.model.item_digital_items_response import ItemDigitalItemsResponse
from ultracart.model.item_response import ItemResponse
from ultracart.model.item_review import ItemReview
from ultracart.model.item_review_response import ItemReviewResponse
from ultracart.model.item_reviews_response import ItemReviewsResponse
from ultracart.model.items_request import ItemsRequest
from ultracart.model.items_response import ItemsResponse
from ultracart.model.pricing_tiers_response import PricingTiersResponse
from ultracart.model.temp_multimedia_response import TempMultimediaResponse


class ItemApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    @classmethod
    def fromApiKey(cls, apiKey, verify_ssl = True, debug = False):
        config = Configuration()
        config.api_key['x-ultracart-simple-key'] = apiKey
        config.debug = debug
        config.verify_ssl = verify_ssl

        api_client = ApiClient(configuration=config, header_name='X-UltraCart-Api-Version', header_value='2017-03-01')
        return ItemApi(api_client)


    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.delete_digital_item_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/item/digital_library/{digital_item_oid}',
                'operation_id': 'delete_digital_item',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'digital_item_oid',
                ],
                'required': [
                    'digital_item_oid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'digital_item_oid':
                        (int,),
                },
                'attribute_map': {
                    'digital_item_oid': 'digital_item_oid',
                },
                'location_map': {
                    'digital_item_oid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_item_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/item/items/{merchant_item_oid}',
                'operation_id': 'delete_item',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'merchant_item_oid',
                ],
                'required': [
                    'merchant_item_oid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'merchant_item_oid':
                        (int,),
                },
                'attribute_map': {
                    'merchant_item_oid': 'merchant_item_oid',
                },
                'location_map': {
                    'merchant_item_oid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_review_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/item/items/{merchant_item_oid}/reviews/{review_oid}',
                'operation_id': 'delete_review',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'review_oid',
                    'merchant_item_oid',
                ],
                'required': [
                    'review_oid',
                    'merchant_item_oid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'review_oid':
                        (int,),
                    'merchant_item_oid':
                        (int,),
                },
                'attribute_map': {
                    'review_oid': 'review_oid',
                    'merchant_item_oid': 'merchant_item_oid',
                },
                'location_map': {
                    'review_oid': 'path',
                    'merchant_item_oid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_digital_item_endpoint = _Endpoint(
            settings={
                'response_type': (ItemDigitalItemResponse,),
                'auth': [
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/item/digital_library/{digital_item_oid}',
                'operation_id': 'get_digital_item',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'digital_item_oid',
                ],
                'required': [
                    'digital_item_oid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'digital_item_oid':
                        (int,),
                },
                'attribute_map': {
                    'digital_item_oid': 'digital_item_oid',
                },
                'location_map': {
                    'digital_item_oid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_digital_items_endpoint = _Endpoint(
            settings={
                'response_type': (ItemDigitalItemsResponse,),
                'auth': [
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/item/digital_library',
                'operation_id': 'get_digital_items',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'limit',
                    'offset',
                    'since',
                    'sort',
                    'expand',
                    'placeholders',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                    'since':
                        (str,),
                    'sort':
                        (str,),
                    'expand':
                        (str,),
                    'placeholders':
                        (bool,),
                },
                'attribute_map': {
                    'limit': '_limit',
                    'offset': '_offset',
                    'since': '_since',
                    'sort': '_sort',
                    'expand': '_expand',
                    'placeholders': '_placeholders',
                },
                'location_map': {
                    'limit': 'query',
                    'offset': 'query',
                    'since': 'query',
                    'sort': 'query',
                    'expand': 'query',
                    'placeholders': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_digital_items_by_external_id_endpoint = _Endpoint(
            settings={
                'response_type': (ItemDigitalItemsResponse,),
                'auth': [
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/item/digital_library/by_external/{external_id}',
                'operation_id': 'get_digital_items_by_external_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'external_id',
                ],
                'required': [
                    'external_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'external_id':
                        (str,),
                },
                'attribute_map': {
                    'external_id': 'external_id',
                },
                'location_map': {
                    'external_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_item_endpoint = _Endpoint(
            settings={
                'response_type': (ItemResponse,),
                'auth': [
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/item/items/{merchant_item_oid}',
                'operation_id': 'get_item',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'merchant_item_oid',
                    'expand',
                    'placeholders',
                ],
                'required': [
                    'merchant_item_oid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'merchant_item_oid':
                        (int,),
                    'expand':
                        (str,),
                    'placeholders':
                        (bool,),
                },
                'attribute_map': {
                    'merchant_item_oid': 'merchant_item_oid',
                    'expand': '_expand',
                    'placeholders': '_placeholders',
                },
                'location_map': {
                    'merchant_item_oid': 'path',
                    'expand': 'query',
                    'placeholders': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_item_by_merchant_item_id_endpoint = _Endpoint(
            settings={
                'response_type': (ItemResponse,),
                'auth': [
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/item/items/merchant_item_id/{merchant_item_id}',
                'operation_id': 'get_item_by_merchant_item_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'merchant_item_id',
                    'expand',
                    'placeholders',
                ],
                'required': [
                    'merchant_item_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'merchant_item_id':
                        (str,),
                    'expand':
                        (str,),
                    'placeholders':
                        (bool,),
                },
                'attribute_map': {
                    'merchant_item_id': 'merchant_item_id',
                    'expand': '_expand',
                    'placeholders': '_placeholders',
                },
                'location_map': {
                    'merchant_item_id': 'path',
                    'expand': 'query',
                    'placeholders': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_items_endpoint = _Endpoint(
            settings={
                'response_type': (ItemsResponse,),
                'auth': [
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/item/items',
                'operation_id': 'get_items',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'parent_category_id',
                    'parent_category_path',
                    'limit',
                    'offset',
                    'since',
                    'sort',
                    'expand',
                    'placeholders',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'parent_category_id':
                        (int,),
                    'parent_category_path':
                        (str,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                    'since':
                        (str,),
                    'sort':
                        (str,),
                    'expand':
                        (str,),
                    'placeholders':
                        (bool,),
                },
                'attribute_map': {
                    'parent_category_id': 'parent_category_id',
                    'parent_category_path': 'parent_category_path',
                    'limit': '_limit',
                    'offset': '_offset',
                    'since': '_since',
                    'sort': '_sort',
                    'expand': '_expand',
                    'placeholders': '_placeholders',
                },
                'location_map': {
                    'parent_category_id': 'query',
                    'parent_category_path': 'query',
                    'limit': 'query',
                    'offset': 'query',
                    'since': 'query',
                    'sort': 'query',
                    'expand': 'query',
                    'placeholders': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_pricing_tiers_endpoint = _Endpoint(
            settings={
                'response_type': (PricingTiersResponse,),
                'auth': [
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/item/pricing_tiers',
                'operation_id': 'get_pricing_tiers',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'expand',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'expand':
                        (str,),
                },
                'attribute_map': {
                    'expand': '_expand',
                },
                'location_map': {
                    'expand': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_review_endpoint = _Endpoint(
            settings={
                'response_type': (ItemReviewResponse,),
                'auth': [
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/item/items/{merchant_item_oid}/reviews/{review_oid}',
                'operation_id': 'get_review',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'review_oid',
                    'merchant_item_oid',
                ],
                'required': [
                    'review_oid',
                    'merchant_item_oid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'review_oid':
                        (int,),
                    'merchant_item_oid':
                        (int,),
                },
                'attribute_map': {
                    'review_oid': 'review_oid',
                    'merchant_item_oid': 'merchant_item_oid',
                },
                'location_map': {
                    'review_oid': 'path',
                    'merchant_item_oid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_reviews_endpoint = _Endpoint(
            settings={
                'response_type': (ItemReviewsResponse,),
                'auth': [
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/item/items/{merchant_item_oid}/reviews',
                'operation_id': 'get_reviews',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'merchant_item_oid',
                ],
                'required': [
                    'merchant_item_oid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'merchant_item_oid':
                        (int,),
                },
                'attribute_map': {
                    'merchant_item_oid': 'merchant_item_oid',
                },
                'location_map': {
                    'merchant_item_oid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_unassociated_digital_items_endpoint = _Endpoint(
            settings={
                'response_type': (ItemDigitalItemsResponse,),
                'auth': [
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/item/digital_library/unassociated',
                'operation_id': 'get_unassociated_digital_items',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'limit',
                    'offset',
                    'since',
                    'sort',
                    'expand',
                    'placeholders',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                    'since':
                        (str,),
                    'sort':
                        (str,),
                    'expand':
                        (str,),
                    'placeholders':
                        (bool,),
                },
                'attribute_map': {
                    'limit': '_limit',
                    'offset': '_offset',
                    'since': '_since',
                    'sort': '_sort',
                    'expand': '_expand',
                    'placeholders': '_placeholders',
                },
                'location_map': {
                    'limit': 'query',
                    'offset': 'query',
                    'since': 'query',
                    'sort': 'query',
                    'expand': 'query',
                    'placeholders': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.insert_digital_item_endpoint = _Endpoint(
            settings={
                'response_type': (ItemDigitalItemResponse,),
                'auth': [
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/item/digital_library',
                'operation_id': 'insert_digital_item',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'digital_item',
                ],
                'required': [
                    'digital_item',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'digital_item':
                        (ItemDigitalItem,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'digital_item': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json; charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.insert_item_endpoint = _Endpoint(
            settings={
                'response_type': (ItemResponse,),
                'auth': [
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/item/items',
                'operation_id': 'insert_item',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'item',
                    'expand',
                    'placeholders',
                ],
                'required': [
                    'item',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'item':
                        (Item,),
                    'expand':
                        (str,),
                    'placeholders':
                        (bool,),
                },
                'attribute_map': {
                    'expand': '_expand',
                    'placeholders': '_placeholders',
                },
                'location_map': {
                    'item': 'body',
                    'expand': 'query',
                    'placeholders': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json; charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.insert_review_endpoint = _Endpoint(
            settings={
                'response_type': (ItemReviewResponse,),
                'auth': [
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/item/items/{merchant_item_oid}/reviews',
                'operation_id': 'insert_review',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'merchant_item_oid',
                    'review',
                ],
                'required': [
                    'merchant_item_oid',
                    'review',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'merchant_item_oid':
                        (int,),
                    'review':
                        (ItemReview,),
                },
                'attribute_map': {
                    'merchant_item_oid': 'merchant_item_oid',
                },
                'location_map': {
                    'merchant_item_oid': 'path',
                    'review': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json; charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.update_digital_item_endpoint = _Endpoint(
            settings={
                'response_type': (ItemDigitalItemResponse,),
                'auth': [
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/item/digital_library/{digital_item_oid}',
                'operation_id': 'update_digital_item',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'digital_item_oid',
                    'digital_item',
                ],
                'required': [
                    'digital_item_oid',
                    'digital_item',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'digital_item_oid':
                        (int,),
                    'digital_item':
                        (ItemDigitalItem,),
                },
                'attribute_map': {
                    'digital_item_oid': 'digital_item_oid',
                },
                'location_map': {
                    'digital_item_oid': 'path',
                    'digital_item': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json; charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.update_item_endpoint = _Endpoint(
            settings={
                'response_type': (ItemResponse,),
                'auth': [
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/item/items/{merchant_item_oid}',
                'operation_id': 'update_item',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'merchant_item_oid',
                    'item',
                    'expand',
                    'placeholders',
                ],
                'required': [
                    'merchant_item_oid',
                    'item',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'merchant_item_oid':
                        (int,),
                    'item':
                        (Item,),
                    'expand':
                        (str,),
                    'placeholders':
                        (bool,),
                },
                'attribute_map': {
                    'merchant_item_oid': 'merchant_item_oid',
                    'expand': '_expand',
                    'placeholders': '_placeholders',
                },
                'location_map': {
                    'merchant_item_oid': 'path',
                    'item': 'body',
                    'expand': 'query',
                    'placeholders': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json; charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.update_items_endpoint = _Endpoint(
            settings={
                'response_type': (ItemsResponse,),
                'auth': [
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/item/items/batch',
                'operation_id': 'update_items',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'items_request',
                    'expand',
                    'placeholders',
                    '_async',
                ],
                'required': [
                    'items_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'items_request':
                        (ItemsRequest,),
                    'expand':
                        (str,),
                    'placeholders':
                        (bool,),
                    '_async':
                        (bool,),
                },
                'attribute_map': {
                    'expand': '_expand',
                    'placeholders': '_placeholders',
                    '_async': '_async',
                },
                'location_map': {
                    'items_request': 'body',
                    'expand': 'query',
                    'placeholders': 'query',
                    '_async': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json; charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.update_review_endpoint = _Endpoint(
            settings={
                'response_type': (ItemReviewResponse,),
                'auth': [
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/item/items/{merchant_item_oid}/reviews/{review_oid}',
                'operation_id': 'update_review',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'review_oid',
                    'merchant_item_oid',
                    'review',
                ],
                'required': [
                    'review_oid',
                    'merchant_item_oid',
                    'review',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'review_oid':
                        (int,),
                    'merchant_item_oid':
                        (int,),
                    'review':
                        (ItemReview,),
                },
                'attribute_map': {
                    'review_oid': 'review_oid',
                    'merchant_item_oid': 'merchant_item_oid',
                },
                'location_map': {
                    'review_oid': 'path',
                    'merchant_item_oid': 'path',
                    'review': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json; charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.upload_temporary_multimedia_endpoint = _Endpoint(
            settings={
                'response_type': (TempMultimediaResponse,),
                'auth': [
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/item/temp_multimedia',
                'operation_id': 'upload_temporary_multimedia',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'file',
                ],
                'required': [
                    'file',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'file':
                        (file_type,),
                },
                'attribute_map': {
                    'file': 'file',
                },
                'location_map': {
                    'file': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )

    def delete_digital_item(
        self,
        digital_item_oid,
        **kwargs
    ):
        """Delete a digital item, which is a file within the digital library, not an actual merchant item  # noqa: E501

        Delete a digital item on the UltraCart account.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_digital_item(digital_item_oid, async_req=True)
        >>> result = thread.get()

        Args:
            digital_item_oid (int): The digital item oid to delete.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['digital_item_oid'] = \
            digital_item_oid
        return self.delete_digital_item_endpoint.call_with_http_info(**kwargs)

    def delete_item(
        self,
        merchant_item_oid,
        **kwargs
    ):
        """Delete an item  # noqa: E501

        Delete an item on the UltraCart account.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_item(merchant_item_oid, async_req=True)
        >>> result = thread.get()

        Args:
            merchant_item_oid (int): The item oid to delete.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['merchant_item_oid'] = \
            merchant_item_oid
        return self.delete_item_endpoint.call_with_http_info(**kwargs)

    def delete_review(
        self,
        review_oid,
        merchant_item_oid,
        **kwargs
    ):
        """Delete a review  # noqa: E501

        Delete an item review.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_review(review_oid, merchant_item_oid, async_req=True)
        >>> result = thread.get()

        Args:
            review_oid (int): The review oid to delete.
            merchant_item_oid (int): The item oid the review is associated with.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['review_oid'] = \
            review_oid
        kwargs['merchant_item_oid'] = \
            merchant_item_oid
        return self.delete_review_endpoint.call_with_http_info(**kwargs)

    def get_digital_item(
        self,
        digital_item_oid,
        **kwargs
    ):
        """Retrieve a digital item from the digital library, which are digital files that may be attached to normal items  # noqa: E501

        Retrieves a digital item (file information) from the account.  Be aware that these are not normal items that can be added to a shopping cart. Rather, they are digital files that may be associated with normal items.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_digital_item(digital_item_oid, async_req=True)
        >>> result = thread.get()

        Args:
            digital_item_oid (int): The digital item oid to retrieve.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ItemDigitalItemResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['digital_item_oid'] = \
            digital_item_oid
        return self.get_digital_item_endpoint.call_with_http_info(**kwargs)

    def get_digital_items(
        self,
        **kwargs
    ):
        """Retrieve digital items from the digital library which are digital files that may be attached to normal items  # noqa: E501

        Retrieves a group of digital items (file information) from the account.  If no parameters are specified, all digital items will be returned.  Be aware that these are not normal items that can be added to a shopping cart. Rather, they are digital files that may be associated with normal items.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_digital_items(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            limit (int): The maximum number of records to return on this one API call. (Default 100, Max 2000). [optional] if omitted the server will use the default value of 100
            offset (int): Pagination of the record set.  Offset is a zero based index.. [optional] if omitted the server will use the default value of 0
            since (str): Fetch items that have been created/modified since this date/time.. [optional]
            sort (str): The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.. [optional]
            expand (str): The object expansion to perform on the result.  See documentation for examples. [optional]
            placeholders (bool): Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ItemDigitalItemsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.get_digital_items_endpoint.call_with_http_info(**kwargs)

    def get_digital_items_by_external_id(
        self,
        external_id,
        **kwargs
    ):
        """Retrieves digital items from the digital library (which are digital files that may be attached to normal items) that having a matching external id  # noqa: E501

        Retrieves digital items from the digital library (which are digital files that may be attached to normal items) that having a matching external id.  Be aware that these are not normal items that can be added to a shopping cart. Rather, they are digital files that may be associated with normal items.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_digital_items_by_external_id(external_id, async_req=True)
        >>> result = thread.get()

        Args:
            external_id (str): The external id to match against.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ItemDigitalItemsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['external_id'] = \
            external_id
        return self.get_digital_items_by_external_id_endpoint.call_with_http_info(**kwargs)

    def get_item(
        self,
        merchant_item_oid,
        **kwargs
    ):
        """Retrieve an item  # noqa: E501

        Retrieves a single item using the specified item oid.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_item(merchant_item_oid, async_req=True)
        >>> result = thread.get()

        Args:
            merchant_item_oid (int): The item oid to retrieve.

        Keyword Args:
            expand (str): The object expansion to perform on the result.  See documentation for examples. [optional]
            placeholders (bool): Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ItemResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['merchant_item_oid'] = \
            merchant_item_oid
        return self.get_item_endpoint.call_with_http_info(**kwargs)

    def get_item_by_merchant_item_id(
        self,
        merchant_item_id,
        **kwargs
    ):
        """Retrieve an item by item id  # noqa: E501

        Retrieves a single item using the specified item id.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_item_by_merchant_item_id(merchant_item_id, async_req=True)
        >>> result = thread.get()

        Args:
            merchant_item_id (str): The item id to retrieve.

        Keyword Args:
            expand (str): The object expansion to perform on the result.  See documentation for examples. [optional]
            placeholders (bool): Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ItemResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['merchant_item_id'] = \
            merchant_item_id
        return self.get_item_by_merchant_item_id_endpoint.call_with_http_info(**kwargs)

    def get_items(
        self,
        **kwargs
    ):
        """Retrieve items  # noqa: E501

        Retrieves a group of items from the account.  If no parameters are specified, all items will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_items(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            parent_category_id (int): The parent category object id to retrieve items for.  Unspecified means all items on the account.  0 = root. [optional]
            parent_category_path (str): The parent category path to retrieve items for.  Unspecified means all items on the account.  / = root. [optional]
            limit (int): The maximum number of records to return on this one API call. (Default 100, Max 2000). [optional] if omitted the server will use the default value of 100
            offset (int): Pagination of the record set.  Offset is a zero based index.. [optional] if omitted the server will use the default value of 0
            since (str): Fetch items that have been created/modified since this date/time.. [optional]
            sort (str): The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.. [optional]
            expand (str): The object expansion to perform on the result.  See documentation for examples. [optional]
            placeholders (bool): Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ItemsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.get_items_endpoint.call_with_http_info(**kwargs)

    def get_pricing_tiers(
        self,
        **kwargs
    ):
        """Retrieve pricing tiers  # noqa: E501

        Retrieves the pricing tiers   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_pricing_tiers(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            expand (str): The object expansion to perform on the result.  See documentation for examples. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PricingTiersResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.get_pricing_tiers_endpoint.call_with_http_info(**kwargs)

    def get_review(
        self,
        review_oid,
        merchant_item_oid,
        **kwargs
    ):
        """Get a review  # noqa: E501

        Retrieve an item review.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_review(review_oid, merchant_item_oid, async_req=True)
        >>> result = thread.get()

        Args:
            review_oid (int): The review oid to retrieve.
            merchant_item_oid (int): The item oid the review is associated with.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ItemReviewResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['review_oid'] = \
            review_oid
        kwargs['merchant_item_oid'] = \
            merchant_item_oid
        return self.get_review_endpoint.call_with_http_info(**kwargs)

    def get_reviews(
        self,
        merchant_item_oid,
        **kwargs
    ):
        """Get reviews for an item  # noqa: E501

        Retrieve item reviews.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_reviews(merchant_item_oid, async_req=True)
        >>> result = thread.get()

        Args:
            merchant_item_oid (int): The item oid the review is associated with.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ItemReviewsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['merchant_item_oid'] = \
            merchant_item_oid
        return self.get_reviews_endpoint.call_with_http_info(**kwargs)

    def get_unassociated_digital_items(
        self,
        **kwargs
    ):
        """Retrieve digital items from the digital library (which are digital files that may be attached to normal items) not yet associated with actual items  # noqa: E501

        Retrieves a group of digital items (file information) from the account that are not yet associated with any actual items.  If no parameters are specified, all digital items will be returned.  Be aware that these are not normal items that can be added to a shopping cart. Rather, they are digital files that may be associated with normal items.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_unassociated_digital_items(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            limit (int): The maximum number of records to return on this one API call. (Default 100, Max 2000). [optional] if omitted the server will use the default value of 100
            offset (int): Pagination of the record set.  Offset is a zero based index.. [optional] if omitted the server will use the default value of 0
            since (str): Fetch items that have been created/modified since this date/time.. [optional]
            sort (str): The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.. [optional]
            expand (str): The object expansion to perform on the result.  See documentation for examples. [optional]
            placeholders (bool): Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ItemDigitalItemsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.get_unassociated_digital_items_endpoint.call_with_http_info(**kwargs)

    def insert_digital_item(
        self,
        digital_item,
        **kwargs
    ):
        """Create a file within the digital library  # noqa: E501

        Create a file within the digital library.  This does not create an item, but makes this digital file available and selectable as part (or all) of an item.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.insert_digital_item(digital_item, async_req=True)
        >>> result = thread.get()

        Args:
            digital_item (ItemDigitalItem): Digital item to create

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ItemDigitalItemResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['digital_item'] = \
            digital_item
        return self.insert_digital_item_endpoint.call_with_http_info(**kwargs)

    def insert_item(
        self,
        item,
        **kwargs
    ):
        """Create an item  # noqa: E501

        Create a new item on the UltraCart account.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.insert_item(item, async_req=True)
        >>> result = thread.get()

        Args:
            item (Item): Item to create

        Keyword Args:
            expand (str): The object expansion to perform on the result.  See documentation for examples. [optional]
            placeholders (bool): Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ItemResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['item'] = \
            item
        return self.insert_item_endpoint.call_with_http_info(**kwargs)

    def insert_review(
        self,
        merchant_item_oid,
        review,
        **kwargs
    ):
        """Insert a review  # noqa: E501

        Insert a item review.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.insert_review(merchant_item_oid, review, async_req=True)
        >>> result = thread.get()

        Args:
            merchant_item_oid (int): The item oid the review is associated with.
            review (ItemReview): Review to insert

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ItemReviewResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['merchant_item_oid'] = \
            merchant_item_oid
        kwargs['review'] = \
            review
        return self.insert_review_endpoint.call_with_http_info(**kwargs)

    def update_digital_item(
        self,
        digital_item_oid,
        digital_item,
        **kwargs
    ):
        """Updates a file within the digital library  # noqa: E501

        Updates a file within the digital library.  This does not update an item, but updates a digital file available and selectable as part (or all) of an item.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_digital_item(digital_item_oid, digital_item, async_req=True)
        >>> result = thread.get()

        Args:
            digital_item_oid (int): The digital item oid to update.
            digital_item (ItemDigitalItem): Digital item to update

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ItemDigitalItemResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['digital_item_oid'] = \
            digital_item_oid
        kwargs['digital_item'] = \
            digital_item
        return self.update_digital_item_endpoint.call_with_http_info(**kwargs)

    def update_item(
        self,
        merchant_item_oid,
        item,
        **kwargs
    ):
        """Update an item  # noqa: E501

        Update a new item on the UltraCart account.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_item(merchant_item_oid, item, async_req=True)
        >>> result = thread.get()

        Args:
            merchant_item_oid (int): The item oid to update.
            item (Item): Item to update

        Keyword Args:
            expand (str): The object expansion to perform on the result.  See documentation for examples. [optional]
            placeholders (bool): Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ItemResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['merchant_item_oid'] = \
            merchant_item_oid
        kwargs['item'] = \
            item
        return self.update_item_endpoint.call_with_http_info(**kwargs)

    def update_items(
        self,
        items_request,
        **kwargs
    ):
        """Update multiple items  # noqa: E501

        Update multiple item on the UltraCart account.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_items(items_request, async_req=True)
        >>> result = thread.get()

        Args:
            items_request (ItemsRequest): Items to update (synchronous maximum 20 / asynchronous maximum 100)

        Keyword Args:
            expand (str): The object expansion to perform on the result.  See documentation for examples. [optional]
            placeholders (bool): Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.. [optional]
            _async (bool): True if the operation should be run async.  No result returned. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ItemsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['items_request'] = \
            items_request
        return self.update_items_endpoint.call_with_http_info(**kwargs)

    def update_review(
        self,
        review_oid,
        merchant_item_oid,
        review,
        **kwargs
    ):
        """Update a review  # noqa: E501

        Update an item review.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_review(review_oid, merchant_item_oid, review, async_req=True)
        >>> result = thread.get()

        Args:
            review_oid (int): The review oid to update.
            merchant_item_oid (int): The item oid the review is associated with.
            review (ItemReview): Review to update

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ItemReviewResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['review_oid'] = \
            review_oid
        kwargs['merchant_item_oid'] = \
            merchant_item_oid
        kwargs['review'] = \
            review
        return self.update_review_endpoint.call_with_http_info(**kwargs)

    def upload_temporary_multimedia(
        self,
        file,
        **kwargs
    ):
        """Upload an image to the temporary multimedia.  # noqa: E501

        Uploads an image and returns back meta information about the image as well as the identifier needed for the item update.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.upload_temporary_multimedia(file, async_req=True)
        >>> result = thread.get()

        Args:
            file (file_type): File to upload

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TempMultimediaResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['file'] = \
            file
        return self.upload_temporary_multimedia_endpoint.call_with_http_info(**kwargs)

