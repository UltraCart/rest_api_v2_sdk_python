# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ultracart.api_client import ApiClient
from ultracart.configuration import Configuration

class ConversationApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    @classmethod
    def fromApiKey(cls, apiKey, verify_ssl = True, debug = False):
        config = Configuration()
        config.api_key['x-ultracart-simple-key'] = apiKey
        config.debug = debug
        config.verify_ssl = verify_ssl

        api_client = ApiClient(configuration=config, header_name='X-UltraCart-Api-Version', header_value='2017-03-01')
        return ConversationApi(api_client)




    def delete_conversation_canned_message(self, conversation_canned_message_oid, **kwargs):  # noqa: E501
        """Delete a conversation canned message  # noqa: E501

        Delete a conversation canned message   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_conversation_canned_message(conversation_canned_message_oid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int conversation_canned_message_oid: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_conversation_canned_message_with_http_info(conversation_canned_message_oid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_conversation_canned_message_with_http_info(conversation_canned_message_oid, **kwargs)  # noqa: E501
            return data

    def delete_conversation_canned_message_with_http_info(self, conversation_canned_message_oid, **kwargs):  # noqa: E501
        """Delete a conversation canned message  # noqa: E501

        Delete a conversation canned message   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_conversation_canned_message_with_http_info(conversation_canned_message_oid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int conversation_canned_message_oid: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['conversation_canned_message_oid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_conversation_canned_message" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'conversation_canned_message_oid' is set
        if ('conversation_canned_message_oid' not in params or
                params['conversation_canned_message_oid'] is None):
            raise ValueError("Missing the required parameter `conversation_canned_message_oid` when calling `delete_conversation_canned_message`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'conversation_canned_message_oid' in params:
            path_params['conversation_canned_message_oid'] = params['conversation_canned_message_oid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/canned_messages/{conversation_canned_message_oid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_department(self, conversation_department_oid, **kwargs):  # noqa: E501
        """Delete a conversation department  # noqa: E501

        Delete a conversation department   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_department(conversation_department_oid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int conversation_department_oid: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_department_with_http_info(conversation_department_oid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_department_with_http_info(conversation_department_oid, **kwargs)  # noqa: E501
            return data

    def delete_department_with_http_info(self, conversation_department_oid, **kwargs):  # noqa: E501
        """Delete a conversation department  # noqa: E501

        Delete a conversation department   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_department_with_http_info(conversation_department_oid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int conversation_department_oid: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['conversation_department_oid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_department" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'conversation_department_oid' is set
        if ('conversation_department_oid' not in params or
                params['conversation_department_oid'] is None):
            raise ValueError("Missing the required parameter `conversation_department_oid` when calling `delete_department`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'conversation_department_oid' in params:
            path_params['conversation_department_oid'] = params['conversation_department_oid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/departments/{conversation_department_oid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_engagement(self, conversation_engagement_oid, **kwargs):  # noqa: E501
        """Delete a conversation engagement  # noqa: E501

        Delete a conversation engagement   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_engagement(conversation_engagement_oid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int conversation_engagement_oid: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_engagement_with_http_info(conversation_engagement_oid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_engagement_with_http_info(conversation_engagement_oid, **kwargs)  # noqa: E501
            return data

    def delete_engagement_with_http_info(self, conversation_engagement_oid, **kwargs):  # noqa: E501
        """Delete a conversation engagement  # noqa: E501

        Delete a conversation engagement   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_engagement_with_http_info(conversation_engagement_oid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int conversation_engagement_oid: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['conversation_engagement_oid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_engagement" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'conversation_engagement_oid' is set
        if ('conversation_engagement_oid' not in params or
                params['conversation_engagement_oid'] is None):
            raise ValueError("Missing the required parameter `conversation_engagement_oid` when calling `delete_engagement`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'conversation_engagement_oid' in params:
            path_params['conversation_engagement_oid'] = params['conversation_engagement_oid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/engagements/{conversation_engagement_oid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_pbx_agent(self, conversation_pbx_agent_uuid, **kwargs):  # noqa: E501
        """Delete pbx agent  # noqa: E501

        Delete a pbx agent   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pbx_agent(conversation_pbx_agent_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conversation_pbx_agent_uuid: (required)
        :return: ConversationPbxAgentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_pbx_agent_with_http_info(conversation_pbx_agent_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_pbx_agent_with_http_info(conversation_pbx_agent_uuid, **kwargs)  # noqa: E501
            return data

    def delete_pbx_agent_with_http_info(self, conversation_pbx_agent_uuid, **kwargs):  # noqa: E501
        """Delete pbx agent  # noqa: E501

        Delete a pbx agent   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pbx_agent_with_http_info(conversation_pbx_agent_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conversation_pbx_agent_uuid: (required)
        :return: ConversationPbxAgentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['conversation_pbx_agent_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_pbx_agent" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'conversation_pbx_agent_uuid' is set
        if ('conversation_pbx_agent_uuid' not in params or
                params['conversation_pbx_agent_uuid'] is None):
            raise ValueError("Missing the required parameter `conversation_pbx_agent_uuid` when calling `delete_pbx_agent`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'conversation_pbx_agent_uuid' in params:
            path_params['conversationPbxAgentUuid'] = params['conversation_pbx_agent_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/pbx/agent/{conversationPbxAgentUuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversationPbxAgentResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_pbx_agent_voicemail(self, recording_sid, **kwargs):  # noqa: E501
        """Delete Agent Voicemail  # noqa: E501

        Delete pbx agent Voicemail   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pbx_agent_voicemail(recording_sid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str recording_sid: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_pbx_agent_voicemail_with_http_info(recording_sid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_pbx_agent_voicemail_with_http_info(recording_sid, **kwargs)  # noqa: E501
            return data

    def delete_pbx_agent_voicemail_with_http_info(self, recording_sid, **kwargs):  # noqa: E501
        """Delete Agent Voicemail  # noqa: E501

        Delete pbx agent Voicemail   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pbx_agent_voicemail_with_http_info(recording_sid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str recording_sid: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['recording_sid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_pbx_agent_voicemail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'recording_sid' is set
        if ('recording_sid' not in params or
                params['recording_sid'] is None):
            raise ValueError("Missing the required parameter `recording_sid` when calling `delete_pbx_agent_voicemail`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'recording_sid' in params:
            path_params['recording_sid'] = params['recording_sid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/pbx/agent/voicemails/{recording_sid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_pbx_audio(self, conversation_pbx_audio_uuid, **kwargs):  # noqa: E501
        """Delete pbx audio  # noqa: E501

        Delete a pbx audio   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pbx_audio(conversation_pbx_audio_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conversation_pbx_audio_uuid: (required)
        :return: ConversationPbxAudioResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_pbx_audio_with_http_info(conversation_pbx_audio_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_pbx_audio_with_http_info(conversation_pbx_audio_uuid, **kwargs)  # noqa: E501
            return data

    def delete_pbx_audio_with_http_info(self, conversation_pbx_audio_uuid, **kwargs):  # noqa: E501
        """Delete pbx audio  # noqa: E501

        Delete a pbx audio   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pbx_audio_with_http_info(conversation_pbx_audio_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conversation_pbx_audio_uuid: (required)
        :return: ConversationPbxAudioResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['conversation_pbx_audio_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_pbx_audio" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'conversation_pbx_audio_uuid' is set
        if ('conversation_pbx_audio_uuid' not in params or
                params['conversation_pbx_audio_uuid'] is None):
            raise ValueError("Missing the required parameter `conversation_pbx_audio_uuid` when calling `delete_pbx_audio`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'conversation_pbx_audio_uuid' in params:
            path_params['conversationPbxAudioUuid'] = params['conversation_pbx_audio_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/pbx/audio/{conversationPbxAudioUuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversationPbxAudioResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_pbx_menu(self, conversation_pbx_menu_uuid, **kwargs):  # noqa: E501
        """Delete pbx menu  # noqa: E501

        Delete a pbx menu   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pbx_menu(conversation_pbx_menu_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conversation_pbx_menu_uuid: (required)
        :return: ConversationPbxMenuResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_pbx_menu_with_http_info(conversation_pbx_menu_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_pbx_menu_with_http_info(conversation_pbx_menu_uuid, **kwargs)  # noqa: E501
            return data

    def delete_pbx_menu_with_http_info(self, conversation_pbx_menu_uuid, **kwargs):  # noqa: E501
        """Delete pbx menu  # noqa: E501

        Delete a pbx menu   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pbx_menu_with_http_info(conversation_pbx_menu_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conversation_pbx_menu_uuid: (required)
        :return: ConversationPbxMenuResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['conversation_pbx_menu_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_pbx_menu" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'conversation_pbx_menu_uuid' is set
        if ('conversation_pbx_menu_uuid' not in params or
                params['conversation_pbx_menu_uuid'] is None):
            raise ValueError("Missing the required parameter `conversation_pbx_menu_uuid` when calling `delete_pbx_menu`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'conversation_pbx_menu_uuid' in params:
            path_params['conversationPbxMenuUuid'] = params['conversation_pbx_menu_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/pbx/menu/{conversationPbxMenuUuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversationPbxMenuResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_pbx_phone_number(self, conversation_pbx_phone_number_uuid, **kwargs):  # noqa: E501
        """Delete pbx phoneNumber  # noqa: E501

        Delete a pbx phoneNumber   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pbx_phone_number(conversation_pbx_phone_number_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conversation_pbx_phone_number_uuid: (required)
        :return: ConversationPbxPhoneNumberResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_pbx_phone_number_with_http_info(conversation_pbx_phone_number_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_pbx_phone_number_with_http_info(conversation_pbx_phone_number_uuid, **kwargs)  # noqa: E501
            return data

    def delete_pbx_phone_number_with_http_info(self, conversation_pbx_phone_number_uuid, **kwargs):  # noqa: E501
        """Delete pbx phoneNumber  # noqa: E501

        Delete a pbx phoneNumber   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pbx_phone_number_with_http_info(conversation_pbx_phone_number_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conversation_pbx_phone_number_uuid: (required)
        :return: ConversationPbxPhoneNumberResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['conversation_pbx_phone_number_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_pbx_phone_number" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'conversation_pbx_phone_number_uuid' is set
        if ('conversation_pbx_phone_number_uuid' not in params or
                params['conversation_pbx_phone_number_uuid'] is None):
            raise ValueError("Missing the required parameter `conversation_pbx_phone_number_uuid` when calling `delete_pbx_phone_number`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'conversation_pbx_phone_number_uuid' in params:
            path_params['conversationPbxPhoneNumberUuid'] = params['conversation_pbx_phone_number_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/pbx/phone_number/{conversationPbxPhoneNumberUuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversationPbxPhoneNumberResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_pbx_queue(self, conversation_pbx_queue_uuid, **kwargs):  # noqa: E501
        """Delete pbx queue  # noqa: E501

        Delete a pbx queue   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pbx_queue(conversation_pbx_queue_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conversation_pbx_queue_uuid: (required)
        :return: ConversationPbxQueueResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_pbx_queue_with_http_info(conversation_pbx_queue_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_pbx_queue_with_http_info(conversation_pbx_queue_uuid, **kwargs)  # noqa: E501
            return data

    def delete_pbx_queue_with_http_info(self, conversation_pbx_queue_uuid, **kwargs):  # noqa: E501
        """Delete pbx queue  # noqa: E501

        Delete a pbx queue   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pbx_queue_with_http_info(conversation_pbx_queue_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conversation_pbx_queue_uuid: (required)
        :return: ConversationPbxQueueResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['conversation_pbx_queue_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_pbx_queue" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'conversation_pbx_queue_uuid' is set
        if ('conversation_pbx_queue_uuid' not in params or
                params['conversation_pbx_queue_uuid'] is None):
            raise ValueError("Missing the required parameter `conversation_pbx_queue_uuid` when calling `delete_pbx_queue`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'conversation_pbx_queue_uuid' in params:
            path_params['conversationPbxQueueUuid'] = params['conversation_pbx_queue_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/pbx/queue/{conversationPbxQueueUuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversationPbxQueueResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_pbx_queue_voicemail(self, queue_uuid, recording_sid, **kwargs):  # noqa: E501
        """Delete Queue Voicemail  # noqa: E501

        Delete pbx queue Voicemail   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pbx_queue_voicemail(queue_uuid, recording_sid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str queue_uuid: (required)
        :param str recording_sid: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_pbx_queue_voicemail_with_http_info(queue_uuid, recording_sid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_pbx_queue_voicemail_with_http_info(queue_uuid, recording_sid, **kwargs)  # noqa: E501
            return data

    def delete_pbx_queue_voicemail_with_http_info(self, queue_uuid, recording_sid, **kwargs):  # noqa: E501
        """Delete Queue Voicemail  # noqa: E501

        Delete pbx queue Voicemail   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pbx_queue_voicemail_with_http_info(queue_uuid, recording_sid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str queue_uuid: (required)
        :param str recording_sid: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['queue_uuid', 'recording_sid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_pbx_queue_voicemail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'queue_uuid' is set
        if ('queue_uuid' not in params or
                params['queue_uuid'] is None):
            raise ValueError("Missing the required parameter `queue_uuid` when calling `delete_pbx_queue_voicemail`")  # noqa: E501
        # verify the required parameter 'recording_sid' is set
        if ('recording_sid' not in params or
                params['recording_sid'] is None):
            raise ValueError("Missing the required parameter `recording_sid` when calling `delete_pbx_queue_voicemail`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'queue_uuid' in params:
            path_params['queue_uuid'] = params['queue_uuid']  # noqa: E501
        if 'recording_sid' in params:
            path_params['recording_sid'] = params['recording_sid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/pbx/queues/{queue_uuid}/voicemails/{recording_sid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_pbx_time_based(self, conversation_pbx_time_based_uuid, **kwargs):  # noqa: E501
        """Delete pbx timeBased  # noqa: E501

        Delete a pbx timeBased   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pbx_time_based(conversation_pbx_time_based_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conversation_pbx_time_based_uuid: (required)
        :return: ConversationPbxTimeBasedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_pbx_time_based_with_http_info(conversation_pbx_time_based_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_pbx_time_based_with_http_info(conversation_pbx_time_based_uuid, **kwargs)  # noqa: E501
            return data

    def delete_pbx_time_based_with_http_info(self, conversation_pbx_time_based_uuid, **kwargs):  # noqa: E501
        """Delete pbx timeBased  # noqa: E501

        Delete a pbx timeBased   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pbx_time_based_with_http_info(conversation_pbx_time_based_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conversation_pbx_time_based_uuid: (required)
        :return: ConversationPbxTimeBasedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['conversation_pbx_time_based_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_pbx_time_based" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'conversation_pbx_time_based_uuid' is set
        if ('conversation_pbx_time_based_uuid' not in params or
                params['conversation_pbx_time_based_uuid'] is None):
            raise ValueError("Missing the required parameter `conversation_pbx_time_based_uuid` when calling `delete_pbx_time_based`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'conversation_pbx_time_based_uuid' in params:
            path_params['conversationPbxTimeBasedUuid'] = params['conversation_pbx_time_based_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/pbx/time_based/{conversationPbxTimeBasedUuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversationPbxTimeBasedResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_pbx_time_range(self, conversation_pbx_time_range_uuid, **kwargs):  # noqa: E501
        """Delete pbx timeRange  # noqa: E501

        Delete a pbx timeRange   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pbx_time_range(conversation_pbx_time_range_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conversation_pbx_time_range_uuid: (required)
        :return: ConversationPbxTimeRangeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_pbx_time_range_with_http_info(conversation_pbx_time_range_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_pbx_time_range_with_http_info(conversation_pbx_time_range_uuid, **kwargs)  # noqa: E501
            return data

    def delete_pbx_time_range_with_http_info(self, conversation_pbx_time_range_uuid, **kwargs):  # noqa: E501
        """Delete pbx timeRange  # noqa: E501

        Delete a pbx timeRange   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pbx_time_range_with_http_info(conversation_pbx_time_range_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conversation_pbx_time_range_uuid: (required)
        :return: ConversationPbxTimeRangeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['conversation_pbx_time_range_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_pbx_time_range" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'conversation_pbx_time_range_uuid' is set
        if ('conversation_pbx_time_range_uuid' not in params or
                params['conversation_pbx_time_range_uuid'] is None):
            raise ValueError("Missing the required parameter `conversation_pbx_time_range_uuid` when calling `delete_pbx_time_range`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'conversation_pbx_time_range_uuid' in params:
            path_params['conversationPbxTimeRangeUuid'] = params['conversation_pbx_time_range_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/pbx/time_range/{conversationPbxTimeRangeUuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversationPbxTimeRangeResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_pbx_voicemail_mailbox(self, conversation_pbx_voicemail_mailbox_uuid, **kwargs):  # noqa: E501
        """Delete pbx voicemailMailbox  # noqa: E501

        Delete a pbx voicemailMailbox   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pbx_voicemail_mailbox(conversation_pbx_voicemail_mailbox_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conversation_pbx_voicemail_mailbox_uuid: (required)
        :return: ConversationPbxVoicemailMailboxResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_pbx_voicemail_mailbox_with_http_info(conversation_pbx_voicemail_mailbox_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_pbx_voicemail_mailbox_with_http_info(conversation_pbx_voicemail_mailbox_uuid, **kwargs)  # noqa: E501
            return data

    def delete_pbx_voicemail_mailbox_with_http_info(self, conversation_pbx_voicemail_mailbox_uuid, **kwargs):  # noqa: E501
        """Delete pbx voicemailMailbox  # noqa: E501

        Delete a pbx voicemailMailbox   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pbx_voicemail_mailbox_with_http_info(conversation_pbx_voicemail_mailbox_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conversation_pbx_voicemail_mailbox_uuid: (required)
        :return: ConversationPbxVoicemailMailboxResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['conversation_pbx_voicemail_mailbox_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_pbx_voicemail_mailbox" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'conversation_pbx_voicemail_mailbox_uuid' is set
        if ('conversation_pbx_voicemail_mailbox_uuid' not in params or
                params['conversation_pbx_voicemail_mailbox_uuid'] is None):
            raise ValueError("Missing the required parameter `conversation_pbx_voicemail_mailbox_uuid` when calling `delete_pbx_voicemail_mailbox`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'conversation_pbx_voicemail_mailbox_uuid' in params:
            path_params['conversationPbxVoicemailMailboxUuid'] = params['conversation_pbx_voicemail_mailbox_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/pbx/voicemail_mailbox/{conversationPbxVoicemailMailboxUuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversationPbxVoicemailMailboxResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_agent_keep_alive(self, **kwargs):  # noqa: E501
        """Agent keep alive  # noqa: E501

        Called periodically by the conversation API to keep the session alive.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_agent_keep_alive(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_agent_keep_alive_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_agent_keep_alive_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_agent_keep_alive_with_http_info(self, **kwargs):  # noqa: E501
        """Agent keep alive  # noqa: E501

        Called periodically by the conversation API to keep the session alive.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_agent_keep_alive_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_agent_keep_alive" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/agent/keepalive', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_agent_profile(self, **kwargs):  # noqa: E501
        """Get agent profile  # noqa: E501

        Retrieve the agents profile   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_agent_profile(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ConversationAgentProfileResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_agent_profile_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_agent_profile_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_agent_profile_with_http_info(self, **kwargs):  # noqa: E501
        """Get agent profile  # noqa: E501

        Retrieve the agents profile   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_agent_profile_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ConversationAgentProfileResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_agent_profile" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/agent/profile', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversationAgentProfileResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_agent_websocket_authorization(self, **kwargs):  # noqa: E501
        """Get agent websocket authorization  # noqa: E501

        Retrieve a JWT to authorize an agent to make a websocket connection.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_agent_websocket_authorization(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ConversationAgentAuthResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_agent_websocket_authorization_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_agent_websocket_authorization_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_agent_websocket_authorization_with_http_info(self, **kwargs):  # noqa: E501
        """Get agent websocket authorization  # noqa: E501

        Retrieve a JWT to authorize an agent to make a websocket connection.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_agent_websocket_authorization_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ConversationAgentAuthResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_agent_websocket_authorization" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/agent/auth', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversationAgentAuthResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_conversation(self, conversation_uuid, **kwargs):  # noqa: E501
        """Retrieve a conversation  # noqa: E501

        Retrieve a conversation including the participants and messages   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_conversation(conversation_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conversation_uuid: (required)
        :param int limit:
        :return: ConversationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_conversation_with_http_info(conversation_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_conversation_with_http_info(conversation_uuid, **kwargs)  # noqa: E501
            return data

    def get_conversation_with_http_info(self, conversation_uuid, **kwargs):  # noqa: E501
        """Retrieve a conversation  # noqa: E501

        Retrieve a conversation including the participants and messages   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_conversation_with_http_info(conversation_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conversation_uuid: (required)
        :param int limit:
        :return: ConversationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['conversation_uuid', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_conversation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'conversation_uuid' is set
        if ('conversation_uuid' not in params or
                params['conversation_uuid'] is None):
            raise ValueError("Missing the required parameter `conversation_uuid` when calling `get_conversation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'conversation_uuid' in params:
            path_params['conversation_uuid'] = params['conversation_uuid']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/conversations/{conversation_uuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_conversation_canned_messages(self, **kwargs):  # noqa: E501
        """Retrieve a list of canned messages ordered by short_code  # noqa: E501

        Retrieve a list of canned messages ordered by short_code   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_conversation_canned_messages(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ConversationCannedMessagesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_conversation_canned_messages_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_conversation_canned_messages_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_conversation_canned_messages_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve a list of canned messages ordered by short_code  # noqa: E501

        Retrieve a list of canned messages ordered by short_code   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_conversation_canned_messages_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ConversationCannedMessagesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_conversation_canned_messages" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/canned_messages', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversationCannedMessagesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_conversation_context(self, conversation_uuid, **kwargs):  # noqa: E501
        """Get a webchat conversation context  # noqa: E501

        Get a webchat conversation context   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_conversation_context(conversation_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conversation_uuid: (required)
        :return: ConversationWebchatContext
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_conversation_context_with_http_info(conversation_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_conversation_context_with_http_info(conversation_uuid, **kwargs)  # noqa: E501
            return data

    def get_conversation_context_with_http_info(self, conversation_uuid, **kwargs):  # noqa: E501
        """Get a webchat conversation context  # noqa: E501

        Get a webchat conversation context   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_conversation_context_with_http_info(conversation_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conversation_uuid: (required)
        :return: ConversationWebchatContext
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['conversation_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_conversation_context" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'conversation_uuid' is set
        if ('conversation_uuid' not in params or
                params['conversation_uuid'] is None):
            raise ValueError("Missing the required parameter `conversation_uuid` when calling `get_conversation_context`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'conversation_uuid' in params:
            path_params['conversation_uuid'] = params['conversation_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/conversations/{conversation_uuid}/context', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversationWebchatContext',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_conversation_department_member_list(self, **kwargs):  # noqa: E501
        """Retrieve a list of possible department members  # noqa: E501

        Retrieve a list of possible department members   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_conversation_department_member_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ConversationDepartmentMembersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_conversation_department_member_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_conversation_department_member_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_conversation_department_member_list_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve a list of possible department members  # noqa: E501

        Retrieve a list of possible department members   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_conversation_department_member_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ConversationDepartmentMembersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_conversation_department_member_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/department_members', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversationDepartmentMembersResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_conversation_departments(self, **kwargs):  # noqa: E501
        """Retrieve a list of departments ordered by name  # noqa: E501

        Retrieve a list of departments ordered by name   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_conversation_departments(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ConversationDepartmentsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_conversation_departments_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_conversation_departments_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_conversation_departments_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve a list of departments ordered by name  # noqa: E501

        Retrieve a list of departments ordered by name   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_conversation_departments_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ConversationDepartmentsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_conversation_departments" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/departments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversationDepartmentsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_conversation_engagement(self, conversation_engagement_oid, **kwargs):  # noqa: E501
        """Retrieve an engagement  # noqa: E501

        Retrieve an engagement   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_conversation_engagement(conversation_engagement_oid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int conversation_engagement_oid: (required)
        :return: ConversationEngagementResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_conversation_engagement_with_http_info(conversation_engagement_oid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_conversation_engagement_with_http_info(conversation_engagement_oid, **kwargs)  # noqa: E501
            return data

    def get_conversation_engagement_with_http_info(self, conversation_engagement_oid, **kwargs):  # noqa: E501
        """Retrieve an engagement  # noqa: E501

        Retrieve an engagement   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_conversation_engagement_with_http_info(conversation_engagement_oid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int conversation_engagement_oid: (required)
        :return: ConversationEngagementResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['conversation_engagement_oid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_conversation_engagement" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'conversation_engagement_oid' is set
        if ('conversation_engagement_oid' not in params or
                params['conversation_engagement_oid'] is None):
            raise ValueError("Missing the required parameter `conversation_engagement_oid` when calling `get_conversation_engagement`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'conversation_engagement_oid' in params:
            path_params['conversation_engagement_oid'] = params['conversation_engagement_oid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/engagements/{conversation_engagement_oid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversationEngagementResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_conversation_engagements(self, **kwargs):  # noqa: E501
        """Retrieve a list of engagements ordered by name  # noqa: E501

        Retrieve a list of engagements ordered by name   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_conversation_engagements(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ConversationEngagementsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_conversation_engagements_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_conversation_engagements_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_conversation_engagements_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve a list of engagements ordered by name  # noqa: E501

        Retrieve a list of engagements ordered by name   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_conversation_engagements_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ConversationEngagementsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_conversation_engagements" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/engagements', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversationEngagementsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_conversation_messages(self, conversation_uuid, since, **kwargs):  # noqa: E501
        """Retrieve conversation messages  # noqa: E501

        Retrieve conversation messages since a particular time   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_conversation_messages(conversation_uuid, since, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conversation_uuid: (required)
        :param int since: (required)
        :param int limit:
        :return: ConversationMessagesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_conversation_messages_with_http_info(conversation_uuid, since, **kwargs)  # noqa: E501
        else:
            (data) = self.get_conversation_messages_with_http_info(conversation_uuid, since, **kwargs)  # noqa: E501
            return data

    def get_conversation_messages_with_http_info(self, conversation_uuid, since, **kwargs):  # noqa: E501
        """Retrieve conversation messages  # noqa: E501

        Retrieve conversation messages since a particular time   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_conversation_messages_with_http_info(conversation_uuid, since, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conversation_uuid: (required)
        :param int since: (required)
        :param int limit:
        :return: ConversationMessagesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['conversation_uuid', 'since', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_conversation_messages" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'conversation_uuid' is set
        if ('conversation_uuid' not in params or
                params['conversation_uuid'] is None):
            raise ValueError("Missing the required parameter `conversation_uuid` when calling `get_conversation_messages`")  # noqa: E501
        # verify the required parameter 'since' is set
        if ('since' not in params or
                params['since'] is None):
            raise ValueError("Missing the required parameter `since` when calling `get_conversation_messages`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'conversation_uuid' in params:
            path_params['conversation_uuid'] = params['conversation_uuid']  # noqa: E501
        if 'since' in params:
            path_params['since'] = params['since']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/conversations/{conversation_uuid}/messages/{since}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversationMessagesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_conversation_multimedia_upload_url(self, extension, **kwargs):  # noqa: E501
        """Get a presigned conversation multimedia upload URL  # noqa: E501

        Get a presigned conversation multimedia upload URL   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_conversation_multimedia_upload_url(extension, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str extension: (required)
        :return: ConversationMultimediaUploadUrlResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_conversation_multimedia_upload_url_with_http_info(extension, **kwargs)  # noqa: E501
        else:
            (data) = self.get_conversation_multimedia_upload_url_with_http_info(extension, **kwargs)  # noqa: E501
            return data

    def get_conversation_multimedia_upload_url_with_http_info(self, extension, **kwargs):  # noqa: E501
        """Get a presigned conversation multimedia upload URL  # noqa: E501

        Get a presigned conversation multimedia upload URL   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_conversation_multimedia_upload_url_with_http_info(extension, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str extension: (required)
        :return: ConversationMultimediaUploadUrlResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['extension']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_conversation_multimedia_upload_url" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'extension' is set
        if ('extension' not in params or
                params['extension'] is None):
            raise ValueError("Missing the required parameter `extension` when calling `get_conversation_multimedia_upload_url`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'extension' in params:
            path_params['extension'] = params['extension']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/upload_url/{extension}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversationMultimediaUploadUrlResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_conversation_pbx_audio_upload_url(self, extension, **kwargs):  # noqa: E501
        """Get a pre-signed conversation multimedia upload URL  # noqa: E501

        Get a pre-signed conversation multimedia upload URL   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_conversation_pbx_audio_upload_url(extension, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str extension: (required)
        :return: ConversationMultimediaUploadUrlResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_conversation_pbx_audio_upload_url_with_http_info(extension, **kwargs)  # noqa: E501
        else:
            (data) = self.get_conversation_pbx_audio_upload_url_with_http_info(extension, **kwargs)  # noqa: E501
            return data

    def get_conversation_pbx_audio_upload_url_with_http_info(self, extension, **kwargs):  # noqa: E501
        """Get a pre-signed conversation multimedia upload URL  # noqa: E501

        Get a pre-signed conversation multimedia upload URL   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_conversation_pbx_audio_upload_url_with_http_info(extension, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str extension: (required)
        :return: ConversationMultimediaUploadUrlResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['extension']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_conversation_pbx_audio_upload_url" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'extension' is set
        if ('extension' not in params or
                params['extension'] is None):
            raise ValueError("Missing the required parameter `extension` when calling `get_conversation_pbx_audio_upload_url`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'extension' in params:
            path_params['extension'] = params['extension']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/pbx/audio/upload_url/{extension}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversationMultimediaUploadUrlResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_conversation_pbx_customer_snapshot(self, pbx_customer_snapshot_request, **kwargs):  # noqa: E501
        """Get orders and customer information for a phone number  # noqa: E501

        Retrieves all the orders, auto orders, and customer profile for a given phone number   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_conversation_pbx_customer_snapshot(pbx_customer_snapshot_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConversationPbxCustomerSnapshotRequest pbx_customer_snapshot_request: Conversation pbx customer snapshot request (required)
        :return: ConversationPbxCustomerSnapshotResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_conversation_pbx_customer_snapshot_with_http_info(pbx_customer_snapshot_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_conversation_pbx_customer_snapshot_with_http_info(pbx_customer_snapshot_request, **kwargs)  # noqa: E501
            return data

    def get_conversation_pbx_customer_snapshot_with_http_info(self, pbx_customer_snapshot_request, **kwargs):  # noqa: E501
        """Get orders and customer information for a phone number  # noqa: E501

        Retrieves all the orders, auto orders, and customer profile for a given phone number   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_conversation_pbx_customer_snapshot_with_http_info(pbx_customer_snapshot_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConversationPbxCustomerSnapshotRequest pbx_customer_snapshot_request: Conversation pbx customer snapshot request (required)
        :return: ConversationPbxCustomerSnapshotResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pbx_customer_snapshot_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_conversation_pbx_customer_snapshot" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pbx_customer_snapshot_request' is set
        if ('pbx_customer_snapshot_request' not in params or
                params['pbx_customer_snapshot_request'] is None):
            raise ValueError("Missing the required parameter `pbx_customer_snapshot_request` when calling `get_conversation_pbx_customer_snapshot`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'pbx_customer_snapshot_request' in params:
            body_params = params['pbx_customer_snapshot_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/pbx/customer_snapshot', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversationPbxCustomerSnapshotResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_conversation_permissions(self, **kwargs):  # noqa: E501
        """Retrieve conversation permissions  # noqa: E501

        Retrieve conversation permissions   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_conversation_permissions(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ConversationPermissionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_conversation_permissions_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_conversation_permissions_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_conversation_permissions_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve conversation permissions  # noqa: E501

        Retrieve conversation permissions   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_conversation_permissions_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ConversationPermissionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_conversation_permissions" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/permissions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversationPermissionsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_conversation_webchat_queue_statuses(self, **kwargs):  # noqa: E501
        """Retrieve a conversation webchat queue statuses  # noqa: E501

        Retrieve a conversation webchat queue statuses including agent status and queue entries   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_conversation_webchat_queue_statuses(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ConversationWebchatQueueStatusesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_conversation_webchat_queue_statuses_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_conversation_webchat_queue_statuses_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_conversation_webchat_queue_statuses_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve a conversation webchat queue statuses  # noqa: E501

        Retrieve a conversation webchat queue statuses including agent status and queue entries   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_conversation_webchat_queue_statuses_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ConversationWebchatQueueStatusesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_conversation_webchat_queue_statuses" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/conversations/queues/statuses', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversationWebchatQueueStatusesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_conversations(self, **kwargs):  # noqa: E501
        """Retrieve a list of conversation summaries newest to oldest  # noqa: E501

        Retrieve a list of conversation summaries that are ordered newest to oldest, include the most recent message and whether its been read.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_conversations(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str medium:
        :param str before:
        :param int limit: The maximum number of records to return on this one API call. (Max 200)
        :param int offset: Pagination of the record set.  Offset is a zero based index.
        :return: ConversationsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_conversations_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_conversations_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_conversations_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve a list of conversation summaries newest to oldest  # noqa: E501

        Retrieve a list of conversation summaries that are ordered newest to oldest, include the most recent message and whether its been read.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_conversations_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str medium:
        :param str before:
        :param int limit: The maximum number of records to return on this one API call. (Max 200)
        :param int offset: Pagination of the record set.  Offset is a zero based index.
        :return: ConversationsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['medium', 'before', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_conversations" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'medium' in params:
            query_params.append(('medium', params['medium']))  # noqa: E501
        if 'before' in params:
            query_params.append(('before', params['before']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('_limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('_offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/conversations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversationsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_conversations_autocomplete(self, autocomplete_request, **kwargs):  # noqa: E501
        """Retrieve a list of matching terms for a search field  # noqa: E501

        Retrieve a list of matching terms for a search field   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_conversations_autocomplete(autocomplete_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConversationAutocompleteRequest autocomplete_request: Autocomplete Request (required)
        :return: ConversationAutocompleteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_conversations_autocomplete_with_http_info(autocomplete_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_conversations_autocomplete_with_http_info(autocomplete_request, **kwargs)  # noqa: E501
            return data

    def get_conversations_autocomplete_with_http_info(self, autocomplete_request, **kwargs):  # noqa: E501
        """Retrieve a list of matching terms for a search field  # noqa: E501

        Retrieve a list of matching terms for a search field   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_conversations_autocomplete_with_http_info(autocomplete_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConversationAutocompleteRequest autocomplete_request: Autocomplete Request (required)
        :return: ConversationAutocompleteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['autocomplete_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_conversations_autocomplete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'autocomplete_request' is set
        if ('autocomplete_request' not in params or
                params['autocomplete_request'] is None):
            raise ValueError("Missing the required parameter `autocomplete_request` when calling `get_conversations_autocomplete`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'autocomplete_request' in params:
            body_params = params['autocomplete_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/conversations/autocomplete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversationAutocompleteResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_conversations_search(self, search_request, **kwargs):  # noqa: E501
        """Search conversations  # noqa: E501

        Search conversations   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_conversations_search(search_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConversationSearchRequest search_request: Search Request (required)
        :return: ConversationSearchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_conversations_search_with_http_info(search_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_conversations_search_with_http_info(search_request, **kwargs)  # noqa: E501
            return data

    def get_conversations_search_with_http_info(self, search_request, **kwargs):  # noqa: E501
        """Search conversations  # noqa: E501

        Search conversations   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_conversations_search_with_http_info(search_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConversationSearchRequest search_request: Search Request (required)
        :return: ConversationSearchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['search_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_conversations_search" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'search_request' is set
        if ('search_request' not in params or
                params['search_request'] is None):
            raise ValueError("Missing the required parameter `search_request` when calling `get_conversations_search`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'search_request' in params:
            body_params = params['search_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/conversations/search', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversationSearchResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_locations_for_engagement(self, **kwargs):  # noqa: E501
        """Get location data for engagement configuration  # noqa: E501

        Get location data for engagement configuration   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_locations_for_engagement(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ConversationLocationsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_locations_for_engagement_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_locations_for_engagement_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_locations_for_engagement_with_http_info(self, **kwargs):  # noqa: E501
        """Get location data for engagement configuration  # noqa: E501

        Get location data for engagement configuration   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_locations_for_engagement_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ConversationLocationsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_locations_for_engagement" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/locations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversationLocationsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pbx_agent(self, conversation_pbx_agent_uuid, **kwargs):  # noqa: E501
        """Get pbx agent  # noqa: E501

        Retrieve a pbx agent   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pbx_agent(conversation_pbx_agent_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conversation_pbx_agent_uuid: (required)
        :return: ConversationPbxAgentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_pbx_agent_with_http_info(conversation_pbx_agent_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_pbx_agent_with_http_info(conversation_pbx_agent_uuid, **kwargs)  # noqa: E501
            return data

    def get_pbx_agent_with_http_info(self, conversation_pbx_agent_uuid, **kwargs):  # noqa: E501
        """Get pbx agent  # noqa: E501

        Retrieve a pbx agent   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pbx_agent_with_http_info(conversation_pbx_agent_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conversation_pbx_agent_uuid: (required)
        :return: ConversationPbxAgentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['conversation_pbx_agent_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pbx_agent" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'conversation_pbx_agent_uuid' is set
        if ('conversation_pbx_agent_uuid' not in params or
                params['conversation_pbx_agent_uuid'] is None):
            raise ValueError("Missing the required parameter `conversation_pbx_agent_uuid` when calling `get_pbx_agent`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'conversation_pbx_agent_uuid' in params:
            path_params['conversationPbxAgentUuid'] = params['conversation_pbx_agent_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/pbx/agent/{conversationPbxAgentUuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversationPbxAgentResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pbx_agent_voicemail(self, recording_sid, **kwargs):  # noqa: E501
        """Get Agent Voicemail  # noqa: E501

        Retrieve pbx agent Voicemail   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pbx_agent_voicemail(recording_sid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str recording_sid: (required)
        :return: ConversationPbxVoicemailMessageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_pbx_agent_voicemail_with_http_info(recording_sid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_pbx_agent_voicemail_with_http_info(recording_sid, **kwargs)  # noqa: E501
            return data

    def get_pbx_agent_voicemail_with_http_info(self, recording_sid, **kwargs):  # noqa: E501
        """Get Agent Voicemail  # noqa: E501

        Retrieve pbx agent Voicemail   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pbx_agent_voicemail_with_http_info(recording_sid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str recording_sid: (required)
        :return: ConversationPbxVoicemailMessageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['recording_sid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pbx_agent_voicemail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'recording_sid' is set
        if ('recording_sid' not in params or
                params['recording_sid'] is None):
            raise ValueError("Missing the required parameter `recording_sid` when calling `get_pbx_agent_voicemail`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'recording_sid' in params:
            path_params['recording_sid'] = params['recording_sid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/pbx/agent/voicemails/{recording_sid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversationPbxVoicemailMessageResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pbx_agent_voicemails(self, **kwargs):  # noqa: E501
        """Get Agent Voicemails  # noqa: E501

        Retrieve pbx agent Voicemails   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pbx_agent_voicemails(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ConversationPbxVoicemailMessageSummariesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_pbx_agent_voicemails_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_pbx_agent_voicemails_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_pbx_agent_voicemails_with_http_info(self, **kwargs):  # noqa: E501
        """Get Agent Voicemails  # noqa: E501

        Retrieve pbx agent Voicemails   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pbx_agent_voicemails_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ConversationPbxVoicemailMessageSummariesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pbx_agent_voicemails" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/pbx/agent/voicemails', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversationPbxVoicemailMessageSummariesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pbx_agents(self, **kwargs):  # noqa: E501
        """Get pbx agents  # noqa: E501

        Retrieve pbx agents   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pbx_agents(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ConversationPbxAgentsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_pbx_agents_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_pbx_agents_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_pbx_agents_with_http_info(self, **kwargs):  # noqa: E501
        """Get pbx agents  # noqa: E501

        Retrieve pbx agents   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pbx_agents_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ConversationPbxAgentsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pbx_agents" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/pbx/agent', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversationPbxAgentsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pbx_audio(self, conversation_pbx_audio_uuid, **kwargs):  # noqa: E501
        """Get pbx audio  # noqa: E501

        Retrieve a pbx audio   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pbx_audio(conversation_pbx_audio_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conversation_pbx_audio_uuid: (required)
        :return: ConversationPbxAudioResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_pbx_audio_with_http_info(conversation_pbx_audio_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_pbx_audio_with_http_info(conversation_pbx_audio_uuid, **kwargs)  # noqa: E501
            return data

    def get_pbx_audio_with_http_info(self, conversation_pbx_audio_uuid, **kwargs):  # noqa: E501
        """Get pbx audio  # noqa: E501

        Retrieve a pbx audio   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pbx_audio_with_http_info(conversation_pbx_audio_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conversation_pbx_audio_uuid: (required)
        :return: ConversationPbxAudioResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['conversation_pbx_audio_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pbx_audio" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'conversation_pbx_audio_uuid' is set
        if ('conversation_pbx_audio_uuid' not in params or
                params['conversation_pbx_audio_uuid'] is None):
            raise ValueError("Missing the required parameter `conversation_pbx_audio_uuid` when calling `get_pbx_audio`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'conversation_pbx_audio_uuid' in params:
            path_params['conversationPbxAudioUuid'] = params['conversation_pbx_audio_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/pbx/audio/{conversationPbxAudioUuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversationPbxAudioResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pbx_audios(self, **kwargs):  # noqa: E501
        """Get pbx audios  # noqa: E501

        Retrieve pbx audios   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pbx_audios(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ConversationPbxAudiosResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_pbx_audios_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_pbx_audios_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_pbx_audios_with_http_info(self, **kwargs):  # noqa: E501
        """Get pbx audios  # noqa: E501

        Retrieve pbx audios   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pbx_audios_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ConversationPbxAudiosResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pbx_audios" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/pbx/audio', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversationPbxAudiosResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pbx_menu(self, conversation_pbx_menu_uuid, **kwargs):  # noqa: E501
        """Get pbx menu  # noqa: E501

        Retrieve a pbx menu   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pbx_menu(conversation_pbx_menu_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conversation_pbx_menu_uuid: (required)
        :return: ConversationPbxMenuResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_pbx_menu_with_http_info(conversation_pbx_menu_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_pbx_menu_with_http_info(conversation_pbx_menu_uuid, **kwargs)  # noqa: E501
            return data

    def get_pbx_menu_with_http_info(self, conversation_pbx_menu_uuid, **kwargs):  # noqa: E501
        """Get pbx menu  # noqa: E501

        Retrieve a pbx menu   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pbx_menu_with_http_info(conversation_pbx_menu_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conversation_pbx_menu_uuid: (required)
        :return: ConversationPbxMenuResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['conversation_pbx_menu_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pbx_menu" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'conversation_pbx_menu_uuid' is set
        if ('conversation_pbx_menu_uuid' not in params or
                params['conversation_pbx_menu_uuid'] is None):
            raise ValueError("Missing the required parameter `conversation_pbx_menu_uuid` when calling `get_pbx_menu`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'conversation_pbx_menu_uuid' in params:
            path_params['conversationPbxMenuUuid'] = params['conversation_pbx_menu_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/pbx/menu/{conversationPbxMenuUuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversationPbxMenuResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pbx_menus(self, **kwargs):  # noqa: E501
        """Get pbx menus  # noqa: E501

        Retrieve pbx menus   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pbx_menus(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ConversationPbxMenusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_pbx_menus_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_pbx_menus_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_pbx_menus_with_http_info(self, **kwargs):  # noqa: E501
        """Get pbx menus  # noqa: E501

        Retrieve pbx menus   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pbx_menus_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ConversationPbxMenusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pbx_menus" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/pbx/menu', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversationPbxMenusResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pbx_phone_number(self, conversation_pbx_phone_number_uuid, **kwargs):  # noqa: E501
        """Get pbx phoneNumber  # noqa: E501

        Retrieve a pbx phoneNumber   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pbx_phone_number(conversation_pbx_phone_number_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conversation_pbx_phone_number_uuid: (required)
        :return: ConversationPbxPhoneNumberResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_pbx_phone_number_with_http_info(conversation_pbx_phone_number_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_pbx_phone_number_with_http_info(conversation_pbx_phone_number_uuid, **kwargs)  # noqa: E501
            return data

    def get_pbx_phone_number_with_http_info(self, conversation_pbx_phone_number_uuid, **kwargs):  # noqa: E501
        """Get pbx phoneNumber  # noqa: E501

        Retrieve a pbx phoneNumber   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pbx_phone_number_with_http_info(conversation_pbx_phone_number_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conversation_pbx_phone_number_uuid: (required)
        :return: ConversationPbxPhoneNumberResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['conversation_pbx_phone_number_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pbx_phone_number" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'conversation_pbx_phone_number_uuid' is set
        if ('conversation_pbx_phone_number_uuid' not in params or
                params['conversation_pbx_phone_number_uuid'] is None):
            raise ValueError("Missing the required parameter `conversation_pbx_phone_number_uuid` when calling `get_pbx_phone_number`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'conversation_pbx_phone_number_uuid' in params:
            path_params['conversationPbxPhoneNumberUuid'] = params['conversation_pbx_phone_number_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/pbx/phone_number/{conversationPbxPhoneNumberUuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversationPbxPhoneNumberResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pbx_phone_numbers(self, **kwargs):  # noqa: E501
        """Get pbx phoneNumbers  # noqa: E501

        Retrieve pbx phoneNumbers   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pbx_phone_numbers(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ConversationPbxPhoneNumbersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_pbx_phone_numbers_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_pbx_phone_numbers_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_pbx_phone_numbers_with_http_info(self, **kwargs):  # noqa: E501
        """Get pbx phoneNumbers  # noqa: E501

        Retrieve pbx phoneNumbers   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pbx_phone_numbers_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ConversationPbxPhoneNumbersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pbx_phone_numbers" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/pbx/phone_number', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversationPbxPhoneNumbersResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pbx_queue(self, conversation_pbx_queue_uuid, **kwargs):  # noqa: E501
        """Get pbx queue  # noqa: E501

        Retrieve a pbx queue   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pbx_queue(conversation_pbx_queue_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conversation_pbx_queue_uuid: (required)
        :return: ConversationPbxQueueResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_pbx_queue_with_http_info(conversation_pbx_queue_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_pbx_queue_with_http_info(conversation_pbx_queue_uuid, **kwargs)  # noqa: E501
            return data

    def get_pbx_queue_with_http_info(self, conversation_pbx_queue_uuid, **kwargs):  # noqa: E501
        """Get pbx queue  # noqa: E501

        Retrieve a pbx queue   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pbx_queue_with_http_info(conversation_pbx_queue_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conversation_pbx_queue_uuid: (required)
        :return: ConversationPbxQueueResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['conversation_pbx_queue_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pbx_queue" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'conversation_pbx_queue_uuid' is set
        if ('conversation_pbx_queue_uuid' not in params or
                params['conversation_pbx_queue_uuid'] is None):
            raise ValueError("Missing the required parameter `conversation_pbx_queue_uuid` when calling `get_pbx_queue`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'conversation_pbx_queue_uuid' in params:
            path_params['conversationPbxQueueUuid'] = params['conversation_pbx_queue_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/pbx/queue/{conversationPbxQueueUuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversationPbxQueueResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pbx_queue_voicemail(self, queue_uuid, recording_sid, **kwargs):  # noqa: E501
        """Get Queue Voicemail  # noqa: E501

        Retrieve pbx queue Voicemail   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pbx_queue_voicemail(queue_uuid, recording_sid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str queue_uuid: (required)
        :param str recording_sid: (required)
        :return: ConversationPbxVoicemailMessageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_pbx_queue_voicemail_with_http_info(queue_uuid, recording_sid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_pbx_queue_voicemail_with_http_info(queue_uuid, recording_sid, **kwargs)  # noqa: E501
            return data

    def get_pbx_queue_voicemail_with_http_info(self, queue_uuid, recording_sid, **kwargs):  # noqa: E501
        """Get Queue Voicemail  # noqa: E501

        Retrieve pbx queue Voicemail   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pbx_queue_voicemail_with_http_info(queue_uuid, recording_sid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str queue_uuid: (required)
        :param str recording_sid: (required)
        :return: ConversationPbxVoicemailMessageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['queue_uuid', 'recording_sid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pbx_queue_voicemail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'queue_uuid' is set
        if ('queue_uuid' not in params or
                params['queue_uuid'] is None):
            raise ValueError("Missing the required parameter `queue_uuid` when calling `get_pbx_queue_voicemail`")  # noqa: E501
        # verify the required parameter 'recording_sid' is set
        if ('recording_sid' not in params or
                params['recording_sid'] is None):
            raise ValueError("Missing the required parameter `recording_sid` when calling `get_pbx_queue_voicemail`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'queue_uuid' in params:
            path_params['queue_uuid'] = params['queue_uuid']  # noqa: E501
        if 'recording_sid' in params:
            path_params['recording_sid'] = params['recording_sid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/pbx/queues/{queue_uuid}/voicemails/{recording_sid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversationPbxVoicemailMessageResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pbx_queue_voicemails(self, queue_uuid, **kwargs):  # noqa: E501
        """Get Queue Voicemails  # noqa: E501

        Retrieve pbx queue voicemails   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pbx_queue_voicemails(queue_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str queue_uuid: (required)
        :return: ConversationPbxVoicemailMessageSummariesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_pbx_queue_voicemails_with_http_info(queue_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_pbx_queue_voicemails_with_http_info(queue_uuid, **kwargs)  # noqa: E501
            return data

    def get_pbx_queue_voicemails_with_http_info(self, queue_uuid, **kwargs):  # noqa: E501
        """Get Queue Voicemails  # noqa: E501

        Retrieve pbx queue voicemails   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pbx_queue_voicemails_with_http_info(queue_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str queue_uuid: (required)
        :return: ConversationPbxVoicemailMessageSummariesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['queue_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pbx_queue_voicemails" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'queue_uuid' is set
        if ('queue_uuid' not in params or
                params['queue_uuid'] is None):
            raise ValueError("Missing the required parameter `queue_uuid` when calling `get_pbx_queue_voicemails`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'queue_uuid' in params:
            path_params['queue_uuid'] = params['queue_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/pbx/queues/{queue_uuid}/voicemails', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversationPbxVoicemailMessageSummariesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pbx_queues(self, **kwargs):  # noqa: E501
        """Get pbx queues  # noqa: E501

        Retrieve pbx queues   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pbx_queues(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ConversationPbxQueuesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_pbx_queues_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_pbx_queues_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_pbx_queues_with_http_info(self, **kwargs):  # noqa: E501
        """Get pbx queues  # noqa: E501

        Retrieve pbx queues   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pbx_queues_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ConversationPbxQueuesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pbx_queues" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/pbx/queue', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversationPbxQueuesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pbx_time_based(self, conversation_pbx_time_based_uuid, **kwargs):  # noqa: E501
        """Get pbx timeBased  # noqa: E501

        Retrieve a pbx timeBased   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pbx_time_based(conversation_pbx_time_based_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conversation_pbx_time_based_uuid: (required)
        :return: ConversationPbxTimeBasedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_pbx_time_based_with_http_info(conversation_pbx_time_based_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_pbx_time_based_with_http_info(conversation_pbx_time_based_uuid, **kwargs)  # noqa: E501
            return data

    def get_pbx_time_based_with_http_info(self, conversation_pbx_time_based_uuid, **kwargs):  # noqa: E501
        """Get pbx timeBased  # noqa: E501

        Retrieve a pbx timeBased   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pbx_time_based_with_http_info(conversation_pbx_time_based_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conversation_pbx_time_based_uuid: (required)
        :return: ConversationPbxTimeBasedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['conversation_pbx_time_based_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pbx_time_based" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'conversation_pbx_time_based_uuid' is set
        if ('conversation_pbx_time_based_uuid' not in params or
                params['conversation_pbx_time_based_uuid'] is None):
            raise ValueError("Missing the required parameter `conversation_pbx_time_based_uuid` when calling `get_pbx_time_based`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'conversation_pbx_time_based_uuid' in params:
            path_params['conversationPbxTimeBasedUuid'] = params['conversation_pbx_time_based_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/pbx/time_based/{conversationPbxTimeBasedUuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversationPbxTimeBasedResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pbx_time_baseds(self, **kwargs):  # noqa: E501
        """Get pbx timeBaseds  # noqa: E501

        Retrieve pbx timeBaseds   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pbx_time_baseds(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ConversationPbxTimeBasedsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_pbx_time_baseds_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_pbx_time_baseds_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_pbx_time_baseds_with_http_info(self, **kwargs):  # noqa: E501
        """Get pbx timeBaseds  # noqa: E501

        Retrieve pbx timeBaseds   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pbx_time_baseds_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ConversationPbxTimeBasedsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pbx_time_baseds" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/pbx/time_based', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversationPbxTimeBasedsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pbx_time_range(self, conversation_pbx_time_range_uuid, **kwargs):  # noqa: E501
        """Get pbx timeRange  # noqa: E501

        Retrieve a pbx timeRange   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pbx_time_range(conversation_pbx_time_range_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conversation_pbx_time_range_uuid: (required)
        :return: ConversationPbxTimeRangeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_pbx_time_range_with_http_info(conversation_pbx_time_range_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_pbx_time_range_with_http_info(conversation_pbx_time_range_uuid, **kwargs)  # noqa: E501
            return data

    def get_pbx_time_range_with_http_info(self, conversation_pbx_time_range_uuid, **kwargs):  # noqa: E501
        """Get pbx timeRange  # noqa: E501

        Retrieve a pbx timeRange   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pbx_time_range_with_http_info(conversation_pbx_time_range_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conversation_pbx_time_range_uuid: (required)
        :return: ConversationPbxTimeRangeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['conversation_pbx_time_range_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pbx_time_range" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'conversation_pbx_time_range_uuid' is set
        if ('conversation_pbx_time_range_uuid' not in params or
                params['conversation_pbx_time_range_uuid'] is None):
            raise ValueError("Missing the required parameter `conversation_pbx_time_range_uuid` when calling `get_pbx_time_range`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'conversation_pbx_time_range_uuid' in params:
            path_params['conversationPbxTimeRangeUuid'] = params['conversation_pbx_time_range_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/pbx/time_range/{conversationPbxTimeRangeUuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversationPbxTimeRangeResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pbx_time_ranges(self, **kwargs):  # noqa: E501
        """Get pbx timeRanges  # noqa: E501

        Retrieve pbx timeRanges   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pbx_time_ranges(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ConversationPbxTimeRangesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_pbx_time_ranges_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_pbx_time_ranges_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_pbx_time_ranges_with_http_info(self, **kwargs):  # noqa: E501
        """Get pbx timeRanges  # noqa: E501

        Retrieve pbx timeRanges   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pbx_time_ranges_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ConversationPbxTimeRangesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pbx_time_ranges" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/pbx/time_range', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversationPbxTimeRangesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pbx_voicemail_mailbox(self, conversation_pbx_voicemail_mailbox_uuid, **kwargs):  # noqa: E501
        """Get pbx voicemailMailbox  # noqa: E501

        Retrieve a pbx voicemailMailbox   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pbx_voicemail_mailbox(conversation_pbx_voicemail_mailbox_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conversation_pbx_voicemail_mailbox_uuid: (required)
        :return: ConversationPbxVoicemailMailboxResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_pbx_voicemail_mailbox_with_http_info(conversation_pbx_voicemail_mailbox_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_pbx_voicemail_mailbox_with_http_info(conversation_pbx_voicemail_mailbox_uuid, **kwargs)  # noqa: E501
            return data

    def get_pbx_voicemail_mailbox_with_http_info(self, conversation_pbx_voicemail_mailbox_uuid, **kwargs):  # noqa: E501
        """Get pbx voicemailMailbox  # noqa: E501

        Retrieve a pbx voicemailMailbox   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pbx_voicemail_mailbox_with_http_info(conversation_pbx_voicemail_mailbox_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conversation_pbx_voicemail_mailbox_uuid: (required)
        :return: ConversationPbxVoicemailMailboxResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['conversation_pbx_voicemail_mailbox_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pbx_voicemail_mailbox" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'conversation_pbx_voicemail_mailbox_uuid' is set
        if ('conversation_pbx_voicemail_mailbox_uuid' not in params or
                params['conversation_pbx_voicemail_mailbox_uuid'] is None):
            raise ValueError("Missing the required parameter `conversation_pbx_voicemail_mailbox_uuid` when calling `get_pbx_voicemail_mailbox`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'conversation_pbx_voicemail_mailbox_uuid' in params:
            path_params['conversationPbxVoicemailMailboxUuid'] = params['conversation_pbx_voicemail_mailbox_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/pbx/voicemail_mailbox/{conversationPbxVoicemailMailboxUuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversationPbxVoicemailMailboxResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pbx_voicemail_mailboxes(self, **kwargs):  # noqa: E501
        """Get pbx voicemailMailboxes  # noqa: E501

        Retrieve pbx voicemailMailboxes   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pbx_voicemail_mailboxes(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ConversationPbxVoicemailMailboxesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_pbx_voicemail_mailboxes_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_pbx_voicemail_mailboxes_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_pbx_voicemail_mailboxes_with_http_info(self, **kwargs):  # noqa: E501
        """Get pbx voicemailMailboxes  # noqa: E501

        Retrieve pbx voicemailMailboxes   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pbx_voicemail_mailboxes_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ConversationPbxVoicemailMailboxesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pbx_voicemail_mailboxes" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/pbx/voicemail_mailbox', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversationPbxVoicemailMailboxesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def insert_conversation_canned_message(self, canned_message, **kwargs):  # noqa: E501
        """Insert a canned message  # noqa: E501

        Insert a canned message   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.insert_conversation_canned_message(canned_message, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConversationCannedMessage canned_message: Canned message (required)
        :return: ConversationCannedMessageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.insert_conversation_canned_message_with_http_info(canned_message, **kwargs)  # noqa: E501
        else:
            (data) = self.insert_conversation_canned_message_with_http_info(canned_message, **kwargs)  # noqa: E501
            return data

    def insert_conversation_canned_message_with_http_info(self, canned_message, **kwargs):  # noqa: E501
        """Insert a canned message  # noqa: E501

        Insert a canned message   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.insert_conversation_canned_message_with_http_info(canned_message, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConversationCannedMessage canned_message: Canned message (required)
        :return: ConversationCannedMessageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['canned_message']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method insert_conversation_canned_message" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'canned_message' is set
        if ('canned_message' not in params or
                params['canned_message'] is None):
            raise ValueError("Missing the required parameter `canned_message` when calling `insert_conversation_canned_message`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'canned_message' in params:
            body_params = params['canned_message']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/canned_messages', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversationCannedMessageResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def insert_conversation_department(self, department, **kwargs):  # noqa: E501
        """Insert a department  # noqa: E501

        Insert a department   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.insert_conversation_department(department, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConversationDepartment department: Department (required)
        :return: ConversationDepartmentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.insert_conversation_department_with_http_info(department, **kwargs)  # noqa: E501
        else:
            (data) = self.insert_conversation_department_with_http_info(department, **kwargs)  # noqa: E501
            return data

    def insert_conversation_department_with_http_info(self, department, **kwargs):  # noqa: E501
        """Insert a department  # noqa: E501

        Insert a department   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.insert_conversation_department_with_http_info(department, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConversationDepartment department: Department (required)
        :return: ConversationDepartmentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['department']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method insert_conversation_department" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'department' is set
        if ('department' not in params or
                params['department'] is None):
            raise ValueError("Missing the required parameter `department` when calling `insert_conversation_department`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'department' in params:
            body_params = params['department']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/departments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversationDepartmentResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def insert_conversation_engagement(self, engagement, **kwargs):  # noqa: E501
        """Insert a engagement  # noqa: E501

        Insert a engagement   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.insert_conversation_engagement(engagement, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConversationEngagement engagement: Engagement (required)
        :return: ConversationEngagementResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.insert_conversation_engagement_with_http_info(engagement, **kwargs)  # noqa: E501
        else:
            (data) = self.insert_conversation_engagement_with_http_info(engagement, **kwargs)  # noqa: E501
            return data

    def insert_conversation_engagement_with_http_info(self, engagement, **kwargs):  # noqa: E501
        """Insert a engagement  # noqa: E501

        Insert a engagement   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.insert_conversation_engagement_with_http_info(engagement, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConversationEngagement engagement: Engagement (required)
        :return: ConversationEngagementResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['engagement']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method insert_conversation_engagement" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'engagement' is set
        if ('engagement' not in params or
                params['engagement'] is None):
            raise ValueError("Missing the required parameter `engagement` when calling `insert_conversation_engagement`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'engagement' in params:
            body_params = params['engagement']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/engagements', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversationEngagementResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def insert_pbx_agent(self, pbx_agent, **kwargs):  # noqa: E501
        """Insert pbx agent  # noqa: E501

        Insert a pbx agent   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.insert_pbx_agent(pbx_agent, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConversationPbxAgent pbx_agent: Pbx Agent (required)
        :return: ConversationPbxAgentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.insert_pbx_agent_with_http_info(pbx_agent, **kwargs)  # noqa: E501
        else:
            (data) = self.insert_pbx_agent_with_http_info(pbx_agent, **kwargs)  # noqa: E501
            return data

    def insert_pbx_agent_with_http_info(self, pbx_agent, **kwargs):  # noqa: E501
        """Insert pbx agent  # noqa: E501

        Insert a pbx agent   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.insert_pbx_agent_with_http_info(pbx_agent, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConversationPbxAgent pbx_agent: Pbx Agent (required)
        :return: ConversationPbxAgentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pbx_agent']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method insert_pbx_agent" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pbx_agent' is set
        if ('pbx_agent' not in params or
                params['pbx_agent'] is None):
            raise ValueError("Missing the required parameter `pbx_agent` when calling `insert_pbx_agent`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'pbx_agent' in params:
            body_params = params['pbx_agent']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/pbx/agent', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversationPbxAgentResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def insert_pbx_audio(self, pbx_audio, **kwargs):  # noqa: E501
        """Insert pbx audio  # noqa: E501

        Insert a pbx audio   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.insert_pbx_audio(pbx_audio, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConversationPbxAudio pbx_audio: Pbx Audio (required)
        :return: ConversationPbxAudioResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.insert_pbx_audio_with_http_info(pbx_audio, **kwargs)  # noqa: E501
        else:
            (data) = self.insert_pbx_audio_with_http_info(pbx_audio, **kwargs)  # noqa: E501
            return data

    def insert_pbx_audio_with_http_info(self, pbx_audio, **kwargs):  # noqa: E501
        """Insert pbx audio  # noqa: E501

        Insert a pbx audio   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.insert_pbx_audio_with_http_info(pbx_audio, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConversationPbxAudio pbx_audio: Pbx Audio (required)
        :return: ConversationPbxAudioResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pbx_audio']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method insert_pbx_audio" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pbx_audio' is set
        if ('pbx_audio' not in params or
                params['pbx_audio'] is None):
            raise ValueError("Missing the required parameter `pbx_audio` when calling `insert_pbx_audio`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'pbx_audio' in params:
            body_params = params['pbx_audio']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/pbx/audio', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversationPbxAudioResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def insert_pbx_menu(self, pbx_menu, **kwargs):  # noqa: E501
        """Insert pbx menu  # noqa: E501

        Insert a pbx menu   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.insert_pbx_menu(pbx_menu, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConversationPbxMenu pbx_menu: Pbx Menu (required)
        :return: ConversationPbxMenuResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.insert_pbx_menu_with_http_info(pbx_menu, **kwargs)  # noqa: E501
        else:
            (data) = self.insert_pbx_menu_with_http_info(pbx_menu, **kwargs)  # noqa: E501
            return data

    def insert_pbx_menu_with_http_info(self, pbx_menu, **kwargs):  # noqa: E501
        """Insert pbx menu  # noqa: E501

        Insert a pbx menu   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.insert_pbx_menu_with_http_info(pbx_menu, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConversationPbxMenu pbx_menu: Pbx Menu (required)
        :return: ConversationPbxMenuResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pbx_menu']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method insert_pbx_menu" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pbx_menu' is set
        if ('pbx_menu' not in params or
                params['pbx_menu'] is None):
            raise ValueError("Missing the required parameter `pbx_menu` when calling `insert_pbx_menu`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'pbx_menu' in params:
            body_params = params['pbx_menu']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/pbx/menu', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversationPbxMenuResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def insert_pbx_phone_number(self, pbx_phone_number, **kwargs):  # noqa: E501
        """Insert pbx phoneNumber  # noqa: E501

        Insert a pbx phoneNumber   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.insert_pbx_phone_number(pbx_phone_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConversationPbxPhoneNumber pbx_phone_number: Pbx PhoneNumber (required)
        :return: ConversationPbxPhoneNumberResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.insert_pbx_phone_number_with_http_info(pbx_phone_number, **kwargs)  # noqa: E501
        else:
            (data) = self.insert_pbx_phone_number_with_http_info(pbx_phone_number, **kwargs)  # noqa: E501
            return data

    def insert_pbx_phone_number_with_http_info(self, pbx_phone_number, **kwargs):  # noqa: E501
        """Insert pbx phoneNumber  # noqa: E501

        Insert a pbx phoneNumber   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.insert_pbx_phone_number_with_http_info(pbx_phone_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConversationPbxPhoneNumber pbx_phone_number: Pbx PhoneNumber (required)
        :return: ConversationPbxPhoneNumberResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pbx_phone_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method insert_pbx_phone_number" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pbx_phone_number' is set
        if ('pbx_phone_number' not in params or
                params['pbx_phone_number'] is None):
            raise ValueError("Missing the required parameter `pbx_phone_number` when calling `insert_pbx_phone_number`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'pbx_phone_number' in params:
            body_params = params['pbx_phone_number']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/pbx/phone_number', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversationPbxPhoneNumberResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def insert_pbx_queue(self, pbx_queue, **kwargs):  # noqa: E501
        """Insert pbx queue  # noqa: E501

        Insert a pbx queue   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.insert_pbx_queue(pbx_queue, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConversationPbxQueue pbx_queue: Pbx Queue (required)
        :return: ConversationPbxQueueResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.insert_pbx_queue_with_http_info(pbx_queue, **kwargs)  # noqa: E501
        else:
            (data) = self.insert_pbx_queue_with_http_info(pbx_queue, **kwargs)  # noqa: E501
            return data

    def insert_pbx_queue_with_http_info(self, pbx_queue, **kwargs):  # noqa: E501
        """Insert pbx queue  # noqa: E501

        Insert a pbx queue   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.insert_pbx_queue_with_http_info(pbx_queue, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConversationPbxQueue pbx_queue: Pbx Queue (required)
        :return: ConversationPbxQueueResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pbx_queue']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method insert_pbx_queue" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pbx_queue' is set
        if ('pbx_queue' not in params or
                params['pbx_queue'] is None):
            raise ValueError("Missing the required parameter `pbx_queue` when calling `insert_pbx_queue`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'pbx_queue' in params:
            body_params = params['pbx_queue']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/pbx/queue', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversationPbxQueueResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def insert_pbx_time_based(self, pbx_time_based, **kwargs):  # noqa: E501
        """Insert pbx timeBased  # noqa: E501

        Insert a pbx timeBased   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.insert_pbx_time_based(pbx_time_based, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConversationPbxTimeBased pbx_time_based: Pbx TimeBased (required)
        :return: ConversationPbxTimeBasedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.insert_pbx_time_based_with_http_info(pbx_time_based, **kwargs)  # noqa: E501
        else:
            (data) = self.insert_pbx_time_based_with_http_info(pbx_time_based, **kwargs)  # noqa: E501
            return data

    def insert_pbx_time_based_with_http_info(self, pbx_time_based, **kwargs):  # noqa: E501
        """Insert pbx timeBased  # noqa: E501

        Insert a pbx timeBased   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.insert_pbx_time_based_with_http_info(pbx_time_based, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConversationPbxTimeBased pbx_time_based: Pbx TimeBased (required)
        :return: ConversationPbxTimeBasedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pbx_time_based']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method insert_pbx_time_based" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pbx_time_based' is set
        if ('pbx_time_based' not in params or
                params['pbx_time_based'] is None):
            raise ValueError("Missing the required parameter `pbx_time_based` when calling `insert_pbx_time_based`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'pbx_time_based' in params:
            body_params = params['pbx_time_based']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/pbx/time_based', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversationPbxTimeBasedResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def insert_pbx_time_range(self, pbx_time_range, **kwargs):  # noqa: E501
        """Insert pbx timeRange  # noqa: E501

        Insert a pbx timeRange   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.insert_pbx_time_range(pbx_time_range, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConversationPbxTimeRange pbx_time_range: Pbx TimeRange (required)
        :return: ConversationPbxTimeRangeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.insert_pbx_time_range_with_http_info(pbx_time_range, **kwargs)  # noqa: E501
        else:
            (data) = self.insert_pbx_time_range_with_http_info(pbx_time_range, **kwargs)  # noqa: E501
            return data

    def insert_pbx_time_range_with_http_info(self, pbx_time_range, **kwargs):  # noqa: E501
        """Insert pbx timeRange  # noqa: E501

        Insert a pbx timeRange   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.insert_pbx_time_range_with_http_info(pbx_time_range, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConversationPbxTimeRange pbx_time_range: Pbx TimeRange (required)
        :return: ConversationPbxTimeRangeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pbx_time_range']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method insert_pbx_time_range" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pbx_time_range' is set
        if ('pbx_time_range' not in params or
                params['pbx_time_range'] is None):
            raise ValueError("Missing the required parameter `pbx_time_range` when calling `insert_pbx_time_range`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'pbx_time_range' in params:
            body_params = params['pbx_time_range']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/pbx/time_range', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversationPbxTimeRangeResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def insert_pbx_voicemail_mailbox(self, pbx_voicemail_mailbox, **kwargs):  # noqa: E501
        """Insert pbx voicemailMailbox  # noqa: E501

        Insert a pbx voicemailMailbox   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.insert_pbx_voicemail_mailbox(pbx_voicemail_mailbox, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConversationPbxVoicemailMailbox pbx_voicemail_mailbox: Pbx VoicemailMailbox (required)
        :return: ConversationPbxVoicemailMailboxResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.insert_pbx_voicemail_mailbox_with_http_info(pbx_voicemail_mailbox, **kwargs)  # noqa: E501
        else:
            (data) = self.insert_pbx_voicemail_mailbox_with_http_info(pbx_voicemail_mailbox, **kwargs)  # noqa: E501
            return data

    def insert_pbx_voicemail_mailbox_with_http_info(self, pbx_voicemail_mailbox, **kwargs):  # noqa: E501
        """Insert pbx voicemailMailbox  # noqa: E501

        Insert a pbx voicemailMailbox   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.insert_pbx_voicemail_mailbox_with_http_info(pbx_voicemail_mailbox, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConversationPbxVoicemailMailbox pbx_voicemail_mailbox: Pbx VoicemailMailbox (required)
        :return: ConversationPbxVoicemailMailboxResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pbx_voicemail_mailbox']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method insert_pbx_voicemail_mailbox" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pbx_voicemail_mailbox' is set
        if ('pbx_voicemail_mailbox' not in params or
                params['pbx_voicemail_mailbox'] is None):
            raise ValueError("Missing the required parameter `pbx_voicemail_mailbox` when calling `insert_pbx_voicemail_mailbox`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'pbx_voicemail_mailbox' in params:
            body_params = params['pbx_voicemail_mailbox']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/pbx/voicemail_mailbox', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversationPbxVoicemailMailboxResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def join_conversation(self, conversation_uuid, **kwargs):  # noqa: E501
        """Join a conversation  # noqa: E501

        Join a conversation   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.join_conversation(conversation_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conversation_uuid: (required)
        :param ConversationJoinRequest join_request: Join request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.join_conversation_with_http_info(conversation_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.join_conversation_with_http_info(conversation_uuid, **kwargs)  # noqa: E501
            return data

    def join_conversation_with_http_info(self, conversation_uuid, **kwargs):  # noqa: E501
        """Join a conversation  # noqa: E501

        Join a conversation   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.join_conversation_with_http_info(conversation_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conversation_uuid: (required)
        :param ConversationJoinRequest join_request: Join request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['conversation_uuid', 'join_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method join_conversation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'conversation_uuid' is set
        if ('conversation_uuid' not in params or
                params['conversation_uuid'] is None):
            raise ValueError("Missing the required parameter `conversation_uuid` when calling `join_conversation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'conversation_uuid' in params:
            path_params['conversation_uuid'] = params['conversation_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'join_request' in params:
            body_params = params['join_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/conversations/{conversation_uuid}/join', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def leave_conversation(self, conversation_uuid, **kwargs):  # noqa: E501
        """Leave a conversation  # noqa: E501

        Leave a conversation   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.leave_conversation(conversation_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conversation_uuid: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.leave_conversation_with_http_info(conversation_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.leave_conversation_with_http_info(conversation_uuid, **kwargs)  # noqa: E501
            return data

    def leave_conversation_with_http_info(self, conversation_uuid, **kwargs):  # noqa: E501
        """Leave a conversation  # noqa: E501

        Leave a conversation   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.leave_conversation_with_http_info(conversation_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conversation_uuid: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['conversation_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method leave_conversation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'conversation_uuid' is set
        if ('conversation_uuid' not in params or
                params['conversation_uuid'] is None):
            raise ValueError("Missing the required parameter `conversation_uuid` when calling `leave_conversation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'conversation_uuid' in params:
            path_params['conversation_uuid'] = params['conversation_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/conversations/{conversation_uuid}/leave', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def listened_pbx_agent_voicemail(self, recording_sid, **kwargs):  # noqa: E501
        """Listened Agent Voicemail  # noqa: E501

        Listened pbx agent Voicemail   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.listened_pbx_agent_voicemail(recording_sid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str recording_sid: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.listened_pbx_agent_voicemail_with_http_info(recording_sid, **kwargs)  # noqa: E501
        else:
            (data) = self.listened_pbx_agent_voicemail_with_http_info(recording_sid, **kwargs)  # noqa: E501
            return data

    def listened_pbx_agent_voicemail_with_http_info(self, recording_sid, **kwargs):  # noqa: E501
        """Listened Agent Voicemail  # noqa: E501

        Listened pbx agent Voicemail   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.listened_pbx_agent_voicemail_with_http_info(recording_sid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str recording_sid: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['recording_sid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listened_pbx_agent_voicemail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'recording_sid' is set
        if ('recording_sid' not in params or
                params['recording_sid'] is None):
            raise ValueError("Missing the required parameter `recording_sid` when calling `listened_pbx_agent_voicemail`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'recording_sid' in params:
            path_params['recording_sid'] = params['recording_sid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/pbx/agent/voicemails/{recording_sid}/listened', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def listened_pbx_queue_voicemail(self, queue_uuid, recording_sid, **kwargs):  # noqa: E501
        """Listened Queue Voicemail  # noqa: E501

        Listened pbx queue Voicemail   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.listened_pbx_queue_voicemail(queue_uuid, recording_sid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str queue_uuid: (required)
        :param str recording_sid: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.listened_pbx_queue_voicemail_with_http_info(queue_uuid, recording_sid, **kwargs)  # noqa: E501
        else:
            (data) = self.listened_pbx_queue_voicemail_with_http_info(queue_uuid, recording_sid, **kwargs)  # noqa: E501
            return data

    def listened_pbx_queue_voicemail_with_http_info(self, queue_uuid, recording_sid, **kwargs):  # noqa: E501
        """Listened Queue Voicemail  # noqa: E501

        Listened pbx queue Voicemail   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.listened_pbx_queue_voicemail_with_http_info(queue_uuid, recording_sid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str queue_uuid: (required)
        :param str recording_sid: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['queue_uuid', 'recording_sid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listened_pbx_queue_voicemail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'queue_uuid' is set
        if ('queue_uuid' not in params or
                params['queue_uuid'] is None):
            raise ValueError("Missing the required parameter `queue_uuid` when calling `listened_pbx_queue_voicemail`")  # noqa: E501
        # verify the required parameter 'recording_sid' is set
        if ('recording_sid' not in params or
                params['recording_sid'] is None):
            raise ValueError("Missing the required parameter `recording_sid` when calling `listened_pbx_queue_voicemail`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'queue_uuid' in params:
            path_params['queue_uuid'] = params['queue_uuid']  # noqa: E501
        if 'recording_sid' in params:
            path_params['recording_sid'] = params['recording_sid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/pbx/queues/{queue_uuid}/voicemails/{recording_sid}/listened', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mark_read_conversation(self, conversation_uuid, **kwargs):  # noqa: E501
        """Mark a conversation as read  # noqa: E501

        Mark a conversation as read   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mark_read_conversation(conversation_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conversation_uuid: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mark_read_conversation_with_http_info(conversation_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.mark_read_conversation_with_http_info(conversation_uuid, **kwargs)  # noqa: E501
            return data

    def mark_read_conversation_with_http_info(self, conversation_uuid, **kwargs):  # noqa: E501
        """Mark a conversation as read  # noqa: E501

        Mark a conversation as read   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mark_read_conversation_with_http_info(conversation_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conversation_uuid: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['conversation_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mark_read_conversation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'conversation_uuid' is set
        if ('conversation_uuid' not in params or
                params['conversation_uuid'] is None):
            raise ValueError("Missing the required parameter `conversation_uuid` when calling `mark_read_conversation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'conversation_uuid' in params:
            path_params['conversation_uuid'] = params['conversation_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/conversations/{conversation_uuid}/markread', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reset_conversation_pbx_queue_statistics(self, queue_uuid, **kwargs):  # noqa: E501
        """reset statistics within the queue  # noqa: E501

        reset statistics within the queue   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reset_conversation_pbx_queue_statistics(queue_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str queue_uuid: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reset_conversation_pbx_queue_statistics_with_http_info(queue_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.reset_conversation_pbx_queue_statistics_with_http_info(queue_uuid, **kwargs)  # noqa: E501
            return data

    def reset_conversation_pbx_queue_statistics_with_http_info(self, queue_uuid, **kwargs):  # noqa: E501
        """reset statistics within the queue  # noqa: E501

        reset statistics within the queue   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reset_conversation_pbx_queue_statistics_with_http_info(queue_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str queue_uuid: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['queue_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reset_conversation_pbx_queue_statistics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'queue_uuid' is set
        if ('queue_uuid' not in params or
                params['queue_uuid'] is None):
            raise ValueError("Missing the required parameter `queue_uuid` when calling `reset_conversation_pbx_queue_statistics`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'queue_uuid' in params:
            path_params['queue_uuid'] = params['queue_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/pbx/queues/{queue_uuid}/reset_statistics', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_conversation_canned_messages(self, search_request, **kwargs):  # noqa: E501
        """Search for canned messages by short_code  # noqa: E501

        Search for canned messages by short_code   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_conversation_canned_messages(search_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConversationCannedMessagesSearch search_request: Search request (required)
        :return: ConversationCannedMessagesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_conversation_canned_messages_with_http_info(search_request, **kwargs)  # noqa: E501
        else:
            (data) = self.search_conversation_canned_messages_with_http_info(search_request, **kwargs)  # noqa: E501
            return data

    def search_conversation_canned_messages_with_http_info(self, search_request, **kwargs):  # noqa: E501
        """Search for canned messages by short_code  # noqa: E501

        Search for canned messages by short_code   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_conversation_canned_messages_with_http_info(search_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConversationCannedMessagesSearch search_request: Search request (required)
        :return: ConversationCannedMessagesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['search_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_conversation_canned_messages" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'search_request' is set
        if ('search_request' not in params or
                params['search_request'] is None):
            raise ValueError("Missing the required parameter `search_request` when calling `search_conversation_canned_messages`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'search_request' in params:
            body_params = params['search_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/canned_messages/search', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversationCannedMessagesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sms_unsubscribe_conversation(self, conversation_uuid, **kwargs):  # noqa: E501
        """Unsubscribe any SMS participants in this conversation  # noqa: E501

        Unsubscribe any SMS participants in this conversation   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sms_unsubscribe_conversation(conversation_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conversation_uuid: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sms_unsubscribe_conversation_with_http_info(conversation_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.sms_unsubscribe_conversation_with_http_info(conversation_uuid, **kwargs)  # noqa: E501
            return data

    def sms_unsubscribe_conversation_with_http_info(self, conversation_uuid, **kwargs):  # noqa: E501
        """Unsubscribe any SMS participants in this conversation  # noqa: E501

        Unsubscribe any SMS participants in this conversation   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sms_unsubscribe_conversation_with_http_info(conversation_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conversation_uuid: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['conversation_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sms_unsubscribe_conversation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'conversation_uuid' is set
        if ('conversation_uuid' not in params or
                params['conversation_uuid'] is None):
            raise ValueError("Missing the required parameter `conversation_uuid` when calling `sms_unsubscribe_conversation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'conversation_uuid' in params:
            path_params['conversation_uuid'] = params['conversation_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/conversations/{conversation_uuid}/sms_unsubscribe', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def start_conversation(self, start_request, **kwargs):  # noqa: E501
        """Start a conversation  # noqa: E501

        Start a new conversation   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.start_conversation(start_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConversationStartRequest start_request: Start request (required)
        :return: ConversationStartResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.start_conversation_with_http_info(start_request, **kwargs)  # noqa: E501
        else:
            (data) = self.start_conversation_with_http_info(start_request, **kwargs)  # noqa: E501
            return data

    def start_conversation_with_http_info(self, start_request, **kwargs):  # noqa: E501
        """Start a conversation  # noqa: E501

        Start a new conversation   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.start_conversation_with_http_info(start_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConversationStartRequest start_request: Start request (required)
        :return: ConversationStartResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method start_conversation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start_request' is set
        if ('start_request' not in params or
                params['start_request'] is None):
            raise ValueError("Missing the required parameter `start_request` when calling `start_conversation`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'start_request' in params:
            body_params = params['start_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/conversations', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversationStartResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_agent_profile(self, profile_request, **kwargs):  # noqa: E501
        """Update agent profile  # noqa: E501

        Update agent profile   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_agent_profile(profile_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConversationAgentProfile profile_request: Profile request (required)
        :return: ConversationAgentProfileResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_agent_profile_with_http_info(profile_request, **kwargs)  # noqa: E501
        else:
            (data) = self.update_agent_profile_with_http_info(profile_request, **kwargs)  # noqa: E501
            return data

    def update_agent_profile_with_http_info(self, profile_request, **kwargs):  # noqa: E501
        """Update agent profile  # noqa: E501

        Update agent profile   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_agent_profile_with_http_info(profile_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConversationAgentProfile profile_request: Profile request (required)
        :return: ConversationAgentProfileResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['profile_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_agent_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'profile_request' is set
        if ('profile_request' not in params or
                params['profile_request'] is None):
            raise ValueError("Missing the required parameter `profile_request` when calling `update_agent_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'profile_request' in params:
            body_params = params['profile_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/agent/profile', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversationAgentProfileResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_conversation_canned_message(self, conversation_canned_message_oid, canned_message, **kwargs):  # noqa: E501
        """Update a canned message  # noqa: E501

        Update a canned message   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_conversation_canned_message(conversation_canned_message_oid, canned_message, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int conversation_canned_message_oid: (required)
        :param ConversationCannedMessage canned_message: Canned message (required)
        :return: ConversationCannedMessageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_conversation_canned_message_with_http_info(conversation_canned_message_oid, canned_message, **kwargs)  # noqa: E501
        else:
            (data) = self.update_conversation_canned_message_with_http_info(conversation_canned_message_oid, canned_message, **kwargs)  # noqa: E501
            return data

    def update_conversation_canned_message_with_http_info(self, conversation_canned_message_oid, canned_message, **kwargs):  # noqa: E501
        """Update a canned message  # noqa: E501

        Update a canned message   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_conversation_canned_message_with_http_info(conversation_canned_message_oid, canned_message, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int conversation_canned_message_oid: (required)
        :param ConversationCannedMessage canned_message: Canned message (required)
        :return: ConversationCannedMessageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['conversation_canned_message_oid', 'canned_message']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_conversation_canned_message" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'conversation_canned_message_oid' is set
        if ('conversation_canned_message_oid' not in params or
                params['conversation_canned_message_oid'] is None):
            raise ValueError("Missing the required parameter `conversation_canned_message_oid` when calling `update_conversation_canned_message`")  # noqa: E501
        # verify the required parameter 'canned_message' is set
        if ('canned_message' not in params or
                params['canned_message'] is None):
            raise ValueError("Missing the required parameter `canned_message` when calling `update_conversation_canned_message`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'conversation_canned_message_oid' in params:
            path_params['conversation_canned_message_oid'] = params['conversation_canned_message_oid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'canned_message' in params:
            body_params = params['canned_message']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/canned_messages/{conversation_canned_message_oid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversationCannedMessageResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_conversation_department(self, conversation_department_oid, department, **kwargs):  # noqa: E501
        """Update a department  # noqa: E501

        Update a department   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_conversation_department(conversation_department_oid, department, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int conversation_department_oid: (required)
        :param ConversationDepartment department: Department (required)
        :return: ConversationDepartmentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_conversation_department_with_http_info(conversation_department_oid, department, **kwargs)  # noqa: E501
        else:
            (data) = self.update_conversation_department_with_http_info(conversation_department_oid, department, **kwargs)  # noqa: E501
            return data

    def update_conversation_department_with_http_info(self, conversation_department_oid, department, **kwargs):  # noqa: E501
        """Update a department  # noqa: E501

        Update a department   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_conversation_department_with_http_info(conversation_department_oid, department, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int conversation_department_oid: (required)
        :param ConversationDepartment department: Department (required)
        :return: ConversationDepartmentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['conversation_department_oid', 'department']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_conversation_department" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'conversation_department_oid' is set
        if ('conversation_department_oid' not in params or
                params['conversation_department_oid'] is None):
            raise ValueError("Missing the required parameter `conversation_department_oid` when calling `update_conversation_department`")  # noqa: E501
        # verify the required parameter 'department' is set
        if ('department' not in params or
                params['department'] is None):
            raise ValueError("Missing the required parameter `department` when calling `update_conversation_department`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'conversation_department_oid' in params:
            path_params['conversation_department_oid'] = params['conversation_department_oid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'department' in params:
            body_params = params['department']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/departments/{conversation_department_oid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversationDepartmentResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_conversation_engagement(self, conversation_engagement_oid, engagement, **kwargs):  # noqa: E501
        """Update a engagement  # noqa: E501

        Update a engagement   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_conversation_engagement(conversation_engagement_oid, engagement, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int conversation_engagement_oid: (required)
        :param ConversationEngagement engagement: Engagement (required)
        :return: ConversationEngagementResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_conversation_engagement_with_http_info(conversation_engagement_oid, engagement, **kwargs)  # noqa: E501
        else:
            (data) = self.update_conversation_engagement_with_http_info(conversation_engagement_oid, engagement, **kwargs)  # noqa: E501
            return data

    def update_conversation_engagement_with_http_info(self, conversation_engagement_oid, engagement, **kwargs):  # noqa: E501
        """Update a engagement  # noqa: E501

        Update a engagement   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_conversation_engagement_with_http_info(conversation_engagement_oid, engagement, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int conversation_engagement_oid: (required)
        :param ConversationEngagement engagement: Engagement (required)
        :return: ConversationEngagementResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['conversation_engagement_oid', 'engagement']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_conversation_engagement" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'conversation_engagement_oid' is set
        if ('conversation_engagement_oid' not in params or
                params['conversation_engagement_oid'] is None):
            raise ValueError("Missing the required parameter `conversation_engagement_oid` when calling `update_conversation_engagement`")  # noqa: E501
        # verify the required parameter 'engagement' is set
        if ('engagement' not in params or
                params['engagement'] is None):
            raise ValueError("Missing the required parameter `engagement` when calling `update_conversation_engagement`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'conversation_engagement_oid' in params:
            path_params['conversation_engagement_oid'] = params['conversation_engagement_oid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'engagement' in params:
            body_params = params['engagement']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/engagements/{conversation_engagement_oid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversationEngagementResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_conversation_webchat_queue_status(self, queue_name, status_request, **kwargs):  # noqa: E501
        """Update status within the queue  # noqa: E501

        Update status within the queue   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_conversation_webchat_queue_status(queue_name, status_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str queue_name: (required)
        :param ConversationWebchatQueueStatusUpdateRequest status_request: Status request (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_conversation_webchat_queue_status_with_http_info(queue_name, status_request, **kwargs)  # noqa: E501
        else:
            (data) = self.update_conversation_webchat_queue_status_with_http_info(queue_name, status_request, **kwargs)  # noqa: E501
            return data

    def update_conversation_webchat_queue_status_with_http_info(self, queue_name, status_request, **kwargs):  # noqa: E501
        """Update status within the queue  # noqa: E501

        Update status within the queue   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_conversation_webchat_queue_status_with_http_info(queue_name, status_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str queue_name: (required)
        :param ConversationWebchatQueueStatusUpdateRequest status_request: Status request (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['queue_name', 'status_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_conversation_webchat_queue_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'queue_name' is set
        if ('queue_name' not in params or
                params['queue_name'] is None):
            raise ValueError("Missing the required parameter `queue_name` when calling `update_conversation_webchat_queue_status`")  # noqa: E501
        # verify the required parameter 'status_request' is set
        if ('status_request' not in params or
                params['status_request'] is None):
            raise ValueError("Missing the required parameter `status_request` when calling `update_conversation_webchat_queue_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'queue_name' in params:
            path_params['queue_name'] = params['queue_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'status_request' in params:
            body_params = params['status_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/conversations/queues/{queue_name}/status', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_pbx_agent(self, conversation_pbx_agent_uuid, pbx_agent, **kwargs):  # noqa: E501
        """Update pbx agent  # noqa: E501

        Update a pbx agent   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_pbx_agent(conversation_pbx_agent_uuid, pbx_agent, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conversation_pbx_agent_uuid: (required)
        :param ConversationPbxAgent pbx_agent: Pbx Agent (required)
        :return: ConversationPbxAgentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_pbx_agent_with_http_info(conversation_pbx_agent_uuid, pbx_agent, **kwargs)  # noqa: E501
        else:
            (data) = self.update_pbx_agent_with_http_info(conversation_pbx_agent_uuid, pbx_agent, **kwargs)  # noqa: E501
            return data

    def update_pbx_agent_with_http_info(self, conversation_pbx_agent_uuid, pbx_agent, **kwargs):  # noqa: E501
        """Update pbx agent  # noqa: E501

        Update a pbx agent   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_pbx_agent_with_http_info(conversation_pbx_agent_uuid, pbx_agent, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conversation_pbx_agent_uuid: (required)
        :param ConversationPbxAgent pbx_agent: Pbx Agent (required)
        :return: ConversationPbxAgentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['conversation_pbx_agent_uuid', 'pbx_agent']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_pbx_agent" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'conversation_pbx_agent_uuid' is set
        if ('conversation_pbx_agent_uuid' not in params or
                params['conversation_pbx_agent_uuid'] is None):
            raise ValueError("Missing the required parameter `conversation_pbx_agent_uuid` when calling `update_pbx_agent`")  # noqa: E501
        # verify the required parameter 'pbx_agent' is set
        if ('pbx_agent' not in params or
                params['pbx_agent'] is None):
            raise ValueError("Missing the required parameter `pbx_agent` when calling `update_pbx_agent`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'conversation_pbx_agent_uuid' in params:
            path_params['conversationPbxAgentUuid'] = params['conversation_pbx_agent_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'pbx_agent' in params:
            body_params = params['pbx_agent']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/pbx/agent/{conversationPbxAgentUuid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversationPbxAgentResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_pbx_audio(self, conversation_pbx_audio_uuid, pbx_audio, **kwargs):  # noqa: E501
        """Update pbx audio  # noqa: E501

        Update a pbx audio   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_pbx_audio(conversation_pbx_audio_uuid, pbx_audio, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conversation_pbx_audio_uuid: (required)
        :param ConversationPbxAudio pbx_audio: Pbx Audio (required)
        :return: ConversationPbxAudioResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_pbx_audio_with_http_info(conversation_pbx_audio_uuid, pbx_audio, **kwargs)  # noqa: E501
        else:
            (data) = self.update_pbx_audio_with_http_info(conversation_pbx_audio_uuid, pbx_audio, **kwargs)  # noqa: E501
            return data

    def update_pbx_audio_with_http_info(self, conversation_pbx_audio_uuid, pbx_audio, **kwargs):  # noqa: E501
        """Update pbx audio  # noqa: E501

        Update a pbx audio   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_pbx_audio_with_http_info(conversation_pbx_audio_uuid, pbx_audio, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conversation_pbx_audio_uuid: (required)
        :param ConversationPbxAudio pbx_audio: Pbx Audio (required)
        :return: ConversationPbxAudioResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['conversation_pbx_audio_uuid', 'pbx_audio']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_pbx_audio" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'conversation_pbx_audio_uuid' is set
        if ('conversation_pbx_audio_uuid' not in params or
                params['conversation_pbx_audio_uuid'] is None):
            raise ValueError("Missing the required parameter `conversation_pbx_audio_uuid` when calling `update_pbx_audio`")  # noqa: E501
        # verify the required parameter 'pbx_audio' is set
        if ('pbx_audio' not in params or
                params['pbx_audio'] is None):
            raise ValueError("Missing the required parameter `pbx_audio` when calling `update_pbx_audio`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'conversation_pbx_audio_uuid' in params:
            path_params['conversationPbxAudioUuid'] = params['conversation_pbx_audio_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'pbx_audio' in params:
            body_params = params['pbx_audio']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/pbx/audio/{conversationPbxAudioUuid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversationPbxAudioResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_pbx_menu(self, conversation_pbx_menu_uuid, pbx_menu, **kwargs):  # noqa: E501
        """Update pbx menu  # noqa: E501

        Update a pbx menu   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_pbx_menu(conversation_pbx_menu_uuid, pbx_menu, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conversation_pbx_menu_uuid: (required)
        :param ConversationPbxMenu pbx_menu: Pbx Menu (required)
        :return: ConversationPbxMenuResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_pbx_menu_with_http_info(conversation_pbx_menu_uuid, pbx_menu, **kwargs)  # noqa: E501
        else:
            (data) = self.update_pbx_menu_with_http_info(conversation_pbx_menu_uuid, pbx_menu, **kwargs)  # noqa: E501
            return data

    def update_pbx_menu_with_http_info(self, conversation_pbx_menu_uuid, pbx_menu, **kwargs):  # noqa: E501
        """Update pbx menu  # noqa: E501

        Update a pbx menu   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_pbx_menu_with_http_info(conversation_pbx_menu_uuid, pbx_menu, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conversation_pbx_menu_uuid: (required)
        :param ConversationPbxMenu pbx_menu: Pbx Menu (required)
        :return: ConversationPbxMenuResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['conversation_pbx_menu_uuid', 'pbx_menu']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_pbx_menu" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'conversation_pbx_menu_uuid' is set
        if ('conversation_pbx_menu_uuid' not in params or
                params['conversation_pbx_menu_uuid'] is None):
            raise ValueError("Missing the required parameter `conversation_pbx_menu_uuid` when calling `update_pbx_menu`")  # noqa: E501
        # verify the required parameter 'pbx_menu' is set
        if ('pbx_menu' not in params or
                params['pbx_menu'] is None):
            raise ValueError("Missing the required parameter `pbx_menu` when calling `update_pbx_menu`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'conversation_pbx_menu_uuid' in params:
            path_params['conversationPbxMenuUuid'] = params['conversation_pbx_menu_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'pbx_menu' in params:
            body_params = params['pbx_menu']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/pbx/menu/{conversationPbxMenuUuid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversationPbxMenuResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_pbx_phone_number(self, conversation_pbx_phone_number_uuid, pbx_phone_number, **kwargs):  # noqa: E501
        """Update pbx phoneNumber  # noqa: E501

        Update a pbx phoneNumber   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_pbx_phone_number(conversation_pbx_phone_number_uuid, pbx_phone_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conversation_pbx_phone_number_uuid: (required)
        :param ConversationPbxPhoneNumber pbx_phone_number: Pbx PhoneNumber (required)
        :return: ConversationPbxPhoneNumberResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_pbx_phone_number_with_http_info(conversation_pbx_phone_number_uuid, pbx_phone_number, **kwargs)  # noqa: E501
        else:
            (data) = self.update_pbx_phone_number_with_http_info(conversation_pbx_phone_number_uuid, pbx_phone_number, **kwargs)  # noqa: E501
            return data

    def update_pbx_phone_number_with_http_info(self, conversation_pbx_phone_number_uuid, pbx_phone_number, **kwargs):  # noqa: E501
        """Update pbx phoneNumber  # noqa: E501

        Update a pbx phoneNumber   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_pbx_phone_number_with_http_info(conversation_pbx_phone_number_uuid, pbx_phone_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conversation_pbx_phone_number_uuid: (required)
        :param ConversationPbxPhoneNumber pbx_phone_number: Pbx PhoneNumber (required)
        :return: ConversationPbxPhoneNumberResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['conversation_pbx_phone_number_uuid', 'pbx_phone_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_pbx_phone_number" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'conversation_pbx_phone_number_uuid' is set
        if ('conversation_pbx_phone_number_uuid' not in params or
                params['conversation_pbx_phone_number_uuid'] is None):
            raise ValueError("Missing the required parameter `conversation_pbx_phone_number_uuid` when calling `update_pbx_phone_number`")  # noqa: E501
        # verify the required parameter 'pbx_phone_number' is set
        if ('pbx_phone_number' not in params or
                params['pbx_phone_number'] is None):
            raise ValueError("Missing the required parameter `pbx_phone_number` when calling `update_pbx_phone_number`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'conversation_pbx_phone_number_uuid' in params:
            path_params['conversationPbxPhoneNumberUuid'] = params['conversation_pbx_phone_number_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'pbx_phone_number' in params:
            body_params = params['pbx_phone_number']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/pbx/phone_number/{conversationPbxPhoneNumberUuid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversationPbxPhoneNumberResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_pbx_queue(self, conversation_pbx_queue_uuid, pbx_queue, **kwargs):  # noqa: E501
        """Update pbx queue  # noqa: E501

        Update a pbx queue   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_pbx_queue(conversation_pbx_queue_uuid, pbx_queue, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conversation_pbx_queue_uuid: (required)
        :param ConversationPbxQueue pbx_queue: Pbx Queue (required)
        :return: ConversationPbxQueueResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_pbx_queue_with_http_info(conversation_pbx_queue_uuid, pbx_queue, **kwargs)  # noqa: E501
        else:
            (data) = self.update_pbx_queue_with_http_info(conversation_pbx_queue_uuid, pbx_queue, **kwargs)  # noqa: E501
            return data

    def update_pbx_queue_with_http_info(self, conversation_pbx_queue_uuid, pbx_queue, **kwargs):  # noqa: E501
        """Update pbx queue  # noqa: E501

        Update a pbx queue   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_pbx_queue_with_http_info(conversation_pbx_queue_uuid, pbx_queue, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conversation_pbx_queue_uuid: (required)
        :param ConversationPbxQueue pbx_queue: Pbx Queue (required)
        :return: ConversationPbxQueueResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['conversation_pbx_queue_uuid', 'pbx_queue']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_pbx_queue" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'conversation_pbx_queue_uuid' is set
        if ('conversation_pbx_queue_uuid' not in params or
                params['conversation_pbx_queue_uuid'] is None):
            raise ValueError("Missing the required parameter `conversation_pbx_queue_uuid` when calling `update_pbx_queue`")  # noqa: E501
        # verify the required parameter 'pbx_queue' is set
        if ('pbx_queue' not in params or
                params['pbx_queue'] is None):
            raise ValueError("Missing the required parameter `pbx_queue` when calling `update_pbx_queue`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'conversation_pbx_queue_uuid' in params:
            path_params['conversationPbxQueueUuid'] = params['conversation_pbx_queue_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'pbx_queue' in params:
            body_params = params['pbx_queue']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/pbx/queue/{conversationPbxQueueUuid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversationPbxQueueResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_pbx_time_based(self, conversation_pbx_time_based_uuid, pbx_time_based, **kwargs):  # noqa: E501
        """Update pbx timeBased  # noqa: E501

        Update a pbx timeBased   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_pbx_time_based(conversation_pbx_time_based_uuid, pbx_time_based, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conversation_pbx_time_based_uuid: (required)
        :param ConversationPbxTimeBased pbx_time_based: Pbx TimeBased (required)
        :return: ConversationPbxTimeBasedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_pbx_time_based_with_http_info(conversation_pbx_time_based_uuid, pbx_time_based, **kwargs)  # noqa: E501
        else:
            (data) = self.update_pbx_time_based_with_http_info(conversation_pbx_time_based_uuid, pbx_time_based, **kwargs)  # noqa: E501
            return data

    def update_pbx_time_based_with_http_info(self, conversation_pbx_time_based_uuid, pbx_time_based, **kwargs):  # noqa: E501
        """Update pbx timeBased  # noqa: E501

        Update a pbx timeBased   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_pbx_time_based_with_http_info(conversation_pbx_time_based_uuid, pbx_time_based, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conversation_pbx_time_based_uuid: (required)
        :param ConversationPbxTimeBased pbx_time_based: Pbx TimeBased (required)
        :return: ConversationPbxTimeBasedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['conversation_pbx_time_based_uuid', 'pbx_time_based']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_pbx_time_based" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'conversation_pbx_time_based_uuid' is set
        if ('conversation_pbx_time_based_uuid' not in params or
                params['conversation_pbx_time_based_uuid'] is None):
            raise ValueError("Missing the required parameter `conversation_pbx_time_based_uuid` when calling `update_pbx_time_based`")  # noqa: E501
        # verify the required parameter 'pbx_time_based' is set
        if ('pbx_time_based' not in params or
                params['pbx_time_based'] is None):
            raise ValueError("Missing the required parameter `pbx_time_based` when calling `update_pbx_time_based`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'conversation_pbx_time_based_uuid' in params:
            path_params['conversationPbxTimeBasedUuid'] = params['conversation_pbx_time_based_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'pbx_time_based' in params:
            body_params = params['pbx_time_based']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/pbx/time_based/{conversationPbxTimeBasedUuid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversationPbxTimeBasedResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_pbx_time_range(self, conversation_pbx_time_range_uuid, pbx_time_range, **kwargs):  # noqa: E501
        """Update pbx timeRange  # noqa: E501

        Update a pbx timeRange   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_pbx_time_range(conversation_pbx_time_range_uuid, pbx_time_range, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conversation_pbx_time_range_uuid: (required)
        :param ConversationPbxTimeRange pbx_time_range: Pbx TimeRange (required)
        :return: ConversationPbxTimeRangeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_pbx_time_range_with_http_info(conversation_pbx_time_range_uuid, pbx_time_range, **kwargs)  # noqa: E501
        else:
            (data) = self.update_pbx_time_range_with_http_info(conversation_pbx_time_range_uuid, pbx_time_range, **kwargs)  # noqa: E501
            return data

    def update_pbx_time_range_with_http_info(self, conversation_pbx_time_range_uuid, pbx_time_range, **kwargs):  # noqa: E501
        """Update pbx timeRange  # noqa: E501

        Update a pbx timeRange   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_pbx_time_range_with_http_info(conversation_pbx_time_range_uuid, pbx_time_range, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conversation_pbx_time_range_uuid: (required)
        :param ConversationPbxTimeRange pbx_time_range: Pbx TimeRange (required)
        :return: ConversationPbxTimeRangeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['conversation_pbx_time_range_uuid', 'pbx_time_range']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_pbx_time_range" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'conversation_pbx_time_range_uuid' is set
        if ('conversation_pbx_time_range_uuid' not in params or
                params['conversation_pbx_time_range_uuid'] is None):
            raise ValueError("Missing the required parameter `conversation_pbx_time_range_uuid` when calling `update_pbx_time_range`")  # noqa: E501
        # verify the required parameter 'pbx_time_range' is set
        if ('pbx_time_range' not in params or
                params['pbx_time_range'] is None):
            raise ValueError("Missing the required parameter `pbx_time_range` when calling `update_pbx_time_range`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'conversation_pbx_time_range_uuid' in params:
            path_params['conversationPbxTimeRangeUuid'] = params['conversation_pbx_time_range_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'pbx_time_range' in params:
            body_params = params['pbx_time_range']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/pbx/time_range/{conversationPbxTimeRangeUuid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversationPbxTimeRangeResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_pbx_voicemail_mailbox(self, conversation_pbx_voicemail_mailbox_uuid, pbx_voicemail_mailbox, **kwargs):  # noqa: E501
        """Update pbx voicemailMailbox  # noqa: E501

        Update a pbx voicemailMailbox   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_pbx_voicemail_mailbox(conversation_pbx_voicemail_mailbox_uuid, pbx_voicemail_mailbox, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conversation_pbx_voicemail_mailbox_uuid: (required)
        :param ConversationPbxVoicemailMailbox pbx_voicemail_mailbox: Pbx VoicemailMailbox (required)
        :return: ConversationPbxVoicemailMailboxResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_pbx_voicemail_mailbox_with_http_info(conversation_pbx_voicemail_mailbox_uuid, pbx_voicemail_mailbox, **kwargs)  # noqa: E501
        else:
            (data) = self.update_pbx_voicemail_mailbox_with_http_info(conversation_pbx_voicemail_mailbox_uuid, pbx_voicemail_mailbox, **kwargs)  # noqa: E501
            return data

    def update_pbx_voicemail_mailbox_with_http_info(self, conversation_pbx_voicemail_mailbox_uuid, pbx_voicemail_mailbox, **kwargs):  # noqa: E501
        """Update pbx voicemailMailbox  # noqa: E501

        Update a pbx voicemailMailbox   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_pbx_voicemail_mailbox_with_http_info(conversation_pbx_voicemail_mailbox_uuid, pbx_voicemail_mailbox, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conversation_pbx_voicemail_mailbox_uuid: (required)
        :param ConversationPbxVoicemailMailbox pbx_voicemail_mailbox: Pbx VoicemailMailbox (required)
        :return: ConversationPbxVoicemailMailboxResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['conversation_pbx_voicemail_mailbox_uuid', 'pbx_voicemail_mailbox']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_pbx_voicemail_mailbox" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'conversation_pbx_voicemail_mailbox_uuid' is set
        if ('conversation_pbx_voicemail_mailbox_uuid' not in params or
                params['conversation_pbx_voicemail_mailbox_uuid'] is None):
            raise ValueError("Missing the required parameter `conversation_pbx_voicemail_mailbox_uuid` when calling `update_pbx_voicemail_mailbox`")  # noqa: E501
        # verify the required parameter 'pbx_voicemail_mailbox' is set
        if ('pbx_voicemail_mailbox' not in params or
                params['pbx_voicemail_mailbox'] is None):
            raise ValueError("Missing the required parameter `pbx_voicemail_mailbox` when calling `update_pbx_voicemail_mailbox`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'conversation_pbx_voicemail_mailbox_uuid' in params:
            path_params['conversationPbxVoicemailMailboxUuid'] = params['conversation_pbx_voicemail_mailbox_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'pbx_voicemail_mailbox' in params:
            body_params = params['pbx_voicemail_mailbox']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/conversation/pbx/voicemail_mailbox/{conversationPbxVoicemailMailboxUuid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConversationPbxVoicemailMailboxResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
