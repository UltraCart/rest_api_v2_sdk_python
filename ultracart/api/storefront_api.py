"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from ultracart.api_client import ApiClient, Endpoint as _Endpoint
from ultracart.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from ultracart.model.add_library_item_request import AddLibraryItemRequest
from ultracart.model.apply_library_item_request import ApplyLibraryItemRequest
from ultracart.model.apply_library_item_response import ApplyLibraryItemResponse
from ultracart.model.base_response import BaseResponse
from ultracart.model.countries_response import CountriesResponse
from ultracart.model.email_base_template_list_response import EmailBaseTemplateListResponse
from ultracart.model.email_campaign import EmailCampaign
from ultracart.model.email_campaign_folder import EmailCampaignFolder
from ultracart.model.email_campaign_folder_response import EmailCampaignFolderResponse
from ultracart.model.email_campaign_folders_response import EmailCampaignFoldersResponse
from ultracart.model.email_campaign_response import EmailCampaignResponse
from ultracart.model.email_campaigns_response import EmailCampaignsResponse
from ultracart.model.email_clicks_response import EmailClicksResponse
from ultracart.model.email_commseq import EmailCommseq
from ultracart.model.email_commseq_email import EmailCommseqEmail
from ultracart.model.email_commseq_email_response import EmailCommseqEmailResponse
from ultracart.model.email_commseq_email_send_test_request import EmailCommseqEmailSendTestRequest
from ultracart.model.email_commseq_email_send_test_response import EmailCommseqEmailSendTestResponse
from ultracart.model.email_commseq_emails_request import EmailCommseqEmailsRequest
from ultracart.model.email_commseq_emails_response import EmailCommseqEmailsResponse
from ultracart.model.email_commseq_postcard import EmailCommseqPostcard
from ultracart.model.email_commseq_postcard_response import EmailCommseqPostcardResponse
from ultracart.model.email_commseq_postcard_send_test_request import EmailCommseqPostcardSendTestRequest
from ultracart.model.email_commseq_postcard_send_test_response import EmailCommseqPostcardSendTestResponse
from ultracart.model.email_commseq_postcards_request import EmailCommseqPostcardsRequest
from ultracart.model.email_commseq_postcards_response import EmailCommseqPostcardsResponse
from ultracart.model.email_commseq_response import EmailCommseqResponse
from ultracart.model.email_commseq_sequence_test_request import EmailCommseqSequenceTestRequest
from ultracart.model.email_commseq_sequence_test_response import EmailCommseqSequenceTestResponse
from ultracart.model.email_commseq_sms_send_test_request import EmailCommseqSmsSendTestRequest
from ultracart.model.email_commseq_sms_send_test_response import EmailCommseqSmsSendTestResponse
from ultracart.model.email_commseq_stat_response import EmailCommseqStatResponse
from ultracart.model.email_commseq_step_logs_response import EmailCommseqStepLogsResponse
from ultracart.model.email_commseq_webhook_send_test_request import EmailCommseqWebhookSendTestRequest
from ultracart.model.email_commseq_webhook_send_test_response import EmailCommseqWebhookSendTestResponse
from ultracart.model.email_commseqs_response import EmailCommseqsResponse
from ultracart.model.email_customer import EmailCustomer
from ultracart.model.email_customer_editor_url_response import EmailCustomerEditorUrlResponse
from ultracart.model.email_customers_response import EmailCustomersResponse
from ultracart.model.email_dashboard_activity_response import EmailDashboardActivityResponse
from ultracart.model.email_dashboard_stats_response import EmailDashboardStatsResponse
from ultracart.model.email_domain import EmailDomain
from ultracart.model.email_editor_token_response import EmailEditorTokenResponse
from ultracart.model.email_flow import EmailFlow
from ultracart.model.email_flow_back_populate_request import EmailFlowBackPopulateRequest
from ultracart.model.email_flow_back_populate_response import EmailFlowBackPopulateResponse
from ultracart.model.email_flow_folder import EmailFlowFolder
from ultracart.model.email_flow_folder_response import EmailFlowFolderResponse
from ultracart.model.email_flow_folders_response import EmailFlowFoldersResponse
from ultracart.model.email_flow_response import EmailFlowResponse
from ultracart.model.email_flows_response import EmailFlowsResponse
from ultracart.model.email_global_settings import EmailGlobalSettings
from ultracart.model.email_global_settings_response import EmailGlobalSettingsResponse
from ultracart.model.email_global_unsubscribe_request import EmailGlobalUnsubscribeRequest
from ultracart.model.email_global_unsubscribe_response import EmailGlobalUnsubscribeResponse
from ultracart.model.email_histogram_property_names_response import EmailHistogramPropertyNamesResponse
from ultracart.model.email_histogram_property_values_response import EmailHistogramPropertyValuesResponse
from ultracart.model.email_list import EmailList
from ultracart.model.email_list_archive_response import EmailListArchiveResponse
from ultracart.model.email_list_customers_response import EmailListCustomersResponse
from ultracart.model.email_list_response import EmailListResponse
from ultracart.model.email_list_segment_folder import EmailListSegmentFolder
from ultracart.model.email_list_segment_folder_response import EmailListSegmentFolderResponse
from ultracart.model.email_list_segment_folders_response import EmailListSegmentFoldersResponse
from ultracart.model.email_list_subscribe_response import EmailListSubscribeResponse
from ultracart.model.email_lists_response import EmailListsResponse
from ultracart.model.email_orders_response import EmailOrdersResponse
from ultracart.model.email_performance_response import EmailPerformanceResponse
from ultracart.model.email_plan import EmailPlan
from ultracart.model.email_plan_response import EmailPlanResponse
from ultracart.model.email_postcard_tracking_response import EmailPostcardTrackingResponse
from ultracart.model.email_segment import EmailSegment
from ultracart.model.email_segment_archive_response import EmailSegmentArchiveResponse
from ultracart.model.email_segment_customers_response import EmailSegmentCustomersResponse
from ultracart.model.email_segment_download_prepare_response import EmailSegmentDownloadPrepareResponse
from ultracart.model.email_segment_response import EmailSegmentResponse
from ultracart.model.email_segments_response import EmailSegmentsResponse
from ultracart.model.email_sending_domain_response import EmailSendingDomainResponse
from ultracart.model.email_sending_domains_response import EmailSendingDomainsResponse
from ultracart.model.email_settings import EmailSettings
from ultracart.model.email_settings_response import EmailSettingsResponse
from ultracart.model.email_stat_postcard_summary_request import EmailStatPostcardSummaryRequest
from ultracart.model.email_stat_postcard_summary_response import EmailStatPostcardSummaryResponse
from ultracart.model.email_stat_summary_request import EmailStatSummaryRequest
from ultracart.model.email_stat_summary_response import EmailStatSummaryResponse
from ultracart.model.email_step_stat_request import EmailStepStatRequest
from ultracart.model.email_step_stat_response import EmailStepStatResponse
from ultracart.model.email_step_waiting_request import EmailStepWaitingRequest
from ultracart.model.email_step_waiting_response import EmailStepWaitingResponse
from ultracart.model.email_template import EmailTemplate
from ultracart.model.email_templates_response import EmailTemplatesResponse
from ultracart.model.email_third_party_list_import_request import EmailThirdPartyListImportRequest
from ultracart.model.email_third_party_providers_response import EmailThirdPartyProvidersResponse
from ultracart.model.email_webhook_editor_values_response import EmailWebhookEditorValuesResponse
from ultracart.model.error_response import ErrorResponse
from ultracart.model.experiment import Experiment
from ultracart.model.experiment_response import ExperimentResponse
from ultracart.model.experiments_response import ExperimentsResponse
from ultracart.model.file_manager_page_response import FileManagerPageResponse
from ultracart.model.file_manager_upload_request import FileManagerUploadRequest
from ultracart.model.file_manager_upload_url_response import FileManagerUploadUrlResponse
from ultracart.model.geocode_request import GeocodeRequest
from ultracart.model.geocode_response import GeocodeResponse
from ultracart.model.library_filter_values_response import LibraryFilterValuesResponse
from ultracart.model.library_item import LibraryItem
from ultracart.model.library_item_query import LibraryItemQuery
from ultracart.model.library_item_response import LibraryItemResponse
from ultracart.model.library_items_response import LibraryItemsResponse
from ultracart.model.lookup_request import LookupRequest
from ultracart.model.lookup_response import LookupResponse
from ultracart.model.pricing_tiers_response import PricingTiersResponse
from ultracart.model.publish_library_item_request import PublishLibraryItemRequest
from ultracart.model.ruler_validation_request import RulerValidationRequest
from ultracart.model.ruler_validation_response import RulerValidationResponse
from ultracart.model.screen_recording_heatmap_index_request import ScreenRecordingHeatmapIndexRequest
from ultracart.model.screen_recording_heatmap_index_response import ScreenRecordingHeatmapIndexResponse
from ultracart.model.screen_recording_heatmap_request import ScreenRecordingHeatmapRequest
from ultracart.model.screen_recording_heatmap_reset import ScreenRecordingHeatmapReset
from ultracart.model.screen_recording_heatmap_response import ScreenRecordingHeatmapResponse
from ultracart.model.screen_recording_merchant_notes_request import ScreenRecordingMerchantNotesRequest
from ultracart.model.screen_recording_page_view_data_response import ScreenRecordingPageViewDataResponse
from ultracart.model.screen_recording_query_request import ScreenRecordingQueryRequest
from ultracart.model.screen_recording_query_response import ScreenRecordingQueryResponse
from ultracart.model.screen_recording_response import ScreenRecordingResponse
from ultracart.model.screen_recording_segment import ScreenRecordingSegment
from ultracart.model.screen_recording_segment_response import ScreenRecordingSegmentResponse
from ultracart.model.screen_recording_segments_response import ScreenRecordingSegmentsResponse
from ultracart.model.screen_recording_settings import ScreenRecordingSettings
from ultracart.model.screen_recording_settings_response import ScreenRecordingSettingsResponse
from ultracart.model.screen_recording_tags_request import ScreenRecordingTagsRequest
from ultracart.model.screen_recording_tags_response import ScreenRecordingTagsResponse
from ultracart.model.screenshots_response import ScreenshotsResponse
from ultracart.model.store_fronts_response import StoreFrontsResponse
from ultracart.model.thumbnail_parameters_request import ThumbnailParametersRequest
from ultracart.model.thumbnail_parameters_response import ThumbnailParametersResponse
from ultracart.model.transaction_email import TransactionEmail
from ultracart.model.transaction_email_list_response import TransactionEmailListResponse
from ultracart.model.transaction_email_response import TransactionEmailResponse
from ultracart.model.twilio import Twilio
from ultracart.model.twilio_response import TwilioResponse
from ultracart.model.twilios_response import TwiliosResponse


class StorefrontApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    @classmethod
    def fromApiKey(cls, apiKey, verify_ssl = True, debug = False):
        config = Configuration()
        config.api_key['x-ultracart-simple-key'] = apiKey
        config.debug = debug
        config.verify_ssl = verify_ssl

        api_client = ApiClient(configuration=config, header_name='X-UltraCart-Api-Version', header_value='2017-03-01')
        return StorefrontApi(api_client)


    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.add_to_library_endpoint = _Endpoint(
            settings={
                'response_type': (LibraryItemResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/code_library',
                'operation_id': 'add_to_library',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'add_library_request',
                ],
                'required': [
                    'add_library_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'add_library_request':
                        (AddLibraryItemRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'add_library_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.apply_to_store_front_endpoint = _Endpoint(
            settings={
                'response_type': (ApplyLibraryItemResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/code_library/apply',
                'operation_id': 'apply_to_store_front',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'apply_library_request',
                ],
                'required': [
                    'apply_library_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'apply_library_request':
                        (ApplyLibraryItemRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'apply_library_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.archive_email_list_endpoint = _Endpoint(
            settings={
                'response_type': (EmailListArchiveResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/lists/{email_list_uuid}/archive',
                'operation_id': 'archive_email_list',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'email_list_uuid',
                ],
                'required': [
                    'storefront_oid',
                    'email_list_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'email_list_uuid':
                        (str,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'email_list_uuid': 'email_list_uuid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'email_list_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.archive_email_segment_endpoint = _Endpoint(
            settings={
                'response_type': (EmailSegmentArchiveResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/archive',
                'operation_id': 'archive_email_segment',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'email_segment_uuid',
                ],
                'required': [
                    'storefront_oid',
                    'email_segment_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'email_segment_uuid':
                        (str,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'email_segment_uuid': 'email_segment_uuid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'email_segment_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.back_populate_email_flow_endpoint = _Endpoint(
            settings={
                'response_type': (EmailFlowBackPopulateResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/flows/{email_flow_uuid}/backfill',
                'operation_id': 'back_populate_email_flow',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'email_flow_uuid',
                    'back_populate_request',
                ],
                'required': [
                    'storefront_oid',
                    'email_flow_uuid',
                    'back_populate_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'email_flow_uuid':
                        (str,),
                    'back_populate_request':
                        (EmailFlowBackPopulateRequest,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'email_flow_uuid': 'email_flow_uuid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'email_flow_uuid': 'path',
                    'back_populate_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.check_download_email_segment_endpoint = _Endpoint(
            settings={
                'response_type': (EmailSegmentDownloadPrepareResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/downloadPrepare/{email_segment_rebuild_uuid}',
                'operation_id': 'check_download_email_segment',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'email_segment_uuid',
                    'email_segment_rebuild_uuid',
                ],
                'required': [
                    'storefront_oid',
                    'email_segment_uuid',
                    'email_segment_rebuild_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'email_segment_uuid':
                        (str,),
                    'email_segment_rebuild_uuid':
                        (str,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'email_segment_uuid': 'email_segment_uuid',
                    'email_segment_rebuild_uuid': 'email_segment_rebuild_uuid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'email_segment_uuid': 'path',
                    'email_segment_rebuild_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.clone_email_campaign_endpoint = _Endpoint(
            settings={
                'response_type': (EmailCampaignResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}/clone',
                'operation_id': 'clone_email_campaign',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'email_campaign_uuid',
                    'target_storefront_oid',
                ],
                'required': [
                    'storefront_oid',
                    'email_campaign_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'email_campaign_uuid':
                        (str,),
                    'target_storefront_oid':
                        (int,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'email_campaign_uuid': 'email_campaign_uuid',
                    'target_storefront_oid': 'target_storefront_oid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'email_campaign_uuid': 'path',
                    'target_storefront_oid': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.clone_email_flow_endpoint = _Endpoint(
            settings={
                'response_type': (EmailFlowResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/flows/{email_flow_uuid}/clone',
                'operation_id': 'clone_email_flow',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'email_flow_uuid',
                    'target_storefront_oid',
                ],
                'required': [
                    'storefront_oid',
                    'email_flow_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'email_flow_uuid':
                        (str,),
                    'target_storefront_oid':
                        (int,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'email_flow_uuid': 'email_flow_uuid',
                    'target_storefront_oid': 'target_storefront_oid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'email_flow_uuid': 'path',
                    'target_storefront_oid': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.create_email_sending_domain_endpoint = _Endpoint(
            settings={
                'response_type': (EmailSendingDomainResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/email/sending_domains/{domain}/create',
                'operation_id': 'create_email_sending_domain',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'domain',
                ],
                'required': [
                    'domain',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'domain':
                        (str,),
                },
                'attribute_map': {
                    'domain': 'domain',
                },
                'location_map': {
                    'domain': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.create_email_sending_domain2_endpoint = _Endpoint(
            settings={
                'response_type': (EmailSendingDomainResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/email/sending_domains',
                'operation_id': 'create_email_sending_domain2',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'email_domain',
                ],
                'required': [
                    'email_domain',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'email_domain':
                        (EmailDomain,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'email_domain': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.create_fs_directory_endpoint = _Endpoint(
            settings={
                'response_type': (FileManagerPageResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{id}/fs/dir',
                'operation_id': 'create_fs_directory',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'name',
                    'parent_storefront_fs_directory_oid',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                    'name':
                        (str,),
                    'parent_storefront_fs_directory_oid':
                        (int,),
                },
                'attribute_map': {
                    'id': 'id',
                    'name': 'name',
                    'parent_storefront_fs_directory_oid': 'parent_storefront_fs_directory_oid',
                },
                'location_map': {
                    'id': 'path',
                    'name': 'query',
                    'parent_storefront_fs_directory_oid': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.create_twilio_account_endpoint = _Endpoint(
            settings={
                'response_type': (TwilioResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/twilio/accounts',
                'operation_id': 'create_twilio_account',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'twilio',
                ],
                'required': [
                    'twilio',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'twilio':
                        (Twilio,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'twilio': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.delete_email_campaign_folder_endpoint = _Endpoint(
            settings={
                'response_type': (BaseResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/campaign_folders/{email_campaign_folder_uuid}',
                'operation_id': 'delete_email_campaign_folder',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'email_campaign_folder_uuid',
                ],
                'required': [
                    'storefront_oid',
                    'email_campaign_folder_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'email_campaign_folder_uuid':
                        (str,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'email_campaign_folder_uuid': 'email_campaign_folder_uuid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'email_campaign_folder_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_email_commseq_stat_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/stat',
                'operation_id': 'delete_email_commseq_stat',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'commseq_uuid',
                ],
                'required': [
                    'storefront_oid',
                    'commseq_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'commseq_uuid':
                        (str,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'commseq_uuid': 'commseq_uuid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'commseq_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_email_email_endpoint = _Endpoint(
            settings={
                'response_type': (BaseResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}',
                'operation_id': 'delete_email_email',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'commseq_email_uuid',
                ],
                'required': [
                    'storefront_oid',
                    'commseq_email_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'commseq_email_uuid':
                        (str,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'commseq_email_uuid': 'commseq_email_uuid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'commseq_email_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_email_flow_folder_endpoint = _Endpoint(
            settings={
                'response_type': (BaseResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/flow_folders/{email_flow_folder_uuid}',
                'operation_id': 'delete_email_flow_folder',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'email_flow_folder_uuid',
                ],
                'required': [
                    'storefront_oid',
                    'email_flow_folder_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'email_flow_folder_uuid':
                        (str,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'email_flow_folder_uuid': 'email_flow_folder_uuid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'email_flow_folder_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_email_list_customer_endpoint = _Endpoint(
            settings={
                'response_type': (BaseResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/lists/{email_list_uuid}/customers/{email_customer_uuid}',
                'operation_id': 'delete_email_list_customer',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'email_list_uuid',
                    'email_customer_uuid',
                ],
                'required': [
                    'storefront_oid',
                    'email_list_uuid',
                    'email_customer_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'email_list_uuid':
                        (str,),
                    'email_customer_uuid':
                        (str,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'email_list_uuid': 'email_list_uuid',
                    'email_customer_uuid': 'email_customer_uuid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'email_list_uuid': 'path',
                    'email_customer_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_email_list_segment_folder_endpoint = _Endpoint(
            settings={
                'response_type': (BaseResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/list_segment_folders/{email_list_segment_folder_uuid}',
                'operation_id': 'delete_email_list_segment_folder',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'email_list_segment_folder_uuid',
                ],
                'required': [
                    'storefront_oid',
                    'email_list_segment_folder_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'email_list_segment_folder_uuid':
                        (str,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'email_list_segment_folder_uuid': 'email_list_segment_folder_uuid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'email_list_segment_folder_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_email_postcard_endpoint = _Endpoint(
            settings={
                'response_type': (BaseResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/postcards/{commseq_postcard_uuid}',
                'operation_id': 'delete_email_postcard',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'commseq_postcard_uuid',
                ],
                'required': [
                    'storefront_oid',
                    'commseq_postcard_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'commseq_postcard_uuid':
                        (str,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'commseq_postcard_uuid': 'commseq_postcard_uuid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'commseq_postcard_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_email_sending_domain_endpoint = _Endpoint(
            settings={
                'response_type': (BaseResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/email/sending_domains/{domain}',
                'operation_id': 'delete_email_sending_domain',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'domain',
                ],
                'required': [
                    'domain',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'domain':
                        (str,),
                },
                'attribute_map': {
                    'domain': 'domain',
                },
                'location_map': {
                    'domain': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_experiment_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/experiments/{storefront_experiment_oid}',
                'operation_id': 'delete_experiment',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'storefront_experiment_oid',
                ],
                'required': [
                    'storefront_oid',
                    'storefront_experiment_oid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'storefront_experiment_oid':
                        (int,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'storefront_experiment_oid': 'storefront_experiment_oid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'storefront_experiment_oid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_fs_file_endpoint = _Endpoint(
            settings={
                'response_type': (FileManagerPageResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{id}/fs/file',
                'operation_id': 'delete_fs_file',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'parent_storefront_fs_directory_oid',
                    'storefront_fs_file_oid',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                    'parent_storefront_fs_directory_oid':
                        (int,),
                    'storefront_fs_file_oid':
                        (int,),
                },
                'attribute_map': {
                    'id': 'id',
                    'parent_storefront_fs_directory_oid': 'parent_storefront_fs_directory_oid',
                    'storefront_fs_file_oid': 'storefront_fs_file_oid',
                },
                'location_map': {
                    'id': 'path',
                    'parent_storefront_fs_directory_oid': 'query',
                    'storefront_fs_file_oid': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_heatmap_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/screen_recordings/heatmap',
                'operation_id': 'delete_heatmap',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'query',
                ],
                'required': [
                    'storefront_oid',
                    'query',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'query':
                        (ScreenRecordingHeatmapReset,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'query': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.delete_library_item_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/code_library/{library_item_oid}',
                'operation_id': 'delete_library_item',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'library_item_oid',
                ],
                'required': [
                    'library_item_oid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'library_item_oid':
                        (int,),
                },
                'attribute_map': {
                    'library_item_oid': 'library_item_oid',
                },
                'location_map': {
                    'library_item_oid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_library_item_published_versions_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/code_library/{library_item_oid}/published_versions',
                'operation_id': 'delete_library_item_published_versions',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'library_item_oid',
                ],
                'required': [
                    'library_item_oid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'library_item_oid':
                        (int,),
                },
                'attribute_map': {
                    'library_item_oid': 'library_item_oid',
                },
                'location_map': {
                    'library_item_oid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_screen_recording_segment_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/screen_recordings/segments/{screen_recording_segment_oid}',
                'operation_id': 'delete_screen_recording_segment',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'screen_recording_segment_oid',
                ],
                'required': [
                    'storefront_oid',
                    'screen_recording_segment_oid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'screen_recording_segment_oid':
                        (int,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'screen_recording_segment_oid': 'screen_recording_segment_oid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'screen_recording_segment_oid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_twilio_account_endpoint = _Endpoint(
            settings={
                'response_type': (BaseResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/twilio/accounts/{esp_twilio_uuid}',
                'operation_id': 'delete_twilio_account',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'esp_twilio_uuid',
                ],
                'required': [
                    'esp_twilio_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'esp_twilio_uuid':
                        (str,),
                },
                'attribute_map': {
                    'esp_twilio_uuid': 'esp_twilio_uuid',
                },
                'location_map': {
                    'esp_twilio_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.duplicate_library_item_endpoint = _Endpoint(
            settings={
                'response_type': (LibraryItemResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/code_library/{library_item_oid}/duplicate',
                'operation_id': 'duplicate_library_item',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'library_item_oid',
                ],
                'required': [
                    'library_item_oid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'library_item_oid':
                        (int,),
                },
                'attribute_map': {
                    'library_item_oid': 'library_item_oid',
                },
                'location_map': {
                    'library_item_oid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.favorite_screen_recording_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/screen_recordings/{screen_recording_uuid}/favorite',
                'operation_id': 'favorite_screen_recording',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'screen_recording_uuid',
                ],
                'required': [
                    'storefront_oid',
                    'screen_recording_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'screen_recording_uuid':
                        (str,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'screen_recording_uuid': 'screen_recording_uuid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'screen_recording_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.geocode_address_endpoint = _Endpoint(
            settings={
                'response_type': (GeocodeResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/geocode',
                'operation_id': 'geocode_address',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'geocode_request',
                ],
                'required': [
                    'storefront_oid',
                    'geocode_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'geocode_request':
                        (GeocodeRequest,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'geocode_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.get_countries_endpoint = _Endpoint(
            settings={
                'response_type': (CountriesResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/countries',
                'operation_id': 'get_countries',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                ],
                'required': [
                    'storefront_oid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_editor_token_endpoint = _Endpoint(
            settings={
                'response_type': (EmailEditorTokenResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/editor_token',
                'operation_id': 'get_editor_token',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                ],
                'required': [
                    'storefront_oid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_email_base_templates_endpoint = _Endpoint(
            settings={
                'response_type': (EmailBaseTemplateListResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/baseTemplates',
                'operation_id': 'get_email_base_templates',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                ],
                'required': [
                    'storefront_oid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_email_campaign_endpoint = _Endpoint(
            settings={
                'response_type': (EmailCampaignResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}',
                'operation_id': 'get_email_campaign',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'email_campaign_uuid',
                ],
                'required': [
                    'storefront_oid',
                    'email_campaign_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'email_campaign_uuid':
                        (str,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'email_campaign_uuid': 'email_campaign_uuid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'email_campaign_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_email_campaign_folder_endpoint = _Endpoint(
            settings={
                'response_type': (EmailCampaignFolderResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/campaign_folders/{email_campaign_folder_uuid}',
                'operation_id': 'get_email_campaign_folder',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'email_campaign_folder_uuid',
                ],
                'required': [
                    'storefront_oid',
                    'email_campaign_folder_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'email_campaign_folder_uuid':
                        (str,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'email_campaign_folder_uuid': 'email_campaign_folder_uuid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'email_campaign_folder_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_email_campaign_folders_endpoint = _Endpoint(
            settings={
                'response_type': (EmailCampaignFoldersResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/campaign_folders',
                'operation_id': 'get_email_campaign_folders',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                ],
                'required': [
                    'storefront_oid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_email_campaign_screenshots_endpoint = _Endpoint(
            settings={
                'response_type': (ScreenshotsResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}/screenshots',
                'operation_id': 'get_email_campaign_screenshots',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'email_campaign_uuid',
                ],
                'required': [
                    'storefront_oid',
                    'email_campaign_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'email_campaign_uuid':
                        (str,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'email_campaign_uuid': 'email_campaign_uuid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'email_campaign_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_email_campaigns_endpoint = _Endpoint(
            settings={
                'response_type': (EmailCampaignsResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/campaigns',
                'operation_id': 'get_email_campaigns',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                ],
                'required': [
                    'storefront_oid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_email_campaigns_with_stats_endpoint = _Endpoint(
            settings={
                'response_type': (EmailCampaignsResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/campaignsWithStats/{stat_days}',
                'operation_id': 'get_email_campaigns_with_stats',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'stat_days',
                ],
                'required': [
                    'storefront_oid',
                    'stat_days',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'stat_days':
                        (str,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'stat_days': 'stat_days',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'stat_days': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_email_commseq_endpoint = _Endpoint(
            settings={
                'response_type': (EmailCommseqResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}',
                'operation_id': 'get_email_commseq',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'commseq_uuid',
                ],
                'required': [
                    'storefront_oid',
                    'commseq_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'commseq_uuid':
                        (str,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'commseq_uuid': 'commseq_uuid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'commseq_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_email_commseq_email_stats_endpoint = _Endpoint(
            settings={
                'response_type': (EmailStatSummaryResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/emailStats',
                'operation_id': 'get_email_commseq_email_stats',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'commseq_uuid',
                    'stats_request',
                ],
                'required': [
                    'storefront_oid',
                    'commseq_uuid',
                    'stats_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'commseq_uuid':
                        (str,),
                    'stats_request':
                        (EmailStatSummaryRequest,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'commseq_uuid': 'commseq_uuid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'commseq_uuid': 'path',
                    'stats_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.get_email_commseq_postcard_stats_endpoint = _Endpoint(
            settings={
                'response_type': (EmailStatPostcardSummaryResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/postcardStats',
                'operation_id': 'get_email_commseq_postcard_stats',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'commseq_uuid',
                    'stats_request',
                ],
                'required': [
                    'storefront_oid',
                    'commseq_uuid',
                    'stats_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'commseq_uuid':
                        (str,),
                    'stats_request':
                        (EmailStatPostcardSummaryRequest,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'commseq_uuid': 'commseq_uuid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'commseq_uuid': 'path',
                    'stats_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.get_email_commseq_postcard_tracking_endpoint = _Endpoint(
            settings={
                'response_type': (EmailPostcardTrackingResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/postcards/{commseq_postcard_uuid}/tracking',
                'operation_id': 'get_email_commseq_postcard_tracking',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'commseq_postcard_uuid',
                ],
                'required': [
                    'storefront_oid',
                    'commseq_postcard_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'commseq_postcard_uuid':
                        (str,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'commseq_postcard_uuid': 'commseq_postcard_uuid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'commseq_postcard_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_email_commseq_stat_overall_endpoint = _Endpoint(
            settings={
                'response_type': (EmailCommseqStatResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/stat',
                'operation_id': 'get_email_commseq_stat_overall',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'commseq_uuid',
                ],
                'required': [
                    'storefront_oid',
                    'commseq_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'commseq_uuid':
                        (str,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'commseq_uuid': 'commseq_uuid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'commseq_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_email_commseq_step_stats_endpoint = _Endpoint(
            settings={
                'response_type': (EmailStepStatResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/stepStats',
                'operation_id': 'get_email_commseq_step_stats',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'commseq_uuid',
                    'stats_request',
                ],
                'required': [
                    'storefront_oid',
                    'commseq_uuid',
                    'stats_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'commseq_uuid':
                        (str,),
                    'stats_request':
                        (EmailStepStatRequest,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'commseq_uuid': 'commseq_uuid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'commseq_uuid': 'path',
                    'stats_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.get_email_commseq_step_waiting_endpoint = _Endpoint(
            settings={
                'response_type': (EmailStepWaitingResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/waiting',
                'operation_id': 'get_email_commseq_step_waiting',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'commseq_uuid',
                    'waiting_request',
                ],
                'required': [
                    'storefront_oid',
                    'commseq_uuid',
                    'waiting_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'commseq_uuid':
                        (str,),
                    'waiting_request':
                        (EmailStepWaitingRequest,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'commseq_uuid': 'commseq_uuid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'commseq_uuid': 'path',
                    'waiting_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.get_email_commseq_webhook_editor_values_endpoint = _Endpoint(
            settings={
                'response_type': (EmailWebhookEditorValuesResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/webhookEditorValues',
                'operation_id': 'get_email_commseq_webhook_editor_values',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'commseq_uuid',
                ],
                'required': [
                    'storefront_oid',
                    'commseq_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'commseq_uuid':
                        (str,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'commseq_uuid': 'commseq_uuid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'commseq_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_email_commseqs_endpoint = _Endpoint(
            settings={
                'response_type': (EmailCommseqsResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/commseqs',
                'operation_id': 'get_email_commseqs',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                ],
                'required': [
                    'storefront_oid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_email_customer_editor_url_endpoint = _Endpoint(
            settings={
                'response_type': (EmailCustomerEditorUrlResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/customers/{email_customer_uuid}/editor_url',
                'operation_id': 'get_email_customer_editor_url',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'email_customer_uuid',
                ],
                'required': [
                    'storefront_oid',
                    'email_customer_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'email_customer_uuid':
                        (str,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'email_customer_uuid': 'email_customer_uuid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'email_customer_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_email_customers_endpoint = _Endpoint(
            settings={
                'response_type': (EmailCustomersResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/customers',
                'operation_id': 'get_email_customers',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'page_number',
                    'page_size',
                    'search_email_prefix',
                ],
                'required': [
                    'storefront_oid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'page_number':
                        (int,),
                    'page_size':
                        (int,),
                    'search_email_prefix':
                        (str,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'page_number': 'pageNumber',
                    'page_size': 'pageSize',
                    'search_email_prefix': 'searchEmailPrefix',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'page_number': 'query',
                    'page_size': 'query',
                    'search_email_prefix': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_email_dashboard_activity_endpoint = _Endpoint(
            settings={
                'response_type': (EmailDashboardActivityResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/dashboard_activity',
                'operation_id': 'get_email_dashboard_activity',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'last_records',
                ],
                'required': [
                    'storefront_oid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'last_records':
                        (int,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'last_records': 'last_records',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'last_records': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_email_dashboard_stats_endpoint = _Endpoint(
            settings={
                'response_type': (EmailDashboardStatsResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/dashboard_stats',
                'operation_id': 'get_email_dashboard_stats',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'days',
                ],
                'required': [
                    'storefront_oid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'days':
                        (int,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'days': 'days',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'days': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_email_dispatch_logs_endpoint = _Endpoint(
            settings={
                'response_type': (EmailCommseqStepLogsResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/steps/{commseq_step_uuid}/logs',
                'operation_id': 'get_email_dispatch_logs',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'commseq_uuid',
                    'commseq_step_uuid',
                ],
                'required': [
                    'storefront_oid',
                    'commseq_uuid',
                    'commseq_step_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'commseq_uuid':
                        (str,),
                    'commseq_step_uuid':
                        (str,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'commseq_uuid': 'commseq_uuid',
                    'commseq_step_uuid': 'commseq_step_uuid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'commseq_uuid': 'path',
                    'commseq_step_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_email_email_endpoint = _Endpoint(
            settings={
                'response_type': (EmailCommseqEmailResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}',
                'operation_id': 'get_email_email',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'commseq_email_uuid',
                ],
                'required': [
                    'storefront_oid',
                    'commseq_email_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'commseq_email_uuid':
                        (str,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'commseq_email_uuid': 'commseq_email_uuid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'commseq_email_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_email_email_clicks_endpoint = _Endpoint(
            settings={
                'response_type': (EmailClicksResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/steps/{commseq_step_uuid}/emails/{commseq_email_uuid}/clicks',
                'operation_id': 'get_email_email_clicks',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'commseq_uuid',
                    'commseq_step_uuid',
                    'commseq_email_uuid',
                    'days',
                ],
                'required': [
                    'storefront_oid',
                    'commseq_uuid',
                    'commseq_step_uuid',
                    'commseq_email_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'commseq_uuid':
                        (str,),
                    'commseq_step_uuid':
                        (str,),
                    'commseq_email_uuid':
                        (str,),
                    'days':
                        (int,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'commseq_uuid': 'commseq_uuid',
                    'commseq_step_uuid': 'commseq_step_uuid',
                    'commseq_email_uuid': 'commseq_email_uuid',
                    'days': 'days',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'commseq_uuid': 'path',
                    'commseq_step_uuid': 'path',
                    'commseq_email_uuid': 'path',
                    'days': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_email_email_customer_editor_url_endpoint = _Endpoint(
            settings={
                'response_type': (EmailCustomerEditorUrlResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}/orders/{order_id}/editor_url',
                'operation_id': 'get_email_email_customer_editor_url',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'commseq_email_uuid',
                    'order_id',
                ],
                'required': [
                    'storefront_oid',
                    'commseq_email_uuid',
                    'order_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'commseq_email_uuid':
                        (str,),
                    'order_id':
                        (str,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'commseq_email_uuid': 'commseq_email_uuid',
                    'order_id': 'order_id',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'commseq_email_uuid': 'path',
                    'order_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_email_email_orders_endpoint = _Endpoint(
            settings={
                'response_type': (EmailOrdersResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/steps/{commseq_step_uuid}/emails/{commseq_email_uuid}/orders',
                'operation_id': 'get_email_email_orders',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'commseq_uuid',
                    'commseq_step_uuid',
                    'commseq_email_uuid',
                    'days',
                ],
                'required': [
                    'storefront_oid',
                    'commseq_uuid',
                    'commseq_step_uuid',
                    'commseq_email_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'commseq_uuid':
                        (str,),
                    'commseq_step_uuid':
                        (str,),
                    'commseq_email_uuid':
                        (str,),
                    'days':
                        (int,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'commseq_uuid': 'commseq_uuid',
                    'commseq_step_uuid': 'commseq_step_uuid',
                    'commseq_email_uuid': 'commseq_email_uuid',
                    'days': 'days',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'commseq_uuid': 'path',
                    'commseq_step_uuid': 'path',
                    'commseq_email_uuid': 'path',
                    'days': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_email_emails_endpoint = _Endpoint(
            settings={
                'response_type': (EmailCommseqEmailsResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/emails',
                'operation_id': 'get_email_emails',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                ],
                'required': [
                    'storefront_oid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_email_emails_multiple_endpoint = _Endpoint(
            settings={
                'response_type': (EmailCommseqEmailsResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/emails/multiple',
                'operation_id': 'get_email_emails_multiple',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'email_commseq_emails_request',
                ],
                'required': [
                    'storefront_oid',
                    'email_commseq_emails_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'email_commseq_emails_request':
                        (EmailCommseqEmailsRequest,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'email_commseq_emails_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.get_email_flow_endpoint = _Endpoint(
            settings={
                'response_type': (EmailFlowResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/flows/{email_flow_uuid}',
                'operation_id': 'get_email_flow',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'email_flow_uuid',
                ],
                'required': [
                    'storefront_oid',
                    'email_flow_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'email_flow_uuid':
                        (str,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'email_flow_uuid': 'email_flow_uuid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'email_flow_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_email_flow_folder_endpoint = _Endpoint(
            settings={
                'response_type': (EmailFlowFolderResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/flow_folders/{email_flow_folder_uuid}',
                'operation_id': 'get_email_flow_folder',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'email_flow_folder_uuid',
                ],
                'required': [
                    'storefront_oid',
                    'email_flow_folder_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'email_flow_folder_uuid':
                        (str,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'email_flow_folder_uuid': 'email_flow_folder_uuid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'email_flow_folder_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_email_flow_folders_endpoint = _Endpoint(
            settings={
                'response_type': (EmailFlowFoldersResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/flow_folders',
                'operation_id': 'get_email_flow_folders',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                ],
                'required': [
                    'storefront_oid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_email_flow_screenshots_endpoint = _Endpoint(
            settings={
                'response_type': (ScreenshotsResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/flows/{email_flow_uuid}/screenshots',
                'operation_id': 'get_email_flow_screenshots',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'email_flow_uuid',
                ],
                'required': [
                    'storefront_oid',
                    'email_flow_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'email_flow_uuid':
                        (str,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'email_flow_uuid': 'email_flow_uuid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'email_flow_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_email_flows_endpoint = _Endpoint(
            settings={
                'response_type': (EmailFlowsResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/flows',
                'operation_id': 'get_email_flows',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                ],
                'required': [
                    'storefront_oid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_email_global_settings_endpoint = _Endpoint(
            settings={
                'response_type': (EmailGlobalSettingsResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/email/global_settings',
                'operation_id': 'get_email_global_settings',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_email_list_endpoint = _Endpoint(
            settings={
                'response_type': (EmailListResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/lists/{email_list_uuid}',
                'operation_id': 'get_email_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'email_list_uuid',
                ],
                'required': [
                    'storefront_oid',
                    'email_list_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'email_list_uuid':
                        (str,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'email_list_uuid': 'email_list_uuid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'email_list_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_email_list_customer_editor_url_endpoint = _Endpoint(
            settings={
                'response_type': (EmailCustomerEditorUrlResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/lists/{email_list_uuid}/customers/{email_customer_uuid}/editor_url',
                'operation_id': 'get_email_list_customer_editor_url',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'email_list_uuid',
                    'email_customer_uuid',
                ],
                'required': [
                    'storefront_oid',
                    'email_list_uuid',
                    'email_customer_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'email_list_uuid':
                        (str,),
                    'email_customer_uuid':
                        (str,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'email_list_uuid': 'email_list_uuid',
                    'email_customer_uuid': 'email_customer_uuid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'email_list_uuid': 'path',
                    'email_customer_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_email_list_customers_endpoint = _Endpoint(
            settings={
                'response_type': (EmailListCustomersResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/lists/{email_list_uuid}/customers',
                'operation_id': 'get_email_list_customers',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'email_list_uuid',
                    'page_number',
                    'page_size',
                ],
                'required': [
                    'storefront_oid',
                    'email_list_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'email_list_uuid':
                        (str,),
                    'page_number':
                        (int,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'email_list_uuid': 'email_list_uuid',
                    'page_number': 'pageNumber',
                    'page_size': 'pageSize',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'email_list_uuid': 'path',
                    'page_number': 'query',
                    'page_size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_email_list_segment_folder_endpoint = _Endpoint(
            settings={
                'response_type': (EmailListSegmentFolderResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/list_segment_folders/{email_list_segment_folder_uuid}',
                'operation_id': 'get_email_list_segment_folder',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'email_list_segment_folder_uuid',
                ],
                'required': [
                    'storefront_oid',
                    'email_list_segment_folder_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'email_list_segment_folder_uuid':
                        (str,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'email_list_segment_folder_uuid': 'email_list_segment_folder_uuid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'email_list_segment_folder_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_email_list_segment_folders_endpoint = _Endpoint(
            settings={
                'response_type': (EmailListSegmentFoldersResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/list_segment_folders',
                'operation_id': 'get_email_list_segment_folders',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                ],
                'required': [
                    'storefront_oid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_email_lists_endpoint = _Endpoint(
            settings={
                'response_type': (EmailListsResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/lists',
                'operation_id': 'get_email_lists',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                ],
                'required': [
                    'storefront_oid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_email_performance_endpoint = _Endpoint(
            settings={
                'response_type': (EmailPerformanceResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/performance',
                'operation_id': 'get_email_performance',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                ],
                'required': [
                    'storefront_oid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_email_plan_endpoint = _Endpoint(
            settings={
                'response_type': (EmailPlanResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/plan',
                'operation_id': 'get_email_plan',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                ],
                'required': [
                    'storefront_oid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_email_postcard_endpoint = _Endpoint(
            settings={
                'response_type': (EmailCommseqPostcardResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/postcards/{commseq_postcard_uuid}',
                'operation_id': 'get_email_postcard',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'commseq_postcard_uuid',
                ],
                'required': [
                    'storefront_oid',
                    'commseq_postcard_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'commseq_postcard_uuid':
                        (str,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'commseq_postcard_uuid': 'commseq_postcard_uuid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'commseq_postcard_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_email_postcards_endpoint = _Endpoint(
            settings={
                'response_type': (EmailCommseqPostcardsResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/postcards',
                'operation_id': 'get_email_postcards',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                ],
                'required': [
                    'storefront_oid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_email_postcards_multiple_endpoint = _Endpoint(
            settings={
                'response_type': (EmailCommseqPostcardsResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/postcards/multiple',
                'operation_id': 'get_email_postcards_multiple',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'email_commseq_postcards_request',
                ],
                'required': [
                    'storefront_oid',
                    'email_commseq_postcards_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'email_commseq_postcards_request':
                        (EmailCommseqPostcardsRequest,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'email_commseq_postcards_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.get_email_segment_endpoint = _Endpoint(
            settings={
                'response_type': (EmailSegmentResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/segments/{email_segment_uuid}',
                'operation_id': 'get_email_segment',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'email_segment_uuid',
                ],
                'required': [
                    'storefront_oid',
                    'email_segment_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'email_segment_uuid':
                        (str,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'email_segment_uuid': 'email_segment_uuid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'email_segment_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_email_segment_customer_editor_url_endpoint = _Endpoint(
            settings={
                'response_type': (EmailCustomerEditorUrlResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/customers/{email_customer_uuid}/editor_url',
                'operation_id': 'get_email_segment_customer_editor_url',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'email_segment_uuid',
                    'email_customer_uuid',
                ],
                'required': [
                    'storefront_oid',
                    'email_segment_uuid',
                    'email_customer_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'email_segment_uuid':
                        (str,),
                    'email_customer_uuid':
                        (str,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'email_segment_uuid': 'email_segment_uuid',
                    'email_customer_uuid': 'email_customer_uuid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'email_segment_uuid': 'path',
                    'email_customer_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_email_segment_customers_endpoint = _Endpoint(
            settings={
                'response_type': (EmailSegmentCustomersResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/customers',
                'operation_id': 'get_email_segment_customers',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'email_segment_uuid',
                    'page_number',
                    'page_size',
                ],
                'required': [
                    'storefront_oid',
                    'email_segment_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'email_segment_uuid':
                        (str,),
                    'page_number':
                        (int,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'email_segment_uuid': 'email_segment_uuid',
                    'page_number': 'pageNumber',
                    'page_size': 'pageSize',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'email_segment_uuid': 'path',
                    'page_number': 'query',
                    'page_size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_email_segments_endpoint = _Endpoint(
            settings={
                'response_type': (EmailSegmentsResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/segments',
                'operation_id': 'get_email_segments',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                ],
                'required': [
                    'storefront_oid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_email_sending_domain_endpoint = _Endpoint(
            settings={
                'response_type': (EmailSendingDomainResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/email/sending_domain/{domain}',
                'operation_id': 'get_email_sending_domain',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'domain',
                ],
                'required': [
                    'domain',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'domain':
                        (str,),
                },
                'attribute_map': {
                    'domain': 'domain',
                },
                'location_map': {
                    'domain': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_email_sending_domain_status_endpoint = _Endpoint(
            settings={
                'response_type': (EmailSendingDomainResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/email/sending_domains/{domain}/status',
                'operation_id': 'get_email_sending_domain_status',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'domain',
                ],
                'required': [
                    'domain',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'domain':
                        (str,),
                },
                'attribute_map': {
                    'domain': 'domain',
                },
                'location_map': {
                    'domain': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_email_sending_domains_endpoint = _Endpoint(
            settings={
                'response_type': (EmailSendingDomainsResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/email/sending_domains',
                'operation_id': 'get_email_sending_domains',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_email_settings_endpoint = _Endpoint(
            settings={
                'response_type': (EmailSettingsResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/settings',
                'operation_id': 'get_email_settings',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                ],
                'required': [
                    'storefront_oid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_email_template_endpoint = _Endpoint(
            settings={
                'response_type': (EmailTemplate,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/templates/{email_template_oid}',
                'operation_id': 'get_email_template',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'email_template_oid',
                ],
                'required': [
                    'storefront_oid',
                    'email_template_oid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'email_template_oid':
                        (int,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'email_template_oid': 'email_template_oid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'email_template_oid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_email_templates_endpoint = _Endpoint(
            settings={
                'response_type': (EmailTemplatesResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/templates',
                'operation_id': 'get_email_templates',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'trigger_type',
                ],
                'required': [
                    'storefront_oid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'trigger_type':
                        (str,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'trigger_type': 'trigger_type',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'trigger_type': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_email_third_party_providers_endpoint = _Endpoint(
            settings={
                'response_type': (EmailThirdPartyProvidersResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/third_party_providers',
                'operation_id': 'get_email_third_party_providers',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                ],
                'required': [
                    'storefront_oid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_experiments_endpoint = _Endpoint(
            settings={
                'response_type': (ExperimentsResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/experiments',
                'operation_id': 'get_experiments',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                ],
                'required': [
                    'storefront_oid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_fs_directory_endpoint = _Endpoint(
            settings={
                'response_type': (FileManagerPageResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{id}/fs/dir',
                'operation_id': 'get_fs_directory',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'path',
                    'storefront_fs_directory_oid',
                    'storefront_theme_oid',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                    'path':
                        (str,),
                    'storefront_fs_directory_oid':
                        (int,),
                    'storefront_theme_oid':
                        (int,),
                },
                'attribute_map': {
                    'id': 'id',
                    'path': 'path',
                    'storefront_fs_directory_oid': 'storefront_fs_directory_oid',
                    'storefront_theme_oid': 'storefront_theme_oid',
                },
                'location_map': {
                    'id': 'path',
                    'path': 'query',
                    'storefront_fs_directory_oid': 'query',
                    'storefront_theme_oid': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_heatmap_endpoint = _Endpoint(
            settings={
                'response_type': (ScreenRecordingHeatmapResponse,),
                'auth': [
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/screen_recordings/heatmap',
                'operation_id': 'get_heatmap',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'query',
                ],
                'required': [
                    'storefront_oid',
                    'query',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'query':
                        (ScreenRecordingHeatmapRequest,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'query': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.get_heatmap_index_endpoint = _Endpoint(
            settings={
                'response_type': (ScreenRecordingHeatmapIndexResponse,),
                'auth': [
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/screen_recordings/heatmap/index',
                'operation_id': 'get_heatmap_index',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'query',
                    'limit',
                    'offset',
                    'sort',
                ],
                'required': [
                    'storefront_oid',
                    'query',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'query':
                        (ScreenRecordingHeatmapIndexRequest,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                    'sort':
                        (str,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'limit': '_limit',
                    'offset': '_offset',
                    'sort': '_sort',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'query': 'body',
                    'limit': 'query',
                    'offset': 'query',
                    'sort': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.get_histogram_property_names_endpoint = _Endpoint(
            settings={
                'response_type': (EmailHistogramPropertyNamesResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/histogram/property_names',
                'operation_id': 'get_histogram_property_names',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'property_type',
                ],
                'required': [
                    'storefront_oid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'property_type':
                        (str,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'property_type': 'property_type',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'property_type': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_histogram_property_values_endpoint = _Endpoint(
            settings={
                'response_type': (EmailHistogramPropertyValuesResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/histogram/property_values',
                'operation_id': 'get_histogram_property_values',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'property_name',
                    'property_type',
                    'limit',
                ],
                'required': [
                    'storefront_oid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'property_name':
                        (str,),
                    'property_type':
                        (str,),
                    'limit':
                        (int,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'property_name': 'property_name',
                    'property_type': 'property_type',
                    'limit': 'limit',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'property_name': 'query',
                    'property_type': 'query',
                    'limit': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_library_filter_values_endpoint = _Endpoint(
            settings={
                'response_type': (LibraryFilterValuesResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/code_library/filter_values',
                'operation_id': 'get_library_filter_values',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_library_item_endpoint = _Endpoint(
            settings={
                'response_type': (LibraryItemResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/code_library/{library_item_oid}',
                'operation_id': 'get_library_item',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'library_item_oid',
                ],
                'required': [
                    'library_item_oid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'library_item_oid':
                        (int,),
                },
                'attribute_map': {
                    'library_item_oid': 'library_item_oid',
                },
                'location_map': {
                    'library_item_oid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_library_item_published_versions_endpoint = _Endpoint(
            settings={
                'response_type': (LibraryItemsResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/code_library/{library_item_oid}/published_versions',
                'operation_id': 'get_library_item_published_versions',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'library_item_oid',
                ],
                'required': [
                    'library_item_oid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'library_item_oid':
                        (int,),
                },
                'attribute_map': {
                    'library_item_oid': 'library_item_oid',
                },
                'location_map': {
                    'library_item_oid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_screen_recording_endpoint = _Endpoint(
            settings={
                'response_type': (ScreenRecordingResponse,),
                'auth': [
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/screen_recordings/{screen_recording_uuid}',
                'operation_id': 'get_screen_recording',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'screen_recording_uuid',
                ],
                'required': [
                    'storefront_oid',
                    'screen_recording_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'screen_recording_uuid':
                        (str,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'screen_recording_uuid': 'screen_recording_uuid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'screen_recording_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_screen_recording_page_view_data_endpoint = _Endpoint(
            settings={
                'response_type': (ScreenRecordingPageViewDataResponse,),
                'auth': [
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/screen_recordings/{screen_recording_uuid}/page_view_data/{screen_recording_page_view_uuid}',
                'operation_id': 'get_screen_recording_page_view_data',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'screen_recording_uuid',
                    'screen_recording_page_view_uuid',
                ],
                'required': [
                    'storefront_oid',
                    'screen_recording_uuid',
                    'screen_recording_page_view_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'screen_recording_uuid':
                        (str,),
                    'screen_recording_page_view_uuid':
                        (str,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'screen_recording_uuid': 'screen_recording_uuid',
                    'screen_recording_page_view_uuid': 'screen_recording_page_view_uuid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'screen_recording_uuid': 'path',
                    'screen_recording_page_view_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_screen_recording_segment_endpoint = _Endpoint(
            settings={
                'response_type': (ScreenRecordingSegmentResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/screen_recordings/segments/{screen_recording_segment_oid}',
                'operation_id': 'get_screen_recording_segment',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'screen_recording_segment_oid',
                ],
                'required': [
                    'storefront_oid',
                    'screen_recording_segment_oid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'screen_recording_segment_oid':
                        (int,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'screen_recording_segment_oid': 'screen_recording_segment_oid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'screen_recording_segment_oid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_screen_recording_segments_endpoint = _Endpoint(
            settings={
                'response_type': (ScreenRecordingSegmentsResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/screen_recordings/segments',
                'operation_id': 'get_screen_recording_segments',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                ],
                'required': [
                    'storefront_oid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_screen_recording_settings_endpoint = _Endpoint(
            settings={
                'response_type': (ScreenRecordingSettingsResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/screen_recordings/settings',
                'operation_id': 'get_screen_recording_settings',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                ],
                'required': [
                    'storefront_oid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_screen_recording_tags_endpoint = _Endpoint(
            settings={
                'response_type': (ScreenRecordingTagsResponse,),
                'auth': [
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/screen_recordings/tags',
                'operation_id': 'get_screen_recording_tags',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                ],
                'required': [
                    'storefront_oid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_screen_recordings_by_query_endpoint = _Endpoint(
            settings={
                'response_type': (ScreenRecordingQueryResponse,),
                'auth': [
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/screen_recordings/query',
                'operation_id': 'get_screen_recordings_by_query',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'query',
                    'limit',
                    'offset',
                    'sort',
                ],
                'required': [
                    'storefront_oid',
                    'query',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'query':
                        (ScreenRecordingQueryRequest,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                    'sort':
                        (str,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'limit': '_limit',
                    'offset': '_offset',
                    'sort': '_sort',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'query': 'body',
                    'limit': 'query',
                    'offset': 'query',
                    'sort': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.get_screen_recordings_by_segment_endpoint = _Endpoint(
            settings={
                'response_type': (ScreenRecordingQueryResponse,),
                'auth': [
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/screen_recordings/segments/{screen_recording_segment_oid}/query',
                'operation_id': 'get_screen_recordings_by_segment',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'screen_recording_segment_oid',
                    'limit',
                    'offset',
                    'sort',
                ],
                'required': [
                    'storefront_oid',
                    'screen_recording_segment_oid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'screen_recording_segment_oid':
                        (int,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                    'sort':
                        (str,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'screen_recording_segment_oid': 'screen_recording_segment_oid',
                    'limit': '_limit',
                    'offset': '_offset',
                    'sort': '_sort',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'screen_recording_segment_oid': 'path',
                    'limit': 'query',
                    'offset': 'query',
                    'sort': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_store_front_pricing_tiers_endpoint = _Endpoint(
            settings={
                'response_type': (PricingTiersResponse,),
                'auth': [
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/pricing_tiers',
                'operation_id': 'get_store_front_pricing_tiers',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'expand',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'expand':
                        (str,),
                },
                'attribute_map': {
                    'expand': '_expand',
                },
                'location_map': {
                    'expand': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_store_fronts_endpoint = _Endpoint(
            settings={
                'response_type': (StoreFrontsResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront',
                'operation_id': 'get_store_fronts',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_thumbnail_parameters_endpoint = _Endpoint(
            settings={
                'response_type': (ThumbnailParametersResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/thumbnailParameters',
                'operation_id': 'get_thumbnail_parameters',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'thumbnail_parameters',
                ],
                'required': [
                    'thumbnail_parameters',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'thumbnail_parameters':
                        (ThumbnailParametersRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'thumbnail_parameters': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.get_transaction_email_endpoint = _Endpoint(
            settings={
                'response_type': (TransactionEmailResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/transaction_email/list/{email_id}',
                'operation_id': 'get_transaction_email',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'email_id',
                ],
                'required': [
                    'storefront_oid',
                    'email_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'email_id':
                        (str,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'email_id': 'email_id',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'email_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_transaction_email_list_endpoint = _Endpoint(
            settings={
                'response_type': (TransactionEmailListResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/transaction_email/list',
                'operation_id': 'get_transaction_email_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                ],
                'required': [
                    'storefront_oid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_transaction_email_screenshots_endpoint = _Endpoint(
            settings={
                'response_type': (ScreenshotsResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/transaction_email/list/{email_id}/screenshots',
                'operation_id': 'get_transaction_email_screenshots',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'email_id',
                ],
                'required': [
                    'storefront_oid',
                    'email_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'email_id':
                        (str,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'email_id': 'email_id',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'email_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_twilio_account_endpoint = _Endpoint(
            settings={
                'response_type': (TwilioResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/twilio/accounts/{esp_twilio_uuid}',
                'operation_id': 'get_twilio_account',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'esp_twilio_uuid',
                ],
                'required': [
                    'esp_twilio_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'esp_twilio_uuid':
                        (str,),
                },
                'attribute_map': {
                    'esp_twilio_uuid': 'esp_twilio_uuid',
                },
                'location_map': {
                    'esp_twilio_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_twilio_accounts_endpoint = _Endpoint(
            settings={
                'response_type': (TwiliosResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/twilio/accounts',
                'operation_id': 'get_twilio_accounts',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_upload_fs_file_url_endpoint = _Endpoint(
            settings={
                'response_type': (FileManagerUploadUrlResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{id}/fs/upload_url/{extension}',
                'operation_id': 'get_upload_fs_file_url',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'extension',
                ],
                'required': [
                    'id',
                    'extension',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                    'extension':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'extension': 'extension',
                },
                'location_map': {
                    'id': 'path',
                    'extension': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.global_unsubscribe_endpoint = _Endpoint(
            settings={
                'response_type': (EmailGlobalUnsubscribeResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/globalUnsubscribe',
                'operation_id': 'global_unsubscribe',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'unsubscribe',
                ],
                'required': [
                    'storefront_oid',
                    'unsubscribe',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'unsubscribe':
                        (EmailGlobalUnsubscribeRequest,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'unsubscribe': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.import_email_third_party_provider_list_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/third_party_providers/import',
                'operation_id': 'import_email_third_party_provider_list',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'import_request',
                ],
                'required': [
                    'storefront_oid',
                    'import_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'import_request':
                        (EmailThirdPartyListImportRequest,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'import_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.insert_email_campaign_endpoint = _Endpoint(
            settings={
                'response_type': (EmailCampaignResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/campaigns',
                'operation_id': 'insert_email_campaign',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'email_campaign',
                ],
                'required': [
                    'storefront_oid',
                    'email_campaign',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'email_campaign':
                        (EmailCampaign,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'email_campaign': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.insert_email_campaign_folder_endpoint = _Endpoint(
            settings={
                'response_type': (EmailCampaignFolderResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/campaign_folders',
                'operation_id': 'insert_email_campaign_folder',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'email_campaign_folder',
                ],
                'required': [
                    'storefront_oid',
                    'email_campaign_folder',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'email_campaign_folder':
                        (EmailCampaignFolder,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'email_campaign_folder': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.insert_email_commseq_endpoint = _Endpoint(
            settings={
                'response_type': (EmailCommseqResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/commseqs',
                'operation_id': 'insert_email_commseq',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'email_commseq',
                ],
                'required': [
                    'storefront_oid',
                    'email_commseq',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'email_commseq':
                        (EmailCommseq,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'email_commseq': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.insert_email_email_endpoint = _Endpoint(
            settings={
                'response_type': (EmailCommseqEmailResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/emails',
                'operation_id': 'insert_email_email',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'email_commseq_email',
                ],
                'required': [
                    'storefront_oid',
                    'email_commseq_email',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'email_commseq_email':
                        (EmailCommseqEmail,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'email_commseq_email': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.insert_email_flow_endpoint = _Endpoint(
            settings={
                'response_type': (EmailFlowResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/flows',
                'operation_id': 'insert_email_flow',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'email_flow',
                ],
                'required': [
                    'storefront_oid',
                    'email_flow',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'email_flow':
                        (EmailFlow,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'email_flow': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.insert_email_flow_folder_endpoint = _Endpoint(
            settings={
                'response_type': (EmailFlowFolderResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/flow_folders',
                'operation_id': 'insert_email_flow_folder',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'email_flow_folder',
                ],
                'required': [
                    'storefront_oid',
                    'email_flow_folder',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'email_flow_folder':
                        (EmailFlowFolder,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'email_flow_folder': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.insert_email_list_endpoint = _Endpoint(
            settings={
                'response_type': (EmailListResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/lists',
                'operation_id': 'insert_email_list',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'email_list',
                ],
                'required': [
                    'storefront_oid',
                    'email_list',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'email_list':
                        (EmailList,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'email_list': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.insert_email_list_segment_folder_endpoint = _Endpoint(
            settings={
                'response_type': (EmailListSegmentFolderResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/list_segment_folders',
                'operation_id': 'insert_email_list_segment_folder',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'email_list_segment_folder',
                ],
                'required': [
                    'storefront_oid',
                    'email_list_segment_folder',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'email_list_segment_folder':
                        (EmailListSegmentFolder,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'email_list_segment_folder': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.insert_email_postcard_endpoint = _Endpoint(
            settings={
                'response_type': (EmailCommseqPostcardResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/postcards',
                'operation_id': 'insert_email_postcard',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'email_commseq_postcard',
                ],
                'required': [
                    'storefront_oid',
                    'email_commseq_postcard',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'email_commseq_postcard':
                        (EmailCommseqPostcard,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'email_commseq_postcard': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.insert_email_segment_endpoint = _Endpoint(
            settings={
                'response_type': (EmailSegmentResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/segments',
                'operation_id': 'insert_email_segment',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'email_segment',
                ],
                'required': [
                    'storefront_oid',
                    'email_segment',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'email_segment':
                        (EmailSegment,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'email_segment': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.insert_screen_recording_segment_endpoint = _Endpoint(
            settings={
                'response_type': (ScreenRecordingSegmentResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/screen_recordings/segments',
                'operation_id': 'insert_screen_recording_segment',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'segment',
                ],
                'required': [
                    'storefront_oid',
                    'segment',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'segment':
                        (ScreenRecordingSegment,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'segment': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.prepare_download_email_segment_endpoint = _Endpoint(
            settings={
                'response_type': (EmailSegmentDownloadPrepareResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/downloadPrepare',
                'operation_id': 'prepare_download_email_segment',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'email_segment_uuid',
                ],
                'required': [
                    'storefront_oid',
                    'email_segment_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'email_segment_uuid':
                        (str,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'email_segment_uuid': 'email_segment_uuid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'email_segment_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.publish_library_item_endpoint = _Endpoint(
            settings={
                'response_type': (LibraryItemResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/code_library/{library_item_oid}/publish',
                'operation_id': 'publish_library_item',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'library_item_oid',
                    'publish_library_request',
                ],
                'required': [
                    'library_item_oid',
                    'publish_library_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'library_item_oid':
                        (int,),
                    'publish_library_request':
                        (PublishLibraryItemRequest,),
                },
                'attribute_map': {
                    'library_item_oid': 'library_item_oid',
                },
                'location_map': {
                    'library_item_oid': 'path',
                    'publish_library_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.purchase_library_item_endpoint = _Endpoint(
            settings={
                'response_type': (LibraryItemResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/code_library/{library_item_oid}/purchase',
                'operation_id': 'purchase_library_item',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'library_item_oid',
                    'storefront_oid',
                ],
                'required': [
                    'library_item_oid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'library_item_oid':
                        (int,),
                    'storefront_oid':
                        (int,),
                },
                'attribute_map': {
                    'library_item_oid': 'library_item_oid',
                    'storefront_oid': 'storefront_oid',
                },
                'location_map': {
                    'library_item_oid': 'path',
                    'storefront_oid': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.release_email_commseq_step_waiting_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/waiting/{commseq_step_uuid}',
                'operation_id': 'release_email_commseq_step_waiting',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'commseq_uuid',
                    'commseq_step_uuid',
                ],
                'required': [
                    'storefront_oid',
                    'commseq_uuid',
                    'commseq_step_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'commseq_uuid':
                        (str,),
                    'commseq_step_uuid':
                        (str,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'commseq_uuid': 'commseq_uuid',
                    'commseq_step_uuid': 'commseq_step_uuid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'commseq_uuid': 'path',
                    'commseq_step_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.review_endpoint = _Endpoint(
            settings={
                'response_type': (EmailCommseqEmailSendTestResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}/review',
                'operation_id': 'review',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'commseq_email_uuid',
                    'email_commseq_email_review_request',
                ],
                'required': [
                    'storefront_oid',
                    'commseq_email_uuid',
                    'email_commseq_email_review_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'commseq_email_uuid':
                        (str,),
                    'email_commseq_email_review_request':
                        (EmailCommseqEmailSendTestRequest,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'commseq_email_uuid': 'commseq_email_uuid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'commseq_email_uuid': 'path',
                    'email_commseq_email_review_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.search_endpoint = _Endpoint(
            settings={
                'response_type': (LookupResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/search',
                'operation_id': 'search',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'category',
                    'matches',
                    'storefront_oid',
                    'max_hits',
                    'subcategory',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'category':
                        (str,),
                    'matches':
                        (str,),
                    'storefront_oid':
                        (str,),
                    'max_hits':
                        (int,),
                    'subcategory':
                        (str,),
                },
                'attribute_map': {
                    'category': 'category',
                    'matches': 'matches',
                    'storefront_oid': 'storefront_oid',
                    'max_hits': 'max_hits',
                    'subcategory': 'subcategory',
                },
                'location_map': {
                    'category': 'query',
                    'matches': 'query',
                    'storefront_oid': 'query',
                    'max_hits': 'query',
                    'subcategory': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.search2_endpoint = _Endpoint(
            settings={
                'response_type': (LookupResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/search',
                'operation_id': 'search2',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'lookup_request',
                ],
                'required': [
                    'lookup_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'lookup_request':
                        (LookupRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'lookup_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.search_email_list_customers_endpoint = _Endpoint(
            settings={
                'response_type': (EmailListCustomersResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/lists/{email_list_uuid}/search',
                'operation_id': 'search_email_list_customers',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'email_list_uuid',
                    'starts_with',
                ],
                'required': [
                    'storefront_oid',
                    'email_list_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'email_list_uuid':
                        (str,),
                    'starts_with':
                        (str,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'email_list_uuid': 'email_list_uuid',
                    'starts_with': 'startsWith',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'email_list_uuid': 'path',
                    'starts_with': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.search_email_segment_customers_endpoint = _Endpoint(
            settings={
                'response_type': (EmailSegmentCustomersResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/search',
                'operation_id': 'search_email_segment_customers',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'email_segment_uuid',
                    'starts_with',
                ],
                'required': [
                    'storefront_oid',
                    'email_segment_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'email_segment_uuid':
                        (str,),
                    'starts_with':
                        (str,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'email_segment_uuid': 'email_segment_uuid',
                    'starts_with': 'startsWith',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'email_segment_uuid': 'path',
                    'starts_with': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.search_library_items_endpoint = _Endpoint(
            settings={
                'response_type': (LibraryItemsResponse,),
                'auth': [
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/code_library/search',
                'operation_id': 'search_library_items',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'item_query',
                    'limit',
                    'offset',
                    'sort',
                ],
                'required': [
                    'item_query',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'item_query':
                        (LibraryItemQuery,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                    'sort':
                        (str,),
                },
                'attribute_map': {
                    'limit': '_limit',
                    'offset': '_offset',
                    'sort': '_sort',
                },
                'location_map': {
                    'item_query': 'body',
                    'limit': 'query',
                    'offset': 'query',
                    'sort': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.search_published_items_endpoint = _Endpoint(
            settings={
                'response_type': (LibraryItemsResponse,),
                'auth': [
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/code_library/search_published',
                'operation_id': 'search_published_items',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'item_query',
                    'limit',
                    'offset',
                    'sort',
                ],
                'required': [
                    'item_query',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'item_query':
                        (LibraryItemQuery,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                    'sort':
                        (str,),
                },
                'attribute_map': {
                    'limit': '_limit',
                    'offset': '_offset',
                    'sort': '_sort',
                },
                'location_map': {
                    'item_query': 'body',
                    'limit': 'query',
                    'offset': 'query',
                    'sort': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.search_review_items_endpoint = _Endpoint(
            settings={
                'response_type': (LibraryItemsResponse,),
                'auth': [
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/code_library/search_review',
                'operation_id': 'search_review_items',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'item_query',
                    'limit',
                    'offset',
                    'sort',
                ],
                'required': [
                    'item_query',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'item_query':
                        (LibraryItemQuery,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                    'sort':
                        (str,),
                },
                'attribute_map': {
                    'limit': '_limit',
                    'offset': '_offset',
                    'sort': '_sort',
                },
                'location_map': {
                    'item_query': 'body',
                    'limit': 'query',
                    'offset': 'query',
                    'sort': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.search_shared_items_endpoint = _Endpoint(
            settings={
                'response_type': (LibraryItemsResponse,),
                'auth': [
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/code_library/search_shared',
                'operation_id': 'search_shared_items',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'item_query',
                    'limit',
                    'offset',
                    'sort',
                ],
                'required': [
                    'item_query',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'item_query':
                        (LibraryItemQuery,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                    'sort':
                        (str,),
                },
                'attribute_map': {
                    'limit': '_limit',
                    'offset': '_offset',
                    'sort': '_sort',
                },
                'location_map': {
                    'item_query': 'body',
                    'limit': 'query',
                    'offset': 'query',
                    'sort': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.send_email_test_endpoint = _Endpoint(
            settings={
                'response_type': (EmailCommseqEmailSendTestResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}/test',
                'operation_id': 'send_email_test',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'commseq_email_uuid',
                    'email_commseq_email_test_request',
                ],
                'required': [
                    'storefront_oid',
                    'commseq_email_uuid',
                    'email_commseq_email_test_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'commseq_email_uuid':
                        (str,),
                    'email_commseq_email_test_request':
                        (EmailCommseqEmailSendTestRequest,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'commseq_email_uuid': 'commseq_email_uuid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'commseq_email_uuid': 'path',
                    'email_commseq_email_test_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.send_postcard_test_endpoint = _Endpoint(
            settings={
                'response_type': (EmailCommseqPostcardSendTestResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/postcards/{commseq_postcard_uuid}/test',
                'operation_id': 'send_postcard_test',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'commseq_postcard_uuid',
                    'email_commseq_postcard_test_request',
                ],
                'required': [
                    'storefront_oid',
                    'commseq_postcard_uuid',
                    'email_commseq_postcard_test_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'commseq_postcard_uuid':
                        (str,),
                    'email_commseq_postcard_test_request':
                        (EmailCommseqPostcardSendTestRequest,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'commseq_postcard_uuid': 'commseq_postcard_uuid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'commseq_postcard_uuid': 'path',
                    'email_commseq_postcard_test_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.send_sms_test_endpoint = _Endpoint(
            settings={
                'response_type': (EmailCommseqSmsSendTestResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/sms/{commseq_uuid}/{commseq_step_uuid}/test',
                'operation_id': 'send_sms_test',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'commseq_uuid',
                    'commseq_step_uuid',
                    'email_commseq_sms_test_request',
                ],
                'required': [
                    'storefront_oid',
                    'commseq_uuid',
                    'commseq_step_uuid',
                    'email_commseq_sms_test_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'commseq_uuid':
                        (str,),
                    'commseq_step_uuid':
                        (str,),
                    'email_commseq_sms_test_request':
                        (EmailCommseqSmsSendTestRequest,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'commseq_uuid': 'commseq_uuid',
                    'commseq_step_uuid': 'commseq_step_uuid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'commseq_uuid': 'path',
                    'commseq_step_uuid': 'path',
                    'email_commseq_sms_test_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.send_webhook_test_endpoint = _Endpoint(
            settings={
                'response_type': (EmailCommseqWebhookSendTestResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/webhooks/test',
                'operation_id': 'send_webhook_test',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'email_commseq_webhook_test_request',
                ],
                'required': [
                    'storefront_oid',
                    'email_commseq_webhook_test_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'email_commseq_webhook_test_request':
                        (EmailCommseqWebhookSendTestRequest,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'email_commseq_webhook_test_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.sequence_test_endpoint = _Endpoint(
            settings={
                'response_type': (EmailCommseqSequenceTestResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/test',
                'operation_id': 'sequence_test',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'commseq_uuid',
                    'email_commseq_sequence_test_request',
                ],
                'required': [
                    'storefront_oid',
                    'commseq_uuid',
                    'email_commseq_sequence_test_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'commseq_uuid':
                        (str,),
                    'email_commseq_sequence_test_request':
                        (EmailCommseqSequenceTestRequest,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'commseq_uuid': 'commseq_uuid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'commseq_uuid': 'path',
                    'email_commseq_sequence_test_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.start_email_campaign_endpoint = _Endpoint(
            settings={
                'response_type': (BaseResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}/start',
                'operation_id': 'start_email_campaign',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'email_campaign_uuid',
                ],
                'required': [
                    'storefront_oid',
                    'email_campaign_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'email_campaign_uuid':
                        (str,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'email_campaign_uuid': 'email_campaign_uuid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'email_campaign_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.subscribe_to_email_list_endpoint = _Endpoint(
            settings={
                'response_type': (EmailListSubscribeResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/lists/{email_list_uuid}/subscribe',
                'operation_id': 'subscribe_to_email_list',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'email_list_uuid',
                    'customers',
                ],
                'required': [
                    'storefront_oid',
                    'email_list_uuid',
                    'customers',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'email_list_uuid':
                        (str,),
                    'customers':
                        ([EmailCustomer],),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'email_list_uuid': 'email_list_uuid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'email_list_uuid': 'path',
                    'customers': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.unfavorite_screen_recording_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/screen_recordings/{screen_recording_uuid}/favorite',
                'operation_id': 'unfavorite_screen_recording',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'screen_recording_uuid',
                ],
                'required': [
                    'storefront_oid',
                    'screen_recording_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'screen_recording_uuid':
                        (str,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'screen_recording_uuid': 'screen_recording_uuid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'screen_recording_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.update_email_campaign_endpoint = _Endpoint(
            settings={
                'response_type': (EmailCampaignResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}',
                'operation_id': 'update_email_campaign',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'email_campaign_uuid',
                    'email_campaign',
                ],
                'required': [
                    'storefront_oid',
                    'email_campaign_uuid',
                    'email_campaign',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'email_campaign_uuid':
                        (str,),
                    'email_campaign':
                        (EmailCampaign,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'email_campaign_uuid': 'email_campaign_uuid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'email_campaign_uuid': 'path',
                    'email_campaign': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.update_email_campaign_folder_endpoint = _Endpoint(
            settings={
                'response_type': (EmailCampaignFolderResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/campaign_folders/{email_campaign_folder_uuid}',
                'operation_id': 'update_email_campaign_folder',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'email_campaign_folder_uuid',
                    'email_campaign_folder',
                ],
                'required': [
                    'storefront_oid',
                    'email_campaign_folder_uuid',
                    'email_campaign_folder',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'email_campaign_folder_uuid':
                        (str,),
                    'email_campaign_folder':
                        (EmailCampaignFolder,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'email_campaign_folder_uuid': 'email_campaign_folder_uuid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'email_campaign_folder_uuid': 'path',
                    'email_campaign_folder': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.update_email_commseq_endpoint = _Endpoint(
            settings={
                'response_type': (EmailCommseqResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}',
                'operation_id': 'update_email_commseq',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'commseq_uuid',
                    'email_commseq',
                ],
                'required': [
                    'storefront_oid',
                    'commseq_uuid',
                    'email_commseq',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'commseq_uuid':
                        (str,),
                    'email_commseq':
                        (EmailCommseq,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'commseq_uuid': 'commseq_uuid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'commseq_uuid': 'path',
                    'email_commseq': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.update_email_customer_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/customers/{email_customer_uuid}',
                'operation_id': 'update_email_customer',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'email_customer_uuid',
                    'email_customer',
                ],
                'required': [
                    'storefront_oid',
                    'email_customer_uuid',
                    'email_customer',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'email_customer_uuid':
                        (str,),
                    'email_customer':
                        (EmailCustomer,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'email_customer_uuid': 'email_customer_uuid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'email_customer_uuid': 'path',
                    'email_customer': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.update_email_email_endpoint = _Endpoint(
            settings={
                'response_type': (EmailCommseqEmailResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}',
                'operation_id': 'update_email_email',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'commseq_email_uuid',
                    'email_commseq_email',
                ],
                'required': [
                    'storefront_oid',
                    'commseq_email_uuid',
                    'email_commseq_email',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'commseq_email_uuid':
                        (str,),
                    'email_commseq_email':
                        (EmailCommseqEmail,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'commseq_email_uuid': 'commseq_email_uuid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'commseq_email_uuid': 'path',
                    'email_commseq_email': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.update_email_flow_endpoint = _Endpoint(
            settings={
                'response_type': (EmailFlowResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/flows/{email_flow_uuid}',
                'operation_id': 'update_email_flow',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'email_flow_uuid',
                    'email_flow',
                ],
                'required': [
                    'storefront_oid',
                    'email_flow_uuid',
                    'email_flow',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'email_flow_uuid':
                        (str,),
                    'email_flow':
                        (EmailFlow,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'email_flow_uuid': 'email_flow_uuid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'email_flow_uuid': 'path',
                    'email_flow': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.update_email_flow_folder_endpoint = _Endpoint(
            settings={
                'response_type': (EmailFlowFolderResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/flow_folders/{email_flow_folder_uuid}',
                'operation_id': 'update_email_flow_folder',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'email_flow_folder_uuid',
                    'email_flow_folder',
                ],
                'required': [
                    'storefront_oid',
                    'email_flow_folder_uuid',
                    'email_flow_folder',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'email_flow_folder_uuid':
                        (str,),
                    'email_flow_folder':
                        (EmailFlowFolder,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'email_flow_folder_uuid': 'email_flow_folder_uuid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'email_flow_folder_uuid': 'path',
                    'email_flow_folder': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.update_email_global_settings_endpoint = _Endpoint(
            settings={
                'response_type': (EmailGlobalSettingsResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/email/global_settings',
                'operation_id': 'update_email_global_settings',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'global_settings',
                ],
                'required': [
                    'global_settings',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'global_settings':
                        (EmailGlobalSettings,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'global_settings': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.update_email_list_endpoint = _Endpoint(
            settings={
                'response_type': (EmailListResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/lists/{email_list_uuid}',
                'operation_id': 'update_email_list',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'email_list_uuid',
                    'email_list',
                ],
                'required': [
                    'storefront_oid',
                    'email_list_uuid',
                    'email_list',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'email_list_uuid':
                        (str,),
                    'email_list':
                        (EmailList,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'email_list_uuid': 'email_list_uuid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'email_list_uuid': 'path',
                    'email_list': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.update_email_list_segment_folder_endpoint = _Endpoint(
            settings={
                'response_type': (EmailListSegmentFolderResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/list_segment_folders/{email_list_segment_folder_uuid}',
                'operation_id': 'update_email_list_segment_folder',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'email_list_segment_folder_uuid',
                    'email_list_segment_folder',
                ],
                'required': [
                    'storefront_oid',
                    'email_list_segment_folder_uuid',
                    'email_list_segment_folder',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'email_list_segment_folder_uuid':
                        (str,),
                    'email_list_segment_folder':
                        (EmailListSegmentFolder,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'email_list_segment_folder_uuid': 'email_list_segment_folder_uuid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'email_list_segment_folder_uuid': 'path',
                    'email_list_segment_folder': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.update_email_plan_endpoint = _Endpoint(
            settings={
                'response_type': (EmailPlanResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/plan',
                'operation_id': 'update_email_plan',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'settings',
                ],
                'required': [
                    'storefront_oid',
                    'settings',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'settings':
                        (EmailPlan,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'settings': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.update_email_postcard_endpoint = _Endpoint(
            settings={
                'response_type': (EmailCommseqPostcardResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/postcards/{commseq_postcard_uuid}',
                'operation_id': 'update_email_postcard',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'commseq_postcard_uuid',
                    'email_commseq_postcard',
                ],
                'required': [
                    'storefront_oid',
                    'commseq_postcard_uuid',
                    'email_commseq_postcard',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'commseq_postcard_uuid':
                        (str,),
                    'email_commseq_postcard':
                        (EmailCommseqPostcard,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'commseq_postcard_uuid': 'commseq_postcard_uuid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'commseq_postcard_uuid': 'path',
                    'email_commseq_postcard': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.update_email_segment_endpoint = _Endpoint(
            settings={
                'response_type': (EmailSegmentResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/segments/{email_segment_uuid}',
                'operation_id': 'update_email_segment',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'email_segment_uuid',
                    'email_segment',
                ],
                'required': [
                    'storefront_oid',
                    'email_segment_uuid',
                    'email_segment',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'email_segment_uuid':
                        (str,),
                    'email_segment':
                        (EmailSegment,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'email_segment_uuid': 'email_segment_uuid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'email_segment_uuid': 'path',
                    'email_segment': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.update_email_sending_domain_endpoint = _Endpoint(
            settings={
                'response_type': (EmailSendingDomainResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/email/sending_domains/{domain}',
                'operation_id': 'update_email_sending_domain',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'domain',
                    'email_domain',
                ],
                'required': [
                    'domain',
                    'email_domain',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'domain':
                        (str,),
                    'email_domain':
                        (EmailDomain,),
                },
                'attribute_map': {
                    'domain': 'domain',
                },
                'location_map': {
                    'domain': 'path',
                    'email_domain': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.update_email_settings_endpoint = _Endpoint(
            settings={
                'response_type': (EmailSettingsResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/email/settings',
                'operation_id': 'update_email_settings',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'settings',
                ],
                'required': [
                    'storefront_oid',
                    'settings',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'settings':
                        (EmailSettings,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'settings': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.update_experiment_endpoint = _Endpoint(
            settings={
                'response_type': (ExperimentResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/experiments/{storefront_experiment_oid}',
                'operation_id': 'update_experiment',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'storefront_experiment_oid',
                    'experiment',
                ],
                'required': [
                    'storefront_oid',
                    'storefront_experiment_oid',
                    'experiment',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'storefront_experiment_oid':
                        (int,),
                    'experiment':
                        (Experiment,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'storefront_experiment_oid': 'storefront_experiment_oid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'storefront_experiment_oid': 'path',
                    'experiment': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.update_library_item_endpoint = _Endpoint(
            settings={
                'response_type': (LibraryItemResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/code_library/{library_item_oid}',
                'operation_id': 'update_library_item',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'library_item_oid',
                    'library_item',
                ],
                'required': [
                    'library_item_oid',
                    'library_item',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'library_item_oid':
                        (int,),
                    'library_item':
                        (LibraryItem,),
                },
                'attribute_map': {
                    'library_item_oid': 'library_item_oid',
                },
                'location_map': {
                    'library_item_oid': 'path',
                    'library_item': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.update_screen_recording_merchant_notes_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/screen_recordings/{screen_recording_uuid}/merchant_notes',
                'operation_id': 'update_screen_recording_merchant_notes',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'screen_recording_uuid',
                    'merchant_notes_request',
                ],
                'required': [
                    'storefront_oid',
                    'screen_recording_uuid',
                    'merchant_notes_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'screen_recording_uuid':
                        (str,),
                    'merchant_notes_request':
                        (ScreenRecordingMerchantNotesRequest,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'screen_recording_uuid': 'screen_recording_uuid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'screen_recording_uuid': 'path',
                    'merchant_notes_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.update_screen_recording_segment_endpoint = _Endpoint(
            settings={
                'response_type': (ScreenRecordingSegmentResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/screen_recordings/segments/{screen_recording_segment_oid}',
                'operation_id': 'update_screen_recording_segment',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'screen_recording_segment_oid',
                    'segment',
                ],
                'required': [
                    'storefront_oid',
                    'screen_recording_segment_oid',
                    'segment',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'screen_recording_segment_oid':
                        (int,),
                    'segment':
                        (ScreenRecordingSegment,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'screen_recording_segment_oid': 'screen_recording_segment_oid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'screen_recording_segment_oid': 'path',
                    'segment': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.update_screen_recording_settings_endpoint = _Endpoint(
            settings={
                'response_type': (ScreenRecordingSettingsResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/screen_recordings/settings',
                'operation_id': 'update_screen_recording_settings',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'settings',
                ],
                'required': [
                    'storefront_oid',
                    'settings',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'settings':
                        (ScreenRecordingSettings,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'settings': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.update_screen_recording_tags_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/screen_recordings/{screen_recording_uuid}/tags',
                'operation_id': 'update_screen_recording_tags',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'screen_recording_uuid',
                    'tags',
                ],
                'required': [
                    'storefront_oid',
                    'screen_recording_uuid',
                    'tags',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'screen_recording_uuid':
                        (str,),
                    'tags':
                        (ScreenRecordingTagsRequest,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'screen_recording_uuid': 'screen_recording_uuid',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'screen_recording_uuid': 'path',
                    'tags': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.update_transaction_email_endpoint = _Endpoint(
            settings={
                'response_type': (TransactionEmailResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{storefront_oid}/transaction_email/list/{email_id}',
                'operation_id': 'update_transaction_email',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'storefront_oid',
                    'email_id',
                    'transaction_email',
                ],
                'required': [
                    'storefront_oid',
                    'email_id',
                    'transaction_email',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'storefront_oid':
                        (int,),
                    'email_id':
                        (str,),
                    'transaction_email':
                        (TransactionEmail,),
                },
                'attribute_map': {
                    'storefront_oid': 'storefront_oid',
                    'email_id': 'email_id',
                },
                'location_map': {
                    'storefront_oid': 'path',
                    'email_id': 'path',
                    'transaction_email': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.update_twilio_account_endpoint = _Endpoint(
            settings={
                'response_type': (TwilioResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/twilio/accounts/{esp_twilio_uuid}',
                'operation_id': 'update_twilio_account',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'esp_twilio_uuid',
                    'twilio',
                ],
                'required': [
                    'esp_twilio_uuid',
                    'twilio',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'esp_twilio_uuid':
                        (str,),
                    'twilio':
                        (Twilio,),
                },
                'attribute_map': {
                    'esp_twilio_uuid': 'esp_twilio_uuid',
                },
                'location_map': {
                    'esp_twilio_uuid': 'path',
                    'twilio': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.upload_fs_file_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/{id}/fs/upload',
                'operation_id': 'upload_fs_file',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'upload_request',
                ],
                'required': [
                    'id',
                    'upload_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                    'upload_request':
                        (FileManagerUploadRequest,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                    'upload_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.validate_ruler_endpoint = _Endpoint(
            settings={
                'response_type': (RulerValidationResponse,),
                'auth': [
                    'ultraCartBrowserApiKey',
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/storefront/ruler/validate',
                'operation_id': 'validate_ruler',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'ruler_validate_request',
                ],
                'required': [
                    'ruler_validate_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'ruler_validate_request':
                        (RulerValidationRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'ruler_validate_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def add_to_library(
        self,
        add_library_request,
        **kwargs
    ):
        """Add to library  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_to_library(add_library_request, async_req=True)
        >>> result = thread.get()

        Args:
            add_library_request (AddLibraryItemRequest): New library item request

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            LibraryItemResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['add_library_request'] = \
            add_library_request
        return self.add_to_library_endpoint.call_with_http_info(**kwargs)

    def apply_to_store_front(
        self,
        apply_library_request,
        **kwargs
    ):
        """Apply library item to storefront.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.apply_to_store_front(apply_library_request, async_req=True)
        >>> result = thread.get()

        Args:
            apply_library_request (ApplyLibraryItemRequest): New library item

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ApplyLibraryItemResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['apply_library_request'] = \
            apply_library_request
        return self.apply_to_store_front_endpoint.call_with_http_info(**kwargs)

    def archive_email_list(
        self,
        storefront_oid,
        email_list_uuid,
        **kwargs
    ):
        """Archive email list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.archive_email_list(storefront_oid, email_list_uuid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            email_list_uuid (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailListArchiveResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['email_list_uuid'] = \
            email_list_uuid
        return self.archive_email_list_endpoint.call_with_http_info(**kwargs)

    def archive_email_segment(
        self,
        storefront_oid,
        email_segment_uuid,
        **kwargs
    ):
        """Archive email segment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.archive_email_segment(storefront_oid, email_segment_uuid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            email_segment_uuid (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailSegmentArchiveResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['email_segment_uuid'] = \
            email_segment_uuid
        return self.archive_email_segment_endpoint.call_with_http_info(**kwargs)

    def back_populate_email_flow(
        self,
        storefront_oid,
        email_flow_uuid,
        back_populate_request,
        **kwargs
    ):
        """Back populate email flow  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.back_populate_email_flow(storefront_oid, email_flow_uuid, back_populate_request, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            email_flow_uuid (str):
            back_populate_request (EmailFlowBackPopulateRequest): The request to back populate

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailFlowBackPopulateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['email_flow_uuid'] = \
            email_flow_uuid
        kwargs['back_populate_request'] = \
            back_populate_request
        return self.back_populate_email_flow_endpoint.call_with_http_info(**kwargs)

    def check_download_email_segment(
        self,
        storefront_oid,
        email_segment_uuid,
        email_segment_rebuild_uuid,
        **kwargs
    ):
        """Check download of email segment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.check_download_email_segment(storefront_oid, email_segment_uuid, email_segment_rebuild_uuid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            email_segment_uuid (str):
            email_segment_rebuild_uuid (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailSegmentDownloadPrepareResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['email_segment_uuid'] = \
            email_segment_uuid
        kwargs['email_segment_rebuild_uuid'] = \
            email_segment_rebuild_uuid
        return self.check_download_email_segment_endpoint.call_with_http_info(**kwargs)

    def clone_email_campaign(
        self,
        storefront_oid,
        email_campaign_uuid,
        **kwargs
    ):
        """Clone email campaign  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.clone_email_campaign(storefront_oid, email_campaign_uuid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            email_campaign_uuid (str):

        Keyword Args:
            target_storefront_oid (int): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailCampaignResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['email_campaign_uuid'] = \
            email_campaign_uuid
        return self.clone_email_campaign_endpoint.call_with_http_info(**kwargs)

    def clone_email_flow(
        self,
        storefront_oid,
        email_flow_uuid,
        **kwargs
    ):
        """Clone email flow  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.clone_email_flow(storefront_oid, email_flow_uuid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            email_flow_uuid (str):

        Keyword Args:
            target_storefront_oid (int): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailFlowResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['email_flow_uuid'] = \
            email_flow_uuid
        return self.clone_email_flow_endpoint.call_with_http_info(**kwargs)

    def create_email_sending_domain(
        self,
        domain,
        **kwargs
    ):
        """Create email campaign  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_email_sending_domain(domain, async_req=True)
        >>> result = thread.get()

        Args:
            domain (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailSendingDomainResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['domain'] = \
            domain
        return self.create_email_sending_domain_endpoint.call_with_http_info(**kwargs)

    def create_email_sending_domain2(
        self,
        email_domain,
        **kwargs
    ):
        """Create email sending domain for various providers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_email_sending_domain2(email_domain, async_req=True)
        >>> result = thread.get()

        Args:
            email_domain (EmailDomain): EmailDomain

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailSendingDomainResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['email_domain'] = \
            email_domain
        return self.create_email_sending_domain2_endpoint.call_with_http_info(**kwargs)

    def create_fs_directory(
        self,
        id,
        **kwargs
    ):
        """Create file manager directory  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_fs_directory(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int):

        Keyword Args:
            name (str): [optional]
            parent_storefront_fs_directory_oid (int): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            FileManagerPageResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.create_fs_directory_endpoint.call_with_http_info(**kwargs)

    def create_twilio_account(
        self,
        twilio,
        **kwargs
    ):
        """Create Twilio account  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_twilio_account(twilio, async_req=True)
        >>> result = thread.get()

        Args:
            twilio (Twilio): Twilio

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TwilioResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['twilio'] = \
            twilio
        return self.create_twilio_account_endpoint.call_with_http_info(**kwargs)

    def delete_email_campaign_folder(
        self,
        storefront_oid,
        email_campaign_folder_uuid,
        **kwargs
    ):
        """Delete email campaignFolder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_email_campaign_folder(storefront_oid, email_campaign_folder_uuid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            email_campaign_folder_uuid (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            BaseResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['email_campaign_folder_uuid'] = \
            email_campaign_folder_uuid
        return self.delete_email_campaign_folder_endpoint.call_with_http_info(**kwargs)

    def delete_email_commseq_stat(
        self,
        storefront_oid,
        commseq_uuid,
        **kwargs
    ):
        """Delete communication sequence stats  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_email_commseq_stat(storefront_oid, commseq_uuid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            commseq_uuid (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['commseq_uuid'] = \
            commseq_uuid
        return self.delete_email_commseq_stat_endpoint.call_with_http_info(**kwargs)

    def delete_email_email(
        self,
        storefront_oid,
        commseq_email_uuid,
        **kwargs
    ):
        """Delete email email  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_email_email(storefront_oid, commseq_email_uuid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            commseq_email_uuid (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            BaseResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['commseq_email_uuid'] = \
            commseq_email_uuid
        return self.delete_email_email_endpoint.call_with_http_info(**kwargs)

    def delete_email_flow_folder(
        self,
        storefront_oid,
        email_flow_folder_uuid,
        **kwargs
    ):
        """Delete email flowFolder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_email_flow_folder(storefront_oid, email_flow_folder_uuid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            email_flow_folder_uuid (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            BaseResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['email_flow_folder_uuid'] = \
            email_flow_folder_uuid
        return self.delete_email_flow_folder_endpoint.call_with_http_info(**kwargs)

    def delete_email_list_customer(
        self,
        storefront_oid,
        email_list_uuid,
        email_customer_uuid,
        **kwargs
    ):
        """Delete email list customer  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_email_list_customer(storefront_oid, email_list_uuid, email_customer_uuid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            email_list_uuid (str):
            email_customer_uuid (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            BaseResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['email_list_uuid'] = \
            email_list_uuid
        kwargs['email_customer_uuid'] = \
            email_customer_uuid
        return self.delete_email_list_customer_endpoint.call_with_http_info(**kwargs)

    def delete_email_list_segment_folder(
        self,
        storefront_oid,
        email_list_segment_folder_uuid,
        **kwargs
    ):
        """Delete email ListSegmentFolder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_email_list_segment_folder(storefront_oid, email_list_segment_folder_uuid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            email_list_segment_folder_uuid (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            BaseResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['email_list_segment_folder_uuid'] = \
            email_list_segment_folder_uuid
        return self.delete_email_list_segment_folder_endpoint.call_with_http_info(**kwargs)

    def delete_email_postcard(
        self,
        storefront_oid,
        commseq_postcard_uuid,
        **kwargs
    ):
        """Delete email postcard  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_email_postcard(storefront_oid, commseq_postcard_uuid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            commseq_postcard_uuid (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            BaseResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['commseq_postcard_uuid'] = \
            commseq_postcard_uuid
        return self.delete_email_postcard_endpoint.call_with_http_info(**kwargs)

    def delete_email_sending_domain(
        self,
        domain,
        **kwargs
    ):
        """delete email campaign  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_email_sending_domain(domain, async_req=True)
        >>> result = thread.get()

        Args:
            domain (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            BaseResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['domain'] = \
            domain
        return self.delete_email_sending_domain_endpoint.call_with_http_info(**kwargs)

    def delete_experiment(
        self,
        storefront_oid,
        storefront_experiment_oid,
        **kwargs
    ):
        """Delete experiment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_experiment(storefront_oid, storefront_experiment_oid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            storefront_experiment_oid (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['storefront_experiment_oid'] = \
            storefront_experiment_oid
        return self.delete_experiment_endpoint.call_with_http_info(**kwargs)

    def delete_fs_file(
        self,
        id,
        **kwargs
    ):
        """Delete file manager directory  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_fs_file(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int):

        Keyword Args:
            parent_storefront_fs_directory_oid (int): [optional]
            storefront_fs_file_oid (int): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            FileManagerPageResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.delete_fs_file_endpoint.call_with_http_info(**kwargs)

    def delete_heatmap(
        self,
        storefront_oid,
        query,
        **kwargs
    ):
        """Delete screen recording heatmap  # noqa: E501

        Delete screen recording heatmap   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_heatmap(storefront_oid, query, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            query (ScreenRecordingHeatmapReset): Query

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['query'] = \
            query
        return self.delete_heatmap_endpoint.call_with_http_info(**kwargs)

    def delete_library_item(
        self,
        library_item_oid,
        **kwargs
    ):
        """Delete library item  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_library_item(library_item_oid, async_req=True)
        >>> result = thread.get()

        Args:
            library_item_oid (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['library_item_oid'] = \
            library_item_oid
        return self.delete_library_item_endpoint.call_with_http_info(**kwargs)

    def delete_library_item_published_versions(
        self,
        library_item_oid,
        **kwargs
    ):
        """Delete all published versions for a library item, including anything in review.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_library_item_published_versions(library_item_oid, async_req=True)
        >>> result = thread.get()

        Args:
            library_item_oid (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['library_item_oid'] = \
            library_item_oid
        return self.delete_library_item_published_versions_endpoint.call_with_http_info(**kwargs)

    def delete_screen_recording_segment(
        self,
        storefront_oid,
        screen_recording_segment_oid,
        **kwargs
    ):
        """Delete screen recording segment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_screen_recording_segment(storefront_oid, screen_recording_segment_oid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            screen_recording_segment_oid (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['screen_recording_segment_oid'] = \
            screen_recording_segment_oid
        return self.delete_screen_recording_segment_endpoint.call_with_http_info(**kwargs)

    def delete_twilio_account(
        self,
        esp_twilio_uuid,
        **kwargs
    ):
        """delete Twilio account  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_twilio_account(esp_twilio_uuid, async_req=True)
        >>> result = thread.get()

        Args:
            esp_twilio_uuid (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            BaseResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['esp_twilio_uuid'] = \
            esp_twilio_uuid
        return self.delete_twilio_account_endpoint.call_with_http_info(**kwargs)

    def duplicate_library_item(
        self,
        library_item_oid,
        **kwargs
    ):
        """Duplicate library item.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.duplicate_library_item(library_item_oid, async_req=True)
        >>> result = thread.get()

        Args:
            library_item_oid (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            LibraryItemResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['library_item_oid'] = \
            library_item_oid
        return self.duplicate_library_item_endpoint.call_with_http_info(**kwargs)

    def favorite_screen_recording(
        self,
        storefront_oid,
        screen_recording_uuid,
        **kwargs
    ):
        """Update favorite flag on screen recording  # noqa: E501

        Update favorite flag on screen recording   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.favorite_screen_recording(storefront_oid, screen_recording_uuid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            screen_recording_uuid (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['screen_recording_uuid'] = \
            screen_recording_uuid
        return self.favorite_screen_recording_endpoint.call_with_http_info(**kwargs)

    def geocode_address(
        self,
        storefront_oid,
        geocode_request,
        **kwargs
    ):
        """Obtain lat/long for an address  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.geocode_address(storefront_oid, geocode_request, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            geocode_request (GeocodeRequest): geocode request

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GeocodeResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['geocode_request'] = \
            geocode_request
        return self.geocode_address_endpoint.call_with_http_info(**kwargs)

    def get_countries(
        self,
        storefront_oid,
        **kwargs
    ):
        """Get countries  # noqa: E501

        Obtain a list of all the countries   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_countries(storefront_oid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CountriesResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        return self.get_countries_endpoint.call_with_http_info(**kwargs)

    def get_editor_token(
        self,
        storefront_oid,
        **kwargs
    ):
        """Gets editor token  # noqa: E501

        Fetches a temporary authentication token for the editor   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_editor_token(storefront_oid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailEditorTokenResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        return self.get_editor_token_endpoint.call_with_http_info(**kwargs)

    def get_email_base_templates(
        self,
        storefront_oid,
        **kwargs
    ):
        """Get email communication base templates  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_email_base_templates(storefront_oid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailBaseTemplateListResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        return self.get_email_base_templates_endpoint.call_with_http_info(**kwargs)

    def get_email_campaign(
        self,
        storefront_oid,
        email_campaign_uuid,
        **kwargs
    ):
        """Get email campaign  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_email_campaign(storefront_oid, email_campaign_uuid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            email_campaign_uuid (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailCampaignResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['email_campaign_uuid'] = \
            email_campaign_uuid
        return self.get_email_campaign_endpoint.call_with_http_info(**kwargs)

    def get_email_campaign_folder(
        self,
        storefront_oid,
        email_campaign_folder_uuid,
        **kwargs
    ):
        """Get email campaign folder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_email_campaign_folder(storefront_oid, email_campaign_folder_uuid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            email_campaign_folder_uuid (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailCampaignFolderResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['email_campaign_folder_uuid'] = \
            email_campaign_folder_uuid
        return self.get_email_campaign_folder_endpoint.call_with_http_info(**kwargs)

    def get_email_campaign_folders(
        self,
        storefront_oid,
        **kwargs
    ):
        """Get email campaign folders  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_email_campaign_folders(storefront_oid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailCampaignFoldersResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        return self.get_email_campaign_folders_endpoint.call_with_http_info(**kwargs)

    def get_email_campaign_screenshots(
        self,
        storefront_oid,
        email_campaign_uuid,
        **kwargs
    ):
        """Get email campaign screenshots  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_email_campaign_screenshots(storefront_oid, email_campaign_uuid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            email_campaign_uuid (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ScreenshotsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['email_campaign_uuid'] = \
            email_campaign_uuid
        return self.get_email_campaign_screenshots_endpoint.call_with_http_info(**kwargs)

    def get_email_campaigns(
        self,
        storefront_oid,
        **kwargs
    ):
        """Get email campaigns  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_email_campaigns(storefront_oid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailCampaignsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        return self.get_email_campaigns_endpoint.call_with_http_info(**kwargs)

    def get_email_campaigns_with_stats(
        self,
        storefront_oid,
        stat_days,
        **kwargs
    ):
        """Get email campaigns with stats  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_email_campaigns_with_stats(storefront_oid, stat_days, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            stat_days (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailCampaignsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['stat_days'] = \
            stat_days
        return self.get_email_campaigns_with_stats_endpoint.call_with_http_info(**kwargs)

    def get_email_commseq(
        self,
        storefront_oid,
        commseq_uuid,
        **kwargs
    ):
        """Get email commseq  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_email_commseq(storefront_oid, commseq_uuid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            commseq_uuid (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailCommseqResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['commseq_uuid'] = \
            commseq_uuid
        return self.get_email_commseq_endpoint.call_with_http_info(**kwargs)

    def get_email_commseq_email_stats(
        self,
        storefront_oid,
        commseq_uuid,
        stats_request,
        **kwargs
    ):
        """Get email communication sequence emails stats  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_email_commseq_email_stats(storefront_oid, commseq_uuid, stats_request, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            commseq_uuid (str):
            stats_request (EmailStatSummaryRequest): StatsRequest

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailStatSummaryResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['commseq_uuid'] = \
            commseq_uuid
        kwargs['stats_request'] = \
            stats_request
        return self.get_email_commseq_email_stats_endpoint.call_with_http_info(**kwargs)

    def get_email_commseq_postcard_stats(
        self,
        storefront_oid,
        commseq_uuid,
        stats_request,
        **kwargs
    ):
        """Get email communication sequence postcard stats  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_email_commseq_postcard_stats(storefront_oid, commseq_uuid, stats_request, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            commseq_uuid (str):
            stats_request (EmailStatPostcardSummaryRequest): StatsRequest

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailStatPostcardSummaryResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['commseq_uuid'] = \
            commseq_uuid
        kwargs['stats_request'] = \
            stats_request
        return self.get_email_commseq_postcard_stats_endpoint.call_with_http_info(**kwargs)

    def get_email_commseq_postcard_tracking(
        self,
        storefront_oid,
        commseq_postcard_uuid,
        **kwargs
    ):
        """Get email communication postcard tracking  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_email_commseq_postcard_tracking(storefront_oid, commseq_postcard_uuid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            commseq_postcard_uuid (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailPostcardTrackingResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['commseq_postcard_uuid'] = \
            commseq_postcard_uuid
        return self.get_email_commseq_postcard_tracking_endpoint.call_with_http_info(**kwargs)

    def get_email_commseq_stat_overall(
        self,
        storefront_oid,
        commseq_uuid,
        **kwargs
    ):
        """Get communication sequence stats overall  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_email_commseq_stat_overall(storefront_oid, commseq_uuid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            commseq_uuid (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailCommseqStatResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['commseq_uuid'] = \
            commseq_uuid
        return self.get_email_commseq_stat_overall_endpoint.call_with_http_info(**kwargs)

    def get_email_commseq_step_stats(
        self,
        storefront_oid,
        commseq_uuid,
        stats_request,
        **kwargs
    ):
        """Get email communication sequence step stats  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_email_commseq_step_stats(storefront_oid, commseq_uuid, stats_request, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            commseq_uuid (str):
            stats_request (EmailStepStatRequest): StatsRequest

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailStepStatResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['commseq_uuid'] = \
            commseq_uuid
        kwargs['stats_request'] = \
            stats_request
        return self.get_email_commseq_step_stats_endpoint.call_with_http_info(**kwargs)

    def get_email_commseq_step_waiting(
        self,
        storefront_oid,
        commseq_uuid,
        waiting_request,
        **kwargs
    ):
        """Get email communication sequence customers waiting at each requested step  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_email_commseq_step_waiting(storefront_oid, commseq_uuid, waiting_request, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            commseq_uuid (str):
            waiting_request (EmailStepWaitingRequest): WaitingRequest

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailStepWaitingResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['commseq_uuid'] = \
            commseq_uuid
        kwargs['waiting_request'] = \
            waiting_request
        return self.get_email_commseq_step_waiting_endpoint.call_with_http_info(**kwargs)

    def get_email_commseq_webhook_editor_values(
        self,
        storefront_oid,
        commseq_uuid,
        **kwargs
    ):
        """Get email webhook editor values  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_email_commseq_webhook_editor_values(storefront_oid, commseq_uuid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            commseq_uuid (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailWebhookEditorValuesResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['commseq_uuid'] = \
            commseq_uuid
        return self.get_email_commseq_webhook_editor_values_endpoint.call_with_http_info(**kwargs)

    def get_email_commseqs(
        self,
        storefront_oid,
        **kwargs
    ):
        """Get email commseqs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_email_commseqs(storefront_oid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailCommseqsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        return self.get_email_commseqs_endpoint.call_with_http_info(**kwargs)

    def get_email_customer_editor_url(
        self,
        storefront_oid,
        email_customer_uuid,
        **kwargs
    ):
        """Get customers editor URL  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_email_customer_editor_url(storefront_oid, email_customer_uuid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            email_customer_uuid (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailCustomerEditorUrlResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['email_customer_uuid'] = \
            email_customer_uuid
        return self.get_email_customer_editor_url_endpoint.call_with_http_info(**kwargs)

    def get_email_customers(
        self,
        storefront_oid,
        **kwargs
    ):
        """Get email customers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_email_customers(storefront_oid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):

        Keyword Args:
            page_number (int): [optional]
            page_size (int): [optional]
            search_email_prefix (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailCustomersResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        return self.get_email_customers_endpoint.call_with_http_info(**kwargs)

    def get_email_dashboard_activity(
        self,
        storefront_oid,
        **kwargs
    ):
        """Get email dashboard activity  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_email_dashboard_activity(storefront_oid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):

        Keyword Args:
            last_records (int): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailDashboardActivityResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        return self.get_email_dashboard_activity_endpoint.call_with_http_info(**kwargs)

    def get_email_dashboard_stats(
        self,
        storefront_oid,
        **kwargs
    ):
        """Get dashboard stats  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_email_dashboard_stats(storefront_oid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):

        Keyword Args:
            days (int): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailDashboardStatsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        return self.get_email_dashboard_stats_endpoint.call_with_http_info(**kwargs)

    def get_email_dispatch_logs(
        self,
        storefront_oid,
        commseq_uuid,
        commseq_step_uuid,
        **kwargs
    ):
        """Get email dispatch logs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_email_dispatch_logs(storefront_oid, commseq_uuid, commseq_step_uuid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            commseq_uuid (str):
            commseq_step_uuid (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailCommseqStepLogsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['commseq_uuid'] = \
            commseq_uuid
        kwargs['commseq_step_uuid'] = \
            commseq_step_uuid
        return self.get_email_dispatch_logs_endpoint.call_with_http_info(**kwargs)

    def get_email_email(
        self,
        storefront_oid,
        commseq_email_uuid,
        **kwargs
    ):
        """Get email email  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_email_email(storefront_oid, commseq_email_uuid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            commseq_email_uuid (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailCommseqEmailResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['commseq_email_uuid'] = \
            commseq_email_uuid
        return self.get_email_email_endpoint.call_with_http_info(**kwargs)

    def get_email_email_clicks(
        self,
        storefront_oid,
        commseq_uuid,
        commseq_step_uuid,
        commseq_email_uuid,
        **kwargs
    ):
        """Get email email clicks  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_email_email_clicks(storefront_oid, commseq_uuid, commseq_step_uuid, commseq_email_uuid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            commseq_uuid (str):
            commseq_step_uuid (str):
            commseq_email_uuid (str):

        Keyword Args:
            days (int): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailClicksResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['commseq_uuid'] = \
            commseq_uuid
        kwargs['commseq_step_uuid'] = \
            commseq_step_uuid
        kwargs['commseq_email_uuid'] = \
            commseq_email_uuid
        return self.get_email_email_clicks_endpoint.call_with_http_info(**kwargs)

    def get_email_email_customer_editor_url(
        self,
        storefront_oid,
        commseq_email_uuid,
        order_id,
        **kwargs
    ):
        """Get email order customer editor url  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_email_email_customer_editor_url(storefront_oid, commseq_email_uuid, order_id, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            commseq_email_uuid (str):
            order_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailCustomerEditorUrlResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['commseq_email_uuid'] = \
            commseq_email_uuid
        kwargs['order_id'] = \
            order_id
        return self.get_email_email_customer_editor_url_endpoint.call_with_http_info(**kwargs)

    def get_email_email_orders(
        self,
        storefront_oid,
        commseq_uuid,
        commseq_step_uuid,
        commseq_email_uuid,
        **kwargs
    ):
        """Get email email orders  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_email_email_orders(storefront_oid, commseq_uuid, commseq_step_uuid, commseq_email_uuid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            commseq_uuid (str):
            commseq_step_uuid (str):
            commseq_email_uuid (str):

        Keyword Args:
            days (int): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailOrdersResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['commseq_uuid'] = \
            commseq_uuid
        kwargs['commseq_step_uuid'] = \
            commseq_step_uuid
        kwargs['commseq_email_uuid'] = \
            commseq_email_uuid
        return self.get_email_email_orders_endpoint.call_with_http_info(**kwargs)

    def get_email_emails(
        self,
        storefront_oid,
        **kwargs
    ):
        """Get email emails  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_email_emails(storefront_oid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailCommseqEmailsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        return self.get_email_emails_endpoint.call_with_http_info(**kwargs)

    def get_email_emails_multiple(
        self,
        storefront_oid,
        email_commseq_emails_request,
        **kwargs
    ):
        """Get email emails multiple  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_email_emails_multiple(storefront_oid, email_commseq_emails_request, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            email_commseq_emails_request (EmailCommseqEmailsRequest): Request of email uuids

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailCommseqEmailsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['email_commseq_emails_request'] = \
            email_commseq_emails_request
        return self.get_email_emails_multiple_endpoint.call_with_http_info(**kwargs)

    def get_email_flow(
        self,
        storefront_oid,
        email_flow_uuid,
        **kwargs
    ):
        """Get email flow  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_email_flow(storefront_oid, email_flow_uuid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            email_flow_uuid (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailFlowResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['email_flow_uuid'] = \
            email_flow_uuid
        return self.get_email_flow_endpoint.call_with_http_info(**kwargs)

    def get_email_flow_folder(
        self,
        storefront_oid,
        email_flow_folder_uuid,
        **kwargs
    ):
        """Get email flow folder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_email_flow_folder(storefront_oid, email_flow_folder_uuid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            email_flow_folder_uuid (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailFlowFolderResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['email_flow_folder_uuid'] = \
            email_flow_folder_uuid
        return self.get_email_flow_folder_endpoint.call_with_http_info(**kwargs)

    def get_email_flow_folders(
        self,
        storefront_oid,
        **kwargs
    ):
        """Get email flow folders  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_email_flow_folders(storefront_oid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailFlowFoldersResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        return self.get_email_flow_folders_endpoint.call_with_http_info(**kwargs)

    def get_email_flow_screenshots(
        self,
        storefront_oid,
        email_flow_uuid,
        **kwargs
    ):
        """Get email flow screenshots  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_email_flow_screenshots(storefront_oid, email_flow_uuid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            email_flow_uuid (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ScreenshotsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['email_flow_uuid'] = \
            email_flow_uuid
        return self.get_email_flow_screenshots_endpoint.call_with_http_info(**kwargs)

    def get_email_flows(
        self,
        storefront_oid,
        **kwargs
    ):
        """Get email flows  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_email_flows(storefront_oid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailFlowsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        return self.get_email_flows_endpoint.call_with_http_info(**kwargs)

    def get_email_global_settings(
        self,
        **kwargs
    ):
        """Get email globalsettings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_email_global_settings(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailGlobalSettingsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.get_email_global_settings_endpoint.call_with_http_info(**kwargs)

    def get_email_list(
        self,
        storefront_oid,
        email_list_uuid,
        **kwargs
    ):
        """Get email list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_email_list(storefront_oid, email_list_uuid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            email_list_uuid (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailListResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['email_list_uuid'] = \
            email_list_uuid
        return self.get_email_list_endpoint.call_with_http_info(**kwargs)

    def get_email_list_customer_editor_url(
        self,
        storefront_oid,
        email_list_uuid,
        email_customer_uuid,
        **kwargs
    ):
        """Get email list customer editor url  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_email_list_customer_editor_url(storefront_oid, email_list_uuid, email_customer_uuid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            email_list_uuid (str):
            email_customer_uuid (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailCustomerEditorUrlResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['email_list_uuid'] = \
            email_list_uuid
        kwargs['email_customer_uuid'] = \
            email_customer_uuid
        return self.get_email_list_customer_editor_url_endpoint.call_with_http_info(**kwargs)

    def get_email_list_customers(
        self,
        storefront_oid,
        email_list_uuid,
        **kwargs
    ):
        """Get email list customers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_email_list_customers(storefront_oid, email_list_uuid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            email_list_uuid (str):

        Keyword Args:
            page_number (int): [optional]
            page_size (int): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailListCustomersResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['email_list_uuid'] = \
            email_list_uuid
        return self.get_email_list_customers_endpoint.call_with_http_info(**kwargs)

    def get_email_list_segment_folder(
        self,
        storefront_oid,
        email_list_segment_folder_uuid,
        **kwargs
    ):
        """Get email campaign folder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_email_list_segment_folder(storefront_oid, email_list_segment_folder_uuid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            email_list_segment_folder_uuid (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailListSegmentFolderResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['email_list_segment_folder_uuid'] = \
            email_list_segment_folder_uuid
        return self.get_email_list_segment_folder_endpoint.call_with_http_info(**kwargs)

    def get_email_list_segment_folders(
        self,
        storefront_oid,
        **kwargs
    ):
        """Get email campaign folders  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_email_list_segment_folders(storefront_oid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailListSegmentFoldersResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        return self.get_email_list_segment_folders_endpoint.call_with_http_info(**kwargs)

    def get_email_lists(
        self,
        storefront_oid,
        **kwargs
    ):
        """Get email lists  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_email_lists(storefront_oid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailListsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        return self.get_email_lists_endpoint.call_with_http_info(**kwargs)

    def get_email_performance(
        self,
        storefront_oid,
        **kwargs
    ):
        """Get email performance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_email_performance(storefront_oid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailPerformanceResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        return self.get_email_performance_endpoint.call_with_http_info(**kwargs)

    def get_email_plan(
        self,
        storefront_oid,
        **kwargs
    ):
        """Get email plan  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_email_plan(storefront_oid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailPlanResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        return self.get_email_plan_endpoint.call_with_http_info(**kwargs)

    def get_email_postcard(
        self,
        storefront_oid,
        commseq_postcard_uuid,
        **kwargs
    ):
        """Get email postcard  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_email_postcard(storefront_oid, commseq_postcard_uuid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            commseq_postcard_uuid (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailCommseqPostcardResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['commseq_postcard_uuid'] = \
            commseq_postcard_uuid
        return self.get_email_postcard_endpoint.call_with_http_info(**kwargs)

    def get_email_postcards(
        self,
        storefront_oid,
        **kwargs
    ):
        """Get email postcards  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_email_postcards(storefront_oid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailCommseqPostcardsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        return self.get_email_postcards_endpoint.call_with_http_info(**kwargs)

    def get_email_postcards_multiple(
        self,
        storefront_oid,
        email_commseq_postcards_request,
        **kwargs
    ):
        """Get email postcards multiple  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_email_postcards_multiple(storefront_oid, email_commseq_postcards_request, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            email_commseq_postcards_request (EmailCommseqPostcardsRequest): Request of postcard uuids

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailCommseqPostcardsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['email_commseq_postcards_request'] = \
            email_commseq_postcards_request
        return self.get_email_postcards_multiple_endpoint.call_with_http_info(**kwargs)

    def get_email_segment(
        self,
        storefront_oid,
        email_segment_uuid,
        **kwargs
    ):
        """Get email segment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_email_segment(storefront_oid, email_segment_uuid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            email_segment_uuid (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailSegmentResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['email_segment_uuid'] = \
            email_segment_uuid
        return self.get_email_segment_endpoint.call_with_http_info(**kwargs)

    def get_email_segment_customer_editor_url(
        self,
        storefront_oid,
        email_segment_uuid,
        email_customer_uuid,
        **kwargs
    ):
        """Get email segment customers editor URL  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_email_segment_customer_editor_url(storefront_oid, email_segment_uuid, email_customer_uuid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            email_segment_uuid (str):
            email_customer_uuid (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailCustomerEditorUrlResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['email_segment_uuid'] = \
            email_segment_uuid
        kwargs['email_customer_uuid'] = \
            email_customer_uuid
        return self.get_email_segment_customer_editor_url_endpoint.call_with_http_info(**kwargs)

    def get_email_segment_customers(
        self,
        storefront_oid,
        email_segment_uuid,
        **kwargs
    ):
        """Get email segment customers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_email_segment_customers(storefront_oid, email_segment_uuid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            email_segment_uuid (str):

        Keyword Args:
            page_number (int): [optional]
            page_size (int): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailSegmentCustomersResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['email_segment_uuid'] = \
            email_segment_uuid
        return self.get_email_segment_customers_endpoint.call_with_http_info(**kwargs)

    def get_email_segments(
        self,
        storefront_oid,
        **kwargs
    ):
        """Get email segments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_email_segments(storefront_oid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailSegmentsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        return self.get_email_segments_endpoint.call_with_http_info(**kwargs)

    def get_email_sending_domain(
        self,
        domain,
        **kwargs
    ):
        """Get email sending domain  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_email_sending_domain(domain, async_req=True)
        >>> result = thread.get()

        Args:
            domain (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailSendingDomainResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['domain'] = \
            domain
        return self.get_email_sending_domain_endpoint.call_with_http_info(**kwargs)

    def get_email_sending_domain_status(
        self,
        domain,
        **kwargs
    ):
        """Get email sending domain status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_email_sending_domain_status(domain, async_req=True)
        >>> result = thread.get()

        Args:
            domain (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailSendingDomainResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['domain'] = \
            domain
        return self.get_email_sending_domain_status_endpoint.call_with_http_info(**kwargs)

    def get_email_sending_domains(
        self,
        **kwargs
    ):
        """Get email sending domains  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_email_sending_domains(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailSendingDomainsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.get_email_sending_domains_endpoint.call_with_http_info(**kwargs)

    def get_email_settings(
        self,
        storefront_oid,
        **kwargs
    ):
        """Get email settings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_email_settings(storefront_oid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailSettingsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        return self.get_email_settings_endpoint.call_with_http_info(**kwargs)

    def get_email_template(
        self,
        storefront_oid,
        email_template_oid,
        **kwargs
    ):
        """Get email template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_email_template(storefront_oid, email_template_oid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            email_template_oid (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailTemplate
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['email_template_oid'] = \
            email_template_oid
        return self.get_email_template_endpoint.call_with_http_info(**kwargs)

    def get_email_templates(
        self,
        storefront_oid,
        **kwargs
    ):
        """Get email templates  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_email_templates(storefront_oid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):

        Keyword Args:
            trigger_type (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailTemplatesResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        return self.get_email_templates_endpoint.call_with_http_info(**kwargs)

    def get_email_third_party_providers(
        self,
        storefront_oid,
        **kwargs
    ):
        """Get a list of third party email providers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_email_third_party_providers(storefront_oid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailThirdPartyProvidersResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        return self.get_email_third_party_providers_endpoint.call_with_http_info(**kwargs)

    def get_experiments(
        self,
        storefront_oid,
        **kwargs
    ):
        """Get experiments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_experiments(storefront_oid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ExperimentsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        return self.get_experiments_endpoint.call_with_http_info(**kwargs)

    def get_fs_directory(
        self,
        id,
        **kwargs
    ):
        """Get file manager directory  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_fs_directory(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int):

        Keyword Args:
            path (str): [optional]
            storefront_fs_directory_oid (int): [optional]
            storefront_theme_oid (int): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            FileManagerPageResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.get_fs_directory_endpoint.call_with_http_info(**kwargs)

    def get_heatmap(
        self,
        storefront_oid,
        query,
        **kwargs
    ):
        """Get screen recording heatmap  # noqa: E501

        Get screen recording heatmap   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_heatmap(storefront_oid, query, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            query (ScreenRecordingHeatmapRequest): Query

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ScreenRecordingHeatmapResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['query'] = \
            query
        return self.get_heatmap_endpoint.call_with_http_info(**kwargs)

    def get_heatmap_index(
        self,
        storefront_oid,
        query,
        **kwargs
    ):
        """Get screen recording heatmap index  # noqa: E501

        Get screen recording heatmap index   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_heatmap_index(storefront_oid, query, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            query (ScreenRecordingHeatmapIndexRequest): Query

        Keyword Args:
            limit (int): The maximum number of records to return on this one API call. (Default 100, Max 500). [optional] if omitted the server will use the default value of 100
            offset (int): Pagination of the record set.  Offset is a zero based index.. [optional] if omitted the server will use the default value of 0
            sort (str): The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ScreenRecordingHeatmapIndexResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['query'] = \
            query
        return self.get_heatmap_index_endpoint.call_with_http_info(**kwargs)

    def get_histogram_property_names(
        self,
        storefront_oid,
        **kwargs
    ):
        """Get histogram property names  # noqa: E501

        Obtain a list of property names for a given property type   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_histogram_property_names(storefront_oid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):

        Keyword Args:
            property_type (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailHistogramPropertyNamesResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        return self.get_histogram_property_names_endpoint.call_with_http_info(**kwargs)

    def get_histogram_property_values(
        self,
        storefront_oid,
        **kwargs
    ):
        """Get histogram property values  # noqa: E501

        Obtain a list of property values for a given property name and type   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_histogram_property_values(storefront_oid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):

        Keyword Args:
            property_name (str): [optional]
            property_type (str): [optional]
            limit (int): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailHistogramPropertyValuesResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        return self.get_histogram_property_values_endpoint.call_with_http_info(**kwargs)

    def get_library_filter_values(
        self,
        **kwargs
    ):
        """Get library values used to populate drop down boxes for filtering.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_library_filter_values(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            LibraryFilterValuesResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.get_library_filter_values_endpoint.call_with_http_info(**kwargs)

    def get_library_item(
        self,
        library_item_oid,
        **kwargs
    ):
        """Get library item.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_library_item(library_item_oid, async_req=True)
        >>> result = thread.get()

        Args:
            library_item_oid (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            LibraryItemResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['library_item_oid'] = \
            library_item_oid
        return self.get_library_item_endpoint.call_with_http_info(**kwargs)

    def get_library_item_published_versions(
        self,
        library_item_oid,
        **kwargs
    ):
        """Get all published versions for a library item.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_library_item_published_versions(library_item_oid, async_req=True)
        >>> result = thread.get()

        Args:
            library_item_oid (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            LibraryItemsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['library_item_oid'] = \
            library_item_oid
        return self.get_library_item_published_versions_endpoint.call_with_http_info(**kwargs)

    def get_screen_recording(
        self,
        storefront_oid,
        screen_recording_uuid,
        **kwargs
    ):
        """Get screen recording  # noqa: E501

        Get screen recording   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_screen_recording(storefront_oid, screen_recording_uuid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            screen_recording_uuid (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ScreenRecordingResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['screen_recording_uuid'] = \
            screen_recording_uuid
        return self.get_screen_recording_endpoint.call_with_http_info(**kwargs)

    def get_screen_recording_page_view_data(
        self,
        storefront_oid,
        screen_recording_uuid,
        screen_recording_page_view_uuid,
        **kwargs
    ):
        """Get screen recording page view data  # noqa: E501

        Get screen recording page view data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_screen_recording_page_view_data(storefront_oid, screen_recording_uuid, screen_recording_page_view_uuid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            screen_recording_uuid (str):
            screen_recording_page_view_uuid (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ScreenRecordingPageViewDataResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['screen_recording_uuid'] = \
            screen_recording_uuid
        kwargs['screen_recording_page_view_uuid'] = \
            screen_recording_page_view_uuid
        return self.get_screen_recording_page_view_data_endpoint.call_with_http_info(**kwargs)

    def get_screen_recording_segment(
        self,
        storefront_oid,
        screen_recording_segment_oid,
        **kwargs
    ):
        """Get screen recording segment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_screen_recording_segment(storefront_oid, screen_recording_segment_oid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            screen_recording_segment_oid (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ScreenRecordingSegmentResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['screen_recording_segment_oid'] = \
            screen_recording_segment_oid
        return self.get_screen_recording_segment_endpoint.call_with_http_info(**kwargs)

    def get_screen_recording_segments(
        self,
        storefront_oid,
        **kwargs
    ):
        """Get screen recording segments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_screen_recording_segments(storefront_oid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ScreenRecordingSegmentsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        return self.get_screen_recording_segments_endpoint.call_with_http_info(**kwargs)

    def get_screen_recording_settings(
        self,
        storefront_oid,
        **kwargs
    ):
        """Get screen recording settings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_screen_recording_settings(storefront_oid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ScreenRecordingSettingsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        return self.get_screen_recording_settings_endpoint.call_with_http_info(**kwargs)

    def get_screen_recording_tags(
        self,
        storefront_oid,
        **kwargs
    ):
        """Get tags used by screen recording  # noqa: E501

        Get tags used by screen recording   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_screen_recording_tags(storefront_oid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ScreenRecordingTagsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        return self.get_screen_recording_tags_endpoint.call_with_http_info(**kwargs)

    def get_screen_recordings_by_query(
        self,
        storefront_oid,
        query,
        **kwargs
    ):
        """Query screen recordings  # noqa: E501

        Query screen recordings   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_screen_recordings_by_query(storefront_oid, query, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            query (ScreenRecordingQueryRequest): Query

        Keyword Args:
            limit (int): The maximum number of records to return on this one API call. (Default 100, Max 500). [optional] if omitted the server will use the default value of 100
            offset (int): Pagination of the record set.  Offset is a zero based index.. [optional] if omitted the server will use the default value of 0
            sort (str): The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ScreenRecordingQueryResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['query'] = \
            query
        return self.get_screen_recordings_by_query_endpoint.call_with_http_info(**kwargs)

    def get_screen_recordings_by_segment(
        self,
        storefront_oid,
        screen_recording_segment_oid,
        **kwargs
    ):
        """Get screen recordings by segment  # noqa: E501

        Get screen recordings by segment   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_screen_recordings_by_segment(storefront_oid, screen_recording_segment_oid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            screen_recording_segment_oid (int):

        Keyword Args:
            limit (int): The maximum number of records to return on this one API call. (Default 100, Max 500). [optional] if omitted the server will use the default value of 100
            offset (int): Pagination of the record set.  Offset is a zero based index.. [optional] if omitted the server will use the default value of 0
            sort (str): The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ScreenRecordingQueryResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['screen_recording_segment_oid'] = \
            screen_recording_segment_oid
        return self.get_screen_recordings_by_segment_endpoint.call_with_http_info(**kwargs)

    def get_store_front_pricing_tiers(
        self,
        **kwargs
    ):
        """Retrieve pricing tiers  # noqa: E501

        Retrieves the pricing tiers   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_store_front_pricing_tiers(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            expand (str): The object expansion to perform on the result.  See documentation for examples. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PricingTiersResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.get_store_front_pricing_tiers_endpoint.call_with_http_info(**kwargs)

    def get_store_fronts(
        self,
        **kwargs
    ):
        """Get storefronts (internal use only for security reasons)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_store_fronts(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            StoreFrontsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.get_store_fronts_endpoint.call_with_http_info(**kwargs)

    def get_thumbnail_parameters(
        self,
        thumbnail_parameters,
        **kwargs
    ):
        """Get thumbnail parameters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_thumbnail_parameters(thumbnail_parameters, async_req=True)
        >>> result = thread.get()

        Args:
            thumbnail_parameters (ThumbnailParametersRequest): Thumbnail Parameters

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ThumbnailParametersResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['thumbnail_parameters'] = \
            thumbnail_parameters
        return self.get_thumbnail_parameters_endpoint.call_with_http_info(**kwargs)

    def get_transaction_email(
        self,
        storefront_oid,
        email_id,
        **kwargs
    ):
        """Gets a transaction email object  # noqa: E501

        Fetch a transactional email   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_transaction_email(storefront_oid, email_id, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            email_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TransactionEmailResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['email_id'] = \
            email_id
        return self.get_transaction_email_endpoint.call_with_http_info(**kwargs)

    def get_transaction_email_list(
        self,
        storefront_oid,
        **kwargs
    ):
        """Gets a list of transaction email names  # noqa: E501

        Obtain a list of all transactional emails and return back just their names   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_transaction_email_list(storefront_oid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TransactionEmailListResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        return self.get_transaction_email_list_endpoint.call_with_http_info(**kwargs)

    def get_transaction_email_screenshots(
        self,
        storefront_oid,
        email_id,
        **kwargs
    ):
        """Get transactional email screenshots  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_transaction_email_screenshots(storefront_oid, email_id, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            email_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ScreenshotsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['email_id'] = \
            email_id
        return self.get_transaction_email_screenshots_endpoint.call_with_http_info(**kwargs)

    def get_twilio_account(
        self,
        esp_twilio_uuid,
        **kwargs
    ):
        """Get Twilio account  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_twilio_account(esp_twilio_uuid, async_req=True)
        >>> result = thread.get()

        Args:
            esp_twilio_uuid (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TwilioResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['esp_twilio_uuid'] = \
            esp_twilio_uuid
        return self.get_twilio_account_endpoint.call_with_http_info(**kwargs)

    def get_twilio_accounts(
        self,
        **kwargs
    ):
        """Get all Twilio accounts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_twilio_accounts(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TwiliosResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.get_twilio_accounts_endpoint.call_with_http_info(**kwargs)

    def get_upload_fs_file_url(
        self,
        id,
        extension,
        **kwargs
    ):
        """Retrieves a S3 url where a file may be uploaded. Once uploaded, use uploadFsFile to trigger the server into reading the S3 bucket and retrieving the file.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_upload_fs_file_url(id, extension, async_req=True)
        >>> result = thread.get()

        Args:
            id (int):
            extension (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            FileManagerUploadUrlResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        kwargs['extension'] = \
            extension
        return self.get_upload_fs_file_url_endpoint.call_with_http_info(**kwargs)

    def global_unsubscribe(
        self,
        storefront_oid,
        unsubscribe,
        **kwargs
    ):
        """Globally unsubscribe a customer  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.global_unsubscribe(storefront_oid, unsubscribe, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            unsubscribe (EmailGlobalUnsubscribeRequest): Unsubscribe

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailGlobalUnsubscribeResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['unsubscribe'] = \
            unsubscribe
        return self.global_unsubscribe_endpoint.call_with_http_info(**kwargs)

    def import_email_third_party_provider_list(
        self,
        storefront_oid,
        import_request,
        **kwargs
    ):
        """Import a third party provider list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.import_email_third_party_provider_list(storefront_oid, import_request, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            import_request (EmailThirdPartyListImportRequest): lists to import

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['import_request'] = \
            import_request
        return self.import_email_third_party_provider_list_endpoint.call_with_http_info(**kwargs)

    def insert_email_campaign(
        self,
        storefront_oid,
        email_campaign,
        **kwargs
    ):
        """Insert email campaign  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.insert_email_campaign(storefront_oid, email_campaign, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            email_campaign (EmailCampaign): Email campaign

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailCampaignResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['email_campaign'] = \
            email_campaign
        return self.insert_email_campaign_endpoint.call_with_http_info(**kwargs)

    def insert_email_campaign_folder(
        self,
        storefront_oid,
        email_campaign_folder,
        **kwargs
    ):
        """Insert email campaign folder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.insert_email_campaign_folder(storefront_oid, email_campaign_folder, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            email_campaign_folder (EmailCampaignFolder): Email campaign folder

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailCampaignFolderResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['email_campaign_folder'] = \
            email_campaign_folder
        return self.insert_email_campaign_folder_endpoint.call_with_http_info(**kwargs)

    def insert_email_commseq(
        self,
        storefront_oid,
        email_commseq,
        **kwargs
    ):
        """Insert email commseq  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.insert_email_commseq(storefront_oid, email_commseq, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            email_commseq (EmailCommseq): Email commseq

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailCommseqResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['email_commseq'] = \
            email_commseq
        return self.insert_email_commseq_endpoint.call_with_http_info(**kwargs)

    def insert_email_email(
        self,
        storefront_oid,
        email_commseq_email,
        **kwargs
    ):
        """Insert email email  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.insert_email_email(storefront_oid, email_commseq_email, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            email_commseq_email (EmailCommseqEmail): Email email

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailCommseqEmailResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['email_commseq_email'] = \
            email_commseq_email
        return self.insert_email_email_endpoint.call_with_http_info(**kwargs)

    def insert_email_flow(
        self,
        storefront_oid,
        email_flow,
        **kwargs
    ):
        """Insert email flow  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.insert_email_flow(storefront_oid, email_flow, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            email_flow (EmailFlow): Email flow

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailFlowResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['email_flow'] = \
            email_flow
        return self.insert_email_flow_endpoint.call_with_http_info(**kwargs)

    def insert_email_flow_folder(
        self,
        storefront_oid,
        email_flow_folder,
        **kwargs
    ):
        """Insert email flow folder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.insert_email_flow_folder(storefront_oid, email_flow_folder, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            email_flow_folder (EmailFlowFolder): Email flow folder

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailFlowFolderResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['email_flow_folder'] = \
            email_flow_folder
        return self.insert_email_flow_folder_endpoint.call_with_http_info(**kwargs)

    def insert_email_list(
        self,
        storefront_oid,
        email_list,
        **kwargs
    ):
        """Insert email list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.insert_email_list(storefront_oid, email_list, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            email_list (EmailList): Email list

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailListResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['email_list'] = \
            email_list
        return self.insert_email_list_endpoint.call_with_http_info(**kwargs)

    def insert_email_list_segment_folder(
        self,
        storefront_oid,
        email_list_segment_folder,
        **kwargs
    ):
        """Insert email campaign folder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.insert_email_list_segment_folder(storefront_oid, email_list_segment_folder, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            email_list_segment_folder (EmailListSegmentFolder): Email campaign folder

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailListSegmentFolderResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['email_list_segment_folder'] = \
            email_list_segment_folder
        return self.insert_email_list_segment_folder_endpoint.call_with_http_info(**kwargs)

    def insert_email_postcard(
        self,
        storefront_oid,
        email_commseq_postcard,
        **kwargs
    ):
        """Insert email postcard  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.insert_email_postcard(storefront_oid, email_commseq_postcard, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            email_commseq_postcard (EmailCommseqPostcard): Email postcard

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailCommseqPostcardResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['email_commseq_postcard'] = \
            email_commseq_postcard
        return self.insert_email_postcard_endpoint.call_with_http_info(**kwargs)

    def insert_email_segment(
        self,
        storefront_oid,
        email_segment,
        **kwargs
    ):
        """Insert email segment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.insert_email_segment(storefront_oid, email_segment, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            email_segment (EmailSegment): Email segment

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailSegmentResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['email_segment'] = \
            email_segment
        return self.insert_email_segment_endpoint.call_with_http_info(**kwargs)

    def insert_screen_recording_segment(
        self,
        storefront_oid,
        segment,
        **kwargs
    ):
        """Insert screen recording segment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.insert_screen_recording_segment(storefront_oid, segment, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            segment (ScreenRecordingSegment): Segment

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ScreenRecordingSegmentResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['segment'] = \
            segment
        return self.insert_screen_recording_segment_endpoint.call_with_http_info(**kwargs)

    def prepare_download_email_segment(
        self,
        storefront_oid,
        email_segment_uuid,
        **kwargs
    ):
        """Prepare download of email segment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.prepare_download_email_segment(storefront_oid, email_segment_uuid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            email_segment_uuid (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailSegmentDownloadPrepareResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['email_segment_uuid'] = \
            email_segment_uuid
        return self.prepare_download_email_segment_endpoint.call_with_http_info(**kwargs)

    def publish_library_item(
        self,
        library_item_oid,
        publish_library_request,
        **kwargs
    ):
        """Publish library item.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.publish_library_item(library_item_oid, publish_library_request, async_req=True)
        >>> result = thread.get()

        Args:
            library_item_oid (int):
            publish_library_request (PublishLibraryItemRequest): Publish library item request

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            LibraryItemResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['library_item_oid'] = \
            library_item_oid
        kwargs['publish_library_request'] = \
            publish_library_request
        return self.publish_library_item_endpoint.call_with_http_info(**kwargs)

    def purchase_library_item(
        self,
        library_item_oid,
        **kwargs
    ):
        """Purchase public library item, which creates a copy of the item in your personal code library  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.purchase_library_item(library_item_oid, async_req=True)
        >>> result = thread.get()

        Args:
            library_item_oid (int):

        Keyword Args:
            storefront_oid (int): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            LibraryItemResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['library_item_oid'] = \
            library_item_oid
        return self.purchase_library_item_endpoint.call_with_http_info(**kwargs)

    def release_email_commseq_step_waiting(
        self,
        storefront_oid,
        commseq_uuid,
        commseq_step_uuid,
        **kwargs
    ):
        """Release email communication sequence customers waiting at the specified step  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.release_email_commseq_step_waiting(storefront_oid, commseq_uuid, commseq_step_uuid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            commseq_uuid (str):
            commseq_step_uuid (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['commseq_uuid'] = \
            commseq_uuid
        kwargs['commseq_step_uuid'] = \
            commseq_step_uuid
        return self.release_email_commseq_step_waiting_endpoint.call_with_http_info(**kwargs)

    def review(
        self,
        storefront_oid,
        commseq_email_uuid,
        email_commseq_email_review_request,
        **kwargs
    ):
        """Request a review of an email  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.review(storefront_oid, commseq_email_uuid, email_commseq_email_review_request, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            commseq_email_uuid (str):
            email_commseq_email_review_request (EmailCommseqEmailSendTestRequest): Email commseq email review request

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailCommseqEmailSendTestResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['commseq_email_uuid'] = \
            commseq_email_uuid
        kwargs['email_commseq_email_review_request'] = \
            email_commseq_email_review_request
        return self.review_endpoint.call_with_http_info(**kwargs)

    def search(
        self,
        **kwargs
    ):
        """Searches for all matching values  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.search(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            category (str): [optional]
            matches (str): [optional]
            storefront_oid (str): [optional]
            max_hits (int): [optional]
            subcategory (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            LookupResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.search_endpoint.call_with_http_info(**kwargs)

    def search2(
        self,
        lookup_request,
        **kwargs
    ):
        """Searches for all matching values (using POST)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.search2(lookup_request, async_req=True)
        >>> result = thread.get()

        Args:
            lookup_request (LookupRequest): LookupRequest

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            LookupResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['lookup_request'] = \
            lookup_request
        return self.search2_endpoint.call_with_http_info(**kwargs)

    def search_email_list_customers(
        self,
        storefront_oid,
        email_list_uuid,
        **kwargs
    ):
        """Search email list customers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.search_email_list_customers(storefront_oid, email_list_uuid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            email_list_uuid (str):

        Keyword Args:
            starts_with (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailListCustomersResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['email_list_uuid'] = \
            email_list_uuid
        return self.search_email_list_customers_endpoint.call_with_http_info(**kwargs)

    def search_email_segment_customers(
        self,
        storefront_oid,
        email_segment_uuid,
        **kwargs
    ):
        """Search email segment customers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.search_email_segment_customers(storefront_oid, email_segment_uuid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            email_segment_uuid (str):

        Keyword Args:
            starts_with (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailSegmentCustomersResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['email_segment_uuid'] = \
            email_segment_uuid
        return self.search_email_segment_customers_endpoint.call_with_http_info(**kwargs)

    def search_library_items(
        self,
        item_query,
        **kwargs
    ):
        """Retrieve library items  # noqa: E501

        Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.search_library_items(item_query, async_req=True)
        >>> result = thread.get()

        Args:
            item_query (LibraryItemQuery): Item query

        Keyword Args:
            limit (int): The maximum number of records to return on this one API call. (Maximum 10000). [optional] if omitted the server will use the default value of 10000
            offset (int): Pagination of the record set.  Offset is a zero based index.. [optional] if omitted the server will use the default value of 0
            sort (str): The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            LibraryItemsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['item_query'] = \
            item_query
        return self.search_library_items_endpoint.call_with_http_info(**kwargs)

    def search_published_items(
        self,
        item_query,
        **kwargs
    ):
        """Retrieve library items  # noqa: E501

        Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.search_published_items(item_query, async_req=True)
        >>> result = thread.get()

        Args:
            item_query (LibraryItemQuery): Item query

        Keyword Args:
            limit (int): The maximum number of records to return on this one API call. (Maximum 10000). [optional] if omitted the server will use the default value of 10000
            offset (int): Pagination of the record set.  Offset is a zero based index.. [optional] if omitted the server will use the default value of 0
            sort (str): The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            LibraryItemsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['item_query'] = \
            item_query
        return self.search_published_items_endpoint.call_with_http_info(**kwargs)

    def search_review_items(
        self,
        item_query,
        **kwargs
    ):
        """Retrieve library items needing review or rejected  # noqa: E501

        Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.search_review_items(item_query, async_req=True)
        >>> result = thread.get()

        Args:
            item_query (LibraryItemQuery): Item query

        Keyword Args:
            limit (int): The maximum number of records to return on this one API call. (Maximum 10000). [optional] if omitted the server will use the default value of 10000
            offset (int): Pagination of the record set.  Offset is a zero based index.. [optional] if omitted the server will use the default value of 0
            sort (str): The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            LibraryItemsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['item_query'] = \
            item_query
        return self.search_review_items_endpoint.call_with_http_info(**kwargs)

    def search_shared_items(
        self,
        item_query,
        **kwargs
    ):
        """Retrieve library items  # noqa: E501

        Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.search_shared_items(item_query, async_req=True)
        >>> result = thread.get()

        Args:
            item_query (LibraryItemQuery): Item query

        Keyword Args:
            limit (int): The maximum number of records to return on this one API call. (Maximum 10000). [optional] if omitted the server will use the default value of 10000
            offset (int): Pagination of the record set.  Offset is a zero based index.. [optional] if omitted the server will use the default value of 0
            sort (str): The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            LibraryItemsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['item_query'] = \
            item_query
        return self.search_shared_items_endpoint.call_with_http_info(**kwargs)

    def send_email_test(
        self,
        storefront_oid,
        commseq_email_uuid,
        email_commseq_email_test_request,
        **kwargs
    ):
        """Send email test  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.send_email_test(storefront_oid, commseq_email_uuid, email_commseq_email_test_request, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            commseq_email_uuid (str):
            email_commseq_email_test_request (EmailCommseqEmailSendTestRequest): Email commseq email test request

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailCommseqEmailSendTestResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['commseq_email_uuid'] = \
            commseq_email_uuid
        kwargs['email_commseq_email_test_request'] = \
            email_commseq_email_test_request
        return self.send_email_test_endpoint.call_with_http_info(**kwargs)

    def send_postcard_test(
        self,
        storefront_oid,
        commseq_postcard_uuid,
        email_commseq_postcard_test_request,
        **kwargs
    ):
        """Send postcard test  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.send_postcard_test(storefront_oid, commseq_postcard_uuid, email_commseq_postcard_test_request, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            commseq_postcard_uuid (str):
            email_commseq_postcard_test_request (EmailCommseqPostcardSendTestRequest): Email commseq email test request

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailCommseqPostcardSendTestResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['commseq_postcard_uuid'] = \
            commseq_postcard_uuid
        kwargs['email_commseq_postcard_test_request'] = \
            email_commseq_postcard_test_request
        return self.send_postcard_test_endpoint.call_with_http_info(**kwargs)

    def send_sms_test(
        self,
        storefront_oid,
        commseq_uuid,
        commseq_step_uuid,
        email_commseq_sms_test_request,
        **kwargs
    ):
        """Send SMS test  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.send_sms_test(storefront_oid, commseq_uuid, commseq_step_uuid, email_commseq_sms_test_request, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            commseq_uuid (str):
            commseq_step_uuid (str):
            email_commseq_sms_test_request (EmailCommseqSmsSendTestRequest): Email commseq sms test request

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailCommseqSmsSendTestResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['commseq_uuid'] = \
            commseq_uuid
        kwargs['commseq_step_uuid'] = \
            commseq_step_uuid
        kwargs['email_commseq_sms_test_request'] = \
            email_commseq_sms_test_request
        return self.send_sms_test_endpoint.call_with_http_info(**kwargs)

    def send_webhook_test(
        self,
        storefront_oid,
        email_commseq_webhook_test_request,
        **kwargs
    ):
        """Send webhook test  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.send_webhook_test(storefront_oid, email_commseq_webhook_test_request, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            email_commseq_webhook_test_request (EmailCommseqWebhookSendTestRequest): Email commseq webhook test request

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailCommseqWebhookSendTestResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['email_commseq_webhook_test_request'] = \
            email_commseq_webhook_test_request
        return self.send_webhook_test_endpoint.call_with_http_info(**kwargs)

    def sequence_test(
        self,
        storefront_oid,
        commseq_uuid,
        email_commseq_sequence_test_request,
        **kwargs
    ):
        """Sequence test  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.sequence_test(storefront_oid, commseq_uuid, email_commseq_sequence_test_request, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            commseq_uuid (str):
            email_commseq_sequence_test_request (EmailCommseqSequenceTestRequest): Commseq test request

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailCommseqSequenceTestResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['commseq_uuid'] = \
            commseq_uuid
        kwargs['email_commseq_sequence_test_request'] = \
            email_commseq_sequence_test_request
        return self.sequence_test_endpoint.call_with_http_info(**kwargs)

    def start_email_campaign(
        self,
        storefront_oid,
        email_campaign_uuid,
        **kwargs
    ):
        """Start email campaign  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.start_email_campaign(storefront_oid, email_campaign_uuid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            email_campaign_uuid (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            BaseResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['email_campaign_uuid'] = \
            email_campaign_uuid
        return self.start_email_campaign_endpoint.call_with_http_info(**kwargs)

    def subscribe_to_email_list(
        self,
        storefront_oid,
        email_list_uuid,
        customers,
        **kwargs
    ):
        """Subscribe customers to email list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.subscribe_to_email_list(storefront_oid, email_list_uuid, customers, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            email_list_uuid (str):
            customers ([EmailCustomer]): Customers

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailListSubscribeResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['email_list_uuid'] = \
            email_list_uuid
        kwargs['customers'] = \
            customers
        return self.subscribe_to_email_list_endpoint.call_with_http_info(**kwargs)

    def unfavorite_screen_recording(
        self,
        storefront_oid,
        screen_recording_uuid,
        **kwargs
    ):
        """Remove favorite flag on screen recording  # noqa: E501

        Remove favorite flag on screen recording   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.unfavorite_screen_recording(storefront_oid, screen_recording_uuid, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            screen_recording_uuid (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['screen_recording_uuid'] = \
            screen_recording_uuid
        return self.unfavorite_screen_recording_endpoint.call_with_http_info(**kwargs)

    def update_email_campaign(
        self,
        storefront_oid,
        email_campaign_uuid,
        email_campaign,
        **kwargs
    ):
        """Update email campaign  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_email_campaign(storefront_oid, email_campaign_uuid, email_campaign, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            email_campaign_uuid (str):
            email_campaign (EmailCampaign): Email campaign

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailCampaignResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['email_campaign_uuid'] = \
            email_campaign_uuid
        kwargs['email_campaign'] = \
            email_campaign
        return self.update_email_campaign_endpoint.call_with_http_info(**kwargs)

    def update_email_campaign_folder(
        self,
        storefront_oid,
        email_campaign_folder_uuid,
        email_campaign_folder,
        **kwargs
    ):
        """Update email campaign folder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_email_campaign_folder(storefront_oid, email_campaign_folder_uuid, email_campaign_folder, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            email_campaign_folder_uuid (str):
            email_campaign_folder (EmailCampaignFolder): Email campaign folder

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailCampaignFolderResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['email_campaign_folder_uuid'] = \
            email_campaign_folder_uuid
        kwargs['email_campaign_folder'] = \
            email_campaign_folder
        return self.update_email_campaign_folder_endpoint.call_with_http_info(**kwargs)

    def update_email_commseq(
        self,
        storefront_oid,
        commseq_uuid,
        email_commseq,
        **kwargs
    ):
        """Update email commseq  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_email_commseq(storefront_oid, commseq_uuid, email_commseq, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            commseq_uuid (str):
            email_commseq (EmailCommseq): Email commseq

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailCommseqResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['commseq_uuid'] = \
            commseq_uuid
        kwargs['email_commseq'] = \
            email_commseq
        return self.update_email_commseq_endpoint.call_with_http_info(**kwargs)

    def update_email_customer(
        self,
        storefront_oid,
        email_customer_uuid,
        email_customer,
        **kwargs
    ):
        """Update email customer  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_email_customer(storefront_oid, email_customer_uuid, email_customer, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            email_customer_uuid (str):
            email_customer (EmailCustomer): Email customer

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['email_customer_uuid'] = \
            email_customer_uuid
        kwargs['email_customer'] = \
            email_customer
        return self.update_email_customer_endpoint.call_with_http_info(**kwargs)

    def update_email_email(
        self,
        storefront_oid,
        commseq_email_uuid,
        email_commseq_email,
        **kwargs
    ):
        """Update email email  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_email_email(storefront_oid, commseq_email_uuid, email_commseq_email, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            commseq_email_uuid (str):
            email_commseq_email (EmailCommseqEmail): Email commseq email

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailCommseqEmailResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['commseq_email_uuid'] = \
            commseq_email_uuid
        kwargs['email_commseq_email'] = \
            email_commseq_email
        return self.update_email_email_endpoint.call_with_http_info(**kwargs)

    def update_email_flow(
        self,
        storefront_oid,
        email_flow_uuid,
        email_flow,
        **kwargs
    ):
        """Update email flow  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_email_flow(storefront_oid, email_flow_uuid, email_flow, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            email_flow_uuid (str):
            email_flow (EmailFlow): Email flow

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailFlowResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['email_flow_uuid'] = \
            email_flow_uuid
        kwargs['email_flow'] = \
            email_flow
        return self.update_email_flow_endpoint.call_with_http_info(**kwargs)

    def update_email_flow_folder(
        self,
        storefront_oid,
        email_flow_folder_uuid,
        email_flow_folder,
        **kwargs
    ):
        """Update email flow folder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_email_flow_folder(storefront_oid, email_flow_folder_uuid, email_flow_folder, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            email_flow_folder_uuid (str):
            email_flow_folder (EmailFlowFolder): Email flow folder

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailFlowFolderResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['email_flow_folder_uuid'] = \
            email_flow_folder_uuid
        kwargs['email_flow_folder'] = \
            email_flow_folder
        return self.update_email_flow_folder_endpoint.call_with_http_info(**kwargs)

    def update_email_global_settings(
        self,
        global_settings,
        **kwargs
    ):
        """Update email global settings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_email_global_settings(global_settings, async_req=True)
        >>> result = thread.get()

        Args:
            global_settings (EmailGlobalSettings): global settings request

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailGlobalSettingsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['global_settings'] = \
            global_settings
        return self.update_email_global_settings_endpoint.call_with_http_info(**kwargs)

    def update_email_list(
        self,
        storefront_oid,
        email_list_uuid,
        email_list,
        **kwargs
    ):
        """Update email list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_email_list(storefront_oid, email_list_uuid, email_list, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            email_list_uuid (str):
            email_list (EmailList): Email list

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailListResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['email_list_uuid'] = \
            email_list_uuid
        kwargs['email_list'] = \
            email_list
        return self.update_email_list_endpoint.call_with_http_info(**kwargs)

    def update_email_list_segment_folder(
        self,
        storefront_oid,
        email_list_segment_folder_uuid,
        email_list_segment_folder,
        **kwargs
    ):
        """Update email campaign folder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_email_list_segment_folder(storefront_oid, email_list_segment_folder_uuid, email_list_segment_folder, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            email_list_segment_folder_uuid (str):
            email_list_segment_folder (EmailListSegmentFolder): Email campaign folder

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailListSegmentFolderResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['email_list_segment_folder_uuid'] = \
            email_list_segment_folder_uuid
        kwargs['email_list_segment_folder'] = \
            email_list_segment_folder
        return self.update_email_list_segment_folder_endpoint.call_with_http_info(**kwargs)

    def update_email_plan(
        self,
        storefront_oid,
        settings,
        **kwargs
    ):
        """Update email plan  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_email_plan(storefront_oid, settings, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            settings (EmailPlan): plan request

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailPlanResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['settings'] = \
            settings
        return self.update_email_plan_endpoint.call_with_http_info(**kwargs)

    def update_email_postcard(
        self,
        storefront_oid,
        commseq_postcard_uuid,
        email_commseq_postcard,
        **kwargs
    ):
        """Update email postcard  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_email_postcard(storefront_oid, commseq_postcard_uuid, email_commseq_postcard, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            commseq_postcard_uuid (str):
            email_commseq_postcard (EmailCommseqPostcard): Email commseq postcard

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailCommseqPostcardResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['commseq_postcard_uuid'] = \
            commseq_postcard_uuid
        kwargs['email_commseq_postcard'] = \
            email_commseq_postcard
        return self.update_email_postcard_endpoint.call_with_http_info(**kwargs)

    def update_email_segment(
        self,
        storefront_oid,
        email_segment_uuid,
        email_segment,
        **kwargs
    ):
        """Update email segment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_email_segment(storefront_oid, email_segment_uuid, email_segment, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            email_segment_uuid (str):
            email_segment (EmailSegment): Email segment

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailSegmentResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['email_segment_uuid'] = \
            email_segment_uuid
        kwargs['email_segment'] = \
            email_segment
        return self.update_email_segment_endpoint.call_with_http_info(**kwargs)

    def update_email_sending_domain(
        self,
        domain,
        email_domain,
        **kwargs
    ):
        """Update email sending domain  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_email_sending_domain(domain, email_domain, async_req=True)
        >>> result = thread.get()

        Args:
            domain (str):
            email_domain (EmailDomain): EmailDomain

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailSendingDomainResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['domain'] = \
            domain
        kwargs['email_domain'] = \
            email_domain
        return self.update_email_sending_domain_endpoint.call_with_http_info(**kwargs)

    def update_email_settings(
        self,
        storefront_oid,
        settings,
        **kwargs
    ):
        """Update email settings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_email_settings(storefront_oid, settings, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            settings (EmailSettings): settings request

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmailSettingsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['settings'] = \
            settings
        return self.update_email_settings_endpoint.call_with_http_info(**kwargs)

    def update_experiment(
        self,
        storefront_oid,
        storefront_experiment_oid,
        experiment,
        **kwargs
    ):
        """Update experiment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_experiment(storefront_oid, storefront_experiment_oid, experiment, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            storefront_experiment_oid (int):
            experiment (Experiment): Experiment

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ExperimentResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['storefront_experiment_oid'] = \
            storefront_experiment_oid
        kwargs['experiment'] = \
            experiment
        return self.update_experiment_endpoint.call_with_http_info(**kwargs)

    def update_library_item(
        self,
        library_item_oid,
        library_item,
        **kwargs
    ):
        """Update library item. Note that only certain fields may be updated via this method.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_library_item(library_item_oid, library_item, async_req=True)
        >>> result = thread.get()

        Args:
            library_item_oid (int):
            library_item (LibraryItem): Library item

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            LibraryItemResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['library_item_oid'] = \
            library_item_oid
        kwargs['library_item'] = \
            library_item
        return self.update_library_item_endpoint.call_with_http_info(**kwargs)

    def update_screen_recording_merchant_notes(
        self,
        storefront_oid,
        screen_recording_uuid,
        merchant_notes_request,
        **kwargs
    ):
        """Update merchant notes on a screen recording  # noqa: E501

        Update merchant notes on a screen recording   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_screen_recording_merchant_notes(storefront_oid, screen_recording_uuid, merchant_notes_request, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            screen_recording_uuid (str):
            merchant_notes_request (ScreenRecordingMerchantNotesRequest): Merchant Notes

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['screen_recording_uuid'] = \
            screen_recording_uuid
        kwargs['merchant_notes_request'] = \
            merchant_notes_request
        return self.update_screen_recording_merchant_notes_endpoint.call_with_http_info(**kwargs)

    def update_screen_recording_segment(
        self,
        storefront_oid,
        screen_recording_segment_oid,
        segment,
        **kwargs
    ):
        """Update screen recording segment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_screen_recording_segment(storefront_oid, screen_recording_segment_oid, segment, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            screen_recording_segment_oid (int):
            segment (ScreenRecordingSegment): Segment

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ScreenRecordingSegmentResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['screen_recording_segment_oid'] = \
            screen_recording_segment_oid
        kwargs['segment'] = \
            segment
        return self.update_screen_recording_segment_endpoint.call_with_http_info(**kwargs)

    def update_screen_recording_settings(
        self,
        storefront_oid,
        settings,
        **kwargs
    ):
        """Update screen recording settings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_screen_recording_settings(storefront_oid, settings, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            settings (ScreenRecordingSettings): Settings

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ScreenRecordingSettingsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['settings'] = \
            settings
        return self.update_screen_recording_settings_endpoint.call_with_http_info(**kwargs)

    def update_screen_recording_tags(
        self,
        storefront_oid,
        screen_recording_uuid,
        tags,
        **kwargs
    ):
        """Update tags on a screen recording  # noqa: E501

        Update tags on a screen recording   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_screen_recording_tags(storefront_oid, screen_recording_uuid, tags, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            screen_recording_uuid (str):
            tags (ScreenRecordingTagsRequest): Tags

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['screen_recording_uuid'] = \
            screen_recording_uuid
        kwargs['tags'] = \
            tags
        return self.update_screen_recording_tags_endpoint.call_with_http_info(**kwargs)

    def update_transaction_email(
        self,
        storefront_oid,
        email_id,
        transaction_email,
        **kwargs
    ):
        """Updates a transaction email object  # noqa: E501

        Updates a transactional email   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_transaction_email(storefront_oid, email_id, transaction_email, async_req=True)
        >>> result = thread.get()

        Args:
            storefront_oid (int):
            email_id (str):
            transaction_email (TransactionEmail): TransactionEmail

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TransactionEmailResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['storefront_oid'] = \
            storefront_oid
        kwargs['email_id'] = \
            email_id
        kwargs['transaction_email'] = \
            transaction_email
        return self.update_transaction_email_endpoint.call_with_http_info(**kwargs)

    def update_twilio_account(
        self,
        esp_twilio_uuid,
        twilio,
        **kwargs
    ):
        """Update Twilio account  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_twilio_account(esp_twilio_uuid, twilio, async_req=True)
        >>> result = thread.get()

        Args:
            esp_twilio_uuid (str):
            twilio (Twilio): Twilio

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TwilioResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['esp_twilio_uuid'] = \
            esp_twilio_uuid
        kwargs['twilio'] = \
            twilio
        return self.update_twilio_account_endpoint.call_with_http_info(**kwargs)

    def upload_fs_file(
        self,
        id,
        upload_request,
        **kwargs
    ):
        """This is the last step in uploading a file after 1) calling getUploadFsFileUrl and 2) uploading a file to the provided url, then finally 3) calling this method and providing the key to trigger the server into reading the S3 bucket and retrieving the file.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.upload_fs_file(id, upload_request, async_req=True)
        >>> result = thread.get()

        Args:
            id (int):
            upload_request (FileManagerUploadRequest): UploadRequest

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        kwargs['upload_request'] = \
            upload_request
        return self.upload_fs_file_endpoint.call_with_http_info(**kwargs)

    def validate_ruler(
        self,
        ruler_validate_request,
        **kwargs
    ):
        """Validate AWS Event Ruler  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.validate_ruler(ruler_validate_request, async_req=True)
        >>> result = thread.get()

        Args:
            ruler_validate_request (RulerValidationRequest): Ruler Validate Request

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            RulerValidationResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['ruler_validate_request'] = \
            ruler_validate_request
        return self.validate_ruler_endpoint.call_with_http_info(**kwargs)

