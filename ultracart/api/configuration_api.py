# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ultracart.api_client import ApiClient
from ultracart.configuration import Configuration

class ConfigurationApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    @classmethod
    def fromApiKey(cls, apiKey, verify_ssl = True, debug = False):
        config = Configuration()
        config.api_key['x-ultracart-simple-key'] = apiKey
        config.debug = debug
        config.verify_ssl = verify_ssl

        api_client = ApiClient(configuration=config, header_name='X-UltraCart-Api-Version', header_value='2017-03-01')
        return ConfigurationApi(api_client)



    def delay_auto_orders(self, rtg_oid, **kwargs):  # noqa: E501
        """Delay auto order processing for a day for this rotating transaction gateway  # noqa: E501

        Delay auto order processing for a day for this rotating transaction gateway   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delay_auto_orders(rtg_oid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int rtg_oid: The rtg_oid to delay. (required)
        :return: DelayAutoOrdersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delay_auto_orders_with_http_info(rtg_oid, **kwargs)  # noqa: E501
        else:
            (data) = self.delay_auto_orders_with_http_info(rtg_oid, **kwargs)  # noqa: E501
            return data

    def delay_auto_orders_with_http_info(self, rtg_oid, **kwargs):  # noqa: E501
        """Delay auto order processing for a day for this rotating transaction gateway  # noqa: E501

        Delay auto order processing for a day for this rotating transaction gateway   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delay_auto_orders_with_http_info(rtg_oid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int rtg_oid: The rtg_oid to delay. (required)
        :return: DelayAutoOrdersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rtg_oid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delay_auto_orders" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rtg_oid' is set
        if ('rtg_oid' not in params or
                params['rtg_oid'] is None):
            raise ValueError("Missing the required parameter `rtg_oid` when calling `delay_auto_orders`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'rtg_oid' in params:
            path_params['rtg_oid'] = params['rtg_oid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json; charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/configuration/checkout/payments/rtg/{rtg_oid}/delayAutoOrders', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DelayAutoOrdersResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_rotating_transaction_gateway(self, rtg_oid, **kwargs):  # noqa: E501
        """Delete a rotating transaction gateway  # noqa: E501

        Delete a rotating transaction gateway   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_rotating_transaction_gateway(rtg_oid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int rtg_oid: The rtg_oid to delete. (required)
        :return: BaseResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_rotating_transaction_gateway_with_http_info(rtg_oid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_rotating_transaction_gateway_with_http_info(rtg_oid, **kwargs)  # noqa: E501
            return data

    def delete_rotating_transaction_gateway_with_http_info(self, rtg_oid, **kwargs):  # noqa: E501
        """Delete a rotating transaction gateway  # noqa: E501

        Delete a rotating transaction gateway   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_rotating_transaction_gateway_with_http_info(rtg_oid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int rtg_oid: The rtg_oid to delete. (required)
        :return: BaseResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rtg_oid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_rotating_transaction_gateway" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rtg_oid' is set
        if ('rtg_oid' not in params or
                params['rtg_oid'] is None):
            raise ValueError("Missing the required parameter `rtg_oid` when calling `delete_rotating_transaction_gateway`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'rtg_oid' in params:
            path_params['rtg_oid'] = params['rtg_oid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json; charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/configuration/checkout/payments/rtg/{rtg_oid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BaseResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_payments_configuration(self, **kwargs):  # noqa: E501
        """Retrieve payments configuration  # noqa: E501

        Retrieves payments configuration for this account.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_payments_configuration(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: PaymentsConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_payments_configuration_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_payments_configuration_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_payments_configuration_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve payments configuration  # noqa: E501

        Retrieves payments configuration for this account.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_payments_configuration_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: PaymentsConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_payments_configuration" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/configuration/checkout/payments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaymentsConfiguration',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_payments_rotating_gateway(self, rtg_oid, **kwargs):  # noqa: E501
        """Retrieve a rotating transaction gateway  # noqa: E501

        Retrieve a rotating transaction gateway   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_payments_rotating_gateway(rtg_oid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int rtg_oid: The rtg_oid for the desired record. (required)
        :return: RotatingTransactionGateway
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_payments_rotating_gateway_with_http_info(rtg_oid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_payments_rotating_gateway_with_http_info(rtg_oid, **kwargs)  # noqa: E501
            return data

    def get_payments_rotating_gateway_with_http_info(self, rtg_oid, **kwargs):  # noqa: E501
        """Retrieve a rotating transaction gateway  # noqa: E501

        Retrieve a rotating transaction gateway   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_payments_rotating_gateway_with_http_info(rtg_oid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int rtg_oid: The rtg_oid for the desired record. (required)
        :return: RotatingTransactionGateway
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rtg_oid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_payments_rotating_gateway" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rtg_oid' is set
        if ('rtg_oid' not in params or
                params['rtg_oid'] is None):
            raise ValueError("Missing the required parameter `rtg_oid` when calling `get_payments_rotating_gateway`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'rtg_oid' in params:
            path_params['rtg_oid'] = params['rtg_oid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/configuration/checkout/payments/rtg/{rtg_oid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RotatingTransactionGateway',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_payments_rotating_gateway_by_code(self, code, **kwargs):  # noqa: E501
        """Retrieve a rotating transaction gateway by code  # noqa: E501

        Retrieve a rotating transaction gateway by code   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_payments_rotating_gateway_by_code(code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str code: The code for the desired rotating transaction gateway. (required)
        :return: RotatingTransactionGateway
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_payments_rotating_gateway_by_code_with_http_info(code, **kwargs)  # noqa: E501
        else:
            (data) = self.get_payments_rotating_gateway_by_code_with_http_info(code, **kwargs)  # noqa: E501
            return data

    def get_payments_rotating_gateway_by_code_with_http_info(self, code, **kwargs):  # noqa: E501
        """Retrieve a rotating transaction gateway by code  # noqa: E501

        Retrieve a rotating transaction gateway by code   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_payments_rotating_gateway_by_code_with_http_info(code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str code: The code for the desired rotating transaction gateway. (required)
        :return: RotatingTransactionGateway
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_payments_rotating_gateway_by_code" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'code' is set
        if ('code' not in params or
                params['code'] is None):
            raise ValueError("Missing the required parameter `code` when calling `get_payments_rotating_gateway_by_code`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'code' in params:
            path_params['code'] = params['code']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/configuration/checkout/payments/rtg/byCode/{code}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RotatingTransactionGateway',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_payments_rotating_transaction_gateways(self, **kwargs):  # noqa: E501
        """Retrieve a list of rotating transaction gateways  # noqa: E501

        Retrieve a list of rotating transaction gateways   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_payments_rotating_transaction_gateways(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: RotatingTransactionGateway
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_payments_rotating_transaction_gateways_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_payments_rotating_transaction_gateways_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_payments_rotating_transaction_gateways_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve a list of rotating transaction gateways  # noqa: E501

        Retrieve a list of rotating transaction gateways   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_payments_rotating_transaction_gateways_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: RotatingTransactionGateway
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_payments_rotating_transaction_gateways" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/configuration/checkout/payments/rtg', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RotatingTransactionGateway',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_payments_rtg_summaries(self, **kwargs):  # noqa: E501
        """Retrieve a summary of rotating transaction gateways  # noqa: E501

        Retrieve a summary of rotating transaction gateways   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_payments_rtg_summaries(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: RotatingTransactionGateway
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_payments_rtg_summaries_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_payments_rtg_summaries_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_payments_rtg_summaries_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve a summary of rotating transaction gateways  # noqa: E501

        Retrieve a summary of rotating transaction gateways   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_payments_rtg_summaries_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: RotatingTransactionGateway
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_payments_rtg_summaries" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/configuration/checkout/payments/rtg/summaries', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RotatingTransactionGateway',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_payments_transaction_gateways(self, **kwargs):  # noqa: E501
        """Retrieve a list of transaction gateways  # noqa: E501

        Retrieve a list of transaction gateways   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_payments_transaction_gateways(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: TransactionGatewaysResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_payments_transaction_gateways_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_payments_transaction_gateways_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_payments_transaction_gateways_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve a list of transaction gateways  # noqa: E501

        Retrieve a list of transaction gateways   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_payments_transaction_gateways_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: TransactionGatewaysResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_payments_transaction_gateways" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/configuration/checkout/payments/tg', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TransactionGatewaysResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def insert_rotating_transaction_gateway(self, rotating_transaction_gateway, **kwargs):  # noqa: E501
        """Insert a rotating transaction gateway  # noqa: E501

        Insert a rotating transaction gateway   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.insert_rotating_transaction_gateway(rotating_transaction_gateway, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RotatingTransactionGateway rotating_transaction_gateway: Rotating transaction gateway (required)
        :return: RotatingTransactionGateway
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.insert_rotating_transaction_gateway_with_http_info(rotating_transaction_gateway, **kwargs)  # noqa: E501
        else:
            (data) = self.insert_rotating_transaction_gateway_with_http_info(rotating_transaction_gateway, **kwargs)  # noqa: E501
            return data

    def insert_rotating_transaction_gateway_with_http_info(self, rotating_transaction_gateway, **kwargs):  # noqa: E501
        """Insert a rotating transaction gateway  # noqa: E501

        Insert a rotating transaction gateway   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.insert_rotating_transaction_gateway_with_http_info(rotating_transaction_gateway, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RotatingTransactionGateway rotating_transaction_gateway: Rotating transaction gateway (required)
        :return: RotatingTransactionGateway
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rotating_transaction_gateway']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method insert_rotating_transaction_gateway" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rotating_transaction_gateway' is set
        if ('rotating_transaction_gateway' not in params or
                params['rotating_transaction_gateway'] is None):
            raise ValueError("Missing the required parameter `rotating_transaction_gateway` when calling `insert_rotating_transaction_gateway`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'rotating_transaction_gateway' in params:
            body_params = params['rotating_transaction_gateway']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json; charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/configuration/checkout/payments/rtg/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RotatingTransactionGateway',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def migrate_to_rotating_transaction_gateway(self, code, **kwargs):  # noqa: E501
        """Migrate a normal transaction gateway to a rotating transaction gateway  # noqa: E501

        Migrate a normal transaction gateway to a rotating transaction gateway   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.migrate_to_rotating_transaction_gateway(code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str code: The short code for the new rotating transaction gateway (required)
        :return: RotatingTransactionGateway
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.migrate_to_rotating_transaction_gateway_with_http_info(code, **kwargs)  # noqa: E501
        else:
            (data) = self.migrate_to_rotating_transaction_gateway_with_http_info(code, **kwargs)  # noqa: E501
            return data

    def migrate_to_rotating_transaction_gateway_with_http_info(self, code, **kwargs):  # noqa: E501
        """Migrate a normal transaction gateway to a rotating transaction gateway  # noqa: E501

        Migrate a normal transaction gateway to a rotating transaction gateway   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.migrate_to_rotating_transaction_gateway_with_http_info(code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str code: The short code for the new rotating transaction gateway (required)
        :return: RotatingTransactionGateway
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method migrate_to_rotating_transaction_gateway" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'code' is set
        if ('code' not in params or
                params['code'] is None):
            raise ValueError("Missing the required parameter `code` when calling `migrate_to_rotating_transaction_gateway`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'code' in params:
            path_params['code'] = params['code']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json; charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/configuration/checkout/payments/tg/migrateToRtgWithCodeOf/{code}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RotatingTransactionGateway',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def stripe_connect(self, rtg_oid, **kwargs):  # noqa: E501
        """Begin the processing of connecting with Stripe  # noqa: E501

        Begin the processing of connecting with Stripe.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stripe_connect(rtg_oid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int rtg_oid: The rtg_oid to be connected to stripe. (required)
        :return: StripeConnectResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.stripe_connect_with_http_info(rtg_oid, **kwargs)  # noqa: E501
        else:
            (data) = self.stripe_connect_with_http_info(rtg_oid, **kwargs)  # noqa: E501
            return data

    def stripe_connect_with_http_info(self, rtg_oid, **kwargs):  # noqa: E501
        """Begin the processing of connecting with Stripe  # noqa: E501

        Begin the processing of connecting with Stripe.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stripe_connect_with_http_info(rtg_oid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int rtg_oid: The rtg_oid to be connected to stripe. (required)
        :return: StripeConnectResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rtg_oid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stripe_connect" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rtg_oid' is set
        if ('rtg_oid' not in params or
                params['rtg_oid'] is None):
            raise ValueError("Missing the required parameter `rtg_oid` when calling `stripe_connect`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'rtg_oid' in params:
            path_params['rtg_oid'] = params['rtg_oid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json; charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/configuration/checkout/payments/rtg/{rtg_oid}/stripeConnect', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StripeConnectResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_payments_configuration(self, payments_configuration, **kwargs):  # noqa: E501
        """Updates payments configuration  # noqa: E501

        Updates payments configuration on the UltraCart account.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_payments_configuration(payments_configuration, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PaymentsConfiguration payments_configuration: Payments configuration (required)
        :return: PaymentsConfigurationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_payments_configuration_with_http_info(payments_configuration, **kwargs)  # noqa: E501
        else:
            (data) = self.update_payments_configuration_with_http_info(payments_configuration, **kwargs)  # noqa: E501
            return data

    def update_payments_configuration_with_http_info(self, payments_configuration, **kwargs):  # noqa: E501
        """Updates payments configuration  # noqa: E501

        Updates payments configuration on the UltraCart account.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_payments_configuration_with_http_info(payments_configuration, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PaymentsConfiguration payments_configuration: Payments configuration (required)
        :return: PaymentsConfigurationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['payments_configuration']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_payments_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'payments_configuration' is set
        if ('payments_configuration' not in params or
                params['payments_configuration'] is None):
            raise ValueError("Missing the required parameter `payments_configuration` when calling `update_payments_configuration`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'payments_configuration' in params:
            body_params = params['payments_configuration']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json; charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/configuration/checkout/payments', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaymentsConfigurationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_payments_transaction_gateway(self, update_gateway_request, **kwargs):  # noqa: E501
        """Updates payments transaction gateway  # noqa: E501

        Updates payments transaction gateway on the UltraCart account.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_payments_transaction_gateway(update_gateway_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TransactionGatewaysRequest update_gateway_request: Transaction gateways (required)
        :return: TransactionGatewaysResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_payments_transaction_gateway_with_http_info(update_gateway_request, **kwargs)  # noqa: E501
        else:
            (data) = self.update_payments_transaction_gateway_with_http_info(update_gateway_request, **kwargs)  # noqa: E501
            return data

    def update_payments_transaction_gateway_with_http_info(self, update_gateway_request, **kwargs):  # noqa: E501
        """Updates payments transaction gateway  # noqa: E501

        Updates payments transaction gateway on the UltraCart account.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_payments_transaction_gateway_with_http_info(update_gateway_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TransactionGatewaysRequest update_gateway_request: Transaction gateways (required)
        :return: TransactionGatewaysResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['update_gateway_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_payments_transaction_gateway" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'update_gateway_request' is set
        if ('update_gateway_request' not in params or
                params['update_gateway_request'] is None):
            raise ValueError("Missing the required parameter `update_gateway_request` when calling `update_payments_transaction_gateway`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'update_gateway_request' in params:
            body_params = params['update_gateway_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json; charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/configuration/checkout/payments/tg', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TransactionGatewaysResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_rotating_transaction_gateway(self, rtg_oid, rotating_transaction_gateway, **kwargs):  # noqa: E501
        """Update a rotating transaction gateway  # noqa: E501

        Update a rotating transaction gateway   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_rotating_transaction_gateway(rtg_oid, rotating_transaction_gateway, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int rtg_oid: The rtg_oid to update. (required)
        :param RotatingTransactionGateway rotating_transaction_gateway: Rotating transaction gateway (required)
        :return: RotatingTransactionGateway
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_rotating_transaction_gateway_with_http_info(rtg_oid, rotating_transaction_gateway, **kwargs)  # noqa: E501
        else:
            (data) = self.update_rotating_transaction_gateway_with_http_info(rtg_oid, rotating_transaction_gateway, **kwargs)  # noqa: E501
            return data

    def update_rotating_transaction_gateway_with_http_info(self, rtg_oid, rotating_transaction_gateway, **kwargs):  # noqa: E501
        """Update a rotating transaction gateway  # noqa: E501

        Update a rotating transaction gateway   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_rotating_transaction_gateway_with_http_info(rtg_oid, rotating_transaction_gateway, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int rtg_oid: The rtg_oid to update. (required)
        :param RotatingTransactionGateway rotating_transaction_gateway: Rotating transaction gateway (required)
        :return: RotatingTransactionGateway
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rtg_oid', 'rotating_transaction_gateway']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_rotating_transaction_gateway" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rtg_oid' is set
        if ('rtg_oid' not in params or
                params['rtg_oid'] is None):
            raise ValueError("Missing the required parameter `rtg_oid` when calling `update_rotating_transaction_gateway`")  # noqa: E501
        # verify the required parameter 'rotating_transaction_gateway' is set
        if ('rotating_transaction_gateway' not in params or
                params['rotating_transaction_gateway'] is None):
            raise ValueError("Missing the required parameter `rotating_transaction_gateway` when calling `update_rotating_transaction_gateway`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'rtg_oid' in params:
            path_params['rtg_oid'] = params['rtg_oid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'rotating_transaction_gateway' in params:
            body_params = params['rotating_transaction_gateway']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json; charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/configuration/checkout/payments/rtg/{rtg_oid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RotatingTransactionGateway',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def wepay_enroll(self, wepay_enroll, **kwargs):  # noqa: E501
        """Enroll with WePay  # noqa: E501

        Enroll with WePay on the UltraCart account.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wepay_enroll(wepay_enroll, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PaymentsWepayEnroll wepay_enroll: Wepay enrollment information (required)
        :return: PaymentsConfigurationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.wepay_enroll_with_http_info(wepay_enroll, **kwargs)  # noqa: E501
        else:
            (data) = self.wepay_enroll_with_http_info(wepay_enroll, **kwargs)  # noqa: E501
            return data

    def wepay_enroll_with_http_info(self, wepay_enroll, **kwargs):  # noqa: E501
        """Enroll with WePay  # noqa: E501

        Enroll with WePay on the UltraCart account.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wepay_enroll_with_http_info(wepay_enroll, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PaymentsWepayEnroll wepay_enroll: Wepay enrollment information (required)
        :return: PaymentsConfigurationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wepay_enroll']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method wepay_enroll" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wepay_enroll' is set
        if ('wepay_enroll' not in params or
                params['wepay_enroll'] is None):
            raise ValueError("Missing the required parameter `wepay_enroll` when calling `wepay_enroll`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'wepay_enroll' in params:
            body_params = params['wepay_enroll']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json; charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ultraCartOauth', 'ultraCartSimpleApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/configuration/checkout/wepayEnroll', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaymentsConfigurationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
