"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from ultracart.api_client import ApiClient, Endpoint as _Endpoint
from ultracart.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from ultracart.model.auto_order import AutoOrder
from ultracart.model.auto_order_query import AutoOrderQuery
from ultracart.model.auto_order_query_batch import AutoOrderQueryBatch
from ultracart.model.auto_order_response import AutoOrderResponse
from ultracart.model.auto_orders_request import AutoOrdersRequest
from ultracart.model.auto_orders_response import AutoOrdersResponse
from ultracart.model.error_response import ErrorResponse


class AutoOrderApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    @classmethod
    def fromApiKey(cls, apiKey, verify_ssl = True, debug = False):
        config = Configuration()
        config.api_key['x-ultracart-simple-key'] = apiKey
        config.debug = debug
        config.verify_ssl = verify_ssl

        api_client = ApiClient(configuration=config, header_name='X-UltraCart-Api-Version', header_value='2017-03-01')
        return AutoOrderApi(api_client)


    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.get_auto_order_endpoint = _Endpoint(
            settings={
                'response_type': (AutoOrderResponse,),
                'auth': [
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/auto_order/auto_orders/{auto_order_oid}',
                'operation_id': 'get_auto_order',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'auto_order_oid',
                    'expand',
                ],
                'required': [
                    'auto_order_oid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'auto_order_oid':
                        (int,),
                    'expand':
                        (str,),
                },
                'attribute_map': {
                    'auto_order_oid': 'auto_order_oid',
                    'expand': '_expand',
                },
                'location_map': {
                    'auto_order_oid': 'path',
                    'expand': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_auto_order_by_code_endpoint = _Endpoint(
            settings={
                'response_type': (AutoOrderResponse,),
                'auth': [
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/auto_order/auto_orders/code/{auto_order_code}',
                'operation_id': 'get_auto_order_by_code',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'auto_order_code',
                    'expand',
                ],
                'required': [
                    'auto_order_code',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'auto_order_code':
                        (str,),
                    'expand':
                        (str,),
                },
                'attribute_map': {
                    'auto_order_code': 'auto_order_code',
                    'expand': '_expand',
                },
                'location_map': {
                    'auto_order_code': 'path',
                    'expand': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_auto_order_by_reference_order_id_endpoint = _Endpoint(
            settings={
                'response_type': (AutoOrderResponse,),
                'auth': [
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/auto_order/auto_orders/reference_order_id/{reference_order_id}',
                'operation_id': 'get_auto_order_by_reference_order_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'reference_order_id',
                    'expand',
                ],
                'required': [
                    'reference_order_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'reference_order_id':
                        (str,),
                    'expand':
                        (str,),
                },
                'attribute_map': {
                    'reference_order_id': 'reference_order_id',
                    'expand': '_expand',
                },
                'location_map': {
                    'reference_order_id': 'path',
                    'expand': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_auto_orders_endpoint = _Endpoint(
            settings={
                'response_type': (AutoOrdersResponse,),
                'auth': [
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/auto_order/auto_orders',
                'operation_id': 'get_auto_orders',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'auto_order_code',
                    'original_order_id',
                    'first_name',
                    'last_name',
                    'company',
                    'city',
                    'state',
                    'postal_code',
                    'country_code',
                    'phone',
                    'email',
                    'original_order_date_begin',
                    'original_order_date_end',
                    'next_shipment_date_begin',
                    'next_shipment_date_end',
                    'card_type',
                    'item_id',
                    'status',
                    'limit',
                    'offset',
                    'since',
                    'sort',
                    'expand',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'auto_order_code':
                        (str,),
                    'original_order_id':
                        (str,),
                    'first_name':
                        (str,),
                    'last_name':
                        (str,),
                    'company':
                        (str,),
                    'city':
                        (str,),
                    'state':
                        (str,),
                    'postal_code':
                        (str,),
                    'country_code':
                        (str,),
                    'phone':
                        (str,),
                    'email':
                        (str,),
                    'original_order_date_begin':
                        (str,),
                    'original_order_date_end':
                        (str,),
                    'next_shipment_date_begin':
                        (str,),
                    'next_shipment_date_end':
                        (str,),
                    'card_type':
                        (str,),
                    'item_id':
                        (str,),
                    'status':
                        (str,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                    'since':
                        (str,),
                    'sort':
                        (str,),
                    'expand':
                        (str,),
                },
                'attribute_map': {
                    'auto_order_code': 'auto_order_code',
                    'original_order_id': 'original_order_id',
                    'first_name': 'first_name',
                    'last_name': 'last_name',
                    'company': 'company',
                    'city': 'city',
                    'state': 'state',
                    'postal_code': 'postal_code',
                    'country_code': 'country_code',
                    'phone': 'phone',
                    'email': 'email',
                    'original_order_date_begin': 'original_order_date_begin',
                    'original_order_date_end': 'original_order_date_end',
                    'next_shipment_date_begin': 'next_shipment_date_begin',
                    'next_shipment_date_end': 'next_shipment_date_end',
                    'card_type': 'card_type',
                    'item_id': 'item_id',
                    'status': 'status',
                    'limit': '_limit',
                    'offset': '_offset',
                    'since': '_since',
                    'sort': '_sort',
                    'expand': '_expand',
                },
                'location_map': {
                    'auto_order_code': 'query',
                    'original_order_id': 'query',
                    'first_name': 'query',
                    'last_name': 'query',
                    'company': 'query',
                    'city': 'query',
                    'state': 'query',
                    'postal_code': 'query',
                    'country_code': 'query',
                    'phone': 'query',
                    'email': 'query',
                    'original_order_date_begin': 'query',
                    'original_order_date_end': 'query',
                    'next_shipment_date_begin': 'query',
                    'next_shipment_date_end': 'query',
                    'card_type': 'query',
                    'item_id': 'query',
                    'status': 'query',
                    'limit': 'query',
                    'offset': 'query',
                    'since': 'query',
                    'sort': 'query',
                    'expand': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_auto_orders_batch_endpoint = _Endpoint(
            settings={
                'response_type': (AutoOrdersResponse,),
                'auth': [
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/auto_order/auto_orders/batch',
                'operation_id': 'get_auto_orders_batch',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'auto_order_batch',
                    'expand',
                ],
                'required': [
                    'auto_order_batch',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'auto_order_batch':
                        (AutoOrderQueryBatch,),
                    'expand':
                        (str,),
                },
                'attribute_map': {
                    'expand': '_expand',
                },
                'location_map': {
                    'auto_order_batch': 'body',
                    'expand': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.get_auto_orders_by_query_endpoint = _Endpoint(
            settings={
                'response_type': (AutoOrdersResponse,),
                'auth': [
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/auto_order/auto_orders/query',
                'operation_id': 'get_auto_orders_by_query',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'auto_order_query',
                    'limit',
                    'offset',
                    'sort',
                    'expand',
                ],
                'required': [
                    'auto_order_query',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'auto_order_query':
                        (AutoOrderQuery,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                    'sort':
                        (str,),
                    'expand':
                        (str,),
                },
                'attribute_map': {
                    'limit': '_limit',
                    'offset': '_offset',
                    'sort': '_sort',
                    'expand': '_expand',
                },
                'location_map': {
                    'auto_order_query': 'body',
                    'limit': 'query',
                    'offset': 'query',
                    'sort': 'query',
                    'expand': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.update_auto_order_endpoint = _Endpoint(
            settings={
                'response_type': (AutoOrderResponse,),
                'auth': [
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/auto_order/auto_orders/{auto_order_oid}',
                'operation_id': 'update_auto_order',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'auto_order_oid',
                    'auto_order',
                    'expand',
                ],
                'required': [
                    'auto_order_oid',
                    'auto_order',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'auto_order_oid':
                        (int,),
                    'auto_order':
                        (AutoOrder,),
                    'expand':
                        (str,),
                },
                'attribute_map': {
                    'auto_order_oid': 'auto_order_oid',
                    'expand': '_expand',
                },
                'location_map': {
                    'auto_order_oid': 'path',
                    'auto_order': 'body',
                    'expand': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json; charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.update_auto_orders_batch_endpoint = _Endpoint(
            settings={
                'response_type': (AutoOrdersResponse,),
                'auth': [
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/auto_order/auto_orders/batch',
                'operation_id': 'update_auto_orders_batch',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'auto_orders_request',
                    'expand',
                    'placeholders',
                    '_async',
                ],
                'required': [
                    'auto_orders_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'auto_orders_request':
                        (AutoOrdersRequest,),
                    'expand':
                        (str,),
                    'placeholders':
                        (bool,),
                    '_async':
                        (bool,),
                },
                'attribute_map': {
                    'expand': '_expand',
                    'placeholders': '_placeholders',
                    '_async': '_async',
                },
                'location_map': {
                    'auto_orders_request': 'body',
                    'expand': 'query',
                    'placeholders': 'query',
                    '_async': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json; charset=UTF-8'
                ]
            },
            api_client=api_client
        )

    def get_auto_order(
        self,
        auto_order_oid,
        **kwargs
    ):
        """Retrieve an auto order by oid  # noqa: E501

        Retrieves a single auto order using the specified auto order oid.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_auto_order(auto_order_oid, async_req=True)
        >>> result = thread.get()

        Args:
            auto_order_oid (int): The auto order oid to retrieve.

        Keyword Args:
            expand (str): The object expansion to perform on the result.  See documentation for examples. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            AutoOrderResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['auto_order_oid'] = \
            auto_order_oid
        return self.get_auto_order_endpoint.call_with_http_info(**kwargs)

    def get_auto_order_by_code(
        self,
        auto_order_code,
        **kwargs
    ):
        """Retrieve an auto order by code  # noqa: E501

        Retrieves a single auto order using the specified reference (original) order id.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_auto_order_by_code(auto_order_code, async_req=True)
        >>> result = thread.get()

        Args:
            auto_order_code (str): The auto order oid to retrieve.

        Keyword Args:
            expand (str): The object expansion to perform on the result.  See documentation for examples. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            AutoOrderResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['auto_order_code'] = \
            auto_order_code
        return self.get_auto_order_by_code_endpoint.call_with_http_info(**kwargs)

    def get_auto_order_by_reference_order_id(
        self,
        reference_order_id,
        **kwargs
    ):
        """Retrieve an auto order by order id  # noqa: E501

        Retrieves a single auto order using the specified reference (original) order id.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_auto_order_by_reference_order_id(reference_order_id, async_req=True)
        >>> result = thread.get()

        Args:
            reference_order_id (str): The auto order oid to retrieve.

        Keyword Args:
            expand (str): The object expansion to perform on the result.  See documentation for examples. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            AutoOrderResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['reference_order_id'] = \
            reference_order_id
        return self.get_auto_order_by_reference_order_id_endpoint.call_with_http_info(**kwargs)

    def get_auto_orders(
        self,
        **kwargs
    ):
        """Retrieve auto orders  # noqa: E501

        Retrieves auto orders from the account.  If no parameters are specified, all auto orders will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_auto_orders(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            auto_order_code (str): Auto order code. [optional]
            original_order_id (str): Original order id. [optional]
            first_name (str): First name. [optional]
            last_name (str): Last name. [optional]
            company (str): Company. [optional]
            city (str): City. [optional]
            state (str): State. [optional]
            postal_code (str): Postal code. [optional]
            country_code (str): Country code (ISO-3166 two letter). [optional]
            phone (str): Phone. [optional]
            email (str): Email. [optional]
            original_order_date_begin (str): Original order date begin. [optional]
            original_order_date_end (str): Original order date end. [optional]
            next_shipment_date_begin (str): Next shipment date begin. [optional]
            next_shipment_date_end (str): Next shipment date end. [optional]
            card_type (str): Card type. [optional]
            item_id (str): Item ID. [optional]
            status (str): Status. [optional]
            limit (int): The maximum number of records to return on this one API call. (Max 200). [optional] if omitted the server will use the default value of 100
            offset (int): Pagination of the record set.  Offset is a zero based index.. [optional] if omitted the server will use the default value of 0
            since (str): Fetch auto orders that have been created/modified since this date/time.. [optional]
            sort (str): The sort order of the auto orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.. [optional]
            expand (str): The object expansion to perform on the result.  See documentation for examples. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            AutoOrdersResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.get_auto_orders_endpoint.call_with_http_info(**kwargs)

    def get_auto_orders_batch(
        self,
        auto_order_batch,
        **kwargs
    ):
        """Retrieve auto order batch  # noqa: E501

        Retrieves a group of auto orders from the account based on an array of auto order oids.  If more than 200 auto order ids are specified, the API call will fail with a bad request error.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_auto_orders_batch(auto_order_batch, async_req=True)
        >>> result = thread.get()

        Args:
            auto_order_batch (AutoOrderQueryBatch): Auto order batch

        Keyword Args:
            expand (str): The object expansion to perform on the result.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            AutoOrdersResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['auto_order_batch'] = \
            auto_order_batch
        return self.get_auto_orders_batch_endpoint.call_with_http_info(**kwargs)

    def get_auto_orders_by_query(
        self,
        auto_order_query,
        **kwargs
    ):
        """Retrieve auto orders by query  # noqa: E501

        Retrieves a group of auto orders from the account based on a query object.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_auto_orders_by_query(auto_order_query, async_req=True)
        >>> result = thread.get()

        Args:
            auto_order_query (AutoOrderQuery): Auto order query

        Keyword Args:
            limit (int): The maximum number of records to return on this one API call. (Maximum 200). [optional] if omitted the server will use the default value of 100
            offset (int): Pagination of the record set.  Offset is a zero based index.. [optional] if omitted the server will use the default value of 0
            sort (str): The sort order of the auto orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.. [optional]
            expand (str): The object expansion to perform on the result.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            AutoOrdersResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['auto_order_query'] = \
            auto_order_query
        return self.get_auto_orders_by_query_endpoint.call_with_http_info(**kwargs)

    def update_auto_order(
        self,
        auto_order_oid,
        auto_order,
        **kwargs
    ):
        """Update an auto order  # noqa: E501

        Update an auto order on the UltraCart account.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_auto_order(auto_order_oid, auto_order, async_req=True)
        >>> result = thread.get()

        Args:
            auto_order_oid (int): The auto order oid to update.
            auto_order (AutoOrder): Auto order to update

        Keyword Args:
            expand (str): The object expansion to perform on the result.  See documentation for examples. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            AutoOrderResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['auto_order_oid'] = \
            auto_order_oid
        kwargs['auto_order'] = \
            auto_order
        return self.update_auto_order_endpoint.call_with_http_info(**kwargs)

    def update_auto_orders_batch(
        self,
        auto_orders_request,
        **kwargs
    ):
        """Update multiple auto orders  # noqa: E501

        Update multiple auto orders on the UltraCart account.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_auto_orders_batch(auto_orders_request, async_req=True)
        >>> result = thread.get()

        Args:
            auto_orders_request (AutoOrdersRequest): Auto orders to update (synchronous maximum 20 / asynchronous maximum 100)

        Keyword Args:
            expand (str): The object expansion to perform on the result.  See documentation for examples. [optional]
            placeholders (bool): Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.. [optional]
            _async (bool): True if the operation should be run async.  No result returned. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            AutoOrdersResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['auto_orders_request'] = \
            auto_orders_request
        return self.update_auto_orders_batch_endpoint.call_with_http_info(**kwargs)

