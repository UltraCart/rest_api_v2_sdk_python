"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from ultracart.api_client import ApiClient, Endpoint as _Endpoint
from ultracart.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from ultracart.model.chargeback_dispute import ChargebackDispute
from ultracart.model.chargeback_dispute_response import ChargebackDisputeResponse
from ultracart.model.chargeback_disputes_response import ChargebackDisputesResponse
from ultracart.model.error_response import ErrorResponse


class ChargebackApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    @classmethod
    def fromApiKey(cls, apiKey, verify_ssl = True, debug = False):
        config = Configuration()
        config.api_key['x-ultracart-simple-key'] = apiKey
        config.debug = debug
        config.verify_ssl = verify_ssl

        api_client = ApiClient(configuration=config, header_name='X-UltraCart-Api-Version', header_value='2017-03-01')
        return ChargebackApi(api_client)


    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.delete_chargeback_endpoint = _Endpoint(
            settings={
                'response_type': (ChargebackDisputeResponse,),
                'auth': [
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/chargeback/chargebacks/{chargeback_dispute_oid}',
                'operation_id': 'delete_chargeback',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'chargeback_dispute_oid',
                ],
                'required': [
                    'chargeback_dispute_oid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'chargeback_dispute_oid':
                        (int,),
                },
                'attribute_map': {
                    'chargeback_dispute_oid': 'chargeback_dispute_oid',
                },
                'location_map': {
                    'chargeback_dispute_oid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_chargeback_dispute_endpoint = _Endpoint(
            settings={
                'response_type': (ChargebackDisputeResponse,),
                'auth': [
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/chargeback/chargebacks/{chargeback_dispute_oid}',
                'operation_id': 'get_chargeback_dispute',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'chargeback_dispute_oid',
                    'expand',
                ],
                'required': [
                    'chargeback_dispute_oid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'chargeback_dispute_oid':
                        (int,),
                    'expand':
                        (str,),
                },
                'attribute_map': {
                    'chargeback_dispute_oid': 'chargeback_dispute_oid',
                    'expand': '_expand',
                },
                'location_map': {
                    'chargeback_dispute_oid': 'path',
                    'expand': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_chargeback_disputes_endpoint = _Endpoint(
            settings={
                'response_type': (ChargebackDisputesResponse,),
                'auth': [
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/chargeback/chargebacks',
                'operation_id': 'get_chargeback_disputes',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'order_id',
                    'case_number',
                    'status',
                    'expiration_dts_start',
                    'expiration_dts_end',
                    'chargeback_dts_start',
                    'chargeback_dts_end',
                    'limit',
                    'offset',
                    'since',
                    'sort',
                    'expand',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'order_id':
                        (str,),
                    'case_number':
                        (str,),
                    'status':
                        (str,),
                    'expiration_dts_start':
                        (str,),
                    'expiration_dts_end':
                        (str,),
                    'chargeback_dts_start':
                        (str,),
                    'chargeback_dts_end':
                        (str,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                    'since':
                        (str,),
                    'sort':
                        (str,),
                    'expand':
                        (str,),
                },
                'attribute_map': {
                    'order_id': 'order_id',
                    'case_number': 'case_number',
                    'status': 'status',
                    'expiration_dts_start': 'expiration_dts_start',
                    'expiration_dts_end': 'expiration_dts_end',
                    'chargeback_dts_start': 'chargeback_dts_start',
                    'chargeback_dts_end': 'chargeback_dts_end',
                    'limit': '_limit',
                    'offset': '_offset',
                    'since': '_since',
                    'sort': '_sort',
                    'expand': '_expand',
                },
                'location_map': {
                    'order_id': 'query',
                    'case_number': 'query',
                    'status': 'query',
                    'expiration_dts_start': 'query',
                    'expiration_dts_end': 'query',
                    'chargeback_dts_start': 'query',
                    'chargeback_dts_end': 'query',
                    'limit': 'query',
                    'offset': 'query',
                    'since': 'query',
                    'sort': 'query',
                    'expand': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.insert_chargeback_endpoint = _Endpoint(
            settings={
                'response_type': (ChargebackDisputeResponse,),
                'auth': [
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/chargeback/chargebacks',
                'operation_id': 'insert_chargeback',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'chargeback',
                    'expand',
                ],
                'required': [
                    'chargeback',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'chargeback':
                        (ChargebackDispute,),
                    'expand':
                        (str,),
                },
                'attribute_map': {
                    'expand': '_expand',
                },
                'location_map': {
                    'chargeback': 'body',
                    'expand': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json; charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.update_chargeback_endpoint = _Endpoint(
            settings={
                'response_type': (ChargebackDisputeResponse,),
                'auth': [
                    'ultraCartOauth',
                    'ultraCartSimpleApiKey'
                ],
                'endpoint_path': '/chargeback/chargebacks/{chargeback_dispute_oid}',
                'operation_id': 'update_chargeback',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'chargeback_dispute_oid',
                    'chargeback',
                    'expand',
                ],
                'required': [
                    'chargeback_dispute_oid',
                    'chargeback',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'chargeback_dispute_oid':
                        (int,),
                    'chargeback':
                        (ChargebackDispute,),
                    'expand':
                        (str,),
                },
                'attribute_map': {
                    'chargeback_dispute_oid': 'chargeback_dispute_oid',
                    'expand': '_expand',
                },
                'location_map': {
                    'chargeback_dispute_oid': 'path',
                    'chargeback': 'body',
                    'expand': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json; charset=UTF-8'
                ]
            },
            api_client=api_client
        )

    def delete_chargeback(
        self,
        chargeback_dispute_oid,
        **kwargs
    ):
        """Delete a chargeback  # noqa: E501

        Delete a chargeback on the UltraCart account.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_chargeback(chargeback_dispute_oid, async_req=True)
        >>> result = thread.get()

        Args:
            chargeback_dispute_oid (int): The chargeback_dispute_oid to delete.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ChargebackDisputeResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['chargeback_dispute_oid'] = \
            chargeback_dispute_oid
        return self.delete_chargeback_endpoint.call_with_http_info(**kwargs)

    def get_chargeback_dispute(
        self,
        chargeback_dispute_oid,
        **kwargs
    ):
        """Retrieve a chargeback  # noqa: E501

        Retrieves a single chargeback using the specified chargeback dispute oid.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_chargeback_dispute(chargeback_dispute_oid, async_req=True)
        >>> result = thread.get()

        Args:
            chargeback_dispute_oid (int): The chargeback dispute oid to retrieve.

        Keyword Args:
            expand (str): The object expansion to perform on the result.  See documentation for examples. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ChargebackDisputeResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['chargeback_dispute_oid'] = \
            chargeback_dispute_oid
        return self.get_chargeback_dispute_endpoint.call_with_http_info(**kwargs)

    def get_chargeback_disputes(
        self,
        **kwargs
    ):
        """Retrieve chargebacks  # noqa: E501

        Retrieves chargebacks from the account.  If no parameters are specified, all chargebacks will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_chargeback_disputes(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            order_id (str): Order Id. [optional]
            case_number (str): Case number. [optional]
            status (str): Status. [optional]
            expiration_dts_start (str): Expiration dts start. [optional]
            expiration_dts_end (str): Expiration dts end. [optional]
            chargeback_dts_start (str): Chargeback dts start. [optional]
            chargeback_dts_end (str): Chargeback dts end. [optional]
            limit (int): The maximum number of records to return on this one API call. (Max 200). [optional] if omitted the server will use the default value of 100
            offset (int): Pagination of the record set.  Offset is a zero based index.. [optional] if omitted the server will use the default value of 0
            since (str): Fetch chargebacks that have been created/modified since this date/time.. [optional]
            sort (str): The sort order of the chargebacks.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.. [optional]
            expand (str): The object expansion to perform on the result.  See documentation for examples. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ChargebackDisputesResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.get_chargeback_disputes_endpoint.call_with_http_info(**kwargs)

    def insert_chargeback(
        self,
        chargeback,
        **kwargs
    ):
        """Insert a chargeback  # noqa: E501

        Insert a chargeback on the UltraCart account.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.insert_chargeback(chargeback, async_req=True)
        >>> result = thread.get()

        Args:
            chargeback (ChargebackDispute): Chargeback to insert

        Keyword Args:
            expand (str): The object expansion to perform on the result.  See documentation for examples. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ChargebackDisputeResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['chargeback'] = \
            chargeback
        return self.insert_chargeback_endpoint.call_with_http_info(**kwargs)

    def update_chargeback(
        self,
        chargeback_dispute_oid,
        chargeback,
        **kwargs
    ):
        """Update a chargeback  # noqa: E501

        Update a chargeback on the UltraCart account.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_chargeback(chargeback_dispute_oid, chargeback, async_req=True)
        >>> result = thread.get()

        Args:
            chargeback_dispute_oid (int): The chargeback_dispute_oid to update.
            chargeback (ChargebackDispute): Chargeback to update

        Keyword Args:
            expand (str): The object expansion to perform on the result.  See documentation for examples. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ChargebackDisputeResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['chargeback_dispute_oid'] = \
            chargeback_dispute_oid
        kwargs['chargeback'] = \
            chargeback
        return self.update_chargeback_endpoint.call_with_http_info(**kwargs)

