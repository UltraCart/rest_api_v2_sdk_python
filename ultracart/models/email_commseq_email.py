# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class EmailCommseqEmail(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'deleted': 'bool',
        'edited_by_user': 'str',
        'email_communication_sequence_email_uuid': 'str',
        'email_container_cjson': 'str',
        'email_template_vm_path': 'str',
        'filter_profile_equation_json': 'str',
        'individually_render': 'bool',
        'merchant_id': 'str',
        'preview_text': 'str',
        'smart_sending': 'bool',
        'storefront_oid': 'int',
        'subject': 'str',
        'transactional_email': 'bool',
        'version': 'int'
    }

    attribute_map = {
        'deleted': 'deleted',
        'edited_by_user': 'edited_by_user',
        'email_communication_sequence_email_uuid': 'email_communication_sequence_email_uuid',
        'email_container_cjson': 'email_container_cjson',
        'email_template_vm_path': 'email_template_vm_path',
        'filter_profile_equation_json': 'filter_profile_equation_json',
        'individually_render': 'individually_render',
        'merchant_id': 'merchant_id',
        'preview_text': 'preview_text',
        'smart_sending': 'smart_sending',
        'storefront_oid': 'storefront_oid',
        'subject': 'subject',
        'transactional_email': 'transactional_email',
        'version': 'version'
    }

    def __init__(self, deleted=None, edited_by_user=None, email_communication_sequence_email_uuid=None, email_container_cjson=None, email_template_vm_path=None, filter_profile_equation_json=None, individually_render=None, merchant_id=None, preview_text=None, smart_sending=None, storefront_oid=None, subject=None, transactional_email=None, version=None):
        """
        EmailCommseqEmail - a model defined in Swagger
        """

        self._deleted = None
        self._edited_by_user = None
        self._email_communication_sequence_email_uuid = None
        self._email_container_cjson = None
        self._email_template_vm_path = None
        self._filter_profile_equation_json = None
        self._individually_render = None
        self._merchant_id = None
        self._preview_text = None
        self._smart_sending = None
        self._storefront_oid = None
        self._subject = None
        self._transactional_email = None
        self._version = None
        self.discriminator = None

        if deleted is not None:
          self.deleted = deleted
        if edited_by_user is not None:
          self.edited_by_user = edited_by_user
        if email_communication_sequence_email_uuid is not None:
          self.email_communication_sequence_email_uuid = email_communication_sequence_email_uuid
        if email_container_cjson is not None:
          self.email_container_cjson = email_container_cjson
        if email_template_vm_path is not None:
          self.email_template_vm_path = email_template_vm_path
        if filter_profile_equation_json is not None:
          self.filter_profile_equation_json = filter_profile_equation_json
        if individually_render is not None:
          self.individually_render = individually_render
        if merchant_id is not None:
          self.merchant_id = merchant_id
        if preview_text is not None:
          self.preview_text = preview_text
        if smart_sending is not None:
          self.smart_sending = smart_sending
        if storefront_oid is not None:
          self.storefront_oid = storefront_oid
        if subject is not None:
          self.subject = subject
        if transactional_email is not None:
          self.transactional_email = transactional_email
        if version is not None:
          self.version = version

    @property
    def deleted(self):
        """
        Gets the deleted of this EmailCommseqEmail.
        Deleted

        :return: The deleted of this EmailCommseqEmail.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """
        Sets the deleted of this EmailCommseqEmail.
        Deleted

        :param deleted: The deleted of this EmailCommseqEmail.
        :type: bool
        """

        self._deleted = deleted

    @property
    def edited_by_user(self):
        """
        Gets the edited_by_user of this EmailCommseqEmail.
        Edited by user

        :return: The edited_by_user of this EmailCommseqEmail.
        :rtype: str
        """
        return self._edited_by_user

    @edited_by_user.setter
    def edited_by_user(self, edited_by_user):
        """
        Sets the edited_by_user of this EmailCommseqEmail.
        Edited by user

        :param edited_by_user: The edited_by_user of this EmailCommseqEmail.
        :type: str
        """

        self._edited_by_user = edited_by_user

    @property
    def email_communication_sequence_email_uuid(self):
        """
        Gets the email_communication_sequence_email_uuid of this EmailCommseqEmail.
        Email communication sequence email uuid

        :return: The email_communication_sequence_email_uuid of this EmailCommseqEmail.
        :rtype: str
        """
        return self._email_communication_sequence_email_uuid

    @email_communication_sequence_email_uuid.setter
    def email_communication_sequence_email_uuid(self, email_communication_sequence_email_uuid):
        """
        Sets the email_communication_sequence_email_uuid of this EmailCommseqEmail.
        Email communication sequence email uuid

        :param email_communication_sequence_email_uuid: The email_communication_sequence_email_uuid of this EmailCommseqEmail.
        :type: str
        """

        self._email_communication_sequence_email_uuid = email_communication_sequence_email_uuid

    @property
    def email_container_cjson(self):
        """
        Gets the email_container_cjson of this EmailCommseqEmail.
        Email container cjson

        :return: The email_container_cjson of this EmailCommseqEmail.
        :rtype: str
        """
        return self._email_container_cjson

    @email_container_cjson.setter
    def email_container_cjson(self, email_container_cjson):
        """
        Sets the email_container_cjson of this EmailCommseqEmail.
        Email container cjson

        :param email_container_cjson: The email_container_cjson of this EmailCommseqEmail.
        :type: str
        """

        self._email_container_cjson = email_container_cjson

    @property
    def email_template_vm_path(self):
        """
        Gets the email_template_vm_path of this EmailCommseqEmail.
        Email template virtual path

        :return: The email_template_vm_path of this EmailCommseqEmail.
        :rtype: str
        """
        return self._email_template_vm_path

    @email_template_vm_path.setter
    def email_template_vm_path(self, email_template_vm_path):
        """
        Sets the email_template_vm_path of this EmailCommseqEmail.
        Email template virtual path

        :param email_template_vm_path: The email_template_vm_path of this EmailCommseqEmail.
        :type: str
        """

        self._email_template_vm_path = email_template_vm_path

    @property
    def filter_profile_equation_json(self):
        """
        Gets the filter_profile_equation_json of this EmailCommseqEmail.
        Filter profile equation json

        :return: The filter_profile_equation_json of this EmailCommseqEmail.
        :rtype: str
        """
        return self._filter_profile_equation_json

    @filter_profile_equation_json.setter
    def filter_profile_equation_json(self, filter_profile_equation_json):
        """
        Sets the filter_profile_equation_json of this EmailCommseqEmail.
        Filter profile equation json

        :param filter_profile_equation_json: The filter_profile_equation_json of this EmailCommseqEmail.
        :type: str
        """

        self._filter_profile_equation_json = filter_profile_equation_json

    @property
    def individually_render(self):
        """
        Gets the individually_render of this EmailCommseqEmail.
        Individually render

        :return: The individually_render of this EmailCommseqEmail.
        :rtype: bool
        """
        return self._individually_render

    @individually_render.setter
    def individually_render(self, individually_render):
        """
        Sets the individually_render of this EmailCommseqEmail.
        Individually render

        :param individually_render: The individually_render of this EmailCommseqEmail.
        :type: bool
        """

        self._individually_render = individually_render

    @property
    def merchant_id(self):
        """
        Gets the merchant_id of this EmailCommseqEmail.
        Merchant ID

        :return: The merchant_id of this EmailCommseqEmail.
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """
        Sets the merchant_id of this EmailCommseqEmail.
        Merchant ID

        :param merchant_id: The merchant_id of this EmailCommseqEmail.
        :type: str
        """

        self._merchant_id = merchant_id

    @property
    def preview_text(self):
        """
        Gets the preview_text of this EmailCommseqEmail.
        Preview text

        :return: The preview_text of this EmailCommseqEmail.
        :rtype: str
        """
        return self._preview_text

    @preview_text.setter
    def preview_text(self, preview_text):
        """
        Sets the preview_text of this EmailCommseqEmail.
        Preview text

        :param preview_text: The preview_text of this EmailCommseqEmail.
        :type: str
        """

        self._preview_text = preview_text

    @property
    def smart_sending(self):
        """
        Gets the smart_sending of this EmailCommseqEmail.
        Smart sending

        :return: The smart_sending of this EmailCommseqEmail.
        :rtype: bool
        """
        return self._smart_sending

    @smart_sending.setter
    def smart_sending(self, smart_sending):
        """
        Sets the smart_sending of this EmailCommseqEmail.
        Smart sending

        :param smart_sending: The smart_sending of this EmailCommseqEmail.
        :type: bool
        """

        self._smart_sending = smart_sending

    @property
    def storefront_oid(self):
        """
        Gets the storefront_oid of this EmailCommseqEmail.
        Storefront oid

        :return: The storefront_oid of this EmailCommseqEmail.
        :rtype: int
        """
        return self._storefront_oid

    @storefront_oid.setter
    def storefront_oid(self, storefront_oid):
        """
        Sets the storefront_oid of this EmailCommseqEmail.
        Storefront oid

        :param storefront_oid: The storefront_oid of this EmailCommseqEmail.
        :type: int
        """

        self._storefront_oid = storefront_oid

    @property
    def subject(self):
        """
        Gets the subject of this EmailCommseqEmail.
        Subject

        :return: The subject of this EmailCommseqEmail.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """
        Sets the subject of this EmailCommseqEmail.
        Subject

        :param subject: The subject of this EmailCommseqEmail.
        :type: str
        """

        self._subject = subject

    @property
    def transactional_email(self):
        """
        Gets the transactional_email of this EmailCommseqEmail.
        Transactional email

        :return: The transactional_email of this EmailCommseqEmail.
        :rtype: bool
        """
        return self._transactional_email

    @transactional_email.setter
    def transactional_email(self, transactional_email):
        """
        Sets the transactional_email of this EmailCommseqEmail.
        Transactional email

        :param transactional_email: The transactional_email of this EmailCommseqEmail.
        :type: bool
        """

        self._transactional_email = transactional_email

    @property
    def version(self):
        """
        Gets the version of this EmailCommseqEmail.
        Version

        :return: The version of this EmailCommseqEmail.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this EmailCommseqEmail.
        Version

        :param version: The version of this EmailCommseqEmail.
        :type: int
        """

        self._version = version

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, EmailCommseqEmail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
