# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class EmailCommseqEmail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'deleted': 'bool',
        'edited_by_user': 'str',
        'email_communication_sequence_email_uuid': 'str',
        'email_communication_sequence_uuid': 'str',
        'email_container_cjson': 'str',
        'email_container_cjson_last_modified_dts': 'str',
        'email_template_vm_path': 'str',
        'external_generation': 'bool',
        'external_generation_authentication': 'str',
        'external_generation_basic_password': 'str',
        'external_generation_basic_username': 'str',
        'external_generation_header_name': 'str',
        'external_generation_header_value': 'str',
        'external_generation_id': 'str',
        'external_generation_url': 'str',
        'filter_profile_equation_json': 'str',
        'individually_render': 'bool',
        'library_item_oid': 'int',
        'magic_link': 'bool',
        'merchant_id': 'str',
        'pending_review': 'bool',
        'preview_text': 'str',
        'rejected': 'bool',
        'requires_review': 'bool',
        'screenshot_large_full_url': 'str',
        'screenshot_large_viewport_url': 'str',
        'screenshot_small_full_url': 'str',
        'screenshot_small_viewport_url': 'str',
        'smart_sending': 'bool',
        'storefront_oid': 'int',
        'subject': 'str',
        'suspended_for_spam': 'bool',
        'transactional_email': 'bool',
        'version': 'int'
    }

    attribute_map = {
        'deleted': 'deleted',
        'edited_by_user': 'edited_by_user',
        'email_communication_sequence_email_uuid': 'email_communication_sequence_email_uuid',
        'email_communication_sequence_uuid': 'email_communication_sequence_uuid',
        'email_container_cjson': 'email_container_cjson',
        'email_container_cjson_last_modified_dts': 'email_container_cjson_last_modified_dts',
        'email_template_vm_path': 'email_template_vm_path',
        'external_generation': 'external_generation',
        'external_generation_authentication': 'external_generation_authentication',
        'external_generation_basic_password': 'external_generation_basic_password',
        'external_generation_basic_username': 'external_generation_basic_username',
        'external_generation_header_name': 'external_generation_header_name',
        'external_generation_header_value': 'external_generation_header_value',
        'external_generation_id': 'external_generation_id',
        'external_generation_url': 'external_generation_url',
        'filter_profile_equation_json': 'filter_profile_equation_json',
        'individually_render': 'individually_render',
        'library_item_oid': 'library_item_oid',
        'magic_link': 'magic_link',
        'merchant_id': 'merchant_id',
        'pending_review': 'pending_review',
        'preview_text': 'preview_text',
        'rejected': 'rejected',
        'requires_review': 'requires_review',
        'screenshot_large_full_url': 'screenshot_large_full_url',
        'screenshot_large_viewport_url': 'screenshot_large_viewport_url',
        'screenshot_small_full_url': 'screenshot_small_full_url',
        'screenshot_small_viewport_url': 'screenshot_small_viewport_url',
        'smart_sending': 'smart_sending',
        'storefront_oid': 'storefront_oid',
        'subject': 'subject',
        'suspended_for_spam': 'suspended_for_spam',
        'transactional_email': 'transactional_email',
        'version': 'version'
    }

    def __init__(self, deleted=None, edited_by_user=None, email_communication_sequence_email_uuid=None, email_communication_sequence_uuid=None, email_container_cjson=None, email_container_cjson_last_modified_dts=None, email_template_vm_path=None, external_generation=None, external_generation_authentication=None, external_generation_basic_password=None, external_generation_basic_username=None, external_generation_header_name=None, external_generation_header_value=None, external_generation_id=None, external_generation_url=None, filter_profile_equation_json=None, individually_render=None, library_item_oid=None, magic_link=None, merchant_id=None, pending_review=None, preview_text=None, rejected=None, requires_review=None, screenshot_large_full_url=None, screenshot_large_viewport_url=None, screenshot_small_full_url=None, screenshot_small_viewport_url=None, smart_sending=None, storefront_oid=None, subject=None, suspended_for_spam=None, transactional_email=None, version=None):  # noqa: E501
        """EmailCommseqEmail - a model defined in Swagger"""  # noqa: E501

        self._deleted = None
        self._edited_by_user = None
        self._email_communication_sequence_email_uuid = None
        self._email_communication_sequence_uuid = None
        self._email_container_cjson = None
        self._email_container_cjson_last_modified_dts = None
        self._email_template_vm_path = None
        self._external_generation = None
        self._external_generation_authentication = None
        self._external_generation_basic_password = None
        self._external_generation_basic_username = None
        self._external_generation_header_name = None
        self._external_generation_header_value = None
        self._external_generation_id = None
        self._external_generation_url = None
        self._filter_profile_equation_json = None
        self._individually_render = None
        self._library_item_oid = None
        self._magic_link = None
        self._merchant_id = None
        self._pending_review = None
        self._preview_text = None
        self._rejected = None
        self._requires_review = None
        self._screenshot_large_full_url = None
        self._screenshot_large_viewport_url = None
        self._screenshot_small_full_url = None
        self._screenshot_small_viewport_url = None
        self._smart_sending = None
        self._storefront_oid = None
        self._subject = None
        self._suspended_for_spam = None
        self._transactional_email = None
        self._version = None
        self.discriminator = None

        if deleted is not None:
            self.deleted = deleted
        if edited_by_user is not None:
            self.edited_by_user = edited_by_user
        if email_communication_sequence_email_uuid is not None:
            self.email_communication_sequence_email_uuid = email_communication_sequence_email_uuid
        if email_communication_sequence_uuid is not None:
            self.email_communication_sequence_uuid = email_communication_sequence_uuid
        if email_container_cjson is not None:
            self.email_container_cjson = email_container_cjson
        if email_container_cjson_last_modified_dts is not None:
            self.email_container_cjson_last_modified_dts = email_container_cjson_last_modified_dts
        if email_template_vm_path is not None:
            self.email_template_vm_path = email_template_vm_path
        if external_generation is not None:
            self.external_generation = external_generation
        if external_generation_authentication is not None:
            self.external_generation_authentication = external_generation_authentication
        if external_generation_basic_password is not None:
            self.external_generation_basic_password = external_generation_basic_password
        if external_generation_basic_username is not None:
            self.external_generation_basic_username = external_generation_basic_username
        if external_generation_header_name is not None:
            self.external_generation_header_name = external_generation_header_name
        if external_generation_header_value is not None:
            self.external_generation_header_value = external_generation_header_value
        if external_generation_id is not None:
            self.external_generation_id = external_generation_id
        if external_generation_url is not None:
            self.external_generation_url = external_generation_url
        if filter_profile_equation_json is not None:
            self.filter_profile_equation_json = filter_profile_equation_json
        if individually_render is not None:
            self.individually_render = individually_render
        if library_item_oid is not None:
            self.library_item_oid = library_item_oid
        if magic_link is not None:
            self.magic_link = magic_link
        if merchant_id is not None:
            self.merchant_id = merchant_id
        if pending_review is not None:
            self.pending_review = pending_review
        if preview_text is not None:
            self.preview_text = preview_text
        if rejected is not None:
            self.rejected = rejected
        if requires_review is not None:
            self.requires_review = requires_review
        if screenshot_large_full_url is not None:
            self.screenshot_large_full_url = screenshot_large_full_url
        if screenshot_large_viewport_url is not None:
            self.screenshot_large_viewport_url = screenshot_large_viewport_url
        if screenshot_small_full_url is not None:
            self.screenshot_small_full_url = screenshot_small_full_url
        if screenshot_small_viewport_url is not None:
            self.screenshot_small_viewport_url = screenshot_small_viewport_url
        if smart_sending is not None:
            self.smart_sending = smart_sending
        if storefront_oid is not None:
            self.storefront_oid = storefront_oid
        if subject is not None:
            self.subject = subject
        if suspended_for_spam is not None:
            self.suspended_for_spam = suspended_for_spam
        if transactional_email is not None:
            self.transactional_email = transactional_email
        if version is not None:
            self.version = version

    @property
    def deleted(self):
        """Gets the deleted of this EmailCommseqEmail.  # noqa: E501

        Deleted  # noqa: E501

        :return: The deleted of this EmailCommseqEmail.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this EmailCommseqEmail.

        Deleted  # noqa: E501

        :param deleted: The deleted of this EmailCommseqEmail.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def edited_by_user(self):
        """Gets the edited_by_user of this EmailCommseqEmail.  # noqa: E501

        Edited by user  # noqa: E501

        :return: The edited_by_user of this EmailCommseqEmail.  # noqa: E501
        :rtype: str
        """
        return self._edited_by_user

    @edited_by_user.setter
    def edited_by_user(self, edited_by_user):
        """Sets the edited_by_user of this EmailCommseqEmail.

        Edited by user  # noqa: E501

        :param edited_by_user: The edited_by_user of this EmailCommseqEmail.  # noqa: E501
        :type: str
        """

        self._edited_by_user = edited_by_user

    @property
    def email_communication_sequence_email_uuid(self):
        """Gets the email_communication_sequence_email_uuid of this EmailCommseqEmail.  # noqa: E501

        Email communication sequence email uuid  # noqa: E501

        :return: The email_communication_sequence_email_uuid of this EmailCommseqEmail.  # noqa: E501
        :rtype: str
        """
        return self._email_communication_sequence_email_uuid

    @email_communication_sequence_email_uuid.setter
    def email_communication_sequence_email_uuid(self, email_communication_sequence_email_uuid):
        """Sets the email_communication_sequence_email_uuid of this EmailCommseqEmail.

        Email communication sequence email uuid  # noqa: E501

        :param email_communication_sequence_email_uuid: The email_communication_sequence_email_uuid of this EmailCommseqEmail.  # noqa: E501
        :type: str
        """

        self._email_communication_sequence_email_uuid = email_communication_sequence_email_uuid

    @property
    def email_communication_sequence_uuid(self):
        """Gets the email_communication_sequence_uuid of this EmailCommseqEmail.  # noqa: E501

        Email commseq UUID  # noqa: E501

        :return: The email_communication_sequence_uuid of this EmailCommseqEmail.  # noqa: E501
        :rtype: str
        """
        return self._email_communication_sequence_uuid

    @email_communication_sequence_uuid.setter
    def email_communication_sequence_uuid(self, email_communication_sequence_uuid):
        """Sets the email_communication_sequence_uuid of this EmailCommseqEmail.

        Email commseq UUID  # noqa: E501

        :param email_communication_sequence_uuid: The email_communication_sequence_uuid of this EmailCommseqEmail.  # noqa: E501
        :type: str
        """

        self._email_communication_sequence_uuid = email_communication_sequence_uuid

    @property
    def email_container_cjson(self):
        """Gets the email_container_cjson of this EmailCommseqEmail.  # noqa: E501

        Email container cjson  # noqa: E501

        :return: The email_container_cjson of this EmailCommseqEmail.  # noqa: E501
        :rtype: str
        """
        return self._email_container_cjson

    @email_container_cjson.setter
    def email_container_cjson(self, email_container_cjson):
        """Sets the email_container_cjson of this EmailCommseqEmail.

        Email container cjson  # noqa: E501

        :param email_container_cjson: The email_container_cjson of this EmailCommseqEmail.  # noqa: E501
        :type: str
        """

        self._email_container_cjson = email_container_cjson

    @property
    def email_container_cjson_last_modified_dts(self):
        """Gets the email_container_cjson_last_modified_dts of this EmailCommseqEmail.  # noqa: E501

        Timestamp the last time the container was modified.  # noqa: E501

        :return: The email_container_cjson_last_modified_dts of this EmailCommseqEmail.  # noqa: E501
        :rtype: str
        """
        return self._email_container_cjson_last_modified_dts

    @email_container_cjson_last_modified_dts.setter
    def email_container_cjson_last_modified_dts(self, email_container_cjson_last_modified_dts):
        """Sets the email_container_cjson_last_modified_dts of this EmailCommseqEmail.

        Timestamp the last time the container was modified.  # noqa: E501

        :param email_container_cjson_last_modified_dts: The email_container_cjson_last_modified_dts of this EmailCommseqEmail.  # noqa: E501
        :type: str
        """

        self._email_container_cjson_last_modified_dts = email_container_cjson_last_modified_dts

    @property
    def email_template_vm_path(self):
        """Gets the email_template_vm_path of this EmailCommseqEmail.  # noqa: E501

        Email template virtual path  # noqa: E501

        :return: The email_template_vm_path of this EmailCommseqEmail.  # noqa: E501
        :rtype: str
        """
        return self._email_template_vm_path

    @email_template_vm_path.setter
    def email_template_vm_path(self, email_template_vm_path):
        """Sets the email_template_vm_path of this EmailCommseqEmail.

        Email template virtual path  # noqa: E501

        :param email_template_vm_path: The email_template_vm_path of this EmailCommseqEmail.  # noqa: E501
        :type: str
        """

        self._email_template_vm_path = email_template_vm_path

    @property
    def external_generation(self):
        """Gets the external_generation of this EmailCommseqEmail.  # noqa: E501


        :return: The external_generation of this EmailCommseqEmail.  # noqa: E501
        :rtype: bool
        """
        return self._external_generation

    @external_generation.setter
    def external_generation(self, external_generation):
        """Sets the external_generation of this EmailCommseqEmail.


        :param external_generation: The external_generation of this EmailCommseqEmail.  # noqa: E501
        :type: bool
        """

        self._external_generation = external_generation

    @property
    def external_generation_authentication(self):
        """Gets the external_generation_authentication of this EmailCommseqEmail.  # noqa: E501


        :return: The external_generation_authentication of this EmailCommseqEmail.  # noqa: E501
        :rtype: str
        """
        return self._external_generation_authentication

    @external_generation_authentication.setter
    def external_generation_authentication(self, external_generation_authentication):
        """Sets the external_generation_authentication of this EmailCommseqEmail.


        :param external_generation_authentication: The external_generation_authentication of this EmailCommseqEmail.  # noqa: E501
        :type: str
        """

        self._external_generation_authentication = external_generation_authentication

    @property
    def external_generation_basic_password(self):
        """Gets the external_generation_basic_password of this EmailCommseqEmail.  # noqa: E501


        :return: The external_generation_basic_password of this EmailCommseqEmail.  # noqa: E501
        :rtype: str
        """
        return self._external_generation_basic_password

    @external_generation_basic_password.setter
    def external_generation_basic_password(self, external_generation_basic_password):
        """Sets the external_generation_basic_password of this EmailCommseqEmail.


        :param external_generation_basic_password: The external_generation_basic_password of this EmailCommseqEmail.  # noqa: E501
        :type: str
        """

        self._external_generation_basic_password = external_generation_basic_password

    @property
    def external_generation_basic_username(self):
        """Gets the external_generation_basic_username of this EmailCommseqEmail.  # noqa: E501


        :return: The external_generation_basic_username of this EmailCommseqEmail.  # noqa: E501
        :rtype: str
        """
        return self._external_generation_basic_username

    @external_generation_basic_username.setter
    def external_generation_basic_username(self, external_generation_basic_username):
        """Sets the external_generation_basic_username of this EmailCommseqEmail.


        :param external_generation_basic_username: The external_generation_basic_username of this EmailCommseqEmail.  # noqa: E501
        :type: str
        """

        self._external_generation_basic_username = external_generation_basic_username

    @property
    def external_generation_header_name(self):
        """Gets the external_generation_header_name of this EmailCommseqEmail.  # noqa: E501


        :return: The external_generation_header_name of this EmailCommseqEmail.  # noqa: E501
        :rtype: str
        """
        return self._external_generation_header_name

    @external_generation_header_name.setter
    def external_generation_header_name(self, external_generation_header_name):
        """Sets the external_generation_header_name of this EmailCommseqEmail.


        :param external_generation_header_name: The external_generation_header_name of this EmailCommseqEmail.  # noqa: E501
        :type: str
        """

        self._external_generation_header_name = external_generation_header_name

    @property
    def external_generation_header_value(self):
        """Gets the external_generation_header_value of this EmailCommseqEmail.  # noqa: E501


        :return: The external_generation_header_value of this EmailCommseqEmail.  # noqa: E501
        :rtype: str
        """
        return self._external_generation_header_value

    @external_generation_header_value.setter
    def external_generation_header_value(self, external_generation_header_value):
        """Sets the external_generation_header_value of this EmailCommseqEmail.


        :param external_generation_header_value: The external_generation_header_value of this EmailCommseqEmail.  # noqa: E501
        :type: str
        """

        self._external_generation_header_value = external_generation_header_value

    @property
    def external_generation_id(self):
        """Gets the external_generation_id of this EmailCommseqEmail.  # noqa: E501


        :return: The external_generation_id of this EmailCommseqEmail.  # noqa: E501
        :rtype: str
        """
        return self._external_generation_id

    @external_generation_id.setter
    def external_generation_id(self, external_generation_id):
        """Sets the external_generation_id of this EmailCommseqEmail.


        :param external_generation_id: The external_generation_id of this EmailCommseqEmail.  # noqa: E501
        :type: str
        """

        self._external_generation_id = external_generation_id

    @property
    def external_generation_url(self):
        """Gets the external_generation_url of this EmailCommseqEmail.  # noqa: E501


        :return: The external_generation_url of this EmailCommseqEmail.  # noqa: E501
        :rtype: str
        """
        return self._external_generation_url

    @external_generation_url.setter
    def external_generation_url(self, external_generation_url):
        """Sets the external_generation_url of this EmailCommseqEmail.


        :param external_generation_url: The external_generation_url of this EmailCommseqEmail.  # noqa: E501
        :type: str
        """

        self._external_generation_url = external_generation_url

    @property
    def filter_profile_equation_json(self):
        """Gets the filter_profile_equation_json of this EmailCommseqEmail.  # noqa: E501

        Filter profile equation json  # noqa: E501

        :return: The filter_profile_equation_json of this EmailCommseqEmail.  # noqa: E501
        :rtype: str
        """
        return self._filter_profile_equation_json

    @filter_profile_equation_json.setter
    def filter_profile_equation_json(self, filter_profile_equation_json):
        """Sets the filter_profile_equation_json of this EmailCommseqEmail.

        Filter profile equation json  # noqa: E501

        :param filter_profile_equation_json: The filter_profile_equation_json of this EmailCommseqEmail.  # noqa: E501
        :type: str
        """

        self._filter_profile_equation_json = filter_profile_equation_json

    @property
    def individually_render(self):
        """Gets the individually_render of this EmailCommseqEmail.  # noqa: E501

        Individually render  # noqa: E501

        :return: The individually_render of this EmailCommseqEmail.  # noqa: E501
        :rtype: bool
        """
        return self._individually_render

    @individually_render.setter
    def individually_render(self, individually_render):
        """Sets the individually_render of this EmailCommseqEmail.

        Individually render  # noqa: E501

        :param individually_render: The individually_render of this EmailCommseqEmail.  # noqa: E501
        :type: bool
        """

        self._individually_render = individually_render

    @property
    def library_item_oid(self):
        """Gets the library_item_oid of this EmailCommseqEmail.  # noqa: E501

        If this item was ever added to the Code Library, this is the oid for that library item, or 0 if never added before.  This value is used to determine if a library item should be inserted or updated.  # noqa: E501

        :return: The library_item_oid of this EmailCommseqEmail.  # noqa: E501
        :rtype: int
        """
        return self._library_item_oid

    @library_item_oid.setter
    def library_item_oid(self, library_item_oid):
        """Sets the library_item_oid of this EmailCommseqEmail.

        If this item was ever added to the Code Library, this is the oid for that library item, or 0 if never added before.  This value is used to determine if a library item should be inserted or updated.  # noqa: E501

        :param library_item_oid: The library_item_oid of this EmailCommseqEmail.  # noqa: E501
        :type: int
        """

        self._library_item_oid = library_item_oid

    @property
    def magic_link(self):
        """Gets the magic_link of this EmailCommseqEmail.  # noqa: E501

        True if email links should contain magic link tokens to log the customer in automatically  # noqa: E501

        :return: The magic_link of this EmailCommseqEmail.  # noqa: E501
        :rtype: bool
        """
        return self._magic_link

    @magic_link.setter
    def magic_link(self, magic_link):
        """Sets the magic_link of this EmailCommseqEmail.

        True if email links should contain magic link tokens to log the customer in automatically  # noqa: E501

        :param magic_link: The magic_link of this EmailCommseqEmail.  # noqa: E501
        :type: bool
        """

        self._magic_link = magic_link

    @property
    def merchant_id(self):
        """Gets the merchant_id of this EmailCommseqEmail.  # noqa: E501

        Merchant ID  # noqa: E501

        :return: The merchant_id of this EmailCommseqEmail.  # noqa: E501
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this EmailCommseqEmail.

        Merchant ID  # noqa: E501

        :param merchant_id: The merchant_id of this EmailCommseqEmail.  # noqa: E501
        :type: str
        """

        self._merchant_id = merchant_id

    @property
    def pending_review(self):
        """Gets the pending_review of this EmailCommseqEmail.  # noqa: E501

        True if the content of this email is pending review by UltraCart  # noqa: E501

        :return: The pending_review of this EmailCommseqEmail.  # noqa: E501
        :rtype: bool
        """
        return self._pending_review

    @pending_review.setter
    def pending_review(self, pending_review):
        """Sets the pending_review of this EmailCommseqEmail.

        True if the content of this email is pending review by UltraCart  # noqa: E501

        :param pending_review: The pending_review of this EmailCommseqEmail.  # noqa: E501
        :type: bool
        """

        self._pending_review = pending_review

    @property
    def preview_text(self):
        """Gets the preview_text of this EmailCommseqEmail.  # noqa: E501

        Preview text  # noqa: E501

        :return: The preview_text of this EmailCommseqEmail.  # noqa: E501
        :rtype: str
        """
        return self._preview_text

    @preview_text.setter
    def preview_text(self, preview_text):
        """Sets the preview_text of this EmailCommseqEmail.

        Preview text  # noqa: E501

        :param preview_text: The preview_text of this EmailCommseqEmail.  # noqa: E501
        :type: str
        """

        self._preview_text = preview_text

    @property
    def rejected(self):
        """Gets the rejected of this EmailCommseqEmail.  # noqa: E501

        True if the content of this email was rejected during review by UltraCart  # noqa: E501

        :return: The rejected of this EmailCommseqEmail.  # noqa: E501
        :rtype: bool
        """
        return self._rejected

    @rejected.setter
    def rejected(self, rejected):
        """Sets the rejected of this EmailCommseqEmail.

        True if the content of this email was rejected during review by UltraCart  # noqa: E501

        :param rejected: The rejected of this EmailCommseqEmail.  # noqa: E501
        :type: bool
        """

        self._rejected = rejected

    @property
    def requires_review(self):
        """Gets the requires_review of this EmailCommseqEmail.  # noqa: E501

        True if the content of this email is requires review by UltraCart  # noqa: E501

        :return: The requires_review of this EmailCommseqEmail.  # noqa: E501
        :rtype: bool
        """
        return self._requires_review

    @requires_review.setter
    def requires_review(self, requires_review):
        """Sets the requires_review of this EmailCommseqEmail.

        True if the content of this email is requires review by UltraCart  # noqa: E501

        :param requires_review: The requires_review of this EmailCommseqEmail.  # noqa: E501
        :type: bool
        """

        self._requires_review = requires_review

    @property
    def screenshot_large_full_url(self):
        """Gets the screenshot_large_full_url of this EmailCommseqEmail.  # noqa: E501

        URL to screenshot in large form factor full page  # noqa: E501

        :return: The screenshot_large_full_url of this EmailCommseqEmail.  # noqa: E501
        :rtype: str
        """
        return self._screenshot_large_full_url

    @screenshot_large_full_url.setter
    def screenshot_large_full_url(self, screenshot_large_full_url):
        """Sets the screenshot_large_full_url of this EmailCommseqEmail.

        URL to screenshot in large form factor full page  # noqa: E501

        :param screenshot_large_full_url: The screenshot_large_full_url of this EmailCommseqEmail.  # noqa: E501
        :type: str
        """

        self._screenshot_large_full_url = screenshot_large_full_url

    @property
    def screenshot_large_viewport_url(self):
        """Gets the screenshot_large_viewport_url of this EmailCommseqEmail.  # noqa: E501

        URL to screenshot in large form factor viewport  # noqa: E501

        :return: The screenshot_large_viewport_url of this EmailCommseqEmail.  # noqa: E501
        :rtype: str
        """
        return self._screenshot_large_viewport_url

    @screenshot_large_viewport_url.setter
    def screenshot_large_viewport_url(self, screenshot_large_viewport_url):
        """Sets the screenshot_large_viewport_url of this EmailCommseqEmail.

        URL to screenshot in large form factor viewport  # noqa: E501

        :param screenshot_large_viewport_url: The screenshot_large_viewport_url of this EmailCommseqEmail.  # noqa: E501
        :type: str
        """

        self._screenshot_large_viewport_url = screenshot_large_viewport_url

    @property
    def screenshot_small_full_url(self):
        """Gets the screenshot_small_full_url of this EmailCommseqEmail.  # noqa: E501

        URL to screenshot in small form factor full page  # noqa: E501

        :return: The screenshot_small_full_url of this EmailCommseqEmail.  # noqa: E501
        :rtype: str
        """
        return self._screenshot_small_full_url

    @screenshot_small_full_url.setter
    def screenshot_small_full_url(self, screenshot_small_full_url):
        """Sets the screenshot_small_full_url of this EmailCommseqEmail.

        URL to screenshot in small form factor full page  # noqa: E501

        :param screenshot_small_full_url: The screenshot_small_full_url of this EmailCommseqEmail.  # noqa: E501
        :type: str
        """

        self._screenshot_small_full_url = screenshot_small_full_url

    @property
    def screenshot_small_viewport_url(self):
        """Gets the screenshot_small_viewport_url of this EmailCommseqEmail.  # noqa: E501

        URL to screenshot in small form factor viewport  # noqa: E501

        :return: The screenshot_small_viewport_url of this EmailCommseqEmail.  # noqa: E501
        :rtype: str
        """
        return self._screenshot_small_viewport_url

    @screenshot_small_viewport_url.setter
    def screenshot_small_viewport_url(self, screenshot_small_viewport_url):
        """Sets the screenshot_small_viewport_url of this EmailCommseqEmail.

        URL to screenshot in small form factor viewport  # noqa: E501

        :param screenshot_small_viewport_url: The screenshot_small_viewport_url of this EmailCommseqEmail.  # noqa: E501
        :type: str
        """

        self._screenshot_small_viewport_url = screenshot_small_viewport_url

    @property
    def smart_sending(self):
        """Gets the smart_sending of this EmailCommseqEmail.  # noqa: E501

        Smart sending  # noqa: E501

        :return: The smart_sending of this EmailCommseqEmail.  # noqa: E501
        :rtype: bool
        """
        return self._smart_sending

    @smart_sending.setter
    def smart_sending(self, smart_sending):
        """Sets the smart_sending of this EmailCommseqEmail.

        Smart sending  # noqa: E501

        :param smart_sending: The smart_sending of this EmailCommseqEmail.  # noqa: E501
        :type: bool
        """

        self._smart_sending = smart_sending

    @property
    def storefront_oid(self):
        """Gets the storefront_oid of this EmailCommseqEmail.  # noqa: E501

        Storefront oid  # noqa: E501

        :return: The storefront_oid of this EmailCommseqEmail.  # noqa: E501
        :rtype: int
        """
        return self._storefront_oid

    @storefront_oid.setter
    def storefront_oid(self, storefront_oid):
        """Sets the storefront_oid of this EmailCommseqEmail.

        Storefront oid  # noqa: E501

        :param storefront_oid: The storefront_oid of this EmailCommseqEmail.  # noqa: E501
        :type: int
        """

        self._storefront_oid = storefront_oid

    @property
    def subject(self):
        """Gets the subject of this EmailCommseqEmail.  # noqa: E501

        Subject  # noqa: E501

        :return: The subject of this EmailCommseqEmail.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this EmailCommseqEmail.

        Subject  # noqa: E501

        :param subject: The subject of this EmailCommseqEmail.  # noqa: E501
        :type: str
        """

        self._subject = subject

    @property
    def suspended_for_spam(self):
        """Gets the suspended_for_spam of this EmailCommseqEmail.  # noqa: E501

        True if the email was suspended for too high of a spam rate.  # noqa: E501

        :return: The suspended_for_spam of this EmailCommseqEmail.  # noqa: E501
        :rtype: bool
        """
        return self._suspended_for_spam

    @suspended_for_spam.setter
    def suspended_for_spam(self, suspended_for_spam):
        """Sets the suspended_for_spam of this EmailCommseqEmail.

        True if the email was suspended for too high of a spam rate.  # noqa: E501

        :param suspended_for_spam: The suspended_for_spam of this EmailCommseqEmail.  # noqa: E501
        :type: bool
        """

        self._suspended_for_spam = suspended_for_spam

    @property
    def transactional_email(self):
        """Gets the transactional_email of this EmailCommseqEmail.  # noqa: E501

        Transactional email  # noqa: E501

        :return: The transactional_email of this EmailCommseqEmail.  # noqa: E501
        :rtype: bool
        """
        return self._transactional_email

    @transactional_email.setter
    def transactional_email(self, transactional_email):
        """Sets the transactional_email of this EmailCommseqEmail.

        Transactional email  # noqa: E501

        :param transactional_email: The transactional_email of this EmailCommseqEmail.  # noqa: E501
        :type: bool
        """

        self._transactional_email = transactional_email

    @property
    def version(self):
        """Gets the version of this EmailCommseqEmail.  # noqa: E501

        Version  # noqa: E501

        :return: The version of this EmailCommseqEmail.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this EmailCommseqEmail.

        Version  # noqa: E501

        :param version: The version of this EmailCommseqEmail.  # noqa: E501
        :type: int
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EmailCommseqEmail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmailCommseqEmail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
