# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RtgSummaryGateway(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cascade_code': 'str',
        'code': 'str',
        'delay_auto_orders': 'str',
        'name': 'str',
        'reserve_percentage': 'float',
        'reserves_released_through': 'str',
        'rotating_transaction_gateway_oid': 'int',
        'show_ultracart_payments_verification': 'bool',
        'show_ultracart_payments_verified': 'bool',
        'status': 'str',
        'supports_auth': 'str',
        'supports_refund': 'str',
        'third_party': 'str',
        'traffic_percentage': 'float',
        'warning': 'str',
        'wepay_account_update_uri': 'str',
        'wepay_console_hostname': 'str'
    }

    attribute_map = {
        'cascade_code': 'cascade_code',
        'code': 'code',
        'delay_auto_orders': 'delay_auto_orders',
        'name': 'name',
        'reserve_percentage': 'reserve_percentage',
        'reserves_released_through': 'reserves_released_through',
        'rotating_transaction_gateway_oid': 'rotating_transaction_gateway_oid',
        'show_ultracart_payments_verification': 'show_ultracart_payments_verification',
        'show_ultracart_payments_verified': 'show_ultracart_payments_verified',
        'status': 'status',
        'supports_auth': 'supports_auth',
        'supports_refund': 'supports_refund',
        'third_party': 'third_party',
        'traffic_percentage': 'traffic_percentage',
        'warning': 'warning',
        'wepay_account_update_uri': 'wepay_account_update_uri',
        'wepay_console_hostname': 'wepay_console_hostname'
    }

    def __init__(self, cascade_code=None, code=None, delay_auto_orders=None, name=None, reserve_percentage=None, reserves_released_through=None, rotating_transaction_gateway_oid=None, show_ultracart_payments_verification=None, show_ultracart_payments_verified=None, status=None, supports_auth=None, supports_refund=None, third_party=None, traffic_percentage=None, warning=None, wepay_account_update_uri=None, wepay_console_hostname=None):  # noqa: E501
        """RtgSummaryGateway - a model defined in Swagger"""  # noqa: E501

        self._cascade_code = None
        self._code = None
        self._delay_auto_orders = None
        self._name = None
        self._reserve_percentage = None
        self._reserves_released_through = None
        self._rotating_transaction_gateway_oid = None
        self._show_ultracart_payments_verification = None
        self._show_ultracart_payments_verified = None
        self._status = None
        self._supports_auth = None
        self._supports_refund = None
        self._third_party = None
        self._traffic_percentage = None
        self._warning = None
        self._wepay_account_update_uri = None
        self._wepay_console_hostname = None
        self.discriminator = None

        if cascade_code is not None:
            self.cascade_code = cascade_code
        if code is not None:
            self.code = code
        if delay_auto_orders is not None:
            self.delay_auto_orders = delay_auto_orders
        if name is not None:
            self.name = name
        if reserve_percentage is not None:
            self.reserve_percentage = reserve_percentage
        if reserves_released_through is not None:
            self.reserves_released_through = reserves_released_through
        if rotating_transaction_gateway_oid is not None:
            self.rotating_transaction_gateway_oid = rotating_transaction_gateway_oid
        if show_ultracart_payments_verification is not None:
            self.show_ultracart_payments_verification = show_ultracart_payments_verification
        if show_ultracart_payments_verified is not None:
            self.show_ultracart_payments_verified = show_ultracart_payments_verified
        if status is not None:
            self.status = status
        if supports_auth is not None:
            self.supports_auth = supports_auth
        if supports_refund is not None:
            self.supports_refund = supports_refund
        if third_party is not None:
            self.third_party = third_party
        if traffic_percentage is not None:
            self.traffic_percentage = traffic_percentage
        if warning is not None:
            self.warning = warning
        if wepay_account_update_uri is not None:
            self.wepay_account_update_uri = wepay_account_update_uri
        if wepay_console_hostname is not None:
            self.wepay_console_hostname = wepay_console_hostname

    @property
    def cascade_code(self):
        """Gets the cascade_code of this RtgSummaryGateway.  # noqa: E501


        :return: The cascade_code of this RtgSummaryGateway.  # noqa: E501
        :rtype: str
        """
        return self._cascade_code

    @cascade_code.setter
    def cascade_code(self, cascade_code):
        """Sets the cascade_code of this RtgSummaryGateway.


        :param cascade_code: The cascade_code of this RtgSummaryGateway.  # noqa: E501
        :type: str
        """

        self._cascade_code = cascade_code

    @property
    def code(self):
        """Gets the code of this RtgSummaryGateway.  # noqa: E501


        :return: The code of this RtgSummaryGateway.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this RtgSummaryGateway.


        :param code: The code of this RtgSummaryGateway.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def delay_auto_orders(self):
        """Gets the delay_auto_orders of this RtgSummaryGateway.  # noqa: E501


        :return: The delay_auto_orders of this RtgSummaryGateway.  # noqa: E501
        :rtype: str
        """
        return self._delay_auto_orders

    @delay_auto_orders.setter
    def delay_auto_orders(self, delay_auto_orders):
        """Sets the delay_auto_orders of this RtgSummaryGateway.


        :param delay_auto_orders: The delay_auto_orders of this RtgSummaryGateway.  # noqa: E501
        :type: str
        """

        self._delay_auto_orders = delay_auto_orders

    @property
    def name(self):
        """Gets the name of this RtgSummaryGateway.  # noqa: E501


        :return: The name of this RtgSummaryGateway.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RtgSummaryGateway.


        :param name: The name of this RtgSummaryGateway.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def reserve_percentage(self):
        """Gets the reserve_percentage of this RtgSummaryGateway.  # noqa: E501


        :return: The reserve_percentage of this RtgSummaryGateway.  # noqa: E501
        :rtype: float
        """
        return self._reserve_percentage

    @reserve_percentage.setter
    def reserve_percentage(self, reserve_percentage):
        """Sets the reserve_percentage of this RtgSummaryGateway.


        :param reserve_percentage: The reserve_percentage of this RtgSummaryGateway.  # noqa: E501
        :type: float
        """

        self._reserve_percentage = reserve_percentage

    @property
    def reserves_released_through(self):
        """Gets the reserves_released_through of this RtgSummaryGateway.  # noqa: E501

        An optional date specifying the date up to which your gateway has released all reserve funds.  This aids in profitability reporting.  # noqa: E501

        :return: The reserves_released_through of this RtgSummaryGateway.  # noqa: E501
        :rtype: str
        """
        return self._reserves_released_through

    @reserves_released_through.setter
    def reserves_released_through(self, reserves_released_through):
        """Sets the reserves_released_through of this RtgSummaryGateway.

        An optional date specifying the date up to which your gateway has released all reserve funds.  This aids in profitability reporting.  # noqa: E501

        :param reserves_released_through: The reserves_released_through of this RtgSummaryGateway.  # noqa: E501
        :type: str
        """

        self._reserves_released_through = reserves_released_through

    @property
    def rotating_transaction_gateway_oid(self):
        """Gets the rotating_transaction_gateway_oid of this RtgSummaryGateway.  # noqa: E501


        :return: The rotating_transaction_gateway_oid of this RtgSummaryGateway.  # noqa: E501
        :rtype: int
        """
        return self._rotating_transaction_gateway_oid

    @rotating_transaction_gateway_oid.setter
    def rotating_transaction_gateway_oid(self, rotating_transaction_gateway_oid):
        """Sets the rotating_transaction_gateway_oid of this RtgSummaryGateway.


        :param rotating_transaction_gateway_oid: The rotating_transaction_gateway_oid of this RtgSummaryGateway.  # noqa: E501
        :type: int
        """

        self._rotating_transaction_gateway_oid = rotating_transaction_gateway_oid

    @property
    def show_ultracart_payments_verification(self):
        """Gets the show_ultracart_payments_verification of this RtgSummaryGateway.  # noqa: E501


        :return: The show_ultracart_payments_verification of this RtgSummaryGateway.  # noqa: E501
        :rtype: bool
        """
        return self._show_ultracart_payments_verification

    @show_ultracart_payments_verification.setter
    def show_ultracart_payments_verification(self, show_ultracart_payments_verification):
        """Sets the show_ultracart_payments_verification of this RtgSummaryGateway.


        :param show_ultracart_payments_verification: The show_ultracart_payments_verification of this RtgSummaryGateway.  # noqa: E501
        :type: bool
        """

        self._show_ultracart_payments_verification = show_ultracart_payments_verification

    @property
    def show_ultracart_payments_verified(self):
        """Gets the show_ultracart_payments_verified of this RtgSummaryGateway.  # noqa: E501


        :return: The show_ultracart_payments_verified of this RtgSummaryGateway.  # noqa: E501
        :rtype: bool
        """
        return self._show_ultracart_payments_verified

    @show_ultracart_payments_verified.setter
    def show_ultracart_payments_verified(self, show_ultracart_payments_verified):
        """Sets the show_ultracart_payments_verified of this RtgSummaryGateway.


        :param show_ultracart_payments_verified: The show_ultracart_payments_verified of this RtgSummaryGateway.  # noqa: E501
        :type: bool
        """

        self._show_ultracart_payments_verified = show_ultracart_payments_verified

    @property
    def status(self):
        """Gets the status of this RtgSummaryGateway.  # noqa: E501


        :return: The status of this RtgSummaryGateway.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this RtgSummaryGateway.


        :param status: The status of this RtgSummaryGateway.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def supports_auth(self):
        """Gets the supports_auth of this RtgSummaryGateway.  # noqa: E501


        :return: The supports_auth of this RtgSummaryGateway.  # noqa: E501
        :rtype: str
        """
        return self._supports_auth

    @supports_auth.setter
    def supports_auth(self, supports_auth):
        """Sets the supports_auth of this RtgSummaryGateway.


        :param supports_auth: The supports_auth of this RtgSummaryGateway.  # noqa: E501
        :type: str
        """

        self._supports_auth = supports_auth

    @property
    def supports_refund(self):
        """Gets the supports_refund of this RtgSummaryGateway.  # noqa: E501


        :return: The supports_refund of this RtgSummaryGateway.  # noqa: E501
        :rtype: str
        """
        return self._supports_refund

    @supports_refund.setter
    def supports_refund(self, supports_refund):
        """Sets the supports_refund of this RtgSummaryGateway.


        :param supports_refund: The supports_refund of this RtgSummaryGateway.  # noqa: E501
        :type: str
        """

        self._supports_refund = supports_refund

    @property
    def third_party(self):
        """Gets the third_party of this RtgSummaryGateway.  # noqa: E501


        :return: The third_party of this RtgSummaryGateway.  # noqa: E501
        :rtype: str
        """
        return self._third_party

    @third_party.setter
    def third_party(self, third_party):
        """Sets the third_party of this RtgSummaryGateway.


        :param third_party: The third_party of this RtgSummaryGateway.  # noqa: E501
        :type: str
        """

        self._third_party = third_party

    @property
    def traffic_percentage(self):
        """Gets the traffic_percentage of this RtgSummaryGateway.  # noqa: E501


        :return: The traffic_percentage of this RtgSummaryGateway.  # noqa: E501
        :rtype: float
        """
        return self._traffic_percentage

    @traffic_percentage.setter
    def traffic_percentage(self, traffic_percentage):
        """Sets the traffic_percentage of this RtgSummaryGateway.


        :param traffic_percentage: The traffic_percentage of this RtgSummaryGateway.  # noqa: E501
        :type: float
        """

        self._traffic_percentage = traffic_percentage

    @property
    def warning(self):
        """Gets the warning of this RtgSummaryGateway.  # noqa: E501


        :return: The warning of this RtgSummaryGateway.  # noqa: E501
        :rtype: str
        """
        return self._warning

    @warning.setter
    def warning(self, warning):
        """Sets the warning of this RtgSummaryGateway.


        :param warning: The warning of this RtgSummaryGateway.  # noqa: E501
        :type: str
        """

        self._warning = warning

    @property
    def wepay_account_update_uri(self):
        """Gets the wepay_account_update_uri of this RtgSummaryGateway.  # noqa: E501


        :return: The wepay_account_update_uri of this RtgSummaryGateway.  # noqa: E501
        :rtype: str
        """
        return self._wepay_account_update_uri

    @wepay_account_update_uri.setter
    def wepay_account_update_uri(self, wepay_account_update_uri):
        """Sets the wepay_account_update_uri of this RtgSummaryGateway.


        :param wepay_account_update_uri: The wepay_account_update_uri of this RtgSummaryGateway.  # noqa: E501
        :type: str
        """

        self._wepay_account_update_uri = wepay_account_update_uri

    @property
    def wepay_console_hostname(self):
        """Gets the wepay_console_hostname of this RtgSummaryGateway.  # noqa: E501


        :return: The wepay_console_hostname of this RtgSummaryGateway.  # noqa: E501
        :rtype: str
        """
        return self._wepay_console_hostname

    @wepay_console_hostname.setter
    def wepay_console_hostname(self, wepay_console_hostname):
        """Sets the wepay_console_hostname of this RtgSummaryGateway.


        :param wepay_console_hostname: The wepay_console_hostname of this RtgSummaryGateway.  # noqa: E501
        :type: str
        """

        self._wepay_console_hostname = wepay_console_hostname

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RtgSummaryGateway, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RtgSummaryGateway):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
