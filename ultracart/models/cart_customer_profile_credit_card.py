# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CartCustomerProfileCreditCard(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'card_expiration_month': 'int',
        'card_expiration_year': 'int',
        'card_number': 'str',
        'card_type': 'str',
        'customer_profile_credit_card_id': 'int',
        'last_used_date': 'str'
    }

    attribute_map = {
        'card_expiration_month': 'card_expiration_month',
        'card_expiration_year': 'card_expiration_year',
        'card_number': 'card_number',
        'card_type': 'card_type',
        'customer_profile_credit_card_id': 'customer_profile_credit_card_id',
        'last_used_date': 'last_used_date'
    }

    def __init__(self, card_expiration_month=None, card_expiration_year=None, card_number=None, card_type=None, customer_profile_credit_card_id=None, last_used_date=None):  # noqa: E501
        """CartCustomerProfileCreditCard - a model defined in Swagger"""  # noqa: E501

        self._card_expiration_month = None
        self._card_expiration_year = None
        self._card_number = None
        self._card_type = None
        self._customer_profile_credit_card_id = None
        self._last_used_date = None
        self.discriminator = None

        if card_expiration_month is not None:
            self.card_expiration_month = card_expiration_month
        if card_expiration_year is not None:
            self.card_expiration_year = card_expiration_year
        if card_number is not None:
            self.card_number = card_number
        if card_type is not None:
            self.card_type = card_type
        if customer_profile_credit_card_id is not None:
            self.customer_profile_credit_card_id = customer_profile_credit_card_id
        if last_used_date is not None:
            self.last_used_date = last_used_date

    @property
    def card_expiration_month(self):
        """Gets the card_expiration_month of this CartCustomerProfileCreditCard.  # noqa: E501

        Card expiration month (1-12)  # noqa: E501

        :return: The card_expiration_month of this CartCustomerProfileCreditCard.  # noqa: E501
        :rtype: int
        """
        return self._card_expiration_month

    @card_expiration_month.setter
    def card_expiration_month(self, card_expiration_month):
        """Sets the card_expiration_month of this CartCustomerProfileCreditCard.

        Card expiration month (1-12)  # noqa: E501

        :param card_expiration_month: The card_expiration_month of this CartCustomerProfileCreditCard.  # noqa: E501
        :type: int
        """

        self._card_expiration_month = card_expiration_month

    @property
    def card_expiration_year(self):
        """Gets the card_expiration_year of this CartCustomerProfileCreditCard.  # noqa: E501

        Card expiration year (four digit)  # noqa: E501

        :return: The card_expiration_year of this CartCustomerProfileCreditCard.  # noqa: E501
        :rtype: int
        """
        return self._card_expiration_year

    @card_expiration_year.setter
    def card_expiration_year(self, card_expiration_year):
        """Sets the card_expiration_year of this CartCustomerProfileCreditCard.

        Card expiration year (four digit)  # noqa: E501

        :param card_expiration_year: The card_expiration_year of this CartCustomerProfileCreditCard.  # noqa: E501
        :type: int
        """

        self._card_expiration_year = card_expiration_year

    @property
    def card_number(self):
        """Gets the card_number of this CartCustomerProfileCreditCard.  # noqa: E501

        Card number (masked last 4 digits)  # noqa: E501

        :return: The card_number of this CartCustomerProfileCreditCard.  # noqa: E501
        :rtype: str
        """
        return self._card_number

    @card_number.setter
    def card_number(self, card_number):
        """Sets the card_number of this CartCustomerProfileCreditCard.

        Card number (masked last 4 digits)  # noqa: E501

        :param card_number: The card_number of this CartCustomerProfileCreditCard.  # noqa: E501
        :type: str
        """

        self._card_number = card_number

    @property
    def card_type(self):
        """Gets the card_type of this CartCustomerProfileCreditCard.  # noqa: E501

        Card type  # noqa: E501

        :return: The card_type of this CartCustomerProfileCreditCard.  # noqa: E501
        :rtype: str
        """
        return self._card_type

    @card_type.setter
    def card_type(self, card_type):
        """Sets the card_type of this CartCustomerProfileCreditCard.

        Card type  # noqa: E501

        :param card_type: The card_type of this CartCustomerProfileCreditCard.  # noqa: E501
        :type: str
        """
        allowed_values = ["AMEX", "Diners Club", "Discover", "MasterCard", "JCB", "VISA"]  # noqa: E501
        if card_type not in allowed_values:
            raise ValueError(
                "Invalid value for `card_type` ({0}), must be one of {1}"  # noqa: E501
                .format(card_type, allowed_values)
            )

        self._card_type = card_type

    @property
    def customer_profile_credit_card_id(self):
        """Gets the customer_profile_credit_card_id of this CartCustomerProfileCreditCard.  # noqa: E501

        Unique identifier for this stored card  # noqa: E501

        :return: The customer_profile_credit_card_id of this CartCustomerProfileCreditCard.  # noqa: E501
        :rtype: int
        """
        return self._customer_profile_credit_card_id

    @customer_profile_credit_card_id.setter
    def customer_profile_credit_card_id(self, customer_profile_credit_card_id):
        """Sets the customer_profile_credit_card_id of this CartCustomerProfileCreditCard.

        Unique identifier for this stored card  # noqa: E501

        :param customer_profile_credit_card_id: The customer_profile_credit_card_id of this CartCustomerProfileCreditCard.  # noqa: E501
        :type: int
        """

        self._customer_profile_credit_card_id = customer_profile_credit_card_id

    @property
    def last_used_date(self):
        """Gets the last_used_date of this CartCustomerProfileCreditCard.  # noqa: E501

        Last used  # noqa: E501

        :return: The last_used_date of this CartCustomerProfileCreditCard.  # noqa: E501
        :rtype: str
        """
        return self._last_used_date

    @last_used_date.setter
    def last_used_date(self, last_used_date):
        """Sets the last_used_date of this CartCustomerProfileCreditCard.

        Last used  # noqa: E501

        :param last_used_date: The last_used_date of this CartCustomerProfileCreditCard.  # noqa: E501
        :type: str
        """

        self._last_used_date = last_used_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CartCustomerProfileCreditCard, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CartCustomerProfileCreditCard):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
