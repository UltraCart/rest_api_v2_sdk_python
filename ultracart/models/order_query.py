# coding: utf-8

"""
    UltraCart Rest API V2

    This is the next generation UltraCart REST API...

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class OrderQuery(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, cc_email=None, channel_partner_code=None, channel_partner_order_id=None, city=None, company=None, country_code=None, creation_date_begin=None, creation_date_end=None, current_stage=None, customer_profile_oid=None, email=None, first_name=None, item_id=None, last_name=None, order_id=None, payment_date_begin=None, payment_date_end=None, payment_method=None, phone=None, postal_code=None, purchase_order_number=None, rma=None, screen_branding_theme_code=None, shipment_date_begin=None, shipment_date_end=None, state_region=None, storefront_host_name=None, total=None):
        """
        OrderQuery - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'cc_email': 'str',
            'channel_partner_code': 'str',
            'channel_partner_order_id': 'str',
            'city': 'str',
            'company': 'str',
            'country_code': 'str',
            'creation_date_begin': 'str',
            'creation_date_end': 'str',
            'current_stage': 'str',
            'customer_profile_oid': 'int',
            'email': 'str',
            'first_name': 'str',
            'item_id': 'str',
            'last_name': 'str',
            'order_id': 'str',
            'payment_date_begin': 'str',
            'payment_date_end': 'str',
            'payment_method': 'str',
            'phone': 'str',
            'postal_code': 'str',
            'purchase_order_number': 'str',
            'rma': 'str',
            'screen_branding_theme_code': 'str',
            'shipment_date_begin': 'str',
            'shipment_date_end': 'str',
            'state_region': 'str',
            'storefront_host_name': 'str',
            'total': 'float'
        }

        self.attribute_map = {
            'cc_email': 'cc_email',
            'channel_partner_code': 'channel_partner_code',
            'channel_partner_order_id': 'channel_partner_order_id',
            'city': 'city',
            'company': 'company',
            'country_code': 'country_code',
            'creation_date_begin': 'creation_date_begin',
            'creation_date_end': 'creation_date_end',
            'current_stage': 'current_stage',
            'customer_profile_oid': 'customer_profile_oid',
            'email': 'email',
            'first_name': 'first_name',
            'item_id': 'item_id',
            'last_name': 'last_name',
            'order_id': 'order_id',
            'payment_date_begin': 'payment_date_begin',
            'payment_date_end': 'payment_date_end',
            'payment_method': 'payment_method',
            'phone': 'phone',
            'postal_code': 'postal_code',
            'purchase_order_number': 'purchase_order_number',
            'rma': 'rma',
            'screen_branding_theme_code': 'screen_branding_theme_code',
            'shipment_date_begin': 'shipment_date_begin',
            'shipment_date_end': 'shipment_date_end',
            'state_region': 'state_region',
            'storefront_host_name': 'storefront_host_name',
            'total': 'total'
        }

        self._cc_email = cc_email
        self._channel_partner_code = channel_partner_code
        self._channel_partner_order_id = channel_partner_order_id
        self._city = city
        self._company = company
        self._country_code = country_code
        self._creation_date_begin = creation_date_begin
        self._creation_date_end = creation_date_end
        self._current_stage = current_stage
        self._customer_profile_oid = customer_profile_oid
        self._email = email
        self._first_name = first_name
        self._item_id = item_id
        self._last_name = last_name
        self._order_id = order_id
        self._payment_date_begin = payment_date_begin
        self._payment_date_end = payment_date_end
        self._payment_method = payment_method
        self._phone = phone
        self._postal_code = postal_code
        self._purchase_order_number = purchase_order_number
        self._rma = rma
        self._screen_branding_theme_code = screen_branding_theme_code
        self._shipment_date_begin = shipment_date_begin
        self._shipment_date_end = shipment_date_end
        self._state_region = state_region
        self._storefront_host_name = storefront_host_name
        self._total = total

    @property
    def cc_email(self):
        """
        Gets the cc_email of this OrderQuery.
        CC Email

        :return: The cc_email of this OrderQuery.
        :rtype: str
        """
        return self._cc_email

    @cc_email.setter
    def cc_email(self, cc_email):
        """
        Sets the cc_email of this OrderQuery.
        CC Email

        :param cc_email: The cc_email of this OrderQuery.
        :type: str
        """

        if not cc_email:
            raise ValueError("Invalid value for `cc_email`, must not be `None`")
        if len(cc_email) > 100:
            raise ValueError("Invalid value for `cc_email`, length must be less than `100`")

        self._cc_email = cc_email

    @property
    def channel_partner_code(self):
        """
        Gets the channel_partner_code of this OrderQuery.
        The code of the channel partner

        :return: The channel_partner_code of this OrderQuery.
        :rtype: str
        """
        return self._channel_partner_code

    @channel_partner_code.setter
    def channel_partner_code(self, channel_partner_code):
        """
        Sets the channel_partner_code of this OrderQuery.
        The code of the channel partner

        :param channel_partner_code: The channel_partner_code of this OrderQuery.
        :type: str
        """

        self._channel_partner_code = channel_partner_code

    @property
    def channel_partner_order_id(self):
        """
        Gets the channel_partner_order_id of this OrderQuery.
        The order ID assigned by the channel partner for this order

        :return: The channel_partner_order_id of this OrderQuery.
        :rtype: str
        """
        return self._channel_partner_order_id

    @channel_partner_order_id.setter
    def channel_partner_order_id(self, channel_partner_order_id):
        """
        Sets the channel_partner_order_id of this OrderQuery.
        The order ID assigned by the channel partner for this order

        :param channel_partner_order_id: The channel_partner_order_id of this OrderQuery.
        :type: str
        """

        self._channel_partner_order_id = channel_partner_order_id

    @property
    def city(self):
        """
        Gets the city of this OrderQuery.
        City

        :return: The city of this OrderQuery.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """
        Sets the city of this OrderQuery.
        City

        :param city: The city of this OrderQuery.
        :type: str
        """

        if not city:
            raise ValueError("Invalid value for `city`, must not be `None`")
        if len(city) > 32:
            raise ValueError("Invalid value for `city`, length must be less than `32`")

        self._city = city

    @property
    def company(self):
        """
        Gets the company of this OrderQuery.
        Company

        :return: The company of this OrderQuery.
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """
        Sets the company of this OrderQuery.
        Company

        :param company: The company of this OrderQuery.
        :type: str
        """

        if not company:
            raise ValueError("Invalid value for `company`, must not be `None`")
        if len(company) > 50:
            raise ValueError("Invalid value for `company`, length must be less than `50`")

        self._company = company

    @property
    def country_code(self):
        """
        Gets the country_code of this OrderQuery.
        ISO-3166 two letter country code

        :return: The country_code of this OrderQuery.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """
        Sets the country_code of this OrderQuery.
        ISO-3166 two letter country code

        :param country_code: The country_code of this OrderQuery.
        :type: str
        """

        if not country_code:
            raise ValueError("Invalid value for `country_code`, must not be `None`")
        if len(country_code) > 2:
            raise ValueError("Invalid value for `country_code`, length must be less than `2`")

        self._country_code = country_code

    @property
    def creation_date_begin(self):
        """
        Gets the creation_date_begin of this OrderQuery.
        Date/time that the order was created

        :return: The creation_date_begin of this OrderQuery.
        :rtype: str
        """
        return self._creation_date_begin

    @creation_date_begin.setter
    def creation_date_begin(self, creation_date_begin):
        """
        Sets the creation_date_begin of this OrderQuery.
        Date/time that the order was created

        :param creation_date_begin: The creation_date_begin of this OrderQuery.
        :type: str
        """

        self._creation_date_begin = creation_date_begin

    @property
    def creation_date_end(self):
        """
        Gets the creation_date_end of this OrderQuery.
        Date/time that the order was created

        :return: The creation_date_end of this OrderQuery.
        :rtype: str
        """
        return self._creation_date_end

    @creation_date_end.setter
    def creation_date_end(self, creation_date_end):
        """
        Sets the creation_date_end of this OrderQuery.
        Date/time that the order was created

        :param creation_date_end: The creation_date_end of this OrderQuery.
        :type: str
        """

        self._creation_date_end = creation_date_end

    @property
    def current_stage(self):
        """
        Gets the current_stage of this OrderQuery.
        Current stage that the order is in.

        :return: The current_stage of this OrderQuery.
        :rtype: str
        """
        return self._current_stage

    @current_stage.setter
    def current_stage(self, current_stage):
        """
        Sets the current_stage of this OrderQuery.
        Current stage that the order is in.

        :param current_stage: The current_stage of this OrderQuery.
        :type: str
        """
        allowed_values = ["Accounts Receivable", "Pending Clearance", "Fraud Review", "Rejected", "Shipping Department", "Completed Order", "Quote Request", "Quote Sent", "Least Cost Routing", "Unknown"]
        if current_stage not in allowed_values:
            raise ValueError(
                "Invalid value for `current_stage` ({0}), must be one of {1}"
                .format(current_stage, allowed_values)
            )

        self._current_stage = current_stage

    @property
    def customer_profile_oid(self):
        """
        Gets the customer_profile_oid of this OrderQuery.
        The customer profile to find associated orders for

        :return: The customer_profile_oid of this OrderQuery.
        :rtype: int
        """
        return self._customer_profile_oid

    @customer_profile_oid.setter
    def customer_profile_oid(self, customer_profile_oid):
        """
        Sets the customer_profile_oid of this OrderQuery.
        The customer profile to find associated orders for

        :param customer_profile_oid: The customer_profile_oid of this OrderQuery.
        :type: int
        """

        self._customer_profile_oid = customer_profile_oid

    @property
    def email(self):
        """
        Gets the email of this OrderQuery.
        Email

        :return: The email of this OrderQuery.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this OrderQuery.
        Email

        :param email: The email of this OrderQuery.
        :type: str
        """

        if not email:
            raise ValueError("Invalid value for `email`, must not be `None`")
        if len(email) > 100:
            raise ValueError("Invalid value for `email`, length must be less than `100`")

        self._email = email

    @property
    def first_name(self):
        """
        Gets the first_name of this OrderQuery.
        First name

        :return: The first_name of this OrderQuery.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """
        Sets the first_name of this OrderQuery.
        First name

        :param first_name: The first_name of this OrderQuery.
        :type: str
        """

        if not first_name:
            raise ValueError("Invalid value for `first_name`, must not be `None`")
        if len(first_name) > 30:
            raise ValueError("Invalid value for `first_name`, length must be less than `30`")

        self._first_name = first_name

    @property
    def item_id(self):
        """
        Gets the item_id of this OrderQuery.
        Item ID

        :return: The item_id of this OrderQuery.
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """
        Sets the item_id of this OrderQuery.
        Item ID

        :param item_id: The item_id of this OrderQuery.
        :type: str
        """

        self._item_id = item_id

    @property
    def last_name(self):
        """
        Gets the last_name of this OrderQuery.
        Last name

        :return: The last_name of this OrderQuery.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """
        Sets the last_name of this OrderQuery.
        Last name

        :param last_name: The last_name of this OrderQuery.
        :type: str
        """

        if not last_name:
            raise ValueError("Invalid value for `last_name`, must not be `None`")
        if len(last_name) > 30:
            raise ValueError("Invalid value for `last_name`, length must be less than `30`")

        self._last_name = last_name

    @property
    def order_id(self):
        """
        Gets the order_id of this OrderQuery.
        Order ID

        :return: The order_id of this OrderQuery.
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """
        Sets the order_id of this OrderQuery.
        Order ID

        :param order_id: The order_id of this OrderQuery.
        :type: str
        """

        self._order_id = order_id

    @property
    def payment_date_begin(self):
        """
        Gets the payment_date_begin of this OrderQuery.
        Date/time that the order was successfully processed

        :return: The payment_date_begin of this OrderQuery.
        :rtype: str
        """
        return self._payment_date_begin

    @payment_date_begin.setter
    def payment_date_begin(self, payment_date_begin):
        """
        Sets the payment_date_begin of this OrderQuery.
        Date/time that the order was successfully processed

        :param payment_date_begin: The payment_date_begin of this OrderQuery.
        :type: str
        """

        self._payment_date_begin = payment_date_begin

    @property
    def payment_date_end(self):
        """
        Gets the payment_date_end of this OrderQuery.
        Date/time that the order was successfully processed

        :return: The payment_date_end of this OrderQuery.
        :rtype: str
        """
        return self._payment_date_end

    @payment_date_end.setter
    def payment_date_end(self, payment_date_end):
        """
        Sets the payment_date_end of this OrderQuery.
        Date/time that the order was successfully processed

        :param payment_date_end: The payment_date_end of this OrderQuery.
        :type: str
        """

        self._payment_date_end = payment_date_end

    @property
    def payment_method(self):
        """
        Gets the payment_method of this OrderQuery.
        Payment method

        :return: The payment_method of this OrderQuery.
        :rtype: str
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """
        Sets the payment_method of this OrderQuery.
        Payment method

        :param payment_method: The payment_method of this OrderQuery.
        :type: str
        """
        allowed_values = ["Affirm", "Amazon", "Amazon SC", "Cash", "Check", "COD", "Coinbase", "Credit Card", "eCheck", "Money Order", "PayPal", "Purchase Order", "Quote Request", "Unknown", "Wire Transfer"]
        if payment_method not in allowed_values:
            raise ValueError(
                "Invalid value for `payment_method` ({0}), must be one of {1}"
                .format(payment_method, allowed_values)
            )

        self._payment_method = payment_method

    @property
    def phone(self):
        """
        Gets the phone of this OrderQuery.
        Phone

        :return: The phone of this OrderQuery.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """
        Sets the phone of this OrderQuery.
        Phone

        :param phone: The phone of this OrderQuery.
        :type: str
        """

        if not phone:
            raise ValueError("Invalid value for `phone`, must not be `None`")
        if len(phone) > 25:
            raise ValueError("Invalid value for `phone`, length must be less than `25`")

        self._phone = phone

    @property
    def postal_code(self):
        """
        Gets the postal_code of this OrderQuery.
        Postal code

        :return: The postal_code of this OrderQuery.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """
        Sets the postal_code of this OrderQuery.
        Postal code

        :param postal_code: The postal_code of this OrderQuery.
        :type: str
        """

        if not postal_code:
            raise ValueError("Invalid value for `postal_code`, must not be `None`")
        if len(postal_code) > 20:
            raise ValueError("Invalid value for `postal_code`, length must be less than `20`")

        self._postal_code = postal_code

    @property
    def purchase_order_number(self):
        """
        Gets the purchase_order_number of this OrderQuery.
        Purchase order number

        :return: The purchase_order_number of this OrderQuery.
        :rtype: str
        """
        return self._purchase_order_number

    @purchase_order_number.setter
    def purchase_order_number(self, purchase_order_number):
        """
        Sets the purchase_order_number of this OrderQuery.
        Purchase order number

        :param purchase_order_number: The purchase_order_number of this OrderQuery.
        :type: str
        """

        self._purchase_order_number = purchase_order_number

    @property
    def rma(self):
        """
        Gets the rma of this OrderQuery.
        RMA number

        :return: The rma of this OrderQuery.
        :rtype: str
        """
        return self._rma

    @rma.setter
    def rma(self, rma):
        """
        Sets the rma of this OrderQuery.
        RMA number

        :param rma: The rma of this OrderQuery.
        :type: str
        """

        if not rma:
            raise ValueError("Invalid value for `rma`, must not be `None`")
        if len(rma) > 30:
            raise ValueError("Invalid value for `rma`, length must be less than `30`")

        self._rma = rma

    @property
    def screen_branding_theme_code(self):
        """
        Gets the screen_branding_theme_code of this OrderQuery.
        Screen branding theme code associated with the order (legacy checkout)

        :return: The screen_branding_theme_code of this OrderQuery.
        :rtype: str
        """
        return self._screen_branding_theme_code

    @screen_branding_theme_code.setter
    def screen_branding_theme_code(self, screen_branding_theme_code):
        """
        Sets the screen_branding_theme_code of this OrderQuery.
        Screen branding theme code associated with the order (legacy checkout)

        :param screen_branding_theme_code: The screen_branding_theme_code of this OrderQuery.
        :type: str
        """

        if not screen_branding_theme_code:
            raise ValueError("Invalid value for `screen_branding_theme_code`, must not be `None`")
        if len(screen_branding_theme_code) > 10:
            raise ValueError("Invalid value for `screen_branding_theme_code`, length must be less than `10`")

        self._screen_branding_theme_code = screen_branding_theme_code

    @property
    def shipment_date_begin(self):
        """
        Gets the shipment_date_begin of this OrderQuery.
        Date/time that the order was shipping

        :return: The shipment_date_begin of this OrderQuery.
        :rtype: str
        """
        return self._shipment_date_begin

    @shipment_date_begin.setter
    def shipment_date_begin(self, shipment_date_begin):
        """
        Sets the shipment_date_begin of this OrderQuery.
        Date/time that the order was shipping

        :param shipment_date_begin: The shipment_date_begin of this OrderQuery.
        :type: str
        """

        self._shipment_date_begin = shipment_date_begin

    @property
    def shipment_date_end(self):
        """
        Gets the shipment_date_end of this OrderQuery.
        Date/time that the order was shipped

        :return: The shipment_date_end of this OrderQuery.
        :rtype: str
        """
        return self._shipment_date_end

    @shipment_date_end.setter
    def shipment_date_end(self, shipment_date_end):
        """
        Sets the shipment_date_end of this OrderQuery.
        Date/time that the order was shipped

        :param shipment_date_end: The shipment_date_end of this OrderQuery.
        :type: str
        """

        self._shipment_date_end = shipment_date_end

    @property
    def state_region(self):
        """
        Gets the state_region of this OrderQuery.
        State for United States otherwise region or province for other countries

        :return: The state_region of this OrderQuery.
        :rtype: str
        """
        return self._state_region

    @state_region.setter
    def state_region(self, state_region):
        """
        Sets the state_region of this OrderQuery.
        State for United States otherwise region or province for other countries

        :param state_region: The state_region of this OrderQuery.
        :type: str
        """

        if not state_region:
            raise ValueError("Invalid value for `state_region`, must not be `None`")
        if len(state_region) > 32:
            raise ValueError("Invalid value for `state_region`, length must be less than `32`")

        self._state_region = state_region

    @property
    def storefront_host_name(self):
        """
        Gets the storefront_host_name of this OrderQuery.
        StoreFront host name associated with the order

        :return: The storefront_host_name of this OrderQuery.
        :rtype: str
        """
        return self._storefront_host_name

    @storefront_host_name.setter
    def storefront_host_name(self, storefront_host_name):
        """
        Sets the storefront_host_name of this OrderQuery.
        StoreFront host name associated with the order

        :param storefront_host_name: The storefront_host_name of this OrderQuery.
        :type: str
        """

        self._storefront_host_name = storefront_host_name

    @property
    def total(self):
        """
        Gets the total of this OrderQuery.
        Total

        :return: The total of this OrderQuery.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """
        Sets the total of this OrderQuery.
        Total

        :param total: The total of this OrderQuery.
        :type: float
        """

        self._total = total

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
