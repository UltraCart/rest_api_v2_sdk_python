# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PaymentsConfigurationAmazon(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'accept_amazon': 'bool',
        'amazon_access_key_id': 'str',
        'amazon_accounting_code': 'str',
        'amazon_deposit_to_account': 'str',
        'amazon_merchant_id': 'str',
        'amazon_sandbox': 'bool',
        'amazon_secret_access_key': 'str',
        'restrictions': 'PaymentsConfigurationRestrictions'
    }

    attribute_map = {
        'accept_amazon': 'acceptAmazon',
        'amazon_access_key_id': 'amazonAccessKeyId',
        'amazon_accounting_code': 'amazonAccountingCode',
        'amazon_deposit_to_account': 'amazonDepositToAccount',
        'amazon_merchant_id': 'amazonMerchantId',
        'amazon_sandbox': 'amazonSandbox',
        'amazon_secret_access_key': 'amazonSecretAccessKey',
        'restrictions': 'restrictions'
    }

    def __init__(self, accept_amazon=None, amazon_access_key_id=None, amazon_accounting_code=None, amazon_deposit_to_account=None, amazon_merchant_id=None, amazon_sandbox=None, amazon_secret_access_key=None, restrictions=None):  # noqa: E501
        """PaymentsConfigurationAmazon - a model defined in Swagger"""  # noqa: E501

        self._accept_amazon = None
        self._amazon_access_key_id = None
        self._amazon_accounting_code = None
        self._amazon_deposit_to_account = None
        self._amazon_merchant_id = None
        self._amazon_sandbox = None
        self._amazon_secret_access_key = None
        self._restrictions = None
        self.discriminator = None

        if accept_amazon is not None:
            self.accept_amazon = accept_amazon
        if amazon_access_key_id is not None:
            self.amazon_access_key_id = amazon_access_key_id
        if amazon_accounting_code is not None:
            self.amazon_accounting_code = amazon_accounting_code
        if amazon_deposit_to_account is not None:
            self.amazon_deposit_to_account = amazon_deposit_to_account
        if amazon_merchant_id is not None:
            self.amazon_merchant_id = amazon_merchant_id
        if amazon_sandbox is not None:
            self.amazon_sandbox = amazon_sandbox
        if amazon_secret_access_key is not None:
            self.amazon_secret_access_key = amazon_secret_access_key
        if restrictions is not None:
            self.restrictions = restrictions

    @property
    def accept_amazon(self):
        """Gets the accept_amazon of this PaymentsConfigurationAmazon.  # noqa: E501


        :return: The accept_amazon of this PaymentsConfigurationAmazon.  # noqa: E501
        :rtype: bool
        """
        return self._accept_amazon

    @accept_amazon.setter
    def accept_amazon(self, accept_amazon):
        """Sets the accept_amazon of this PaymentsConfigurationAmazon.


        :param accept_amazon: The accept_amazon of this PaymentsConfigurationAmazon.  # noqa: E501
        :type: bool
        """

        self._accept_amazon = accept_amazon

    @property
    def amazon_access_key_id(self):
        """Gets the amazon_access_key_id of this PaymentsConfigurationAmazon.  # noqa: E501


        :return: The amazon_access_key_id of this PaymentsConfigurationAmazon.  # noqa: E501
        :rtype: str
        """
        return self._amazon_access_key_id

    @amazon_access_key_id.setter
    def amazon_access_key_id(self, amazon_access_key_id):
        """Sets the amazon_access_key_id of this PaymentsConfigurationAmazon.


        :param amazon_access_key_id: The amazon_access_key_id of this PaymentsConfigurationAmazon.  # noqa: E501
        :type: str
        """

        self._amazon_access_key_id = amazon_access_key_id

    @property
    def amazon_accounting_code(self):
        """Gets the amazon_accounting_code of this PaymentsConfigurationAmazon.  # noqa: E501


        :return: The amazon_accounting_code of this PaymentsConfigurationAmazon.  # noqa: E501
        :rtype: str
        """
        return self._amazon_accounting_code

    @amazon_accounting_code.setter
    def amazon_accounting_code(self, amazon_accounting_code):
        """Sets the amazon_accounting_code of this PaymentsConfigurationAmazon.


        :param amazon_accounting_code: The amazon_accounting_code of this PaymentsConfigurationAmazon.  # noqa: E501
        :type: str
        """

        self._amazon_accounting_code = amazon_accounting_code

    @property
    def amazon_deposit_to_account(self):
        """Gets the amazon_deposit_to_account of this PaymentsConfigurationAmazon.  # noqa: E501


        :return: The amazon_deposit_to_account of this PaymentsConfigurationAmazon.  # noqa: E501
        :rtype: str
        """
        return self._amazon_deposit_to_account

    @amazon_deposit_to_account.setter
    def amazon_deposit_to_account(self, amazon_deposit_to_account):
        """Sets the amazon_deposit_to_account of this PaymentsConfigurationAmazon.


        :param amazon_deposit_to_account: The amazon_deposit_to_account of this PaymentsConfigurationAmazon.  # noqa: E501
        :type: str
        """

        self._amazon_deposit_to_account = amazon_deposit_to_account

    @property
    def amazon_merchant_id(self):
        """Gets the amazon_merchant_id of this PaymentsConfigurationAmazon.  # noqa: E501


        :return: The amazon_merchant_id of this PaymentsConfigurationAmazon.  # noqa: E501
        :rtype: str
        """
        return self._amazon_merchant_id

    @amazon_merchant_id.setter
    def amazon_merchant_id(self, amazon_merchant_id):
        """Sets the amazon_merchant_id of this PaymentsConfigurationAmazon.


        :param amazon_merchant_id: The amazon_merchant_id of this PaymentsConfigurationAmazon.  # noqa: E501
        :type: str
        """

        self._amazon_merchant_id = amazon_merchant_id

    @property
    def amazon_sandbox(self):
        """Gets the amazon_sandbox of this PaymentsConfigurationAmazon.  # noqa: E501


        :return: The amazon_sandbox of this PaymentsConfigurationAmazon.  # noqa: E501
        :rtype: bool
        """
        return self._amazon_sandbox

    @amazon_sandbox.setter
    def amazon_sandbox(self, amazon_sandbox):
        """Sets the amazon_sandbox of this PaymentsConfigurationAmazon.


        :param amazon_sandbox: The amazon_sandbox of this PaymentsConfigurationAmazon.  # noqa: E501
        :type: bool
        """

        self._amazon_sandbox = amazon_sandbox

    @property
    def amazon_secret_access_key(self):
        """Gets the amazon_secret_access_key of this PaymentsConfigurationAmazon.  # noqa: E501


        :return: The amazon_secret_access_key of this PaymentsConfigurationAmazon.  # noqa: E501
        :rtype: str
        """
        return self._amazon_secret_access_key

    @amazon_secret_access_key.setter
    def amazon_secret_access_key(self, amazon_secret_access_key):
        """Sets the amazon_secret_access_key of this PaymentsConfigurationAmazon.


        :param amazon_secret_access_key: The amazon_secret_access_key of this PaymentsConfigurationAmazon.  # noqa: E501
        :type: str
        """

        self._amazon_secret_access_key = amazon_secret_access_key

    @property
    def restrictions(self):
        """Gets the restrictions of this PaymentsConfigurationAmazon.  # noqa: E501


        :return: The restrictions of this PaymentsConfigurationAmazon.  # noqa: E501
        :rtype: PaymentsConfigurationRestrictions
        """
        return self._restrictions

    @restrictions.setter
    def restrictions(self, restrictions):
        """Sets the restrictions of this PaymentsConfigurationAmazon.


        :param restrictions: The restrictions of this PaymentsConfigurationAmazon.  # noqa: E501
        :type: PaymentsConfigurationRestrictions
        """

        self._restrictions = restrictions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaymentsConfigurationAmazon, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentsConfigurationAmazon):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
