# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PaymentsConfigurationAmazon(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'accept_amazon': 'bool',
        'access_key_id': 'str',
        'accounting_code': 'str',
        'amazon_merchant_id': 'str',
        'deposit_to_account': 'str',
        'environment': 'str',
        'restrictions': 'PaymentsConfigurationRestrictions',
        'secret_access_key': 'str'
    }

    attribute_map = {
        'accept_amazon': 'accept_amazon',
        'access_key_id': 'access_key_id',
        'accounting_code': 'accounting_code',
        'amazon_merchant_id': 'amazon_merchant_id',
        'deposit_to_account': 'deposit_to_account',
        'environment': 'environment',
        'restrictions': 'restrictions',
        'secret_access_key': 'secret_access_key'
    }

    def __init__(self, accept_amazon=None, access_key_id=None, accounting_code=None, amazon_merchant_id=None, deposit_to_account=None, environment=None, restrictions=None, secret_access_key=None):  # noqa: E501
        """PaymentsConfigurationAmazon - a model defined in Swagger"""  # noqa: E501

        self._accept_amazon = None
        self._access_key_id = None
        self._accounting_code = None
        self._amazon_merchant_id = None
        self._deposit_to_account = None
        self._environment = None
        self._restrictions = None
        self._secret_access_key = None
        self.discriminator = None

        if accept_amazon is not None:
            self.accept_amazon = accept_amazon
        if access_key_id is not None:
            self.access_key_id = access_key_id
        if accounting_code is not None:
            self.accounting_code = accounting_code
        if amazon_merchant_id is not None:
            self.amazon_merchant_id = amazon_merchant_id
        if deposit_to_account is not None:
            self.deposit_to_account = deposit_to_account
        if environment is not None:
            self.environment = environment
        if restrictions is not None:
            self.restrictions = restrictions
        if secret_access_key is not None:
            self.secret_access_key = secret_access_key

    @property
    def accept_amazon(self):
        """Gets the accept_amazon of this PaymentsConfigurationAmazon.  # noqa: E501

        Master flag to determine if this merchant accepts Pay by Amazon  # noqa: E501

        :return: The accept_amazon of this PaymentsConfigurationAmazon.  # noqa: E501
        :rtype: bool
        """
        return self._accept_amazon

    @accept_amazon.setter
    def accept_amazon(self, accept_amazon):
        """Sets the accept_amazon of this PaymentsConfigurationAmazon.

        Master flag to determine if this merchant accepts Pay by Amazon  # noqa: E501

        :param accept_amazon: The accept_amazon of this PaymentsConfigurationAmazon.  # noqa: E501
        :type: bool
        """

        self._accept_amazon = accept_amazon

    @property
    def access_key_id(self):
        """Gets the access_key_id of this PaymentsConfigurationAmazon.  # noqa: E501

        Amazon access key ID  # noqa: E501

        :return: The access_key_id of this PaymentsConfigurationAmazon.  # noqa: E501
        :rtype: str
        """
        return self._access_key_id

    @access_key_id.setter
    def access_key_id(self, access_key_id):
        """Sets the access_key_id of this PaymentsConfigurationAmazon.

        Amazon access key ID  # noqa: E501

        :param access_key_id: The access_key_id of this PaymentsConfigurationAmazon.  # noqa: E501
        :type: str
        """

        self._access_key_id = access_key_id

    @property
    def accounting_code(self):
        """Gets the accounting_code of this PaymentsConfigurationAmazon.  # noqa: E501

        Optional accounting code for use with Quickbooks integrations  # noqa: E501

        :return: The accounting_code of this PaymentsConfigurationAmazon.  # noqa: E501
        :rtype: str
        """
        return self._accounting_code

    @accounting_code.setter
    def accounting_code(self, accounting_code):
        """Sets the accounting_code of this PaymentsConfigurationAmazon.

        Optional accounting code for use with Quickbooks integrations  # noqa: E501

        :param accounting_code: The accounting_code of this PaymentsConfigurationAmazon.  # noqa: E501
        :type: str
        """

        self._accounting_code = accounting_code

    @property
    def amazon_merchant_id(self):
        """Gets the amazon_merchant_id of this PaymentsConfigurationAmazon.  # noqa: E501

        Amazon merchant ID  # noqa: E501

        :return: The amazon_merchant_id of this PaymentsConfigurationAmazon.  # noqa: E501
        :rtype: str
        """
        return self._amazon_merchant_id

    @amazon_merchant_id.setter
    def amazon_merchant_id(self, amazon_merchant_id):
        """Sets the amazon_merchant_id of this PaymentsConfigurationAmazon.

        Amazon merchant ID  # noqa: E501

        :param amazon_merchant_id: The amazon_merchant_id of this PaymentsConfigurationAmazon.  # noqa: E501
        :type: str
        """

        self._amazon_merchant_id = amazon_merchant_id

    @property
    def deposit_to_account(self):
        """Gets the deposit_to_account of this PaymentsConfigurationAmazon.  # noqa: E501

        Optional deposit to account field for use with Quickbooks integrations  # noqa: E501

        :return: The deposit_to_account of this PaymentsConfigurationAmazon.  # noqa: E501
        :rtype: str
        """
        return self._deposit_to_account

    @deposit_to_account.setter
    def deposit_to_account(self, deposit_to_account):
        """Sets the deposit_to_account of this PaymentsConfigurationAmazon.

        Optional deposit to account field for use with Quickbooks integrations  # noqa: E501

        :param deposit_to_account: The deposit_to_account of this PaymentsConfigurationAmazon.  # noqa: E501
        :type: str
        """

        self._deposit_to_account = deposit_to_account

    @property
    def environment(self):
        """Gets the environment of this PaymentsConfigurationAmazon.  # noqa: E501

        Environment  # noqa: E501

        :return: The environment of this PaymentsConfigurationAmazon.  # noqa: E501
        :rtype: str
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this PaymentsConfigurationAmazon.

        Environment  # noqa: E501

        :param environment: The environment of this PaymentsConfigurationAmazon.  # noqa: E501
        :type: str
        """
        allowed_values = ["Live", "Sandbox"]  # noqa: E501
        if environment not in allowed_values:
            raise ValueError(
                "Invalid value for `environment` ({0}), must be one of {1}"  # noqa: E501
                .format(environment, allowed_values)
            )

        self._environment = environment

    @property
    def restrictions(self):
        """Gets the restrictions of this PaymentsConfigurationAmazon.  # noqa: E501


        :return: The restrictions of this PaymentsConfigurationAmazon.  # noqa: E501
        :rtype: PaymentsConfigurationRestrictions
        """
        return self._restrictions

    @restrictions.setter
    def restrictions(self, restrictions):
        """Sets the restrictions of this PaymentsConfigurationAmazon.


        :param restrictions: The restrictions of this PaymentsConfigurationAmazon.  # noqa: E501
        :type: PaymentsConfigurationRestrictions
        """

        self._restrictions = restrictions

    @property
    def secret_access_key(self):
        """Gets the secret_access_key of this PaymentsConfigurationAmazon.  # noqa: E501

        Amazon secret access key  # noqa: E501

        :return: The secret_access_key of this PaymentsConfigurationAmazon.  # noqa: E501
        :rtype: str
        """
        return self._secret_access_key

    @secret_access_key.setter
    def secret_access_key(self, secret_access_key):
        """Sets the secret_access_key of this PaymentsConfigurationAmazon.

        Amazon secret access key  # noqa: E501

        :param secret_access_key: The secret_access_key of this PaymentsConfigurationAmazon.  # noqa: E501
        :type: str
        """

        self._secret_access_key = secret_access_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaymentsConfigurationAmazon, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentsConfigurationAmazon):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
