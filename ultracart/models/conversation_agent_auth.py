# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConversationAgentAuth(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'conversation_participant_arn': 'str',
        'conversation_participant_name': 'str',
        'jwt': 'str',
        'merchant_id': 'str',
        'twilio_accounts': 'list[ConversationTwilioAccount]',
        'websocket_url': 'str'
    }

    attribute_map = {
        'conversation_participant_arn': 'conversation_participant_arn',
        'conversation_participant_name': 'conversation_participant_name',
        'jwt': 'jwt',
        'merchant_id': 'merchant_id',
        'twilio_accounts': 'twilio_accounts',
        'websocket_url': 'websocket_url'
    }

    def __init__(self, conversation_participant_arn=None, conversation_participant_name=None, jwt=None, merchant_id=None, twilio_accounts=None, websocket_url=None):  # noqa: E501
        """ConversationAgentAuth - a model defined in Swagger"""  # noqa: E501

        self._conversation_participant_arn = None
        self._conversation_participant_name = None
        self._jwt = None
        self._merchant_id = None
        self._twilio_accounts = None
        self._websocket_url = None
        self.discriminator = None

        if conversation_participant_arn is not None:
            self.conversation_participant_arn = conversation_participant_arn
        if conversation_participant_name is not None:
            self.conversation_participant_name = conversation_participant_name
        if jwt is not None:
            self.jwt = jwt
        if merchant_id is not None:
            self.merchant_id = merchant_id
        if twilio_accounts is not None:
            self.twilio_accounts = twilio_accounts
        if websocket_url is not None:
            self.websocket_url = websocket_url

    @property
    def conversation_participant_arn(self):
        """Gets the conversation_participant_arn of this ConversationAgentAuth.  # noqa: E501


        :return: The conversation_participant_arn of this ConversationAgentAuth.  # noqa: E501
        :rtype: str
        """
        return self._conversation_participant_arn

    @conversation_participant_arn.setter
    def conversation_participant_arn(self, conversation_participant_arn):
        """Sets the conversation_participant_arn of this ConversationAgentAuth.


        :param conversation_participant_arn: The conversation_participant_arn of this ConversationAgentAuth.  # noqa: E501
        :type: str
        """

        self._conversation_participant_arn = conversation_participant_arn

    @property
    def conversation_participant_name(self):
        """Gets the conversation_participant_name of this ConversationAgentAuth.  # noqa: E501


        :return: The conversation_participant_name of this ConversationAgentAuth.  # noqa: E501
        :rtype: str
        """
        return self._conversation_participant_name

    @conversation_participant_name.setter
    def conversation_participant_name(self, conversation_participant_name):
        """Sets the conversation_participant_name of this ConversationAgentAuth.


        :param conversation_participant_name: The conversation_participant_name of this ConversationAgentAuth.  # noqa: E501
        :type: str
        """

        self._conversation_participant_name = conversation_participant_name

    @property
    def jwt(self):
        """Gets the jwt of this ConversationAgentAuth.  # noqa: E501


        :return: The jwt of this ConversationAgentAuth.  # noqa: E501
        :rtype: str
        """
        return self._jwt

    @jwt.setter
    def jwt(self, jwt):
        """Sets the jwt of this ConversationAgentAuth.


        :param jwt: The jwt of this ConversationAgentAuth.  # noqa: E501
        :type: str
        """

        self._jwt = jwt

    @property
    def merchant_id(self):
        """Gets the merchant_id of this ConversationAgentAuth.  # noqa: E501


        :return: The merchant_id of this ConversationAgentAuth.  # noqa: E501
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this ConversationAgentAuth.


        :param merchant_id: The merchant_id of this ConversationAgentAuth.  # noqa: E501
        :type: str
        """

        self._merchant_id = merchant_id

    @property
    def twilio_accounts(self):
        """Gets the twilio_accounts of this ConversationAgentAuth.  # noqa: E501


        :return: The twilio_accounts of this ConversationAgentAuth.  # noqa: E501
        :rtype: list[ConversationTwilioAccount]
        """
        return self._twilio_accounts

    @twilio_accounts.setter
    def twilio_accounts(self, twilio_accounts):
        """Sets the twilio_accounts of this ConversationAgentAuth.


        :param twilio_accounts: The twilio_accounts of this ConversationAgentAuth.  # noqa: E501
        :type: list[ConversationTwilioAccount]
        """

        self._twilio_accounts = twilio_accounts

    @property
    def websocket_url(self):
        """Gets the websocket_url of this ConversationAgentAuth.  # noqa: E501


        :return: The websocket_url of this ConversationAgentAuth.  # noqa: E501
        :rtype: str
        """
        return self._websocket_url

    @websocket_url.setter
    def websocket_url(self, websocket_url):
        """Sets the websocket_url of this ConversationAgentAuth.


        :param websocket_url: The websocket_url of this ConversationAgentAuth.  # noqa: E501
        :type: str
        """

        self._websocket_url = websocket_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConversationAgentAuth, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConversationAgentAuth):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
