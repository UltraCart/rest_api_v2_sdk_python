# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ScreenRecordingFilterValuesEventParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'values_bd': 'list[float]',
        'values_bool': 'list[bool]',
        'values_num': 'list[int]',
        'values_text': 'list[str]'
    }

    attribute_map = {
        'name': 'name',
        'values_bd': 'values_bd',
        'values_bool': 'values_bool',
        'values_num': 'values_num',
        'values_text': 'values_text'
    }

    def __init__(self, name=None, values_bd=None, values_bool=None, values_num=None, values_text=None):  # noqa: E501
        """ScreenRecordingFilterValuesEventParams - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._values_bd = None
        self._values_bool = None
        self._values_num = None
        self._values_text = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if values_bd is not None:
            self.values_bd = values_bd
        if values_bool is not None:
            self.values_bool = values_bool
        if values_num is not None:
            self.values_num = values_num
        if values_text is not None:
            self.values_text = values_text

    @property
    def name(self):
        """Gets the name of this ScreenRecordingFilterValuesEventParams.  # noqa: E501


        :return: The name of this ScreenRecordingFilterValuesEventParams.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ScreenRecordingFilterValuesEventParams.


        :param name: The name of this ScreenRecordingFilterValuesEventParams.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def values_bd(self):
        """Gets the values_bd of this ScreenRecordingFilterValuesEventParams.  # noqa: E501


        :return: The values_bd of this ScreenRecordingFilterValuesEventParams.  # noqa: E501
        :rtype: list[float]
        """
        return self._values_bd

    @values_bd.setter
    def values_bd(self, values_bd):
        """Sets the values_bd of this ScreenRecordingFilterValuesEventParams.


        :param values_bd: The values_bd of this ScreenRecordingFilterValuesEventParams.  # noqa: E501
        :type: list[float]
        """

        self._values_bd = values_bd

    @property
    def values_bool(self):
        """Gets the values_bool of this ScreenRecordingFilterValuesEventParams.  # noqa: E501


        :return: The values_bool of this ScreenRecordingFilterValuesEventParams.  # noqa: E501
        :rtype: list[bool]
        """
        return self._values_bool

    @values_bool.setter
    def values_bool(self, values_bool):
        """Sets the values_bool of this ScreenRecordingFilterValuesEventParams.


        :param values_bool: The values_bool of this ScreenRecordingFilterValuesEventParams.  # noqa: E501
        :type: list[bool]
        """

        self._values_bool = values_bool

    @property
    def values_num(self):
        """Gets the values_num of this ScreenRecordingFilterValuesEventParams.  # noqa: E501


        :return: The values_num of this ScreenRecordingFilterValuesEventParams.  # noqa: E501
        :rtype: list[int]
        """
        return self._values_num

    @values_num.setter
    def values_num(self, values_num):
        """Sets the values_num of this ScreenRecordingFilterValuesEventParams.


        :param values_num: The values_num of this ScreenRecordingFilterValuesEventParams.  # noqa: E501
        :type: list[int]
        """

        self._values_num = values_num

    @property
    def values_text(self):
        """Gets the values_text of this ScreenRecordingFilterValuesEventParams.  # noqa: E501


        :return: The values_text of this ScreenRecordingFilterValuesEventParams.  # noqa: E501
        :rtype: list[str]
        """
        return self._values_text

    @values_text.setter
    def values_text(self, values_text):
        """Sets the values_text of this ScreenRecordingFilterValuesEventParams.


        :param values_text: The values_text of this ScreenRecordingFilterValuesEventParams.  # noqa: E501
        :type: list[str]
        """

        self._values_text = values_text

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScreenRecordingFilterValuesEventParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScreenRecordingFilterValuesEventParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
