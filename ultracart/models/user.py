# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class User(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'api_ip_address_masks': 'list[str]',
        'change_ftp_password_to': 'str',
        'change_password_to': 'str',
        'email': 'str',
        'full_name': 'str',
        'groups': 'list[UserGroupMembership]',
        'linked_accounts': 'list[LinkedAccount]',
        'login': 'str',
        'login_histories': 'list[UserLogin]',
        'notifications': 'list[Notification]',
        'otp_serial_number': 'str',
        'permissions': 'list[Permission]',
        'phone': 'str',
        'user_id': 'int'
    }

    attribute_map = {
        'api_ip_address_masks': 'api_ip_address_masks',
        'change_ftp_password_to': 'change_ftp_password_to',
        'change_password_to': 'change_password_to',
        'email': 'email',
        'full_name': 'full_name',
        'groups': 'groups',
        'linked_accounts': 'linked_accounts',
        'login': 'login',
        'login_histories': 'login_histories',
        'notifications': 'notifications',
        'otp_serial_number': 'otp_serial_number',
        'permissions': 'permissions',
        'phone': 'phone',
        'user_id': 'user_id'
    }

    def __init__(self, api_ip_address_masks=None, change_ftp_password_to=None, change_password_to=None, email=None, full_name=None, groups=None, linked_accounts=None, login=None, login_histories=None, notifications=None, otp_serial_number=None, permissions=None, phone=None, user_id=None):  # noqa: E501
        """User - a model defined in Swagger"""  # noqa: E501

        self._api_ip_address_masks = None
        self._change_ftp_password_to = None
        self._change_password_to = None
        self._email = None
        self._full_name = None
        self._groups = None
        self._linked_accounts = None
        self._login = None
        self._login_histories = None
        self._notifications = None
        self._otp_serial_number = None
        self._permissions = None
        self._phone = None
        self._user_id = None
        self.discriminator = None

        if api_ip_address_masks is not None:
            self.api_ip_address_masks = api_ip_address_masks
        if change_ftp_password_to is not None:
            self.change_ftp_password_to = change_ftp_password_to
        if change_password_to is not None:
            self.change_password_to = change_password_to
        if email is not None:
            self.email = email
        if full_name is not None:
            self.full_name = full_name
        if groups is not None:
            self.groups = groups
        if linked_accounts is not None:
            self.linked_accounts = linked_accounts
        if login is not None:
            self.login = login
        if login_histories is not None:
            self.login_histories = login_histories
        if notifications is not None:
            self.notifications = notifications
        if otp_serial_number is not None:
            self.otp_serial_number = otp_serial_number
        if permissions is not None:
            self.permissions = permissions
        if phone is not None:
            self.phone = phone
        if user_id is not None:
            self.user_id = user_id

    @property
    def api_ip_address_masks(self):
        """Gets the api_ip_address_masks of this User.  # noqa: E501

        A list of IP addresses whitelisted for any user with API Access permission.  Without this list, each ip address must be authenticated by a user, which can be a pain for some servers.  # noqa: E501

        :return: The api_ip_address_masks of this User.  # noqa: E501
        :rtype: list[str]
        """
        return self._api_ip_address_masks

    @api_ip_address_masks.setter
    def api_ip_address_masks(self, api_ip_address_masks):
        """Sets the api_ip_address_masks of this User.

        A list of IP addresses whitelisted for any user with API Access permission.  Without this list, each ip address must be authenticated by a user, which can be a pain for some servers.  # noqa: E501

        :param api_ip_address_masks: The api_ip_address_masks of this User.  # noqa: E501
        :type: list[str]
        """

        self._api_ip_address_masks = api_ip_address_masks

    @property
    def change_ftp_password_to(self):
        """Gets the change_ftp_password_to of this User.  # noqa: E501

        Supply a new FTP password using this field.  Password are stored using one-way encryption, so they are never available anywhere in the system.  The FTP password cannot be the same as the normal password.  # noqa: E501

        :return: The change_ftp_password_to of this User.  # noqa: E501
        :rtype: str
        """
        return self._change_ftp_password_to

    @change_ftp_password_to.setter
    def change_ftp_password_to(self, change_ftp_password_to):
        """Sets the change_ftp_password_to of this User.

        Supply a new FTP password using this field.  Password are stored using one-way encryption, so they are never available anywhere in the system.  The FTP password cannot be the same as the normal password.  # noqa: E501

        :param change_ftp_password_to: The change_ftp_password_to of this User.  # noqa: E501
        :type: str
        """

        self._change_ftp_password_to = change_ftp_password_to

    @property
    def change_password_to(self):
        """Gets the change_password_to of this User.  # noqa: E501

        Supply a new password using this field.  Password are stored using one-way encryption, so they are never available anywhere in the system.  # noqa: E501

        :return: The change_password_to of this User.  # noqa: E501
        :rtype: str
        """
        return self._change_password_to

    @change_password_to.setter
    def change_password_to(self, change_password_to):
        """Sets the change_password_to of this User.

        Supply a new password using this field.  Password are stored using one-way encryption, so they are never available anywhere in the system.  # noqa: E501

        :param change_password_to: The change_password_to of this User.  # noqa: E501
        :type: str
        """

        self._change_password_to = change_password_to

    @property
    def email(self):
        """Gets the email of this User.  # noqa: E501

        Email address of user  # noqa: E501

        :return: The email of this User.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.

        Email address of user  # noqa: E501

        :param email: The email of this User.  # noqa: E501
        :type: str
        """
        if email is not None and len(email) > 150:
            raise ValueError("Invalid value for `email`, length must be less than or equal to `150`")  # noqa: E501

        self._email = email

    @property
    def full_name(self):
        """Gets the full_name of this User.  # noqa: E501

        Full name of user.  This is used solely for human assistance and so the UltraCart staff knows who they are calling when there is a problem.  # noqa: E501

        :return: The full_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this User.

        Full name of user.  This is used solely for human assistance and so the UltraCart staff knows who they are calling when there is a problem.  # noqa: E501

        :param full_name: The full_name of this User.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def groups(self):
        """Gets the groups of this User.  # noqa: E501

        A list of groups for this merchant and whether or not this user is a member of those groups.  # noqa: E501

        :return: The groups of this User.  # noqa: E501
        :rtype: list[UserGroupMembership]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this User.

        A list of groups for this merchant and whether or not this user is a member of those groups.  # noqa: E501

        :param groups: The groups of this User.  # noqa: E501
        :type: list[UserGroupMembership]
        """

        self._groups = groups

    @property
    def linked_accounts(self):
        """Gets the linked_accounts of this User.  # noqa: E501

        A list of linked accounts and whether or not this user is mirrored to any of those accounts.  # noqa: E501

        :return: The linked_accounts of this User.  # noqa: E501
        :rtype: list[LinkedAccount]
        """
        return self._linked_accounts

    @linked_accounts.setter
    def linked_accounts(self, linked_accounts):
        """Sets the linked_accounts of this User.

        A list of linked accounts and whether or not this user is mirrored to any of those accounts.  # noqa: E501

        :param linked_accounts: The linked_accounts of this User.  # noqa: E501
        :type: list[LinkedAccount]
        """

        self._linked_accounts = linked_accounts

    @property
    def login(self):
        """Gets the login of this User.  # noqa: E501

        User name of user.  Must be unique across a merchant account.  # noqa: E501

        :return: The login of this User.  # noqa: E501
        :rtype: str
        """
        return self._login

    @login.setter
    def login(self, login):
        """Sets the login of this User.

        User name of user.  Must be unique across a merchant account.  # noqa: E501

        :param login: The login of this User.  # noqa: E501
        :type: str
        """

        self._login = login

    @property
    def login_histories(self):
        """Gets the login_histories of this User.  # noqa: E501

        A list of user logins over the past 90 days  # noqa: E501

        :return: The login_histories of this User.  # noqa: E501
        :rtype: list[UserLogin]
        """
        return self._login_histories

    @login_histories.setter
    def login_histories(self, login_histories):
        """Sets the login_histories of this User.

        A list of user logins over the past 90 days  # noqa: E501

        :param login_histories: The login_histories of this User.  # noqa: E501
        :type: list[UserLogin]
        """

        self._login_histories = login_histories

    @property
    def notifications(self):
        """Gets the notifications of this User.  # noqa: E501

        A list of notifications the user receives.  # noqa: E501

        :return: The notifications of this User.  # noqa: E501
        :rtype: list[Notification]
        """
        return self._notifications

    @notifications.setter
    def notifications(self, notifications):
        """Sets the notifications of this User.

        A list of notifications the user receives.  # noqa: E501

        :param notifications: The notifications of this User.  # noqa: E501
        :type: list[Notification]
        """

        self._notifications = notifications

    @property
    def otp_serial_number(self):
        """Gets the otp_serial_number of this User.  # noqa: E501

        OTP Serial Number such as Google Authenticator or Crypto Card.  # noqa: E501

        :return: The otp_serial_number of this User.  # noqa: E501
        :rtype: str
        """
        return self._otp_serial_number

    @otp_serial_number.setter
    def otp_serial_number(self, otp_serial_number):
        """Sets the otp_serial_number of this User.

        OTP Serial Number such as Google Authenticator or Crypto Card.  # noqa: E501

        :param otp_serial_number: The otp_serial_number of this User.  # noqa: E501
        :type: str
        """

        self._otp_serial_number = otp_serial_number

    @property
    def permissions(self):
        """Gets the permissions of this User.  # noqa: E501

        A list of permissions the user enjoys for accessing the backend of UltraCart.  # noqa: E501

        :return: The permissions of this User.  # noqa: E501
        :rtype: list[Permission]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this User.

        A list of permissions the user enjoys for accessing the backend of UltraCart.  # noqa: E501

        :param permissions: The permissions of this User.  # noqa: E501
        :type: list[Permission]
        """

        self._permissions = permissions

    @property
    def phone(self):
        """Gets the phone of this User.  # noqa: E501

        Phone number of user.  Please supply a valid phone number.  When something breaks on your account, we need to be able to reach you.  # noqa: E501

        :return: The phone of this User.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this User.

        Phone number of user.  Please supply a valid phone number.  When something breaks on your account, we need to be able to reach you.  # noqa: E501

        :param phone: The phone of this User.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def user_id(self):
        """Gets the user_id of this User.  # noqa: E501

        User id is a unique identifier for this user  # noqa: E501

        :return: The user_id of this User.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this User.

        User id is a unique identifier for this user  # noqa: E501

        :param user_id: The user_id of this User.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(User, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, User):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
