# coding: utf-8

"""
    UltraCart Rest API V2

    This is the next generation UltraCart REST API...

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CartItemOptionValue(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'additional_cost': 'Currency',
        'additional_weight': 'Weight',
        'default_value': 'bool',
        'display_order': 'int',
        'value': 'str'
    }

    attribute_map = {
        'additional_cost': 'additional_cost',
        'additional_weight': 'additional_weight',
        'default_value': 'default_value',
        'display_order': 'display_order',
        'value': 'value'
    }

    def __init__(self, additional_cost=None, additional_weight=None, default_value=None, display_order=None, value=None):
        """
        CartItemOptionValue - a model defined in Swagger
        """

        self._additional_cost = None
        self._additional_weight = None
        self._default_value = None
        self._display_order = None
        self._value = None
        self.discriminator = None

        if additional_cost is not None:
          self.additional_cost = additional_cost
        if additional_weight is not None:
          self.additional_weight = additional_weight
        if default_value is not None:
          self.default_value = default_value
        if display_order is not None:
          self.display_order = display_order
        if value is not None:
          self.value = value

    @property
    def additional_cost(self):
        """
        Gets the additional_cost of this CartItemOptionValue.

        :return: The additional_cost of this CartItemOptionValue.
        :rtype: Currency
        """
        return self._additional_cost

    @additional_cost.setter
    def additional_cost(self, additional_cost):
        """
        Sets the additional_cost of this CartItemOptionValue.

        :param additional_cost: The additional_cost of this CartItemOptionValue.
        :type: Currency
        """

        self._additional_cost = additional_cost

    @property
    def additional_weight(self):
        """
        Gets the additional_weight of this CartItemOptionValue.

        :return: The additional_weight of this CartItemOptionValue.
        :rtype: Weight
        """
        return self._additional_weight

    @additional_weight.setter
    def additional_weight(self, additional_weight):
        """
        Sets the additional_weight of this CartItemOptionValue.

        :param additional_weight: The additional_weight of this CartItemOptionValue.
        :type: Weight
        """

        self._additional_weight = additional_weight

    @property
    def default_value(self):
        """
        Gets the default_value of this CartItemOptionValue.
        True if this is the default value

        :return: The default_value of this CartItemOptionValue.
        :rtype: bool
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """
        Sets the default_value of this CartItemOptionValue.
        True if this is the default value

        :param default_value: The default_value of this CartItemOptionValue.
        :type: bool
        """

        self._default_value = default_value

    @property
    def display_order(self):
        """
        Gets the display_order of this CartItemOptionValue.
        Display order of the option value

        :return: The display_order of this CartItemOptionValue.
        :rtype: int
        """
        return self._display_order

    @display_order.setter
    def display_order(self, display_order):
        """
        Sets the display_order of this CartItemOptionValue.
        Display order of the option value

        :param display_order: The display_order of this CartItemOptionValue.
        :type: int
        """

        self._display_order = display_order

    @property
    def value(self):
        """
        Gets the value of this CartItemOptionValue.
        Value of the option the customer can select

        :return: The value of this CartItemOptionValue.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """
        Sets the value of this CartItemOptionValue.
        Value of the option the customer can select

        :param value: The value of this CartItemOptionValue.
        :type: str
        """

        self._value = value

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CartItemOptionValue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
