# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ReportExecuteQueriesRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_uuid': 'str',
        'connection_id': 'str',
        'default_dataset_id': 'str',
        'default_project_id': 'str',
        'merchant_id': 'str',
        'queries': 'list[ReportDataSetQuery]',
        'request_dts': 'str',
        'security_level': 'str'
    }

    attribute_map = {
        'client_uuid': 'client_uuid',
        'connection_id': 'connection_id',
        'default_dataset_id': 'default_dataset_id',
        'default_project_id': 'default_project_id',
        'merchant_id': 'merchant_id',
        'queries': 'queries',
        'request_dts': 'request_dts',
        'security_level': 'security_level'
    }

    def __init__(self, client_uuid=None, connection_id=None, default_dataset_id=None, default_project_id=None, merchant_id=None, queries=None, request_dts=None, security_level=None):  # noqa: E501
        """ReportExecuteQueriesRequest - a model defined in Swagger"""  # noqa: E501

        self._client_uuid = None
        self._connection_id = None
        self._default_dataset_id = None
        self._default_project_id = None
        self._merchant_id = None
        self._queries = None
        self._request_dts = None
        self._security_level = None
        self.discriminator = None

        if client_uuid is not None:
            self.client_uuid = client_uuid
        if connection_id is not None:
            self.connection_id = connection_id
        if default_dataset_id is not None:
            self.default_dataset_id = default_dataset_id
        if default_project_id is not None:
            self.default_project_id = default_project_id
        if merchant_id is not None:
            self.merchant_id = merchant_id
        if queries is not None:
            self.queries = queries
        if request_dts is not None:
            self.request_dts = request_dts
        if security_level is not None:
            self.security_level = security_level

    @property
    def client_uuid(self):
        """Gets the client_uuid of this ReportExecuteQueriesRequest.  # noqa: E501

        Unique UUID assigned to this client during the auth.  This will be used to locate the websocket connect id.  # noqa: E501

        :return: The client_uuid of this ReportExecuteQueriesRequest.  # noqa: E501
        :rtype: str
        """
        return self._client_uuid

    @client_uuid.setter
    def client_uuid(self, client_uuid):
        """Sets the client_uuid of this ReportExecuteQueriesRequest.

        Unique UUID assigned to this client during the auth.  This will be used to locate the websocket connect id.  # noqa: E501

        :param client_uuid: The client_uuid of this ReportExecuteQueriesRequest.  # noqa: E501
        :type: str
        """

        self._client_uuid = client_uuid

    @property
    def connection_id(self):
        """Gets the connection_id of this ReportExecuteQueriesRequest.  # noqa: E501

        The websocket connection id that should receive back notices of query completion.  # noqa: E501

        :return: The connection_id of this ReportExecuteQueriesRequest.  # noqa: E501
        :rtype: str
        """
        return self._connection_id

    @connection_id.setter
    def connection_id(self, connection_id):
        """Sets the connection_id of this ReportExecuteQueriesRequest.

        The websocket connection id that should receive back notices of query completion.  # noqa: E501

        :param connection_id: The connection_id of this ReportExecuteQueriesRequest.  # noqa: E501
        :type: str
        """

        self._connection_id = connection_id

    @property
    def default_dataset_id(self):
        """Gets the default_dataset_id of this ReportExecuteQueriesRequest.  # noqa: E501


        :return: The default_dataset_id of this ReportExecuteQueriesRequest.  # noqa: E501
        :rtype: str
        """
        return self._default_dataset_id

    @default_dataset_id.setter
    def default_dataset_id(self, default_dataset_id):
        """Sets the default_dataset_id of this ReportExecuteQueriesRequest.


        :param default_dataset_id: The default_dataset_id of this ReportExecuteQueriesRequest.  # noqa: E501
        :type: str
        """

        self._default_dataset_id = default_dataset_id

    @property
    def default_project_id(self):
        """Gets the default_project_id of this ReportExecuteQueriesRequest.  # noqa: E501


        :return: The default_project_id of this ReportExecuteQueriesRequest.  # noqa: E501
        :rtype: str
        """
        return self._default_project_id

    @default_project_id.setter
    def default_project_id(self, default_project_id):
        """Sets the default_project_id of this ReportExecuteQueriesRequest.


        :param default_project_id: The default_project_id of this ReportExecuteQueriesRequest.  # noqa: E501
        :type: str
        """

        self._default_project_id = default_project_id

    @property
    def merchant_id(self):
        """Gets the merchant_id of this ReportExecuteQueriesRequest.  # noqa: E501


        :return: The merchant_id of this ReportExecuteQueriesRequest.  # noqa: E501
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this ReportExecuteQueriesRequest.


        :param merchant_id: The merchant_id of this ReportExecuteQueriesRequest.  # noqa: E501
        :type: str
        """

        self._merchant_id = merchant_id

    @property
    def queries(self):
        """Gets the queries of this ReportExecuteQueriesRequest.  # noqa: E501

        An array of queries that we want the lambda function to execute.  # noqa: E501

        :return: The queries of this ReportExecuteQueriesRequest.  # noqa: E501
        :rtype: list[ReportDataSetQuery]
        """
        return self._queries

    @queries.setter
    def queries(self, queries):
        """Sets the queries of this ReportExecuteQueriesRequest.

        An array of queries that we want the lambda function to execute.  # noqa: E501

        :param queries: The queries of this ReportExecuteQueriesRequest.  # noqa: E501
        :type: list[ReportDataSetQuery]
        """

        self._queries = queries

    @property
    def request_dts(self):
        """Gets the request_dts of this ReportExecuteQueriesRequest.  # noqa: E501

        Date/Time of the client submitted the request.  Can be used to resolve out of order query completion results  # noqa: E501

        :return: The request_dts of this ReportExecuteQueriesRequest.  # noqa: E501
        :rtype: str
        """
        return self._request_dts

    @request_dts.setter
    def request_dts(self, request_dts):
        """Sets the request_dts of this ReportExecuteQueriesRequest.

        Date/Time of the client submitted the request.  Can be used to resolve out of order query completion results  # noqa: E501

        :param request_dts: The request_dts of this ReportExecuteQueriesRequest.  # noqa: E501
        :type: str
        """

        self._request_dts = request_dts

    @property
    def security_level(self):
        """Gets the security_level of this ReportExecuteQueriesRequest.  # noqa: E501

        Security level to execute report under  # noqa: E501

        :return: The security_level of this ReportExecuteQueriesRequest.  # noqa: E501
        :rtype: str
        """
        return self._security_level

    @security_level.setter
    def security_level(self, security_level):
        """Sets the security_level of this ReportExecuteQueriesRequest.

        Security level to execute report under  # noqa: E501

        :param security_level: The security_level of this ReportExecuteQueriesRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["standard", "low", "medium", "high"]  # noqa: E501
        if security_level not in allowed_values:
            raise ValueError(
                "Invalid value for `security_level` ({0}), must be one of {1}"  # noqa: E501
                .format(security_level, allowed_values)
            )

        self._security_level = security_level

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReportExecuteQueriesRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportExecuteQueriesRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
