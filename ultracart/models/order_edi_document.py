# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OrderEdiDocument(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'direction': 'str',
        'doc_dts': 'str',
        'document': 'str',
        'document_type_description': 'str',
        'document_type_number': 'int',
        'external_id': 'str',
        'functional_acknowledgement': 'str',
        'functional_acknowledgement_dts': 'str',
        'functional_acknowledgement_pending': 'bool',
        'group_control_number': 'int',
        'internal_id': 'str',
        'merchant_id': 'str',
        'order_id': 'str',
        'test_mode': 'bool'
    }

    attribute_map = {
        'direction': 'direction',
        'doc_dts': 'doc_dts',
        'document': 'document',
        'document_type_description': 'document_type_description',
        'document_type_number': 'document_type_number',
        'external_id': 'external_id',
        'functional_acknowledgement': 'functional_acknowledgement',
        'functional_acknowledgement_dts': 'functional_acknowledgement_dts',
        'functional_acknowledgement_pending': 'functional_acknowledgement_pending',
        'group_control_number': 'group_control_number',
        'internal_id': 'internal_id',
        'merchant_id': 'merchant_id',
        'order_id': 'order_id',
        'test_mode': 'test_mode'
    }

    def __init__(self, direction=None, doc_dts=None, document=None, document_type_description=None, document_type_number=None, external_id=None, functional_acknowledgement=None, functional_acknowledgement_dts=None, functional_acknowledgement_pending=None, group_control_number=None, internal_id=None, merchant_id=None, order_id=None, test_mode=None):  # noqa: E501
        """OrderEdiDocument - a model defined in Swagger"""  # noqa: E501

        self._direction = None
        self._doc_dts = None
        self._document = None
        self._document_type_description = None
        self._document_type_number = None
        self._external_id = None
        self._functional_acknowledgement = None
        self._functional_acknowledgement_dts = None
        self._functional_acknowledgement_pending = None
        self._group_control_number = None
        self._internal_id = None
        self._merchant_id = None
        self._order_id = None
        self._test_mode = None
        self.discriminator = None

        if direction is not None:
            self.direction = direction
        if doc_dts is not None:
            self.doc_dts = doc_dts
        if document is not None:
            self.document = document
        if document_type_description is not None:
            self.document_type_description = document_type_description
        if document_type_number is not None:
            self.document_type_number = document_type_number
        if external_id is not None:
            self.external_id = external_id
        if functional_acknowledgement is not None:
            self.functional_acknowledgement = functional_acknowledgement
        if functional_acknowledgement_dts is not None:
            self.functional_acknowledgement_dts = functional_acknowledgement_dts
        if functional_acknowledgement_pending is not None:
            self.functional_acknowledgement_pending = functional_acknowledgement_pending
        if group_control_number is not None:
            self.group_control_number = group_control_number
        if internal_id is not None:
            self.internal_id = internal_id
        if merchant_id is not None:
            self.merchant_id = merchant_id
        if order_id is not None:
            self.order_id = order_id
        if test_mode is not None:
            self.test_mode = test_mode

    @property
    def direction(self):
        """Gets the direction of this OrderEdiDocument.  # noqa: E501

        Direction the document flowed  # noqa: E501

        :return: The direction of this OrderEdiDocument.  # noqa: E501
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this OrderEdiDocument.

        Direction the document flowed  # noqa: E501

        :param direction: The direction of this OrderEdiDocument.  # noqa: E501
        :type: str
        """
        allowed_values = ["inbound", "outbound"]  # noqa: E501
        if direction not in allowed_values:
            raise ValueError(
                "Invalid value for `direction` ({0}), must be one of {1}"  # noqa: E501
                .format(direction, allowed_values)
            )

        self._direction = direction

    @property
    def doc_dts(self):
        """Gets the doc_dts of this OrderEdiDocument.  # noqa: E501

        Date/time the document was created/received  # noqa: E501

        :return: The doc_dts of this OrderEdiDocument.  # noqa: E501
        :rtype: str
        """
        return self._doc_dts

    @doc_dts.setter
    def doc_dts(self, doc_dts):
        """Sets the doc_dts of this OrderEdiDocument.

        Date/time the document was created/received  # noqa: E501

        :param doc_dts: The doc_dts of this OrderEdiDocument.  # noqa: E501
        :type: str
        """

        self._doc_dts = doc_dts

    @property
    def document(self):
        """Gets the document of this OrderEdiDocument.  # noqa: E501


        :return: The document of this OrderEdiDocument.  # noqa: E501
        :rtype: str
        """
        return self._document

    @document.setter
    def document(self, document):
        """Sets the document of this OrderEdiDocument.


        :param document: The document of this OrderEdiDocument.  # noqa: E501
        :type: str
        """

        self._document = document

    @property
    def document_type_description(self):
        """Gets the document_type_description of this OrderEdiDocument.  # noqa: E501


        :return: The document_type_description of this OrderEdiDocument.  # noqa: E501
        :rtype: str
        """
        return self._document_type_description

    @document_type_description.setter
    def document_type_description(self, document_type_description):
        """Sets the document_type_description of this OrderEdiDocument.


        :param document_type_description: The document_type_description of this OrderEdiDocument.  # noqa: E501
        :type: str
        """

        self._document_type_description = document_type_description

    @property
    def document_type_number(self):
        """Gets the document_type_number of this OrderEdiDocument.  # noqa: E501


        :return: The document_type_number of this OrderEdiDocument.  # noqa: E501
        :rtype: int
        """
        return self._document_type_number

    @document_type_number.setter
    def document_type_number(self, document_type_number):
        """Sets the document_type_number of this OrderEdiDocument.


        :param document_type_number: The document_type_number of this OrderEdiDocument.  # noqa: E501
        :type: int
        """

        self._document_type_number = document_type_number

    @property
    def external_id(self):
        """Gets the external_id of this OrderEdiDocument.  # noqa: E501


        :return: The external_id of this OrderEdiDocument.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this OrderEdiDocument.


        :param external_id: The external_id of this OrderEdiDocument.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def functional_acknowledgement(self):
        """Gets the functional_acknowledgement of this OrderEdiDocument.  # noqa: E501


        :return: The functional_acknowledgement of this OrderEdiDocument.  # noqa: E501
        :rtype: str
        """
        return self._functional_acknowledgement

    @functional_acknowledgement.setter
    def functional_acknowledgement(self, functional_acknowledgement):
        """Sets the functional_acknowledgement of this OrderEdiDocument.


        :param functional_acknowledgement: The functional_acknowledgement of this OrderEdiDocument.  # noqa: E501
        :type: str
        """

        self._functional_acknowledgement = functional_acknowledgement

    @property
    def functional_acknowledgement_dts(self):
        """Gets the functional_acknowledgement_dts of this OrderEdiDocument.  # noqa: E501


        :return: The functional_acknowledgement_dts of this OrderEdiDocument.  # noqa: E501
        :rtype: str
        """
        return self._functional_acknowledgement_dts

    @functional_acknowledgement_dts.setter
    def functional_acknowledgement_dts(self, functional_acknowledgement_dts):
        """Sets the functional_acknowledgement_dts of this OrderEdiDocument.


        :param functional_acknowledgement_dts: The functional_acknowledgement_dts of this OrderEdiDocument.  # noqa: E501
        :type: str
        """

        self._functional_acknowledgement_dts = functional_acknowledgement_dts

    @property
    def functional_acknowledgement_pending(self):
        """Gets the functional_acknowledgement_pending of this OrderEdiDocument.  # noqa: E501


        :return: The functional_acknowledgement_pending of this OrderEdiDocument.  # noqa: E501
        :rtype: bool
        """
        return self._functional_acknowledgement_pending

    @functional_acknowledgement_pending.setter
    def functional_acknowledgement_pending(self, functional_acknowledgement_pending):
        """Sets the functional_acknowledgement_pending of this OrderEdiDocument.


        :param functional_acknowledgement_pending: The functional_acknowledgement_pending of this OrderEdiDocument.  # noqa: E501
        :type: bool
        """

        self._functional_acknowledgement_pending = functional_acknowledgement_pending

    @property
    def group_control_number(self):
        """Gets the group_control_number of this OrderEdiDocument.  # noqa: E501


        :return: The group_control_number of this OrderEdiDocument.  # noqa: E501
        :rtype: int
        """
        return self._group_control_number

    @group_control_number.setter
    def group_control_number(self, group_control_number):
        """Sets the group_control_number of this OrderEdiDocument.


        :param group_control_number: The group_control_number of this OrderEdiDocument.  # noqa: E501
        :type: int
        """

        self._group_control_number = group_control_number

    @property
    def internal_id(self):
        """Gets the internal_id of this OrderEdiDocument.  # noqa: E501


        :return: The internal_id of this OrderEdiDocument.  # noqa: E501
        :rtype: str
        """
        return self._internal_id

    @internal_id.setter
    def internal_id(self, internal_id):
        """Sets the internal_id of this OrderEdiDocument.


        :param internal_id: The internal_id of this OrderEdiDocument.  # noqa: E501
        :type: str
        """

        self._internal_id = internal_id

    @property
    def merchant_id(self):
        """Gets the merchant_id of this OrderEdiDocument.  # noqa: E501


        :return: The merchant_id of this OrderEdiDocument.  # noqa: E501
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this OrderEdiDocument.


        :param merchant_id: The merchant_id of this OrderEdiDocument.  # noqa: E501
        :type: str
        """

        self._merchant_id = merchant_id

    @property
    def order_id(self):
        """Gets the order_id of this OrderEdiDocument.  # noqa: E501


        :return: The order_id of this OrderEdiDocument.  # noqa: E501
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this OrderEdiDocument.


        :param order_id: The order_id of this OrderEdiDocument.  # noqa: E501
        :type: str
        """

        self._order_id = order_id

    @property
    def test_mode(self):
        """Gets the test_mode of this OrderEdiDocument.  # noqa: E501


        :return: The test_mode of this OrderEdiDocument.  # noqa: E501
        :rtype: bool
        """
        return self._test_mode

    @test_mode.setter
    def test_mode(self, test_mode):
        """Sets the test_mode of this OrderEdiDocument.


        :param test_mode: The test_mode of this OrderEdiDocument.  # noqa: E501
        :type: bool
        """

        self._test_mode = test_mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderEdiDocument, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderEdiDocument):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
