# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConversationPbxTimeBasedMapping(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action': 'str',
        'action_target': 'str',
        'name': 'str',
        'time_range_uuid': 'str'
    }

    attribute_map = {
        'action': 'action',
        'action_target': 'action_target',
        'name': 'name',
        'time_range_uuid': 'time_range_uuid'
    }

    def __init__(self, action=None, action_target=None, name=None, time_range_uuid=None):  # noqa: E501
        """ConversationPbxTimeBasedMapping - a model defined in Swagger"""  # noqa: E501

        self._action = None
        self._action_target = None
        self._name = None
        self._time_range_uuid = None
        self.discriminator = None

        if action is not None:
            self.action = action
        if action_target is not None:
            self.action_target = action_target
        if name is not None:
            self.name = name
        if time_range_uuid is not None:
            self.time_range_uuid = time_range_uuid

    @property
    def action(self):
        """Gets the action of this ConversationPbxTimeBasedMapping.  # noqa: E501

        Action  # noqa: E501

        :return: The action of this ConversationPbxTimeBasedMapping.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this ConversationPbxTimeBasedMapping.

        Action  # noqa: E501

        :param action: The action of this ConversationPbxTimeBasedMapping.  # noqa: E501
        :type: str
        """
        allowed_values = ["time based", "menu", "queue", "voicemail", "agent"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"  # noqa: E501
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def action_target(self):
        """Gets the action_target of this ConversationPbxTimeBasedMapping.  # noqa: E501

        Action target.  This is the UUID associated with the configuration object of that particular type.  # noqa: E501

        :return: The action_target of this ConversationPbxTimeBasedMapping.  # noqa: E501
        :rtype: str
        """
        return self._action_target

    @action_target.setter
    def action_target(self, action_target):
        """Sets the action_target of this ConversationPbxTimeBasedMapping.

        Action target.  This is the UUID associated with the configuration object of that particular type.  # noqa: E501

        :param action_target: The action_target of this ConversationPbxTimeBasedMapping.  # noqa: E501
        :type: str
        """
        if action_target is not None and len(action_target) > 50:
            raise ValueError("Invalid value for `action_target`, length must be less than or equal to `50`")  # noqa: E501

        self._action_target = action_target

    @property
    def name(self):
        """Gets the name of this ConversationPbxTimeBasedMapping.  # noqa: E501

        Name  # noqa: E501

        :return: The name of this ConversationPbxTimeBasedMapping.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConversationPbxTimeBasedMapping.

        Name  # noqa: E501

        :param name: The name of this ConversationPbxTimeBasedMapping.  # noqa: E501
        :type: str
        """
        if name is not None and len(name) > 50:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `50`")  # noqa: E501

        self._name = name

    @property
    def time_range_uuid(self):
        """Gets the time_range_uuid of this ConversationPbxTimeBasedMapping.  # noqa: E501

        Time range UUID  # noqa: E501

        :return: The time_range_uuid of this ConversationPbxTimeBasedMapping.  # noqa: E501
        :rtype: str
        """
        return self._time_range_uuid

    @time_range_uuid.setter
    def time_range_uuid(self, time_range_uuid):
        """Sets the time_range_uuid of this ConversationPbxTimeBasedMapping.

        Time range UUID  # noqa: E501

        :param time_range_uuid: The time_range_uuid of this ConversationPbxTimeBasedMapping.  # noqa: E501
        :type: str
        """
        if time_range_uuid is not None and len(time_range_uuid) > 50:
            raise ValueError("Invalid value for `time_range_uuid`, length must be less than or equal to `50`")  # noqa: E501

        self._time_range_uuid = time_range_uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConversationPbxTimeBasedMapping, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConversationPbxTimeBasedMapping):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
