# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CartCustomerProfile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allow_3rd_party_billing': 'bool',
        'allow_cod': 'bool',
        'allow_purchase_order': 'bool',
        'billing_addresses': 'list[CartCustomerProfileAddress]',
        'credit_cards': 'list[CartCustomerProfileCreditCard]',
        'customer_profile_oid': 'int',
        'dhl_account_number': 'str',
        'dhl_duty_account_number': 'str',
        'email': 'str',
        'fedex_account_number': 'str',
        'free_shipping': 'bool',
        'free_shipping_minimum': 'float',
        'maximum_item_count': 'int',
        'minimum_item_count': 'int',
        'minimum_subtotal': 'float',
        'no_coupons': 'bool',
        'no_free_shipping': 'bool',
        'no_realtime_charge': 'bool',
        'pricing_tiers': 'list[str]',
        'shipping_addresses': 'list[CartCustomerProfileAddress]',
        'signup_dts': 'str',
        'tax_exempt': 'bool',
        'ups_account_number': 'str'
    }

    attribute_map = {
        'allow_3rd_party_billing': 'allow_3rd_party_billing',
        'allow_cod': 'allow_cod',
        'allow_purchase_order': 'allow_purchase_order',
        'billing_addresses': 'billing_addresses',
        'credit_cards': 'credit_cards',
        'customer_profile_oid': 'customer_profile_oid',
        'dhl_account_number': 'dhl_account_number',
        'dhl_duty_account_number': 'dhl_duty_account_number',
        'email': 'email',
        'fedex_account_number': 'fedex_account_number',
        'free_shipping': 'free_shipping',
        'free_shipping_minimum': 'free_shipping_minimum',
        'maximum_item_count': 'maximum_item_count',
        'minimum_item_count': 'minimum_item_count',
        'minimum_subtotal': 'minimum_subtotal',
        'no_coupons': 'no_coupons',
        'no_free_shipping': 'no_free_shipping',
        'no_realtime_charge': 'no_realtime_charge',
        'pricing_tiers': 'pricing_tiers',
        'shipping_addresses': 'shipping_addresses',
        'signup_dts': 'signup_dts',
        'tax_exempt': 'tax_exempt',
        'ups_account_number': 'ups_account_number'
    }

    def __init__(self, allow_3rd_party_billing=None, allow_cod=None, allow_purchase_order=None, billing_addresses=None, credit_cards=None, customer_profile_oid=None, dhl_account_number=None, dhl_duty_account_number=None, email=None, fedex_account_number=None, free_shipping=None, free_shipping_minimum=None, maximum_item_count=None, minimum_item_count=None, minimum_subtotal=None, no_coupons=None, no_free_shipping=None, no_realtime_charge=None, pricing_tiers=None, shipping_addresses=None, signup_dts=None, tax_exempt=None, ups_account_number=None):  # noqa: E501
        """CartCustomerProfile - a model defined in Swagger"""  # noqa: E501

        self._allow_3rd_party_billing = None
        self._allow_cod = None
        self._allow_purchase_order = None
        self._billing_addresses = None
        self._credit_cards = None
        self._customer_profile_oid = None
        self._dhl_account_number = None
        self._dhl_duty_account_number = None
        self._email = None
        self._fedex_account_number = None
        self._free_shipping = None
        self._free_shipping_minimum = None
        self._maximum_item_count = None
        self._minimum_item_count = None
        self._minimum_subtotal = None
        self._no_coupons = None
        self._no_free_shipping = None
        self._no_realtime_charge = None
        self._pricing_tiers = None
        self._shipping_addresses = None
        self._signup_dts = None
        self._tax_exempt = None
        self._ups_account_number = None
        self.discriminator = None

        if allow_3rd_party_billing is not None:
            self.allow_3rd_party_billing = allow_3rd_party_billing
        if allow_cod is not None:
            self.allow_cod = allow_cod
        if allow_purchase_order is not None:
            self.allow_purchase_order = allow_purchase_order
        if billing_addresses is not None:
            self.billing_addresses = billing_addresses
        if credit_cards is not None:
            self.credit_cards = credit_cards
        if customer_profile_oid is not None:
            self.customer_profile_oid = customer_profile_oid
        if dhl_account_number is not None:
            self.dhl_account_number = dhl_account_number
        if dhl_duty_account_number is not None:
            self.dhl_duty_account_number = dhl_duty_account_number
        if email is not None:
            self.email = email
        if fedex_account_number is not None:
            self.fedex_account_number = fedex_account_number
        if free_shipping is not None:
            self.free_shipping = free_shipping
        if free_shipping_minimum is not None:
            self.free_shipping_minimum = free_shipping_minimum
        if maximum_item_count is not None:
            self.maximum_item_count = maximum_item_count
        if minimum_item_count is not None:
            self.minimum_item_count = minimum_item_count
        if minimum_subtotal is not None:
            self.minimum_subtotal = minimum_subtotal
        if no_coupons is not None:
            self.no_coupons = no_coupons
        if no_free_shipping is not None:
            self.no_free_shipping = no_free_shipping
        if no_realtime_charge is not None:
            self.no_realtime_charge = no_realtime_charge
        if pricing_tiers is not None:
            self.pricing_tiers = pricing_tiers
        if shipping_addresses is not None:
            self.shipping_addresses = shipping_addresses
        if signup_dts is not None:
            self.signup_dts = signup_dts
        if tax_exempt is not None:
            self.tax_exempt = tax_exempt
        if ups_account_number is not None:
            self.ups_account_number = ups_account_number

    @property
    def allow_3rd_party_billing(self):
        """Gets the allow_3rd_party_billing of this CartCustomerProfile.  # noqa: E501

        True if profile is allowed to bill to their 3rd party shipping account  # noqa: E501

        :return: The allow_3rd_party_billing of this CartCustomerProfile.  # noqa: E501
        :rtype: bool
        """
        return self._allow_3rd_party_billing

    @allow_3rd_party_billing.setter
    def allow_3rd_party_billing(self, allow_3rd_party_billing):
        """Sets the allow_3rd_party_billing of this CartCustomerProfile.

        True if profile is allowed to bill to their 3rd party shipping account  # noqa: E501

        :param allow_3rd_party_billing: The allow_3rd_party_billing of this CartCustomerProfile.  # noqa: E501
        :type: bool
        """

        self._allow_3rd_party_billing = allow_3rd_party_billing

    @property
    def allow_cod(self):
        """Gets the allow_cod of this CartCustomerProfile.  # noqa: E501

        True if this profile is allowed to use a COD  # noqa: E501

        :return: The allow_cod of this CartCustomerProfile.  # noqa: E501
        :rtype: bool
        """
        return self._allow_cod

    @allow_cod.setter
    def allow_cod(self, allow_cod):
        """Sets the allow_cod of this CartCustomerProfile.

        True if this profile is allowed to use a COD  # noqa: E501

        :param allow_cod: The allow_cod of this CartCustomerProfile.  # noqa: E501
        :type: bool
        """

        self._allow_cod = allow_cod

    @property
    def allow_purchase_order(self):
        """Gets the allow_purchase_order of this CartCustomerProfile.  # noqa: E501

        True if this profile is allowed to use a purchase order  # noqa: E501

        :return: The allow_purchase_order of this CartCustomerProfile.  # noqa: E501
        :rtype: bool
        """
        return self._allow_purchase_order

    @allow_purchase_order.setter
    def allow_purchase_order(self, allow_purchase_order):
        """Sets the allow_purchase_order of this CartCustomerProfile.

        True if this profile is allowed to use a purchase order  # noqa: E501

        :param allow_purchase_order: The allow_purchase_order of this CartCustomerProfile.  # noqa: E501
        :type: bool
        """

        self._allow_purchase_order = allow_purchase_order

    @property
    def billing_addresses(self):
        """Gets the billing_addresses of this CartCustomerProfile.  # noqa: E501

        Billing addresses on file for this profile  # noqa: E501

        :return: The billing_addresses of this CartCustomerProfile.  # noqa: E501
        :rtype: list[CartCustomerProfileAddress]
        """
        return self._billing_addresses

    @billing_addresses.setter
    def billing_addresses(self, billing_addresses):
        """Sets the billing_addresses of this CartCustomerProfile.

        Billing addresses on file for this profile  # noqa: E501

        :param billing_addresses: The billing_addresses of this CartCustomerProfile.  # noqa: E501
        :type: list[CartCustomerProfileAddress]
        """

        self._billing_addresses = billing_addresses

    @property
    def credit_cards(self):
        """Gets the credit_cards of this CartCustomerProfile.  # noqa: E501

        Credit cards on file for this profile (masked)  # noqa: E501

        :return: The credit_cards of this CartCustomerProfile.  # noqa: E501
        :rtype: list[CartCustomerProfileCreditCard]
        """
        return self._credit_cards

    @credit_cards.setter
    def credit_cards(self, credit_cards):
        """Sets the credit_cards of this CartCustomerProfile.

        Credit cards on file for this profile (masked)  # noqa: E501

        :param credit_cards: The credit_cards of this CartCustomerProfile.  # noqa: E501
        :type: list[CartCustomerProfileCreditCard]
        """

        self._credit_cards = credit_cards

    @property
    def customer_profile_oid(self):
        """Gets the customer_profile_oid of this CartCustomerProfile.  # noqa: E501

        Unique identifier  # noqa: E501

        :return: The customer_profile_oid of this CartCustomerProfile.  # noqa: E501
        :rtype: int
        """
        return self._customer_profile_oid

    @customer_profile_oid.setter
    def customer_profile_oid(self, customer_profile_oid):
        """Sets the customer_profile_oid of this CartCustomerProfile.

        Unique identifier  # noqa: E501

        :param customer_profile_oid: The customer_profile_oid of this CartCustomerProfile.  # noqa: E501
        :type: int
        """

        self._customer_profile_oid = customer_profile_oid

    @property
    def dhl_account_number(self):
        """Gets the dhl_account_number of this CartCustomerProfile.  # noqa: E501

        DHL account number on file  # noqa: E501

        :return: The dhl_account_number of this CartCustomerProfile.  # noqa: E501
        :rtype: str
        """
        return self._dhl_account_number

    @dhl_account_number.setter
    def dhl_account_number(self, dhl_account_number):
        """Sets the dhl_account_number of this CartCustomerProfile.

        DHL account number on file  # noqa: E501

        :param dhl_account_number: The dhl_account_number of this CartCustomerProfile.  # noqa: E501
        :type: str
        """

        self._dhl_account_number = dhl_account_number

    @property
    def dhl_duty_account_number(self):
        """Gets the dhl_duty_account_number of this CartCustomerProfile.  # noqa: E501

        DHL duty account number on file  # noqa: E501

        :return: The dhl_duty_account_number of this CartCustomerProfile.  # noqa: E501
        :rtype: str
        """
        return self._dhl_duty_account_number

    @dhl_duty_account_number.setter
    def dhl_duty_account_number(self, dhl_duty_account_number):
        """Sets the dhl_duty_account_number of this CartCustomerProfile.

        DHL duty account number on file  # noqa: E501

        :param dhl_duty_account_number: The dhl_duty_account_number of this CartCustomerProfile.  # noqa: E501
        :type: str
        """

        self._dhl_duty_account_number = dhl_duty_account_number

    @property
    def email(self):
        """Gets the email of this CartCustomerProfile.  # noqa: E501

        Email  # noqa: E501

        :return: The email of this CartCustomerProfile.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this CartCustomerProfile.

        Email  # noqa: E501

        :param email: The email of this CartCustomerProfile.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def fedex_account_number(self):
        """Gets the fedex_account_number of this CartCustomerProfile.  # noqa: E501

        FedEx account number on file  # noqa: E501

        :return: The fedex_account_number of this CartCustomerProfile.  # noqa: E501
        :rtype: str
        """
        return self._fedex_account_number

    @fedex_account_number.setter
    def fedex_account_number(self, fedex_account_number):
        """Sets the fedex_account_number of this CartCustomerProfile.

        FedEx account number on file  # noqa: E501

        :param fedex_account_number: The fedex_account_number of this CartCustomerProfile.  # noqa: E501
        :type: str
        """

        self._fedex_account_number = fedex_account_number

    @property
    def free_shipping(self):
        """Gets the free_shipping of this CartCustomerProfile.  # noqa: E501

        True if this profile always qualifies for free shipping  # noqa: E501

        :return: The free_shipping of this CartCustomerProfile.  # noqa: E501
        :rtype: bool
        """
        return self._free_shipping

    @free_shipping.setter
    def free_shipping(self, free_shipping):
        """Sets the free_shipping of this CartCustomerProfile.

        True if this profile always qualifies for free shipping  # noqa: E501

        :param free_shipping: The free_shipping of this CartCustomerProfile.  # noqa: E501
        :type: bool
        """

        self._free_shipping = free_shipping

    @property
    def free_shipping_minimum(self):
        """Gets the free_shipping_minimum of this CartCustomerProfile.  # noqa: E501

        The minimum amount that this profile has to purchase to qualify for free shipping  # noqa: E501

        :return: The free_shipping_minimum of this CartCustomerProfile.  # noqa: E501
        :rtype: float
        """
        return self._free_shipping_minimum

    @free_shipping_minimum.setter
    def free_shipping_minimum(self, free_shipping_minimum):
        """Sets the free_shipping_minimum of this CartCustomerProfile.

        The minimum amount that this profile has to purchase to qualify for free shipping  # noqa: E501

        :param free_shipping_minimum: The free_shipping_minimum of this CartCustomerProfile.  # noqa: E501
        :type: float
        """

        self._free_shipping_minimum = free_shipping_minimum

    @property
    def maximum_item_count(self):
        """Gets the maximum_item_count of this CartCustomerProfile.  # noqa: E501

        Maximum item count this profile can purchase  # noqa: E501

        :return: The maximum_item_count of this CartCustomerProfile.  # noqa: E501
        :rtype: int
        """
        return self._maximum_item_count

    @maximum_item_count.setter
    def maximum_item_count(self, maximum_item_count):
        """Sets the maximum_item_count of this CartCustomerProfile.

        Maximum item count this profile can purchase  # noqa: E501

        :param maximum_item_count: The maximum_item_count of this CartCustomerProfile.  # noqa: E501
        :type: int
        """

        self._maximum_item_count = maximum_item_count

    @property
    def minimum_item_count(self):
        """Gets the minimum_item_count of this CartCustomerProfile.  # noqa: E501

        Minimum item count this profile must purchase  # noqa: E501

        :return: The minimum_item_count of this CartCustomerProfile.  # noqa: E501
        :rtype: int
        """
        return self._minimum_item_count

    @minimum_item_count.setter
    def minimum_item_count(self, minimum_item_count):
        """Sets the minimum_item_count of this CartCustomerProfile.

        Minimum item count this profile must purchase  # noqa: E501

        :param minimum_item_count: The minimum_item_count of this CartCustomerProfile.  # noqa: E501
        :type: int
        """

        self._minimum_item_count = minimum_item_count

    @property
    def minimum_subtotal(self):
        """Gets the minimum_subtotal of this CartCustomerProfile.  # noqa: E501

        Minimum subtotal this profile must purchase  # noqa: E501

        :return: The minimum_subtotal of this CartCustomerProfile.  # noqa: E501
        :rtype: float
        """
        return self._minimum_subtotal

    @minimum_subtotal.setter
    def minimum_subtotal(self, minimum_subtotal):
        """Sets the minimum_subtotal of this CartCustomerProfile.

        Minimum subtotal this profile must purchase  # noqa: E501

        :param minimum_subtotal: The minimum_subtotal of this CartCustomerProfile.  # noqa: E501
        :type: float
        """

        self._minimum_subtotal = minimum_subtotal

    @property
    def no_coupons(self):
        """Gets the no_coupons of this CartCustomerProfile.  # noqa: E501

        True if this profile is prevented from using coupons  # noqa: E501

        :return: The no_coupons of this CartCustomerProfile.  # noqa: E501
        :rtype: bool
        """
        return self._no_coupons

    @no_coupons.setter
    def no_coupons(self, no_coupons):
        """Sets the no_coupons of this CartCustomerProfile.

        True if this profile is prevented from using coupons  # noqa: E501

        :param no_coupons: The no_coupons of this CartCustomerProfile.  # noqa: E501
        :type: bool
        """

        self._no_coupons = no_coupons

    @property
    def no_free_shipping(self):
        """Gets the no_free_shipping of this CartCustomerProfile.  # noqa: E501

        True if this profile is never given free shipping  # noqa: E501

        :return: The no_free_shipping of this CartCustomerProfile.  # noqa: E501
        :rtype: bool
        """
        return self._no_free_shipping

    @no_free_shipping.setter
    def no_free_shipping(self, no_free_shipping):
        """Sets the no_free_shipping of this CartCustomerProfile.

        True if this profile is never given free shipping  # noqa: E501

        :param no_free_shipping: The no_free_shipping of this CartCustomerProfile.  # noqa: E501
        :type: bool
        """

        self._no_free_shipping = no_free_shipping

    @property
    def no_realtime_charge(self):
        """Gets the no_realtime_charge of this CartCustomerProfile.  # noqa: E501

        True if this customers orders are not charged in real-time  # noqa: E501

        :return: The no_realtime_charge of this CartCustomerProfile.  # noqa: E501
        :rtype: bool
        """
        return self._no_realtime_charge

    @no_realtime_charge.setter
    def no_realtime_charge(self, no_realtime_charge):
        """Sets the no_realtime_charge of this CartCustomerProfile.

        True if this customers orders are not charged in real-time  # noqa: E501

        :param no_realtime_charge: The no_realtime_charge of this CartCustomerProfile.  # noqa: E501
        :type: bool
        """

        self._no_realtime_charge = no_realtime_charge

    @property
    def pricing_tiers(self):
        """Gets the pricing_tiers of this CartCustomerProfile.  # noqa: E501

        Pricing tier names this profile qualifies for  # noqa: E501

        :return: The pricing_tiers of this CartCustomerProfile.  # noqa: E501
        :rtype: list[str]
        """
        return self._pricing_tiers

    @pricing_tiers.setter
    def pricing_tiers(self, pricing_tiers):
        """Sets the pricing_tiers of this CartCustomerProfile.

        Pricing tier names this profile qualifies for  # noqa: E501

        :param pricing_tiers: The pricing_tiers of this CartCustomerProfile.  # noqa: E501
        :type: list[str]
        """

        self._pricing_tiers = pricing_tiers

    @property
    def shipping_addresses(self):
        """Gets the shipping_addresses of this CartCustomerProfile.  # noqa: E501

        Shipping addresses on file for this profile  # noqa: E501

        :return: The shipping_addresses of this CartCustomerProfile.  # noqa: E501
        :rtype: list[CartCustomerProfileAddress]
        """
        return self._shipping_addresses

    @shipping_addresses.setter
    def shipping_addresses(self, shipping_addresses):
        """Sets the shipping_addresses of this CartCustomerProfile.

        Shipping addresses on file for this profile  # noqa: E501

        :param shipping_addresses: The shipping_addresses of this CartCustomerProfile.  # noqa: E501
        :type: list[CartCustomerProfileAddress]
        """

        self._shipping_addresses = shipping_addresses

    @property
    def signup_dts(self):
        """Gets the signup_dts of this CartCustomerProfile.  # noqa: E501

        Signup date  # noqa: E501

        :return: The signup_dts of this CartCustomerProfile.  # noqa: E501
        :rtype: str
        """
        return self._signup_dts

    @signup_dts.setter
    def signup_dts(self, signup_dts):
        """Sets the signup_dts of this CartCustomerProfile.

        Signup date  # noqa: E501

        :param signup_dts: The signup_dts of this CartCustomerProfile.  # noqa: E501
        :type: str
        """

        self._signup_dts = signup_dts

    @property
    def tax_exempt(self):
        """Gets the tax_exempt of this CartCustomerProfile.  # noqa: E501

        True if this profile is exempt from sales tax  # noqa: E501

        :return: The tax_exempt of this CartCustomerProfile.  # noqa: E501
        :rtype: bool
        """
        return self._tax_exempt

    @tax_exempt.setter
    def tax_exempt(self, tax_exempt):
        """Sets the tax_exempt of this CartCustomerProfile.

        True if this profile is exempt from sales tax  # noqa: E501

        :param tax_exempt: The tax_exempt of this CartCustomerProfile.  # noqa: E501
        :type: bool
        """

        self._tax_exempt = tax_exempt

    @property
    def ups_account_number(self):
        """Gets the ups_account_number of this CartCustomerProfile.  # noqa: E501

        UPS account number on file  # noqa: E501

        :return: The ups_account_number of this CartCustomerProfile.  # noqa: E501
        :rtype: str
        """
        return self._ups_account_number

    @ups_account_number.setter
    def ups_account_number(self, ups_account_number):
        """Sets the ups_account_number of this CartCustomerProfile.

        UPS account number on file  # noqa: E501

        :param ups_account_number: The ups_account_number of this CartCustomerProfile.  # noqa: E501
        :type: str
        """

        self._ups_account_number = ups_account_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CartCustomerProfile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CartCustomerProfile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
