# coding: utf-8

"""
    UltraCart Rest API V2

    This is the next generation UltraCart REST API...

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class CartCustomerProfile(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, allow_3rd_party_billing=None, allow_cod=None, allow_purchase_order=None, billing_addresses=None, credit_cards=None, customer_profile_oid=None, dhl_account_number=None, email=None, fedex_account_number=None, free_shipping=None, free_shipping_minimum=None, maximum_item_count=None, minimum_item_count=None, minimum_subtotal=None, no_coupons=None, no_free_shipping=None, no_realtime_charge=None, pricing_tiers=None, shipping_addresses=None, tax_exempt=None, ups_account_number=None):
        """
        CartCustomerProfile - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'allow_3rd_party_billing': 'bool',
            'allow_cod': 'bool',
            'allow_purchase_order': 'bool',
            'billing_addresses': 'list[CartCustomerProfileAddress]',
            'credit_cards': 'list[CartCustomerProfileCreditCard]',
            'customer_profile_oid': 'int',
            'dhl_account_number': 'str',
            'email': 'str',
            'fedex_account_number': 'str',
            'free_shipping': 'bool',
            'free_shipping_minimum': 'float',
            'maximum_item_count': 'int',
            'minimum_item_count': 'int',
            'minimum_subtotal': 'float',
            'no_coupons': 'bool',
            'no_free_shipping': 'bool',
            'no_realtime_charge': 'bool',
            'pricing_tiers': 'list[str]',
            'shipping_addresses': 'list[CartCustomerProfileAddress]',
            'tax_exempt': 'bool',
            'ups_account_number': 'str'
        }

        self.attribute_map = {
            'allow_3rd_party_billing': 'allow_3rd_party_billing',
            'allow_cod': 'allow_cod',
            'allow_purchase_order': 'allow_purchase_order',
            'billing_addresses': 'billing_addresses',
            'credit_cards': 'credit_cards',
            'customer_profile_oid': 'customer_profile_oid',
            'dhl_account_number': 'dhl_account_number',
            'email': 'email',
            'fedex_account_number': 'fedex_account_number',
            'free_shipping': 'free_shipping',
            'free_shipping_minimum': 'free_shipping_minimum',
            'maximum_item_count': 'maximum_item_count',
            'minimum_item_count': 'minimum_item_count',
            'minimum_subtotal': 'minimum_subtotal',
            'no_coupons': 'no_coupons',
            'no_free_shipping': 'no_free_shipping',
            'no_realtime_charge': 'no_realtime_charge',
            'pricing_tiers': 'pricing_tiers',
            'shipping_addresses': 'shipping_addresses',
            'tax_exempt': 'tax_exempt',
            'ups_account_number': 'ups_account_number'
        }

        self._allow_3rd_party_billing = allow_3rd_party_billing
        self._allow_cod = allow_cod
        self._allow_purchase_order = allow_purchase_order
        self._billing_addresses = billing_addresses
        self._credit_cards = credit_cards
        self._customer_profile_oid = customer_profile_oid
        self._dhl_account_number = dhl_account_number
        self._email = email
        self._fedex_account_number = fedex_account_number
        self._free_shipping = free_shipping
        self._free_shipping_minimum = free_shipping_minimum
        self._maximum_item_count = maximum_item_count
        self._minimum_item_count = minimum_item_count
        self._minimum_subtotal = minimum_subtotal
        self._no_coupons = no_coupons
        self._no_free_shipping = no_free_shipping
        self._no_realtime_charge = no_realtime_charge
        self._pricing_tiers = pricing_tiers
        self._shipping_addresses = shipping_addresses
        self._tax_exempt = tax_exempt
        self._ups_account_number = ups_account_number

    @property
    def allow_3rd_party_billing(self):
        """
        Gets the allow_3rd_party_billing of this CartCustomerProfile.
        True if profile is allowed to bill to their 3rd party shipping account

        :return: The allow_3rd_party_billing of this CartCustomerProfile.
        :rtype: bool
        """
        return self._allow_3rd_party_billing

    @allow_3rd_party_billing.setter
    def allow_3rd_party_billing(self, allow_3rd_party_billing):
        """
        Sets the allow_3rd_party_billing of this CartCustomerProfile.
        True if profile is allowed to bill to their 3rd party shipping account

        :param allow_3rd_party_billing: The allow_3rd_party_billing of this CartCustomerProfile.
        :type: bool
        """

        self._allow_3rd_party_billing = allow_3rd_party_billing

    @property
    def allow_cod(self):
        """
        Gets the allow_cod of this CartCustomerProfile.
        True if this profile is allowed to use a COD

        :return: The allow_cod of this CartCustomerProfile.
        :rtype: bool
        """
        return self._allow_cod

    @allow_cod.setter
    def allow_cod(self, allow_cod):
        """
        Sets the allow_cod of this CartCustomerProfile.
        True if this profile is allowed to use a COD

        :param allow_cod: The allow_cod of this CartCustomerProfile.
        :type: bool
        """

        self._allow_cod = allow_cod

    @property
    def allow_purchase_order(self):
        """
        Gets the allow_purchase_order of this CartCustomerProfile.
        True if this profile is allowed to use a purchase order

        :return: The allow_purchase_order of this CartCustomerProfile.
        :rtype: bool
        """
        return self._allow_purchase_order

    @allow_purchase_order.setter
    def allow_purchase_order(self, allow_purchase_order):
        """
        Sets the allow_purchase_order of this CartCustomerProfile.
        True if this profile is allowed to use a purchase order

        :param allow_purchase_order: The allow_purchase_order of this CartCustomerProfile.
        :type: bool
        """

        self._allow_purchase_order = allow_purchase_order

    @property
    def billing_addresses(self):
        """
        Gets the billing_addresses of this CartCustomerProfile.
        Billing addresses on file for this profile

        :return: The billing_addresses of this CartCustomerProfile.
        :rtype: list[CartCustomerProfileAddress]
        """
        return self._billing_addresses

    @billing_addresses.setter
    def billing_addresses(self, billing_addresses):
        """
        Sets the billing_addresses of this CartCustomerProfile.
        Billing addresses on file for this profile

        :param billing_addresses: The billing_addresses of this CartCustomerProfile.
        :type: list[CartCustomerProfileAddress]
        """

        self._billing_addresses = billing_addresses

    @property
    def credit_cards(self):
        """
        Gets the credit_cards of this CartCustomerProfile.
        Credit cards on file for this profile (masked)

        :return: The credit_cards of this CartCustomerProfile.
        :rtype: list[CartCustomerProfileCreditCard]
        """
        return self._credit_cards

    @credit_cards.setter
    def credit_cards(self, credit_cards):
        """
        Sets the credit_cards of this CartCustomerProfile.
        Credit cards on file for this profile (masked)

        :param credit_cards: The credit_cards of this CartCustomerProfile.
        :type: list[CartCustomerProfileCreditCard]
        """

        self._credit_cards = credit_cards

    @property
    def customer_profile_oid(self):
        """
        Gets the customer_profile_oid of this CartCustomerProfile.
        Unique identifier

        :return: The customer_profile_oid of this CartCustomerProfile.
        :rtype: int
        """
        return self._customer_profile_oid

    @customer_profile_oid.setter
    def customer_profile_oid(self, customer_profile_oid):
        """
        Sets the customer_profile_oid of this CartCustomerProfile.
        Unique identifier

        :param customer_profile_oid: The customer_profile_oid of this CartCustomerProfile.
        :type: int
        """

        self._customer_profile_oid = customer_profile_oid

    @property
    def dhl_account_number(self):
        """
        Gets the dhl_account_number of this CartCustomerProfile.
        DHL account number on file

        :return: The dhl_account_number of this CartCustomerProfile.
        :rtype: str
        """
        return self._dhl_account_number

    @dhl_account_number.setter
    def dhl_account_number(self, dhl_account_number):
        """
        Sets the dhl_account_number of this CartCustomerProfile.
        DHL account number on file

        :param dhl_account_number: The dhl_account_number of this CartCustomerProfile.
        :type: str
        """

        self._dhl_account_number = dhl_account_number

    @property
    def email(self):
        """
        Gets the email of this CartCustomerProfile.
        Email

        :return: The email of this CartCustomerProfile.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this CartCustomerProfile.
        Email

        :param email: The email of this CartCustomerProfile.
        :type: str
        """

        self._email = email

    @property
    def fedex_account_number(self):
        """
        Gets the fedex_account_number of this CartCustomerProfile.
        FedEx account number on file

        :return: The fedex_account_number of this CartCustomerProfile.
        :rtype: str
        """
        return self._fedex_account_number

    @fedex_account_number.setter
    def fedex_account_number(self, fedex_account_number):
        """
        Sets the fedex_account_number of this CartCustomerProfile.
        FedEx account number on file

        :param fedex_account_number: The fedex_account_number of this CartCustomerProfile.
        :type: str
        """

        self._fedex_account_number = fedex_account_number

    @property
    def free_shipping(self):
        """
        Gets the free_shipping of this CartCustomerProfile.
        True if this profile always qualifies for free shipping

        :return: The free_shipping of this CartCustomerProfile.
        :rtype: bool
        """
        return self._free_shipping

    @free_shipping.setter
    def free_shipping(self, free_shipping):
        """
        Sets the free_shipping of this CartCustomerProfile.
        True if this profile always qualifies for free shipping

        :param free_shipping: The free_shipping of this CartCustomerProfile.
        :type: bool
        """

        self._free_shipping = free_shipping

    @property
    def free_shipping_minimum(self):
        """
        Gets the free_shipping_minimum of this CartCustomerProfile.
        The minimum aount that this profile has to purchase to qualify for free shipping

        :return: The free_shipping_minimum of this CartCustomerProfile.
        :rtype: float
        """
        return self._free_shipping_minimum

    @free_shipping_minimum.setter
    def free_shipping_minimum(self, free_shipping_minimum):
        """
        Sets the free_shipping_minimum of this CartCustomerProfile.
        The minimum aount that this profile has to purchase to qualify for free shipping

        :param free_shipping_minimum: The free_shipping_minimum of this CartCustomerProfile.
        :type: float
        """

        self._free_shipping_minimum = free_shipping_minimum

    @property
    def maximum_item_count(self):
        """
        Gets the maximum_item_count of this CartCustomerProfile.
        Maximum item count this profile can purchase

        :return: The maximum_item_count of this CartCustomerProfile.
        :rtype: int
        """
        return self._maximum_item_count

    @maximum_item_count.setter
    def maximum_item_count(self, maximum_item_count):
        """
        Sets the maximum_item_count of this CartCustomerProfile.
        Maximum item count this profile can purchase

        :param maximum_item_count: The maximum_item_count of this CartCustomerProfile.
        :type: int
        """

        self._maximum_item_count = maximum_item_count

    @property
    def minimum_item_count(self):
        """
        Gets the minimum_item_count of this CartCustomerProfile.
        Minimum item count this profile must purchase

        :return: The minimum_item_count of this CartCustomerProfile.
        :rtype: int
        """
        return self._minimum_item_count

    @minimum_item_count.setter
    def minimum_item_count(self, minimum_item_count):
        """
        Sets the minimum_item_count of this CartCustomerProfile.
        Minimum item count this profile must purchase

        :param minimum_item_count: The minimum_item_count of this CartCustomerProfile.
        :type: int
        """

        self._minimum_item_count = minimum_item_count

    @property
    def minimum_subtotal(self):
        """
        Gets the minimum_subtotal of this CartCustomerProfile.
        Minimum subtotal this profile must purchase

        :return: The minimum_subtotal of this CartCustomerProfile.
        :rtype: float
        """
        return self._minimum_subtotal

    @minimum_subtotal.setter
    def minimum_subtotal(self, minimum_subtotal):
        """
        Sets the minimum_subtotal of this CartCustomerProfile.
        Minimum subtotal this profile must purchase

        :param minimum_subtotal: The minimum_subtotal of this CartCustomerProfile.
        :type: float
        """

        self._minimum_subtotal = minimum_subtotal

    @property
    def no_coupons(self):
        """
        Gets the no_coupons of this CartCustomerProfile.
        True if this profile is prevented from using coupons

        :return: The no_coupons of this CartCustomerProfile.
        :rtype: bool
        """
        return self._no_coupons

    @no_coupons.setter
    def no_coupons(self, no_coupons):
        """
        Sets the no_coupons of this CartCustomerProfile.
        True if this profile is prevented from using coupons

        :param no_coupons: The no_coupons of this CartCustomerProfile.
        :type: bool
        """

        self._no_coupons = no_coupons

    @property
    def no_free_shipping(self):
        """
        Gets the no_free_shipping of this CartCustomerProfile.
        True if this profile is never given free shipping

        :return: The no_free_shipping of this CartCustomerProfile.
        :rtype: bool
        """
        return self._no_free_shipping

    @no_free_shipping.setter
    def no_free_shipping(self, no_free_shipping):
        """
        Sets the no_free_shipping of this CartCustomerProfile.
        True if this profile is never given free shipping

        :param no_free_shipping: The no_free_shipping of this CartCustomerProfile.
        :type: bool
        """

        self._no_free_shipping = no_free_shipping

    @property
    def no_realtime_charge(self):
        """
        Gets the no_realtime_charge of this CartCustomerProfile.
        True if this customers orders are not charged in real-time

        :return: The no_realtime_charge of this CartCustomerProfile.
        :rtype: bool
        """
        return self._no_realtime_charge

    @no_realtime_charge.setter
    def no_realtime_charge(self, no_realtime_charge):
        """
        Sets the no_realtime_charge of this CartCustomerProfile.
        True if this customers orders are not charged in real-time

        :param no_realtime_charge: The no_realtime_charge of this CartCustomerProfile.
        :type: bool
        """

        self._no_realtime_charge = no_realtime_charge

    @property
    def pricing_tiers(self):
        """
        Gets the pricing_tiers of this CartCustomerProfile.
        Pricing tier names this profile qualifies for

        :return: The pricing_tiers of this CartCustomerProfile.
        :rtype: list[str]
        """
        return self._pricing_tiers

    @pricing_tiers.setter
    def pricing_tiers(self, pricing_tiers):
        """
        Sets the pricing_tiers of this CartCustomerProfile.
        Pricing tier names this profile qualifies for

        :param pricing_tiers: The pricing_tiers of this CartCustomerProfile.
        :type: list[str]
        """

        self._pricing_tiers = pricing_tiers

    @property
    def shipping_addresses(self):
        """
        Gets the shipping_addresses of this CartCustomerProfile.
        Shipping addresses on file for this profile

        :return: The shipping_addresses of this CartCustomerProfile.
        :rtype: list[CartCustomerProfileAddress]
        """
        return self._shipping_addresses

    @shipping_addresses.setter
    def shipping_addresses(self, shipping_addresses):
        """
        Sets the shipping_addresses of this CartCustomerProfile.
        Shipping addresses on file for this profile

        :param shipping_addresses: The shipping_addresses of this CartCustomerProfile.
        :type: list[CartCustomerProfileAddress]
        """

        self._shipping_addresses = shipping_addresses

    @property
    def tax_exempt(self):
        """
        Gets the tax_exempt of this CartCustomerProfile.
        True if this profile is exempt from sales tax

        :return: The tax_exempt of this CartCustomerProfile.
        :rtype: bool
        """
        return self._tax_exempt

    @tax_exempt.setter
    def tax_exempt(self, tax_exempt):
        """
        Sets the tax_exempt of this CartCustomerProfile.
        True if this profile is exempt from sales tax

        :param tax_exempt: The tax_exempt of this CartCustomerProfile.
        :type: bool
        """

        self._tax_exempt = tax_exempt

    @property
    def ups_account_number(self):
        """
        Gets the ups_account_number of this CartCustomerProfile.
        UPS account number on file

        :return: The ups_account_number of this CartCustomerProfile.
        :rtype: str
        """
        return self._ups_account_number

    @ups_account_number.setter
    def ups_account_number(self, ups_account_number):
        """
        Sets the ups_account_number of this CartCustomerProfile.
        UPS account number on file

        :param ups_account_number: The ups_account_number of this CartCustomerProfile.
        :type: str
        """

        self._ups_account_number = ups_account_number

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
