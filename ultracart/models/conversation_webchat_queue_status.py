# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConversationWebchatQueueStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'agent_available_count': 'int',
        'agent_busy_count': 'int',
        'agent_count': 'int',
        'agent_unavailable_count': 'int',
        'agents': 'list[ConversationWebchatQueueStatusAgent]',
        'customer_abandon_count': 'int',
        'customer_active_count': 'int',
        'customer_waiting_count': 'int',
        'customer_waiting_join_dts': 'str',
        'queue_entries': 'list[ConversationWebchatQueueStatusQueueEntry]',
        'queue_name': 'str'
    }

    attribute_map = {
        'agent_available_count': 'agent_available_count',
        'agent_busy_count': 'agent_busy_count',
        'agent_count': 'agent_count',
        'agent_unavailable_count': 'agent_unavailable_count',
        'agents': 'agents',
        'customer_abandon_count': 'customer_abandon_count',
        'customer_active_count': 'customer_active_count',
        'customer_waiting_count': 'customer_waiting_count',
        'customer_waiting_join_dts': 'customer_waiting_join_dts',
        'queue_entries': 'queue_entries',
        'queue_name': 'queue_name'
    }

    def __init__(self, agent_available_count=None, agent_busy_count=None, agent_count=None, agent_unavailable_count=None, agents=None, customer_abandon_count=None, customer_active_count=None, customer_waiting_count=None, customer_waiting_join_dts=None, queue_entries=None, queue_name=None):  # noqa: E501
        """ConversationWebchatQueueStatus - a model defined in Swagger"""  # noqa: E501

        self._agent_available_count = None
        self._agent_busy_count = None
        self._agent_count = None
        self._agent_unavailable_count = None
        self._agents = None
        self._customer_abandon_count = None
        self._customer_active_count = None
        self._customer_waiting_count = None
        self._customer_waiting_join_dts = None
        self._queue_entries = None
        self._queue_name = None
        self.discriminator = None

        if agent_available_count is not None:
            self.agent_available_count = agent_available_count
        if agent_busy_count is not None:
            self.agent_busy_count = agent_busy_count
        if agent_count is not None:
            self.agent_count = agent_count
        if agent_unavailable_count is not None:
            self.agent_unavailable_count = agent_unavailable_count
        if agents is not None:
            self.agents = agents
        if customer_abandon_count is not None:
            self.customer_abandon_count = customer_abandon_count
        if customer_active_count is not None:
            self.customer_active_count = customer_active_count
        if customer_waiting_count is not None:
            self.customer_waiting_count = customer_waiting_count
        if customer_waiting_join_dts is not None:
            self.customer_waiting_join_dts = customer_waiting_join_dts
        if queue_entries is not None:
            self.queue_entries = queue_entries
        if queue_name is not None:
            self.queue_name = queue_name

    @property
    def agent_available_count(self):
        """Gets the agent_available_count of this ConversationWebchatQueueStatus.  # noqa: E501


        :return: The agent_available_count of this ConversationWebchatQueueStatus.  # noqa: E501
        :rtype: int
        """
        return self._agent_available_count

    @agent_available_count.setter
    def agent_available_count(self, agent_available_count):
        """Sets the agent_available_count of this ConversationWebchatQueueStatus.


        :param agent_available_count: The agent_available_count of this ConversationWebchatQueueStatus.  # noqa: E501
        :type: int
        """

        self._agent_available_count = agent_available_count

    @property
    def agent_busy_count(self):
        """Gets the agent_busy_count of this ConversationWebchatQueueStatus.  # noqa: E501


        :return: The agent_busy_count of this ConversationWebchatQueueStatus.  # noqa: E501
        :rtype: int
        """
        return self._agent_busy_count

    @agent_busy_count.setter
    def agent_busy_count(self, agent_busy_count):
        """Sets the agent_busy_count of this ConversationWebchatQueueStatus.


        :param agent_busy_count: The agent_busy_count of this ConversationWebchatQueueStatus.  # noqa: E501
        :type: int
        """

        self._agent_busy_count = agent_busy_count

    @property
    def agent_count(self):
        """Gets the agent_count of this ConversationWebchatQueueStatus.  # noqa: E501


        :return: The agent_count of this ConversationWebchatQueueStatus.  # noqa: E501
        :rtype: int
        """
        return self._agent_count

    @agent_count.setter
    def agent_count(self, agent_count):
        """Sets the agent_count of this ConversationWebchatQueueStatus.


        :param agent_count: The agent_count of this ConversationWebchatQueueStatus.  # noqa: E501
        :type: int
        """

        self._agent_count = agent_count

    @property
    def agent_unavailable_count(self):
        """Gets the agent_unavailable_count of this ConversationWebchatQueueStatus.  # noqa: E501


        :return: The agent_unavailable_count of this ConversationWebchatQueueStatus.  # noqa: E501
        :rtype: int
        """
        return self._agent_unavailable_count

    @agent_unavailable_count.setter
    def agent_unavailable_count(self, agent_unavailable_count):
        """Sets the agent_unavailable_count of this ConversationWebchatQueueStatus.


        :param agent_unavailable_count: The agent_unavailable_count of this ConversationWebchatQueueStatus.  # noqa: E501
        :type: int
        """

        self._agent_unavailable_count = agent_unavailable_count

    @property
    def agents(self):
        """Gets the agents of this ConversationWebchatQueueStatus.  # noqa: E501


        :return: The agents of this ConversationWebchatQueueStatus.  # noqa: E501
        :rtype: list[ConversationWebchatQueueStatusAgent]
        """
        return self._agents

    @agents.setter
    def agents(self, agents):
        """Sets the agents of this ConversationWebchatQueueStatus.


        :param agents: The agents of this ConversationWebchatQueueStatus.  # noqa: E501
        :type: list[ConversationWebchatQueueStatusAgent]
        """

        self._agents = agents

    @property
    def customer_abandon_count(self):
        """Gets the customer_abandon_count of this ConversationWebchatQueueStatus.  # noqa: E501


        :return: The customer_abandon_count of this ConversationWebchatQueueStatus.  # noqa: E501
        :rtype: int
        """
        return self._customer_abandon_count

    @customer_abandon_count.setter
    def customer_abandon_count(self, customer_abandon_count):
        """Sets the customer_abandon_count of this ConversationWebchatQueueStatus.


        :param customer_abandon_count: The customer_abandon_count of this ConversationWebchatQueueStatus.  # noqa: E501
        :type: int
        """

        self._customer_abandon_count = customer_abandon_count

    @property
    def customer_active_count(self):
        """Gets the customer_active_count of this ConversationWebchatQueueStatus.  # noqa: E501


        :return: The customer_active_count of this ConversationWebchatQueueStatus.  # noqa: E501
        :rtype: int
        """
        return self._customer_active_count

    @customer_active_count.setter
    def customer_active_count(self, customer_active_count):
        """Sets the customer_active_count of this ConversationWebchatQueueStatus.


        :param customer_active_count: The customer_active_count of this ConversationWebchatQueueStatus.  # noqa: E501
        :type: int
        """

        self._customer_active_count = customer_active_count

    @property
    def customer_waiting_count(self):
        """Gets the customer_waiting_count of this ConversationWebchatQueueStatus.  # noqa: E501


        :return: The customer_waiting_count of this ConversationWebchatQueueStatus.  # noqa: E501
        :rtype: int
        """
        return self._customer_waiting_count

    @customer_waiting_count.setter
    def customer_waiting_count(self, customer_waiting_count):
        """Sets the customer_waiting_count of this ConversationWebchatQueueStatus.


        :param customer_waiting_count: The customer_waiting_count of this ConversationWebchatQueueStatus.  # noqa: E501
        :type: int
        """

        self._customer_waiting_count = customer_waiting_count

    @property
    def customer_waiting_join_dts(self):
        """Gets the customer_waiting_join_dts of this ConversationWebchatQueueStatus.  # noqa: E501

        Date/time that the oldest person joined the queue  # noqa: E501

        :return: The customer_waiting_join_dts of this ConversationWebchatQueueStatus.  # noqa: E501
        :rtype: str
        """
        return self._customer_waiting_join_dts

    @customer_waiting_join_dts.setter
    def customer_waiting_join_dts(self, customer_waiting_join_dts):
        """Sets the customer_waiting_join_dts of this ConversationWebchatQueueStatus.

        Date/time that the oldest person joined the queue  # noqa: E501

        :param customer_waiting_join_dts: The customer_waiting_join_dts of this ConversationWebchatQueueStatus.  # noqa: E501
        :type: str
        """

        self._customer_waiting_join_dts = customer_waiting_join_dts

    @property
    def queue_entries(self):
        """Gets the queue_entries of this ConversationWebchatQueueStatus.  # noqa: E501


        :return: The queue_entries of this ConversationWebchatQueueStatus.  # noqa: E501
        :rtype: list[ConversationWebchatQueueStatusQueueEntry]
        """
        return self._queue_entries

    @queue_entries.setter
    def queue_entries(self, queue_entries):
        """Sets the queue_entries of this ConversationWebchatQueueStatus.


        :param queue_entries: The queue_entries of this ConversationWebchatQueueStatus.  # noqa: E501
        :type: list[ConversationWebchatQueueStatusQueueEntry]
        """

        self._queue_entries = queue_entries

    @property
    def queue_name(self):
        """Gets the queue_name of this ConversationWebchatQueueStatus.  # noqa: E501


        :return: The queue_name of this ConversationWebchatQueueStatus.  # noqa: E501
        :rtype: str
        """
        return self._queue_name

    @queue_name.setter
    def queue_name(self, queue_name):
        """Sets the queue_name of this ConversationWebchatQueueStatus.


        :param queue_name: The queue_name of this ConversationWebchatQueueStatus.  # noqa: E501
        :type: str
        """

        self._queue_name = queue_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConversationWebchatQueueStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConversationWebchatQueueStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
