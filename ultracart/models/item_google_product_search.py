# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ItemGoogleProductSearch(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'adwords_grouping': 'str',
        'adwords_label1': 'str',
        'adwords_label2': 'str',
        'adwords_label3': 'str',
        'adwords_label4': 'str',
        'adwords_label5': 'str',
        'age_group': 'str',
        'available_at_physical_store': 'bool',
        'book_author': 'str',
        'book_format': 'str',
        'book_isbn': 'str',
        'book_publisher': 'str',
        'category_description': 'str',
        'color': 'str',
        'condition': 'str',
        'custom_label0': 'str',
        'custom_label1': 'str',
        'custom_label2': 'str',
        'custom_label3': 'str',
        'custom_label4': 'str',
        'gender': 'str',
        'google_product_category': 'str',
        'music_artist': 'str',
        'music_format': 'str',
        'music_release_date': 'str',
        'omit_from_feed': 'bool',
        'product_type': 'str',
        'promotion_id1': 'str',
        'promotion_id10': 'str',
        'promotion_id2': 'str',
        'promotion_id3': 'str',
        'promotion_id4': 'str',
        'promotion_id5': 'str',
        'promotion_id6': 'str',
        'promotion_id7': 'str',
        'promotion_id8': 'str',
        'promotion_id9': 'str',
        'search_dts': 'str',
        'search_lowest_price': 'float',
        'search_lowest_url': 'str',
        'search_position': 'int',
        'shipping_label': 'str',
        'size': 'str',
        'video_director': 'str',
        'video_format': 'str',
        'video_rating': 'str',
        'video_release_date': 'str',
        'video_starring': 'str'
    }

    attribute_map = {
        'adwords_grouping': 'adwords_grouping',
        'adwords_label1': 'adwords_label1',
        'adwords_label2': 'adwords_label2',
        'adwords_label3': 'adwords_label3',
        'adwords_label4': 'adwords_label4',
        'adwords_label5': 'adwords_label5',
        'age_group': 'age_group',
        'available_at_physical_store': 'available_at_physical_store',
        'book_author': 'book_author',
        'book_format': 'book_format',
        'book_isbn': 'book_isbn',
        'book_publisher': 'book_publisher',
        'category_description': 'category_description',
        'color': 'color',
        'condition': 'condition',
        'custom_label0': 'custom_label0',
        'custom_label1': 'custom_label1',
        'custom_label2': 'custom_label2',
        'custom_label3': 'custom_label3',
        'custom_label4': 'custom_label4',
        'gender': 'gender',
        'google_product_category': 'google_product_category',
        'music_artist': 'music_artist',
        'music_format': 'music_format',
        'music_release_date': 'music_release_date',
        'omit_from_feed': 'omit_from_feed',
        'product_type': 'product_type',
        'promotion_id1': 'promotion_id1',
        'promotion_id10': 'promotion_id10',
        'promotion_id2': 'promotion_id2',
        'promotion_id3': 'promotion_id3',
        'promotion_id4': 'promotion_id4',
        'promotion_id5': 'promotion_id5',
        'promotion_id6': 'promotion_id6',
        'promotion_id7': 'promotion_id7',
        'promotion_id8': 'promotion_id8',
        'promotion_id9': 'promotion_id9',
        'search_dts': 'search_dts',
        'search_lowest_price': 'search_lowest_price',
        'search_lowest_url': 'search_lowest_url',
        'search_position': 'search_position',
        'shipping_label': 'shippingLabel',
        'size': 'size',
        'video_director': 'video_director',
        'video_format': 'video_format',
        'video_rating': 'video_rating',
        'video_release_date': 'video_release_date',
        'video_starring': 'video_starring'
    }

    def __init__(self, adwords_grouping=None, adwords_label1=None, adwords_label2=None, adwords_label3=None, adwords_label4=None, adwords_label5=None, age_group=None, available_at_physical_store=None, book_author=None, book_format=None, book_isbn=None, book_publisher=None, category_description=None, color=None, condition=None, custom_label0=None, custom_label1=None, custom_label2=None, custom_label3=None, custom_label4=None, gender=None, google_product_category=None, music_artist=None, music_format=None, music_release_date=None, omit_from_feed=None, product_type=None, promotion_id1=None, promotion_id10=None, promotion_id2=None, promotion_id3=None, promotion_id4=None, promotion_id5=None, promotion_id6=None, promotion_id7=None, promotion_id8=None, promotion_id9=None, search_dts=None, search_lowest_price=None, search_lowest_url=None, search_position=None, shipping_label=None, size=None, video_director=None, video_format=None, video_rating=None, video_release_date=None, video_starring=None):  # noqa: E501
        """ItemGoogleProductSearch - a model defined in Swagger"""  # noqa: E501

        self._adwords_grouping = None
        self._adwords_label1 = None
        self._adwords_label2 = None
        self._adwords_label3 = None
        self._adwords_label4 = None
        self._adwords_label5 = None
        self._age_group = None
        self._available_at_physical_store = None
        self._book_author = None
        self._book_format = None
        self._book_isbn = None
        self._book_publisher = None
        self._category_description = None
        self._color = None
        self._condition = None
        self._custom_label0 = None
        self._custom_label1 = None
        self._custom_label2 = None
        self._custom_label3 = None
        self._custom_label4 = None
        self._gender = None
        self._google_product_category = None
        self._music_artist = None
        self._music_format = None
        self._music_release_date = None
        self._omit_from_feed = None
        self._product_type = None
        self._promotion_id1 = None
        self._promotion_id10 = None
        self._promotion_id2 = None
        self._promotion_id3 = None
        self._promotion_id4 = None
        self._promotion_id5 = None
        self._promotion_id6 = None
        self._promotion_id7 = None
        self._promotion_id8 = None
        self._promotion_id9 = None
        self._search_dts = None
        self._search_lowest_price = None
        self._search_lowest_url = None
        self._search_position = None
        self._shipping_label = None
        self._size = None
        self._video_director = None
        self._video_format = None
        self._video_rating = None
        self._video_release_date = None
        self._video_starring = None
        self.discriminator = None

        if adwords_grouping is not None:
            self.adwords_grouping = adwords_grouping
        if adwords_label1 is not None:
            self.adwords_label1 = adwords_label1
        if adwords_label2 is not None:
            self.adwords_label2 = adwords_label2
        if adwords_label3 is not None:
            self.adwords_label3 = adwords_label3
        if adwords_label4 is not None:
            self.adwords_label4 = adwords_label4
        if adwords_label5 is not None:
            self.adwords_label5 = adwords_label5
        if age_group is not None:
            self.age_group = age_group
        if available_at_physical_store is not None:
            self.available_at_physical_store = available_at_physical_store
        if book_author is not None:
            self.book_author = book_author
        if book_format is not None:
            self.book_format = book_format
        if book_isbn is not None:
            self.book_isbn = book_isbn
        if book_publisher is not None:
            self.book_publisher = book_publisher
        if category_description is not None:
            self.category_description = category_description
        if color is not None:
            self.color = color
        if condition is not None:
            self.condition = condition
        if custom_label0 is not None:
            self.custom_label0 = custom_label0
        if custom_label1 is not None:
            self.custom_label1 = custom_label1
        if custom_label2 is not None:
            self.custom_label2 = custom_label2
        if custom_label3 is not None:
            self.custom_label3 = custom_label3
        if custom_label4 is not None:
            self.custom_label4 = custom_label4
        if gender is not None:
            self.gender = gender
        if google_product_category is not None:
            self.google_product_category = google_product_category
        if music_artist is not None:
            self.music_artist = music_artist
        if music_format is not None:
            self.music_format = music_format
        if music_release_date is not None:
            self.music_release_date = music_release_date
        if omit_from_feed is not None:
            self.omit_from_feed = omit_from_feed
        if product_type is not None:
            self.product_type = product_type
        if promotion_id1 is not None:
            self.promotion_id1 = promotion_id1
        if promotion_id10 is not None:
            self.promotion_id10 = promotion_id10
        if promotion_id2 is not None:
            self.promotion_id2 = promotion_id2
        if promotion_id3 is not None:
            self.promotion_id3 = promotion_id3
        if promotion_id4 is not None:
            self.promotion_id4 = promotion_id4
        if promotion_id5 is not None:
            self.promotion_id5 = promotion_id5
        if promotion_id6 is not None:
            self.promotion_id6 = promotion_id6
        if promotion_id7 is not None:
            self.promotion_id7 = promotion_id7
        if promotion_id8 is not None:
            self.promotion_id8 = promotion_id8
        if promotion_id9 is not None:
            self.promotion_id9 = promotion_id9
        if search_dts is not None:
            self.search_dts = search_dts
        if search_lowest_price is not None:
            self.search_lowest_price = search_lowest_price
        if search_lowest_url is not None:
            self.search_lowest_url = search_lowest_url
        if search_position is not None:
            self.search_position = search_position
        if shipping_label is not None:
            self.shipping_label = shipping_label
        if size is not None:
            self.size = size
        if video_director is not None:
            self.video_director = video_director
        if video_format is not None:
            self.video_format = video_format
        if video_rating is not None:
            self.video_rating = video_rating
        if video_release_date is not None:
            self.video_release_date = video_release_date
        if video_starring is not None:
            self.video_starring = video_starring

    @property
    def adwords_grouping(self):
        """Gets the adwords_grouping of this ItemGoogleProductSearch.  # noqa: E501

        Adwords grouping  # noqa: E501

        :return: The adwords_grouping of this ItemGoogleProductSearch.  # noqa: E501
        :rtype: str
        """
        return self._adwords_grouping

    @adwords_grouping.setter
    def adwords_grouping(self, adwords_grouping):
        """Sets the adwords_grouping of this ItemGoogleProductSearch.

        Adwords grouping  # noqa: E501

        :param adwords_grouping: The adwords_grouping of this ItemGoogleProductSearch.  # noqa: E501
        :type: str
        """
        if adwords_grouping is not None and len(adwords_grouping) > 50:
            raise ValueError("Invalid value for `adwords_grouping`, length must be less than or equal to `50`")  # noqa: E501

        self._adwords_grouping = adwords_grouping

    @property
    def adwords_label1(self):
        """Gets the adwords_label1 of this ItemGoogleProductSearch.  # noqa: E501

        Adwords label 1  # noqa: E501

        :return: The adwords_label1 of this ItemGoogleProductSearch.  # noqa: E501
        :rtype: str
        """
        return self._adwords_label1

    @adwords_label1.setter
    def adwords_label1(self, adwords_label1):
        """Sets the adwords_label1 of this ItemGoogleProductSearch.

        Adwords label 1  # noqa: E501

        :param adwords_label1: The adwords_label1 of this ItemGoogleProductSearch.  # noqa: E501
        :type: str
        """
        if adwords_label1 is not None and len(adwords_label1) > 50:
            raise ValueError("Invalid value for `adwords_label1`, length must be less than or equal to `50`")  # noqa: E501

        self._adwords_label1 = adwords_label1

    @property
    def adwords_label2(self):
        """Gets the adwords_label2 of this ItemGoogleProductSearch.  # noqa: E501

        Adwords label 2  # noqa: E501

        :return: The adwords_label2 of this ItemGoogleProductSearch.  # noqa: E501
        :rtype: str
        """
        return self._adwords_label2

    @adwords_label2.setter
    def adwords_label2(self, adwords_label2):
        """Sets the adwords_label2 of this ItemGoogleProductSearch.

        Adwords label 2  # noqa: E501

        :param adwords_label2: The adwords_label2 of this ItemGoogleProductSearch.  # noqa: E501
        :type: str
        """
        if adwords_label2 is not None and len(adwords_label2) > 50:
            raise ValueError("Invalid value for `adwords_label2`, length must be less than or equal to `50`")  # noqa: E501

        self._adwords_label2 = adwords_label2

    @property
    def adwords_label3(self):
        """Gets the adwords_label3 of this ItemGoogleProductSearch.  # noqa: E501

        Adwords label 3  # noqa: E501

        :return: The adwords_label3 of this ItemGoogleProductSearch.  # noqa: E501
        :rtype: str
        """
        return self._adwords_label3

    @adwords_label3.setter
    def adwords_label3(self, adwords_label3):
        """Sets the adwords_label3 of this ItemGoogleProductSearch.

        Adwords label 3  # noqa: E501

        :param adwords_label3: The adwords_label3 of this ItemGoogleProductSearch.  # noqa: E501
        :type: str
        """
        if adwords_label3 is not None and len(adwords_label3) > 50:
            raise ValueError("Invalid value for `adwords_label3`, length must be less than or equal to `50`")  # noqa: E501

        self._adwords_label3 = adwords_label3

    @property
    def adwords_label4(self):
        """Gets the adwords_label4 of this ItemGoogleProductSearch.  # noqa: E501

        Adwords label 4  # noqa: E501

        :return: The adwords_label4 of this ItemGoogleProductSearch.  # noqa: E501
        :rtype: str
        """
        return self._adwords_label4

    @adwords_label4.setter
    def adwords_label4(self, adwords_label4):
        """Sets the adwords_label4 of this ItemGoogleProductSearch.

        Adwords label 4  # noqa: E501

        :param adwords_label4: The adwords_label4 of this ItemGoogleProductSearch.  # noqa: E501
        :type: str
        """
        if adwords_label4 is not None and len(adwords_label4) > 50:
            raise ValueError("Invalid value for `adwords_label4`, length must be less than or equal to `50`")  # noqa: E501

        self._adwords_label4 = adwords_label4

    @property
    def adwords_label5(self):
        """Gets the adwords_label5 of this ItemGoogleProductSearch.  # noqa: E501

        Adwords label 5  # noqa: E501

        :return: The adwords_label5 of this ItemGoogleProductSearch.  # noqa: E501
        :rtype: str
        """
        return self._adwords_label5

    @adwords_label5.setter
    def adwords_label5(self, adwords_label5):
        """Sets the adwords_label5 of this ItemGoogleProductSearch.

        Adwords label 5  # noqa: E501

        :param adwords_label5: The adwords_label5 of this ItemGoogleProductSearch.  # noqa: E501
        :type: str
        """
        if adwords_label5 is not None and len(adwords_label5) > 50:
            raise ValueError("Invalid value for `adwords_label5`, length must be less than or equal to `50`")  # noqa: E501

        self._adwords_label5 = adwords_label5

    @property
    def age_group(self):
        """Gets the age_group of this ItemGoogleProductSearch.  # noqa: E501

        Age group  # noqa: E501

        :return: The age_group of this ItemGoogleProductSearch.  # noqa: E501
        :rtype: str
        """
        return self._age_group

    @age_group.setter
    def age_group(self, age_group):
        """Sets the age_group of this ItemGoogleProductSearch.

        Age group  # noqa: E501

        :param age_group: The age_group of this ItemGoogleProductSearch.  # noqa: E501
        :type: str
        """
        if age_group is not None and len(age_group) > 5:
            raise ValueError("Invalid value for `age_group`, length must be less than or equal to `5`")  # noqa: E501

        self._age_group = age_group

    @property
    def available_at_physical_store(self):
        """Gets the available_at_physical_store of this ItemGoogleProductSearch.  # noqa: E501

        Available at physical store  # noqa: E501

        :return: The available_at_physical_store of this ItemGoogleProductSearch.  # noqa: E501
        :rtype: bool
        """
        return self._available_at_physical_store

    @available_at_physical_store.setter
    def available_at_physical_store(self, available_at_physical_store):
        """Sets the available_at_physical_store of this ItemGoogleProductSearch.

        Available at physical store  # noqa: E501

        :param available_at_physical_store: The available_at_physical_store of this ItemGoogleProductSearch.  # noqa: E501
        :type: bool
        """

        self._available_at_physical_store = available_at_physical_store

    @property
    def book_author(self):
        """Gets the book_author of this ItemGoogleProductSearch.  # noqa: E501

        Book - author  # noqa: E501

        :return: The book_author of this ItemGoogleProductSearch.  # noqa: E501
        :rtype: str
        """
        return self._book_author

    @book_author.setter
    def book_author(self, book_author):
        """Sets the book_author of this ItemGoogleProductSearch.

        Book - author  # noqa: E501

        :param book_author: The book_author of this ItemGoogleProductSearch.  # noqa: E501
        :type: str
        """
        if book_author is not None and len(book_author) > 50:
            raise ValueError("Invalid value for `book_author`, length must be less than or equal to `50`")  # noqa: E501

        self._book_author = book_author

    @property
    def book_format(self):
        """Gets the book_format of this ItemGoogleProductSearch.  # noqa: E501

        Book - format  # noqa: E501

        :return: The book_format of this ItemGoogleProductSearch.  # noqa: E501
        :rtype: str
        """
        return self._book_format

    @book_format.setter
    def book_format(self, book_format):
        """Sets the book_format of this ItemGoogleProductSearch.

        Book - format  # noqa: E501

        :param book_format: The book_format of this ItemGoogleProductSearch.  # noqa: E501
        :type: str
        """
        if book_format is not None and len(book_format) > 50:
            raise ValueError("Invalid value for `book_format`, length must be less than or equal to `50`")  # noqa: E501

        self._book_format = book_format

    @property
    def book_isbn(self):
        """Gets the book_isbn of this ItemGoogleProductSearch.  # noqa: E501

        Bood - ISBN  # noqa: E501

        :return: The book_isbn of this ItemGoogleProductSearch.  # noqa: E501
        :rtype: str
        """
        return self._book_isbn

    @book_isbn.setter
    def book_isbn(self, book_isbn):
        """Sets the book_isbn of this ItemGoogleProductSearch.

        Bood - ISBN  # noqa: E501

        :param book_isbn: The book_isbn of this ItemGoogleProductSearch.  # noqa: E501
        :type: str
        """
        if book_isbn is not None and len(book_isbn) > 20:
            raise ValueError("Invalid value for `book_isbn`, length must be less than or equal to `20`")  # noqa: E501

        self._book_isbn = book_isbn

    @property
    def book_publisher(self):
        """Gets the book_publisher of this ItemGoogleProductSearch.  # noqa: E501

        Book - publisher  # noqa: E501

        :return: The book_publisher of this ItemGoogleProductSearch.  # noqa: E501
        :rtype: str
        """
        return self._book_publisher

    @book_publisher.setter
    def book_publisher(self, book_publisher):
        """Sets the book_publisher of this ItemGoogleProductSearch.

        Book - publisher  # noqa: E501

        :param book_publisher: The book_publisher of this ItemGoogleProductSearch.  # noqa: E501
        :type: str
        """
        if book_publisher is not None and len(book_publisher) > 50:
            raise ValueError("Invalid value for `book_publisher`, length must be less than or equal to `50`")  # noqa: E501

        self._book_publisher = book_publisher

    @property
    def category_description(self):
        """Gets the category_description of this ItemGoogleProductSearch.  # noqa: E501

        Category description  # noqa: E501

        :return: The category_description of this ItemGoogleProductSearch.  # noqa: E501
        :rtype: str
        """
        return self._category_description

    @category_description.setter
    def category_description(self, category_description):
        """Sets the category_description of this ItemGoogleProductSearch.

        Category description  # noqa: E501

        :param category_description: The category_description of this ItemGoogleProductSearch.  # noqa: E501
        :type: str
        """
        if category_description is not None and len(category_description) > 1000:
            raise ValueError("Invalid value for `category_description`, length must be less than or equal to `1000`")  # noqa: E501

        self._category_description = category_description

    @property
    def color(self):
        """Gets the color of this ItemGoogleProductSearch.  # noqa: E501

        Color  # noqa: E501

        :return: The color of this ItemGoogleProductSearch.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this ItemGoogleProductSearch.

        Color  # noqa: E501

        :param color: The color of this ItemGoogleProductSearch.  # noqa: E501
        :type: str
        """
        if color is not None and len(color) > 20:
            raise ValueError("Invalid value for `color`, length must be less than or equal to `20`")  # noqa: E501

        self._color = color

    @property
    def condition(self):
        """Gets the condition of this ItemGoogleProductSearch.  # noqa: E501

        Condition  # noqa: E501

        :return: The condition of this ItemGoogleProductSearch.  # noqa: E501
        :rtype: str
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this ItemGoogleProductSearch.

        Condition  # noqa: E501

        :param condition: The condition of this ItemGoogleProductSearch.  # noqa: E501
        :type: str
        """
        if condition is not None and len(condition) > 15:
            raise ValueError("Invalid value for `condition`, length must be less than or equal to `15`")  # noqa: E501

        self._condition = condition

    @property
    def custom_label0(self):
        """Gets the custom_label0 of this ItemGoogleProductSearch.  # noqa: E501

        Custom label 0  # noqa: E501

        :return: The custom_label0 of this ItemGoogleProductSearch.  # noqa: E501
        :rtype: str
        """
        return self._custom_label0

    @custom_label0.setter
    def custom_label0(self, custom_label0):
        """Sets the custom_label0 of this ItemGoogleProductSearch.

        Custom label 0  # noqa: E501

        :param custom_label0: The custom_label0 of this ItemGoogleProductSearch.  # noqa: E501
        :type: str
        """
        if custom_label0 is not None and len(custom_label0) > 50:
            raise ValueError("Invalid value for `custom_label0`, length must be less than or equal to `50`")  # noqa: E501

        self._custom_label0 = custom_label0

    @property
    def custom_label1(self):
        """Gets the custom_label1 of this ItemGoogleProductSearch.  # noqa: E501

        Custom label 1  # noqa: E501

        :return: The custom_label1 of this ItemGoogleProductSearch.  # noqa: E501
        :rtype: str
        """
        return self._custom_label1

    @custom_label1.setter
    def custom_label1(self, custom_label1):
        """Sets the custom_label1 of this ItemGoogleProductSearch.

        Custom label 1  # noqa: E501

        :param custom_label1: The custom_label1 of this ItemGoogleProductSearch.  # noqa: E501
        :type: str
        """
        if custom_label1 is not None and len(custom_label1) > 50:
            raise ValueError("Invalid value for `custom_label1`, length must be less than or equal to `50`")  # noqa: E501

        self._custom_label1 = custom_label1

    @property
    def custom_label2(self):
        """Gets the custom_label2 of this ItemGoogleProductSearch.  # noqa: E501

        Custom label 2  # noqa: E501

        :return: The custom_label2 of this ItemGoogleProductSearch.  # noqa: E501
        :rtype: str
        """
        return self._custom_label2

    @custom_label2.setter
    def custom_label2(self, custom_label2):
        """Sets the custom_label2 of this ItemGoogleProductSearch.

        Custom label 2  # noqa: E501

        :param custom_label2: The custom_label2 of this ItemGoogleProductSearch.  # noqa: E501
        :type: str
        """
        if custom_label2 is not None and len(custom_label2) > 50:
            raise ValueError("Invalid value for `custom_label2`, length must be less than or equal to `50`")  # noqa: E501

        self._custom_label2 = custom_label2

    @property
    def custom_label3(self):
        """Gets the custom_label3 of this ItemGoogleProductSearch.  # noqa: E501

        Custom label 3  # noqa: E501

        :return: The custom_label3 of this ItemGoogleProductSearch.  # noqa: E501
        :rtype: str
        """
        return self._custom_label3

    @custom_label3.setter
    def custom_label3(self, custom_label3):
        """Sets the custom_label3 of this ItemGoogleProductSearch.

        Custom label 3  # noqa: E501

        :param custom_label3: The custom_label3 of this ItemGoogleProductSearch.  # noqa: E501
        :type: str
        """
        if custom_label3 is not None and len(custom_label3) > 50:
            raise ValueError("Invalid value for `custom_label3`, length must be less than or equal to `50`")  # noqa: E501

        self._custom_label3 = custom_label3

    @property
    def custom_label4(self):
        """Gets the custom_label4 of this ItemGoogleProductSearch.  # noqa: E501

        Custom label 4  # noqa: E501

        :return: The custom_label4 of this ItemGoogleProductSearch.  # noqa: E501
        :rtype: str
        """
        return self._custom_label4

    @custom_label4.setter
    def custom_label4(self, custom_label4):
        """Sets the custom_label4 of this ItemGoogleProductSearch.

        Custom label 4  # noqa: E501

        :param custom_label4: The custom_label4 of this ItemGoogleProductSearch.  # noqa: E501
        :type: str
        """
        if custom_label4 is not None and len(custom_label4) > 50:
            raise ValueError("Invalid value for `custom_label4`, length must be less than or equal to `50`")  # noqa: E501

        self._custom_label4 = custom_label4

    @property
    def gender(self):
        """Gets the gender of this ItemGoogleProductSearch.  # noqa: E501

        Gender  # noqa: E501

        :return: The gender of this ItemGoogleProductSearch.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this ItemGoogleProductSearch.

        Gender  # noqa: E501

        :param gender: The gender of this ItemGoogleProductSearch.  # noqa: E501
        :type: str
        """
        if gender is not None and len(gender) > 6:
            raise ValueError("Invalid value for `gender`, length must be less than or equal to `6`")  # noqa: E501

        self._gender = gender

    @property
    def google_product_category(self):
        """Gets the google_product_category of this ItemGoogleProductSearch.  # noqa: E501

        Google product category  # noqa: E501

        :return: The google_product_category of this ItemGoogleProductSearch.  # noqa: E501
        :rtype: str
        """
        return self._google_product_category

    @google_product_category.setter
    def google_product_category(self, google_product_category):
        """Sets the google_product_category of this ItemGoogleProductSearch.

        Google product category  # noqa: E501

        :param google_product_category: The google_product_category of this ItemGoogleProductSearch.  # noqa: E501
        :type: str
        """
        if google_product_category is not None and len(google_product_category) > 250:
            raise ValueError("Invalid value for `google_product_category`, length must be less than or equal to `250`")  # noqa: E501

        self._google_product_category = google_product_category

    @property
    def music_artist(self):
        """Gets the music_artist of this ItemGoogleProductSearch.  # noqa: E501

        Music - artist  # noqa: E501

        :return: The music_artist of this ItemGoogleProductSearch.  # noqa: E501
        :rtype: str
        """
        return self._music_artist

    @music_artist.setter
    def music_artist(self, music_artist):
        """Sets the music_artist of this ItemGoogleProductSearch.

        Music - artist  # noqa: E501

        :param music_artist: The music_artist of this ItemGoogleProductSearch.  # noqa: E501
        :type: str
        """
        if music_artist is not None and len(music_artist) > 50:
            raise ValueError("Invalid value for `music_artist`, length must be less than or equal to `50`")  # noqa: E501

        self._music_artist = music_artist

    @property
    def music_format(self):
        """Gets the music_format of this ItemGoogleProductSearch.  # noqa: E501

        Music - format  # noqa: E501

        :return: The music_format of this ItemGoogleProductSearch.  # noqa: E501
        :rtype: str
        """
        return self._music_format

    @music_format.setter
    def music_format(self, music_format):
        """Sets the music_format of this ItemGoogleProductSearch.

        Music - format  # noqa: E501

        :param music_format: The music_format of this ItemGoogleProductSearch.  # noqa: E501
        :type: str
        """
        if music_format is not None and len(music_format) > 5:
            raise ValueError("Invalid value for `music_format`, length must be less than or equal to `5`")  # noqa: E501

        self._music_format = music_format

    @property
    def music_release_date(self):
        """Gets the music_release_date of this ItemGoogleProductSearch.  # noqa: E501

        Music - release date  # noqa: E501

        :return: The music_release_date of this ItemGoogleProductSearch.  # noqa: E501
        :rtype: str
        """
        return self._music_release_date

    @music_release_date.setter
    def music_release_date(self, music_release_date):
        """Sets the music_release_date of this ItemGoogleProductSearch.

        Music - release date  # noqa: E501

        :param music_release_date: The music_release_date of this ItemGoogleProductSearch.  # noqa: E501
        :type: str
        """

        self._music_release_date = music_release_date

    @property
    def omit_from_feed(self):
        """Gets the omit_from_feed of this ItemGoogleProductSearch.  # noqa: E501

        Omit from feed  # noqa: E501

        :return: The omit_from_feed of this ItemGoogleProductSearch.  # noqa: E501
        :rtype: bool
        """
        return self._omit_from_feed

    @omit_from_feed.setter
    def omit_from_feed(self, omit_from_feed):
        """Sets the omit_from_feed of this ItemGoogleProductSearch.

        Omit from feed  # noqa: E501

        :param omit_from_feed: The omit_from_feed of this ItemGoogleProductSearch.  # noqa: E501
        :type: bool
        """

        self._omit_from_feed = omit_from_feed

    @property
    def product_type(self):
        """Gets the product_type of this ItemGoogleProductSearch.  # noqa: E501

        Product type  # noqa: E501

        :return: The product_type of this ItemGoogleProductSearch.  # noqa: E501
        :rtype: str
        """
        return self._product_type

    @product_type.setter
    def product_type(self, product_type):
        """Sets the product_type of this ItemGoogleProductSearch.

        Product type  # noqa: E501

        :param product_type: The product_type of this ItemGoogleProductSearch.  # noqa: E501
        :type: str
        """
        if product_type is not None and len(product_type) > 10:
            raise ValueError("Invalid value for `product_type`, length must be less than or equal to `10`")  # noqa: E501

        self._product_type = product_type

    @property
    def promotion_id1(self):
        """Gets the promotion_id1 of this ItemGoogleProductSearch.  # noqa: E501

        Promotion ID 1  # noqa: E501

        :return: The promotion_id1 of this ItemGoogleProductSearch.  # noqa: E501
        :rtype: str
        """
        return self._promotion_id1

    @promotion_id1.setter
    def promotion_id1(self, promotion_id1):
        """Sets the promotion_id1 of this ItemGoogleProductSearch.

        Promotion ID 1  # noqa: E501

        :param promotion_id1: The promotion_id1 of this ItemGoogleProductSearch.  # noqa: E501
        :type: str
        """
        if promotion_id1 is not None and len(promotion_id1) > 30:
            raise ValueError("Invalid value for `promotion_id1`, length must be less than or equal to `30`")  # noqa: E501

        self._promotion_id1 = promotion_id1

    @property
    def promotion_id10(self):
        """Gets the promotion_id10 of this ItemGoogleProductSearch.  # noqa: E501

        Promotion ID 10  # noqa: E501

        :return: The promotion_id10 of this ItemGoogleProductSearch.  # noqa: E501
        :rtype: str
        """
        return self._promotion_id10

    @promotion_id10.setter
    def promotion_id10(self, promotion_id10):
        """Sets the promotion_id10 of this ItemGoogleProductSearch.

        Promotion ID 10  # noqa: E501

        :param promotion_id10: The promotion_id10 of this ItemGoogleProductSearch.  # noqa: E501
        :type: str
        """
        if promotion_id10 is not None and len(promotion_id10) > 30:
            raise ValueError("Invalid value for `promotion_id10`, length must be less than or equal to `30`")  # noqa: E501

        self._promotion_id10 = promotion_id10

    @property
    def promotion_id2(self):
        """Gets the promotion_id2 of this ItemGoogleProductSearch.  # noqa: E501

        Promotion ID 2  # noqa: E501

        :return: The promotion_id2 of this ItemGoogleProductSearch.  # noqa: E501
        :rtype: str
        """
        return self._promotion_id2

    @promotion_id2.setter
    def promotion_id2(self, promotion_id2):
        """Sets the promotion_id2 of this ItemGoogleProductSearch.

        Promotion ID 2  # noqa: E501

        :param promotion_id2: The promotion_id2 of this ItemGoogleProductSearch.  # noqa: E501
        :type: str
        """
        if promotion_id2 is not None and len(promotion_id2) > 30:
            raise ValueError("Invalid value for `promotion_id2`, length must be less than or equal to `30`")  # noqa: E501

        self._promotion_id2 = promotion_id2

    @property
    def promotion_id3(self):
        """Gets the promotion_id3 of this ItemGoogleProductSearch.  # noqa: E501

        Promotion ID 3  # noqa: E501

        :return: The promotion_id3 of this ItemGoogleProductSearch.  # noqa: E501
        :rtype: str
        """
        return self._promotion_id3

    @promotion_id3.setter
    def promotion_id3(self, promotion_id3):
        """Sets the promotion_id3 of this ItemGoogleProductSearch.

        Promotion ID 3  # noqa: E501

        :param promotion_id3: The promotion_id3 of this ItemGoogleProductSearch.  # noqa: E501
        :type: str
        """
        if promotion_id3 is not None and len(promotion_id3) > 30:
            raise ValueError("Invalid value for `promotion_id3`, length must be less than or equal to `30`")  # noqa: E501

        self._promotion_id3 = promotion_id3

    @property
    def promotion_id4(self):
        """Gets the promotion_id4 of this ItemGoogleProductSearch.  # noqa: E501

        Promotion ID 4  # noqa: E501

        :return: The promotion_id4 of this ItemGoogleProductSearch.  # noqa: E501
        :rtype: str
        """
        return self._promotion_id4

    @promotion_id4.setter
    def promotion_id4(self, promotion_id4):
        """Sets the promotion_id4 of this ItemGoogleProductSearch.

        Promotion ID 4  # noqa: E501

        :param promotion_id4: The promotion_id4 of this ItemGoogleProductSearch.  # noqa: E501
        :type: str
        """
        if promotion_id4 is not None and len(promotion_id4) > 30:
            raise ValueError("Invalid value for `promotion_id4`, length must be less than or equal to `30`")  # noqa: E501

        self._promotion_id4 = promotion_id4

    @property
    def promotion_id5(self):
        """Gets the promotion_id5 of this ItemGoogleProductSearch.  # noqa: E501

        Promotion ID 5  # noqa: E501

        :return: The promotion_id5 of this ItemGoogleProductSearch.  # noqa: E501
        :rtype: str
        """
        return self._promotion_id5

    @promotion_id5.setter
    def promotion_id5(self, promotion_id5):
        """Sets the promotion_id5 of this ItemGoogleProductSearch.

        Promotion ID 5  # noqa: E501

        :param promotion_id5: The promotion_id5 of this ItemGoogleProductSearch.  # noqa: E501
        :type: str
        """
        if promotion_id5 is not None and len(promotion_id5) > 30:
            raise ValueError("Invalid value for `promotion_id5`, length must be less than or equal to `30`")  # noqa: E501

        self._promotion_id5 = promotion_id5

    @property
    def promotion_id6(self):
        """Gets the promotion_id6 of this ItemGoogleProductSearch.  # noqa: E501

        Promotion ID 6  # noqa: E501

        :return: The promotion_id6 of this ItemGoogleProductSearch.  # noqa: E501
        :rtype: str
        """
        return self._promotion_id6

    @promotion_id6.setter
    def promotion_id6(self, promotion_id6):
        """Sets the promotion_id6 of this ItemGoogleProductSearch.

        Promotion ID 6  # noqa: E501

        :param promotion_id6: The promotion_id6 of this ItemGoogleProductSearch.  # noqa: E501
        :type: str
        """
        if promotion_id6 is not None and len(promotion_id6) > 30:
            raise ValueError("Invalid value for `promotion_id6`, length must be less than or equal to `30`")  # noqa: E501

        self._promotion_id6 = promotion_id6

    @property
    def promotion_id7(self):
        """Gets the promotion_id7 of this ItemGoogleProductSearch.  # noqa: E501

        Promotion ID 7  # noqa: E501

        :return: The promotion_id7 of this ItemGoogleProductSearch.  # noqa: E501
        :rtype: str
        """
        return self._promotion_id7

    @promotion_id7.setter
    def promotion_id7(self, promotion_id7):
        """Sets the promotion_id7 of this ItemGoogleProductSearch.

        Promotion ID 7  # noqa: E501

        :param promotion_id7: The promotion_id7 of this ItemGoogleProductSearch.  # noqa: E501
        :type: str
        """
        if promotion_id7 is not None and len(promotion_id7) > 30:
            raise ValueError("Invalid value for `promotion_id7`, length must be less than or equal to `30`")  # noqa: E501

        self._promotion_id7 = promotion_id7

    @property
    def promotion_id8(self):
        """Gets the promotion_id8 of this ItemGoogleProductSearch.  # noqa: E501

        Promotion ID 8  # noqa: E501

        :return: The promotion_id8 of this ItemGoogleProductSearch.  # noqa: E501
        :rtype: str
        """
        return self._promotion_id8

    @promotion_id8.setter
    def promotion_id8(self, promotion_id8):
        """Sets the promotion_id8 of this ItemGoogleProductSearch.

        Promotion ID 8  # noqa: E501

        :param promotion_id8: The promotion_id8 of this ItemGoogleProductSearch.  # noqa: E501
        :type: str
        """
        if promotion_id8 is not None and len(promotion_id8) > 30:
            raise ValueError("Invalid value for `promotion_id8`, length must be less than or equal to `30`")  # noqa: E501

        self._promotion_id8 = promotion_id8

    @property
    def promotion_id9(self):
        """Gets the promotion_id9 of this ItemGoogleProductSearch.  # noqa: E501

        Promotion ID 9  # noqa: E501

        :return: The promotion_id9 of this ItemGoogleProductSearch.  # noqa: E501
        :rtype: str
        """
        return self._promotion_id9

    @promotion_id9.setter
    def promotion_id9(self, promotion_id9):
        """Sets the promotion_id9 of this ItemGoogleProductSearch.

        Promotion ID 9  # noqa: E501

        :param promotion_id9: The promotion_id9 of this ItemGoogleProductSearch.  # noqa: E501
        :type: str
        """
        if promotion_id9 is not None and len(promotion_id9) > 30:
            raise ValueError("Invalid value for `promotion_id9`, length must be less than or equal to `30`")  # noqa: E501

        self._promotion_id9 = promotion_id9

    @property
    def search_dts(self):
        """Gets the search_dts of this ItemGoogleProductSearch.  # noqa: E501

        Search date/time  # noqa: E501

        :return: The search_dts of this ItemGoogleProductSearch.  # noqa: E501
        :rtype: str
        """
        return self._search_dts

    @search_dts.setter
    def search_dts(self, search_dts):
        """Sets the search_dts of this ItemGoogleProductSearch.

        Search date/time  # noqa: E501

        :param search_dts: The search_dts of this ItemGoogleProductSearch.  # noqa: E501
        :type: str
        """

        self._search_dts = search_dts

    @property
    def search_lowest_price(self):
        """Gets the search_lowest_price of this ItemGoogleProductSearch.  # noqa: E501

        Search lowest price  # noqa: E501

        :return: The search_lowest_price of this ItemGoogleProductSearch.  # noqa: E501
        :rtype: float
        """
        return self._search_lowest_price

    @search_lowest_price.setter
    def search_lowest_price(self, search_lowest_price):
        """Sets the search_lowest_price of this ItemGoogleProductSearch.

        Search lowest price  # noqa: E501

        :param search_lowest_price: The search_lowest_price of this ItemGoogleProductSearch.  # noqa: E501
        :type: float
        """

        self._search_lowest_price = search_lowest_price

    @property
    def search_lowest_url(self):
        """Gets the search_lowest_url of this ItemGoogleProductSearch.  # noqa: E501

        Search lowest URL  # noqa: E501

        :return: The search_lowest_url of this ItemGoogleProductSearch.  # noqa: E501
        :rtype: str
        """
        return self._search_lowest_url

    @search_lowest_url.setter
    def search_lowest_url(self, search_lowest_url):
        """Sets the search_lowest_url of this ItemGoogleProductSearch.

        Search lowest URL  # noqa: E501

        :param search_lowest_url: The search_lowest_url of this ItemGoogleProductSearch.  # noqa: E501
        :type: str
        """
        if search_lowest_url is not None and len(search_lowest_url) > 250:
            raise ValueError("Invalid value for `search_lowest_url`, length must be less than or equal to `250`")  # noqa: E501

        self._search_lowest_url = search_lowest_url

    @property
    def search_position(self):
        """Gets the search_position of this ItemGoogleProductSearch.  # noqa: E501

        Search position  # noqa: E501

        :return: The search_position of this ItemGoogleProductSearch.  # noqa: E501
        :rtype: int
        """
        return self._search_position

    @search_position.setter
    def search_position(self, search_position):
        """Sets the search_position of this ItemGoogleProductSearch.

        Search position  # noqa: E501

        :param search_position: The search_position of this ItemGoogleProductSearch.  # noqa: E501
        :type: int
        """

        self._search_position = search_position

    @property
    def shipping_label(self):
        """Gets the shipping_label of this ItemGoogleProductSearch.  # noqa: E501


        :return: The shipping_label of this ItemGoogleProductSearch.  # noqa: E501
        :rtype: str
        """
        return self._shipping_label

    @shipping_label.setter
    def shipping_label(self, shipping_label):
        """Sets the shipping_label of this ItemGoogleProductSearch.


        :param shipping_label: The shipping_label of this ItemGoogleProductSearch.  # noqa: E501
        :type: str
        """

        self._shipping_label = shipping_label

    @property
    def size(self):
        """Gets the size of this ItemGoogleProductSearch.  # noqa: E501

        Size  # noqa: E501

        :return: The size of this ItemGoogleProductSearch.  # noqa: E501
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this ItemGoogleProductSearch.

        Size  # noqa: E501

        :param size: The size of this ItemGoogleProductSearch.  # noqa: E501
        :type: str
        """
        if size is not None and len(size) > 20:
            raise ValueError("Invalid value for `size`, length must be less than or equal to `20`")  # noqa: E501

        self._size = size

    @property
    def video_director(self):
        """Gets the video_director of this ItemGoogleProductSearch.  # noqa: E501

        Video - director  # noqa: E501

        :return: The video_director of this ItemGoogleProductSearch.  # noqa: E501
        :rtype: str
        """
        return self._video_director

    @video_director.setter
    def video_director(self, video_director):
        """Sets the video_director of this ItemGoogleProductSearch.

        Video - director  # noqa: E501

        :param video_director: The video_director of this ItemGoogleProductSearch.  # noqa: E501
        :type: str
        """
        if video_director is not None and len(video_director) > 50:
            raise ValueError("Invalid value for `video_director`, length must be less than or equal to `50`")  # noqa: E501

        self._video_director = video_director

    @property
    def video_format(self):
        """Gets the video_format of this ItemGoogleProductSearch.  # noqa: E501

        Video - format  # noqa: E501

        :return: The video_format of this ItemGoogleProductSearch.  # noqa: E501
        :rtype: str
        """
        return self._video_format

    @video_format.setter
    def video_format(self, video_format):
        """Sets the video_format of this ItemGoogleProductSearch.

        Video - format  # noqa: E501

        :param video_format: The video_format of this ItemGoogleProductSearch.  # noqa: E501
        :type: str
        """
        if video_format is not None and len(video_format) > 5:
            raise ValueError("Invalid value for `video_format`, length must be less than or equal to `5`")  # noqa: E501

        self._video_format = video_format

    @property
    def video_rating(self):
        """Gets the video_rating of this ItemGoogleProductSearch.  # noqa: E501

        Video - rating  # noqa: E501

        :return: The video_rating of this ItemGoogleProductSearch.  # noqa: E501
        :rtype: str
        """
        return self._video_rating

    @video_rating.setter
    def video_rating(self, video_rating):
        """Sets the video_rating of this ItemGoogleProductSearch.

        Video - rating  # noqa: E501

        :param video_rating: The video_rating of this ItemGoogleProductSearch.  # noqa: E501
        :type: str
        """
        if video_rating is not None and len(video_rating) > 5:
            raise ValueError("Invalid value for `video_rating`, length must be less than or equal to `5`")  # noqa: E501

        self._video_rating = video_rating

    @property
    def video_release_date(self):
        """Gets the video_release_date of this ItemGoogleProductSearch.  # noqa: E501

        Video - release date  # noqa: E501

        :return: The video_release_date of this ItemGoogleProductSearch.  # noqa: E501
        :rtype: str
        """
        return self._video_release_date

    @video_release_date.setter
    def video_release_date(self, video_release_date):
        """Sets the video_release_date of this ItemGoogleProductSearch.

        Video - release date  # noqa: E501

        :param video_release_date: The video_release_date of this ItemGoogleProductSearch.  # noqa: E501
        :type: str
        """

        self._video_release_date = video_release_date

    @property
    def video_starring(self):
        """Gets the video_starring of this ItemGoogleProductSearch.  # noqa: E501

        Video - starring  # noqa: E501

        :return: The video_starring of this ItemGoogleProductSearch.  # noqa: E501
        :rtype: str
        """
        return self._video_starring

    @video_starring.setter
    def video_starring(self, video_starring):
        """Sets the video_starring of this ItemGoogleProductSearch.

        Video - starring  # noqa: E501

        :param video_starring: The video_starring of this ItemGoogleProductSearch.  # noqa: E501
        :type: str
        """
        if video_starring is not None and len(video_starring) > 150:
            raise ValueError("Invalid value for `video_starring`, length must be less than or equal to `150`")  # noqa: E501

        self._video_starring = video_starring

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ItemGoogleProductSearch, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ItemGoogleProductSearch):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
