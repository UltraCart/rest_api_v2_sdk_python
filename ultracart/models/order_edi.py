# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class OrderEdi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bill_to_edi_code': 'str',
        'edi_department': 'str',
        'edi_internal_vendor_number': 'str',
        'ship_to_edi_code': 'str'
    }

    attribute_map = {
        'bill_to_edi_code': 'bill_to_edi_code',
        'edi_department': 'edi_department',
        'edi_internal_vendor_number': 'edi_internal_vendor_number',
        'ship_to_edi_code': 'ship_to_edi_code'
    }

    def __init__(self, bill_to_edi_code=None, edi_department=None, edi_internal_vendor_number=None, ship_to_edi_code=None):
        """
        OrderEdi - a model defined in Swagger
        """

        self._bill_to_edi_code = None
        self._edi_department = None
        self._edi_internal_vendor_number = None
        self._ship_to_edi_code = None
        self.discriminator = None

        if bill_to_edi_code is not None:
          self.bill_to_edi_code = bill_to_edi_code
        if edi_department is not None:
          self.edi_department = edi_department
        if edi_internal_vendor_number is not None:
          self.edi_internal_vendor_number = edi_internal_vendor_number
        if ship_to_edi_code is not None:
          self.ship_to_edi_code = ship_to_edi_code

    @property
    def bill_to_edi_code(self):
        """
        Gets the bill_to_edi_code of this OrderEdi.
        Billing address identification code from the EDI order.  Typically DUNS or DUNS+4

        :return: The bill_to_edi_code of this OrderEdi.
        :rtype: str
        """
        return self._bill_to_edi_code

    @bill_to_edi_code.setter
    def bill_to_edi_code(self, bill_to_edi_code):
        """
        Sets the bill_to_edi_code of this OrderEdi.
        Billing address identification code from the EDI order.  Typically DUNS or DUNS+4

        :param bill_to_edi_code: The bill_to_edi_code of this OrderEdi.
        :type: str
        """

        self._bill_to_edi_code = bill_to_edi_code

    @property
    def edi_department(self):
        """
        Gets the edi_department of this OrderEdi.
        Department number associated with this EDI order

        :return: The edi_department of this OrderEdi.
        :rtype: str
        """
        return self._edi_department

    @edi_department.setter
    def edi_department(self, edi_department):
        """
        Sets the edi_department of this OrderEdi.
        Department number associated with this EDI order

        :param edi_department: The edi_department of this OrderEdi.
        :type: str
        """

        self._edi_department = edi_department

    @property
    def edi_internal_vendor_number(self):
        """
        Gets the edi_internal_vendor_number of this OrderEdi.
        Internal vendor number associated with this EDI order

        :return: The edi_internal_vendor_number of this OrderEdi.
        :rtype: str
        """
        return self._edi_internal_vendor_number

    @edi_internal_vendor_number.setter
    def edi_internal_vendor_number(self, edi_internal_vendor_number):
        """
        Sets the edi_internal_vendor_number of this OrderEdi.
        Internal vendor number associated with this EDI order

        :param edi_internal_vendor_number: The edi_internal_vendor_number of this OrderEdi.
        :type: str
        """
        if edi_internal_vendor_number is not None and len(edi_internal_vendor_number) > 50:
            raise ValueError("Invalid value for `edi_internal_vendor_number`, length must be less than or equal to `50`")

        self._edi_internal_vendor_number = edi_internal_vendor_number

    @property
    def ship_to_edi_code(self):
        """
        Gets the ship_to_edi_code of this OrderEdi.
        Shipping address identification code from the EDI order.  Typically DUNS or DUNS+4

        :return: The ship_to_edi_code of this OrderEdi.
        :rtype: str
        """
        return self._ship_to_edi_code

    @ship_to_edi_code.setter
    def ship_to_edi_code(self, ship_to_edi_code):
        """
        Sets the ship_to_edi_code of this OrderEdi.
        Shipping address identification code from the EDI order.  Typically DUNS or DUNS+4

        :param ship_to_edi_code: The ship_to_edi_code of this OrderEdi.
        :type: str
        """

        self._ship_to_edi_code = ship_to_edi_code

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, OrderEdi):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
