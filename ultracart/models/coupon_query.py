# coding: utf-8

"""
    UltraCart Rest API V2

    This is the next generation UltraCart REST API...

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class CouponQuery(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, affiliate_oid=None, coupon_type=None, description=None, exclude_expired=None, expiration_dts_begin=None, expiration_dts_end=None, merchant_code=None, start_dts_begin=None, start_dts_end=None):
        """
        CouponQuery - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'affiliate_oid': 'int',
            'coupon_type': 'str',
            'description': 'str',
            'exclude_expired': 'bool',
            'expiration_dts_begin': 'str',
            'expiration_dts_end': 'str',
            'merchant_code': 'str',
            'start_dts_begin': 'str',
            'start_dts_end': 'str'
        }

        self.attribute_map = {
            'affiliate_oid': 'affiliate_oid',
            'coupon_type': 'coupon_type',
            'description': 'description',
            'exclude_expired': 'exclude_expired',
            'expiration_dts_begin': 'expiration_dts_begin',
            'expiration_dts_end': 'expiration_dts_end',
            'merchant_code': 'merchant_code',
            'start_dts_begin': 'start_dts_begin',
            'start_dts_end': 'start_dts_end'
        }

        self._affiliate_oid = affiliate_oid
        self._coupon_type = coupon_type
        self._description = description
        self._exclude_expired = exclude_expired
        self._expiration_dts_begin = expiration_dts_begin
        self._expiration_dts_end = expiration_dts_end
        self._merchant_code = merchant_code
        self._start_dts_begin = start_dts_begin
        self._start_dts_end = start_dts_end

    @property
    def affiliate_oid(self):
        """
        Gets the affiliate_oid of this CouponQuery.
        Affiliate oid

        :return: The affiliate_oid of this CouponQuery.
        :rtype: int
        """
        return self._affiliate_oid

    @affiliate_oid.setter
    def affiliate_oid(self, affiliate_oid):
        """
        Sets the affiliate_oid of this CouponQuery.
        Affiliate oid

        :param affiliate_oid: The affiliate_oid of this CouponQuery.
        :type: int
        """

        self._affiliate_oid = affiliate_oid

    @property
    def coupon_type(self):
        """
        Gets the coupon_type of this CouponQuery.
        The type of coupon.

        :return: The coupon_type of this CouponQuery.
        :rtype: str
        """
        return self._coupon_type

    @coupon_type.setter
    def coupon_type(self, coupon_type):
        """
        Sets the coupon_type of this CouponQuery.
        The type of coupon.

        :param coupon_type: The coupon_type of this CouponQuery.
        :type: str
        """

        self._coupon_type = coupon_type

    @property
    def description(self):
        """
        Gets the description of this CouponQuery.
        Description of this coupon

        :return: The description of this CouponQuery.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this CouponQuery.
        Description of this coupon

        :param description: The description of this CouponQuery.
        :type: str
        """

        self._description = description

    @property
    def exclude_expired(self):
        """
        Gets the exclude_expired of this CouponQuery.
        Exclude expired coupons if true

        :return: The exclude_expired of this CouponQuery.
        :rtype: bool
        """
        return self._exclude_expired

    @exclude_expired.setter
    def exclude_expired(self, exclude_expired):
        """
        Sets the exclude_expired of this CouponQuery.
        Exclude expired coupons if true

        :param exclude_expired: The exclude_expired of this CouponQuery.
        :type: bool
        """

        self._exclude_expired = exclude_expired

    @property
    def expiration_dts_begin(self):
        """
        Gets the expiration_dts_begin of this CouponQuery.
        Expiration date begin

        :return: The expiration_dts_begin of this CouponQuery.
        :rtype: str
        """
        return self._expiration_dts_begin

    @expiration_dts_begin.setter
    def expiration_dts_begin(self, expiration_dts_begin):
        """
        Sets the expiration_dts_begin of this CouponQuery.
        Expiration date begin

        :param expiration_dts_begin: The expiration_dts_begin of this CouponQuery.
        :type: str
        """

        self._expiration_dts_begin = expiration_dts_begin

    @property
    def expiration_dts_end(self):
        """
        Gets the expiration_dts_end of this CouponQuery.
        Expiration date begin

        :return: The expiration_dts_end of this CouponQuery.
        :rtype: str
        """
        return self._expiration_dts_end

    @expiration_dts_end.setter
    def expiration_dts_end(self, expiration_dts_end):
        """
        Sets the expiration_dts_end of this CouponQuery.
        Expiration date begin

        :param expiration_dts_end: The expiration_dts_end of this CouponQuery.
        :type: str
        """

        self._expiration_dts_end = expiration_dts_end

    @property
    def merchant_code(self):
        """
        Gets the merchant_code of this CouponQuery.
        Merchant code is a unique character string for this coupon.

        :return: The merchant_code of this CouponQuery.
        :rtype: str
        """
        return self._merchant_code

    @merchant_code.setter
    def merchant_code(self, merchant_code):
        """
        Sets the merchant_code of this CouponQuery.
        Merchant code is a unique character string for this coupon.

        :param merchant_code: The merchant_code of this CouponQuery.
        :type: str
        """

        self._merchant_code = merchant_code

    @property
    def start_dts_begin(self):
        """
        Gets the start_dts_begin of this CouponQuery.
        Start date begin

        :return: The start_dts_begin of this CouponQuery.
        :rtype: str
        """
        return self._start_dts_begin

    @start_dts_begin.setter
    def start_dts_begin(self, start_dts_begin):
        """
        Sets the start_dts_begin of this CouponQuery.
        Start date begin

        :param start_dts_begin: The start_dts_begin of this CouponQuery.
        :type: str
        """

        self._start_dts_begin = start_dts_begin

    @property
    def start_dts_end(self):
        """
        Gets the start_dts_end of this CouponQuery.
        Start date end

        :return: The start_dts_end of this CouponQuery.
        :rtype: str
        """
        return self._start_dts_end

    @start_dts_end.setter
    def start_dts_end(self, start_dts_end):
        """
        Sets the start_dts_end of this CouponQuery.
        Start date end

        :param start_dts_end: The start_dts_end of this CouponQuery.
        :type: str
        """

        self._start_dts_end = start_dts_end

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
