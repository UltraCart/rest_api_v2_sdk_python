# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CouponQuery(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'affiliate_oid': 'int',
        'coupon_type': 'str',
        'description': 'str',
        'exclude_expired': 'bool',
        'expiration_dts_begin': 'str',
        'expiration_dts_end': 'str',
        'merchant_code': 'str',
        'merchant_code_or_description': 'str',
        'start_dts_begin': 'str',
        'start_dts_end': 'str'
    }

    attribute_map = {
        'affiliate_oid': 'affiliate_oid',
        'coupon_type': 'coupon_type',
        'description': 'description',
        'exclude_expired': 'exclude_expired',
        'expiration_dts_begin': 'expiration_dts_begin',
        'expiration_dts_end': 'expiration_dts_end',
        'merchant_code': 'merchant_code',
        'merchant_code_or_description': 'merchant_code_or_description',
        'start_dts_begin': 'start_dts_begin',
        'start_dts_end': 'start_dts_end'
    }

    def __init__(self, affiliate_oid=None, coupon_type=None, description=None, exclude_expired=None, expiration_dts_begin=None, expiration_dts_end=None, merchant_code=None, merchant_code_or_description=None, start_dts_begin=None, start_dts_end=None):  # noqa: E501
        """CouponQuery - a model defined in Swagger"""  # noqa: E501

        self._affiliate_oid = None
        self._coupon_type = None
        self._description = None
        self._exclude_expired = None
        self._expiration_dts_begin = None
        self._expiration_dts_end = None
        self._merchant_code = None
        self._merchant_code_or_description = None
        self._start_dts_begin = None
        self._start_dts_end = None
        self.discriminator = None

        if affiliate_oid is not None:
            self.affiliate_oid = affiliate_oid
        if coupon_type is not None:
            self.coupon_type = coupon_type
        if description is not None:
            self.description = description
        if exclude_expired is not None:
            self.exclude_expired = exclude_expired
        if expiration_dts_begin is not None:
            self.expiration_dts_begin = expiration_dts_begin
        if expiration_dts_end is not None:
            self.expiration_dts_end = expiration_dts_end
        if merchant_code is not None:
            self.merchant_code = merchant_code
        if merchant_code_or_description is not None:
            self.merchant_code_or_description = merchant_code_or_description
        if start_dts_begin is not None:
            self.start_dts_begin = start_dts_begin
        if start_dts_end is not None:
            self.start_dts_end = start_dts_end

    @property
    def affiliate_oid(self):
        """Gets the affiliate_oid of this CouponQuery.  # noqa: E501

        Affiliate oid  # noqa: E501

        :return: The affiliate_oid of this CouponQuery.  # noqa: E501
        :rtype: int
        """
        return self._affiliate_oid

    @affiliate_oid.setter
    def affiliate_oid(self, affiliate_oid):
        """Sets the affiliate_oid of this CouponQuery.

        Affiliate oid  # noqa: E501

        :param affiliate_oid: The affiliate_oid of this CouponQuery.  # noqa: E501
        :type: int
        """

        self._affiliate_oid = affiliate_oid

    @property
    def coupon_type(self):
        """Gets the coupon_type of this CouponQuery.  # noqa: E501

        The type of coupon.  # noqa: E501

        :return: The coupon_type of this CouponQuery.  # noqa: E501
        :rtype: str
        """
        return self._coupon_type

    @coupon_type.setter
    def coupon_type(self, coupon_type):
        """Sets the coupon_type of this CouponQuery.

        The type of coupon.  # noqa: E501

        :param coupon_type: The coupon_type of this CouponQuery.  # noqa: E501
        :type: str
        """

        self._coupon_type = coupon_type

    @property
    def description(self):
        """Gets the description of this CouponQuery.  # noqa: E501

        Description of this coupon  # noqa: E501

        :return: The description of this CouponQuery.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CouponQuery.

        Description of this coupon  # noqa: E501

        :param description: The description of this CouponQuery.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def exclude_expired(self):
        """Gets the exclude_expired of this CouponQuery.  # noqa: E501

        Exclude expired coupons if true  # noqa: E501

        :return: The exclude_expired of this CouponQuery.  # noqa: E501
        :rtype: bool
        """
        return self._exclude_expired

    @exclude_expired.setter
    def exclude_expired(self, exclude_expired):
        """Sets the exclude_expired of this CouponQuery.

        Exclude expired coupons if true  # noqa: E501

        :param exclude_expired: The exclude_expired of this CouponQuery.  # noqa: E501
        :type: bool
        """

        self._exclude_expired = exclude_expired

    @property
    def expiration_dts_begin(self):
        """Gets the expiration_dts_begin of this CouponQuery.  # noqa: E501

        Expiration date begin  # noqa: E501

        :return: The expiration_dts_begin of this CouponQuery.  # noqa: E501
        :rtype: str
        """
        return self._expiration_dts_begin

    @expiration_dts_begin.setter
    def expiration_dts_begin(self, expiration_dts_begin):
        """Sets the expiration_dts_begin of this CouponQuery.

        Expiration date begin  # noqa: E501

        :param expiration_dts_begin: The expiration_dts_begin of this CouponQuery.  # noqa: E501
        :type: str
        """

        self._expiration_dts_begin = expiration_dts_begin

    @property
    def expiration_dts_end(self):
        """Gets the expiration_dts_end of this CouponQuery.  # noqa: E501

        Expiration date begin  # noqa: E501

        :return: The expiration_dts_end of this CouponQuery.  # noqa: E501
        :rtype: str
        """
        return self._expiration_dts_end

    @expiration_dts_end.setter
    def expiration_dts_end(self, expiration_dts_end):
        """Sets the expiration_dts_end of this CouponQuery.

        Expiration date begin  # noqa: E501

        :param expiration_dts_end: The expiration_dts_end of this CouponQuery.  # noqa: E501
        :type: str
        """

        self._expiration_dts_end = expiration_dts_end

    @property
    def merchant_code(self):
        """Gets the merchant_code of this CouponQuery.  # noqa: E501

        Merchant code is a unique character string for this coupon.  # noqa: E501

        :return: The merchant_code of this CouponQuery.  # noqa: E501
        :rtype: str
        """
        return self._merchant_code

    @merchant_code.setter
    def merchant_code(self, merchant_code):
        """Sets the merchant_code of this CouponQuery.

        Merchant code is a unique character string for this coupon.  # noqa: E501

        :param merchant_code: The merchant_code of this CouponQuery.  # noqa: E501
        :type: str
        """

        self._merchant_code = merchant_code

    @property
    def merchant_code_or_description(self):
        """Gets the merchant_code_or_description of this CouponQuery.  # noqa: E501

        Merchant code description used for searching  # noqa: E501

        :return: The merchant_code_or_description of this CouponQuery.  # noqa: E501
        :rtype: str
        """
        return self._merchant_code_or_description

    @merchant_code_or_description.setter
    def merchant_code_or_description(self, merchant_code_or_description):
        """Sets the merchant_code_or_description of this CouponQuery.

        Merchant code description used for searching  # noqa: E501

        :param merchant_code_or_description: The merchant_code_or_description of this CouponQuery.  # noqa: E501
        :type: str
        """

        self._merchant_code_or_description = merchant_code_or_description

    @property
    def start_dts_begin(self):
        """Gets the start_dts_begin of this CouponQuery.  # noqa: E501

        Start date begin  # noqa: E501

        :return: The start_dts_begin of this CouponQuery.  # noqa: E501
        :rtype: str
        """
        return self._start_dts_begin

    @start_dts_begin.setter
    def start_dts_begin(self, start_dts_begin):
        """Sets the start_dts_begin of this CouponQuery.

        Start date begin  # noqa: E501

        :param start_dts_begin: The start_dts_begin of this CouponQuery.  # noqa: E501
        :type: str
        """

        self._start_dts_begin = start_dts_begin

    @property
    def start_dts_end(self):
        """Gets the start_dts_end of this CouponQuery.  # noqa: E501

        Start date end  # noqa: E501

        :return: The start_dts_end of this CouponQuery.  # noqa: E501
        :rtype: str
        """
        return self._start_dts_end

    @start_dts_end.setter
    def start_dts_end(self, start_dts_end):
        """Sets the start_dts_end of this CouponQuery.

        Start date end  # noqa: E501

        :param start_dts_end: The start_dts_end of this CouponQuery.  # noqa: E501
        :type: str
        """

        self._start_dts_end = start_dts_end

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CouponQuery, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CouponQuery):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
