# coding: utf-8

"""
    UltraCart Rest API V2

    This is the next generation UltraCart REST API...

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ItemShippingDestinationRestriction(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'country_code': 'str',
        'state': 'str',
        'validity': 'str'
    }

    attribute_map = {
        'country_code': 'country_code',
        'state': 'state',
        'validity': 'validity'
    }

    def __init__(self, country_code=None, state=None, validity=None):
        """
        ItemShippingDestinationRestriction - a model defined in Swagger
        """

        self._country_code = None
        self._state = None
        self._validity = None
        self.discriminator = None

        if country_code is not None:
          self.country_code = country_code
        if state is not None:
          self.state = state
        if validity is not None:
          self.validity = validity

    @property
    def country_code(self):
        """
        Gets the country_code of this ItemShippingDestinationRestriction.
        Country code (ISO-3166 two letter)

        :return: The country_code of this ItemShippingDestinationRestriction.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """
        Sets the country_code of this ItemShippingDestinationRestriction.
        Country code (ISO-3166 two letter)

        :param country_code: The country_code of this ItemShippingDestinationRestriction.
        :type: str
        """
        if country_code is not None and len(country_code) > 2:
            raise ValueError("Invalid value for `country_code`, length must be less than or equal to `2`")

        self._country_code = country_code

    @property
    def state(self):
        """
        Gets the state of this ItemShippingDestinationRestriction.
        State

        :return: The state of this ItemShippingDestinationRestriction.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this ItemShippingDestinationRestriction.
        State

        :param state: The state of this ItemShippingDestinationRestriction.
        :type: str
        """
        if state is not None and len(state) > 32:
            raise ValueError("Invalid value for `state`, length must be less than or equal to `32`")

        self._state = state

    @property
    def validity(self):
        """
        Gets the validity of this ItemShippingDestinationRestriction.
        Validity

        :return: The validity of this ItemShippingDestinationRestriction.
        :rtype: str
        """
        return self._validity

    @validity.setter
    def validity(self, validity):
        """
        Sets the validity of this ItemShippingDestinationRestriction.
        Validity

        :param validity: The validity of this ItemShippingDestinationRestriction.
        :type: str
        """
        allowed_values = ["valid only for", "invalid for"]
        if validity not in allowed_values:
            raise ValueError(
                "Invalid value for `validity` ({0}), must be one of {1}"
                .format(validity, allowed_values)
            )

        self._validity = validity

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ItemShippingDestinationRestriction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
