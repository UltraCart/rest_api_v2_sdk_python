# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ReportDataSource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'partition_date_column': 'str',
        'partition_date_safety_days': 'int',
        'partition_date_strategy': 'str',
        'schema': 'list[ReportDataSourceSchema]',
        'sql': 'str'
    }

    attribute_map = {
        'name': 'name',
        'partition_date_column': 'partition_date_column',
        'partition_date_safety_days': 'partition_date_safety_days',
        'partition_date_strategy': 'partition_date_strategy',
        'schema': 'schema',
        'sql': 'sql'
    }

    def __init__(self, name=None, partition_date_column=None, partition_date_safety_days=None, partition_date_strategy=None, schema=None, sql=None):  # noqa: E501
        """ReportDataSource - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._partition_date_column = None
        self._partition_date_safety_days = None
        self._partition_date_strategy = None
        self._schema = None
        self._sql = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if partition_date_column is not None:
            self.partition_date_column = partition_date_column
        if partition_date_safety_days is not None:
            self.partition_date_safety_days = partition_date_safety_days
        if partition_date_strategy is not None:
            self.partition_date_strategy = partition_date_strategy
        if schema is not None:
            self.schema = schema
        if sql is not None:
            self.sql = sql

    @property
    def name(self):
        """Gets the name of this ReportDataSource.  # noqa: E501


        :return: The name of this ReportDataSource.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ReportDataSource.


        :param name: The name of this ReportDataSource.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def partition_date_column(self):
        """Gets the partition_date_column of this ReportDataSource.  # noqa: E501


        :return: The partition_date_column of this ReportDataSource.  # noqa: E501
        :rtype: str
        """
        return self._partition_date_column

    @partition_date_column.setter
    def partition_date_column(self, partition_date_column):
        """Sets the partition_date_column of this ReportDataSource.


        :param partition_date_column: The partition_date_column of this ReportDataSource.  # noqa: E501
        :type: str
        """

        self._partition_date_column = partition_date_column

    @property
    def partition_date_safety_days(self):
        """Gets the partition_date_safety_days of this ReportDataSource.  # noqa: E501


        :return: The partition_date_safety_days of this ReportDataSource.  # noqa: E501
        :rtype: int
        """
        return self._partition_date_safety_days

    @partition_date_safety_days.setter
    def partition_date_safety_days(self, partition_date_safety_days):
        """Sets the partition_date_safety_days of this ReportDataSource.


        :param partition_date_safety_days: The partition_date_safety_days of this ReportDataSource.  # noqa: E501
        :type: int
        """

        self._partition_date_safety_days = partition_date_safety_days

    @property
    def partition_date_strategy(self):
        """Gets the partition_date_strategy of this ReportDataSource.  # noqa: E501

        The partition date strategy, defaults to weekly sunday  # noqa: E501

        :return: The partition_date_strategy of this ReportDataSource.  # noqa: E501
        :rtype: str
        """
        return self._partition_date_strategy

    @partition_date_strategy.setter
    def partition_date_strategy(self, partition_date_strategy):
        """Sets the partition_date_strategy of this ReportDataSource.

        The partition date strategy, defaults to weekly sunday  # noqa: E501

        :param partition_date_strategy: The partition_date_strategy of this ReportDataSource.  # noqa: E501
        :type: str
        """

        self._partition_date_strategy = partition_date_strategy

    @property
    def schema(self):
        """Gets the schema of this ReportDataSource.  # noqa: E501


        :return: The schema of this ReportDataSource.  # noqa: E501
        :rtype: list[ReportDataSourceSchema]
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """Sets the schema of this ReportDataSource.


        :param schema: The schema of this ReportDataSource.  # noqa: E501
        :type: list[ReportDataSourceSchema]
        """

        self._schema = schema

    @property
    def sql(self):
        """Gets the sql of this ReportDataSource.  # noqa: E501


        :return: The sql of this ReportDataSource.  # noqa: E501
        :rtype: str
        """
        return self._sql

    @sql.setter
    def sql(self, sql):
        """Sets the sql of this ReportDataSource.


        :param sql: The sql of this ReportDataSource.  # noqa: E501
        :type: str
        """

        self._sql = sql

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReportDataSource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportDataSource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
