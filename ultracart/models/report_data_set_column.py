# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ReportDataSetColumn(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_in': 'bool',
        'n': 'str',
        'vd': 'str',
        'vdt': 'str',
        'vn': 'float',
        'vs': 'str'
    }

    attribute_map = {
        '_in': 'in',
        'n': 'n',
        'vd': 'vd',
        'vdt': 'vdt',
        'vn': 'vn',
        'vs': 'vs'
    }

    def __init__(self, _in=None, n=None, vd=None, vdt=None, vn=None, vs=None):  # noqa: E501
        """ReportDataSetColumn - a model defined in Swagger"""  # noqa: E501

        self.__in = None
        self._n = None
        self._vd = None
        self._vdt = None
        self._vn = None
        self._vs = None
        self.discriminator = None

        if _in is not None:
            self._in = _in
        if n is not None:
            self.n = n
        if vd is not None:
            self.vd = vd
        if vdt is not None:
            self.vdt = vdt
        if vn is not None:
            self.vn = vn
        if vs is not None:
            self.vs = vs

    @property
    def _in(self):
        """Gets the _in of this ReportDataSetColumn.  # noqa: E501


        :return: The _in of this ReportDataSetColumn.  # noqa: E501
        :rtype: bool
        """
        return self.__in

    @_in.setter
    def _in(self, _in):
        """Sets the _in of this ReportDataSetColumn.


        :param _in: The _in of this ReportDataSetColumn.  # noqa: E501
        :type: bool
        """

        self.__in = _in

    @property
    def n(self):
        """Gets the n of this ReportDataSetColumn.  # noqa: E501


        :return: The n of this ReportDataSetColumn.  # noqa: E501
        :rtype: str
        """
        return self._n

    @n.setter
    def n(self, n):
        """Sets the n of this ReportDataSetColumn.


        :param n: The n of this ReportDataSetColumn.  # noqa: E501
        :type: str
        """

        self._n = n

    @property
    def vd(self):
        """Gets the vd of this ReportDataSetColumn.  # noqa: E501


        :return: The vd of this ReportDataSetColumn.  # noqa: E501
        :rtype: str
        """
        return self._vd

    @vd.setter
    def vd(self, vd):
        """Sets the vd of this ReportDataSetColumn.


        :param vd: The vd of this ReportDataSetColumn.  # noqa: E501
        :type: str
        """

        self._vd = vd

    @property
    def vdt(self):
        """Gets the vdt of this ReportDataSetColumn.  # noqa: E501


        :return: The vdt of this ReportDataSetColumn.  # noqa: E501
        :rtype: str
        """
        return self._vdt

    @vdt.setter
    def vdt(self, vdt):
        """Sets the vdt of this ReportDataSetColumn.


        :param vdt: The vdt of this ReportDataSetColumn.  # noqa: E501
        :type: str
        """

        self._vdt = vdt

    @property
    def vn(self):
        """Gets the vn of this ReportDataSetColumn.  # noqa: E501


        :return: The vn of this ReportDataSetColumn.  # noqa: E501
        :rtype: float
        """
        return self._vn

    @vn.setter
    def vn(self, vn):
        """Sets the vn of this ReportDataSetColumn.


        :param vn: The vn of this ReportDataSetColumn.  # noqa: E501
        :type: float
        """

        self._vn = vn

    @property
    def vs(self):
        """Gets the vs of this ReportDataSetColumn.  # noqa: E501


        :return: The vs of this ReportDataSetColumn.  # noqa: E501
        :rtype: str
        """
        return self._vs

    @vs.setter
    def vs(self, vs):
        """Sets the vs of this ReportDataSetColumn.


        :param vs: The vs of this ReportDataSetColumn.  # noqa: E501
        :type: str
        """

        self._vs = vs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReportDataSetColumn, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportDataSetColumn):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
