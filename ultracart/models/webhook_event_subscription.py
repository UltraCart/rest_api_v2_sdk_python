# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class WebhookEventSubscription(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'comments': 'str',
        'deprecated_flag': 'bool',
        'discontinued_flag': 'bool',
        'event_description': 'str',
        'event_name': 'str',
        'event_ruler': 'str',
        'expansion': 'str',
        'subscribed': 'bool',
        'supports_reflow': 'bool',
        'webhook_event_oid': 'int'
    }

    attribute_map = {
        'comments': 'comments',
        'deprecated_flag': 'deprecated_flag',
        'discontinued_flag': 'discontinued_flag',
        'event_description': 'event_description',
        'event_name': 'event_name',
        'event_ruler': 'event_ruler',
        'expansion': 'expansion',
        'subscribed': 'subscribed',
        'supports_reflow': 'supports_reflow',
        'webhook_event_oid': 'webhook_event_oid'
    }

    def __init__(self, comments=None, deprecated_flag=None, discontinued_flag=None, event_description=None, event_name=None, event_ruler=None, expansion=None, subscribed=None, supports_reflow=None, webhook_event_oid=None):  # noqa: E501
        """WebhookEventSubscription - a model defined in Swagger"""  # noqa: E501

        self._comments = None
        self._deprecated_flag = None
        self._discontinued_flag = None
        self._event_description = None
        self._event_name = None
        self._event_ruler = None
        self._expansion = None
        self._subscribed = None
        self._supports_reflow = None
        self._webhook_event_oid = None
        self.discriminator = None

        if comments is not None:
            self.comments = comments
        if deprecated_flag is not None:
            self.deprecated_flag = deprecated_flag
        if discontinued_flag is not None:
            self.discontinued_flag = discontinued_flag
        if event_description is not None:
            self.event_description = event_description
        if event_name is not None:
            self.event_name = event_name
        if event_ruler is not None:
            self.event_ruler = event_ruler
        if expansion is not None:
            self.expansion = expansion
        if subscribed is not None:
            self.subscribed = subscribed
        if supports_reflow is not None:
            self.supports_reflow = supports_reflow
        if webhook_event_oid is not None:
            self.webhook_event_oid = webhook_event_oid

    @property
    def comments(self):
        """Gets the comments of this WebhookEventSubscription.  # noqa: E501

        Comment about the event to provide further clarification to the end user  # noqa: E501

        :return: The comments of this WebhookEventSubscription.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this WebhookEventSubscription.

        Comment about the event to provide further clarification to the end user  # noqa: E501

        :param comments: The comments of this WebhookEventSubscription.  # noqa: E501
        :type: str
        """

        self._comments = comments

    @property
    def deprecated_flag(self):
        """Gets the deprecated_flag of this WebhookEventSubscription.  # noqa: E501

        True if the event is deprecated.  See the API change log for details on when it will be discontinued.  # noqa: E501

        :return: The deprecated_flag of this WebhookEventSubscription.  # noqa: E501
        :rtype: bool
        """
        return self._deprecated_flag

    @deprecated_flag.setter
    def deprecated_flag(self, deprecated_flag):
        """Sets the deprecated_flag of this WebhookEventSubscription.

        True if the event is deprecated.  See the API change log for details on when it will be discontinued.  # noqa: E501

        :param deprecated_flag: The deprecated_flag of this WebhookEventSubscription.  # noqa: E501
        :type: bool
        """

        self._deprecated_flag = deprecated_flag

    @property
    def discontinued_flag(self):
        """Gets the discontinued_flag of this WebhookEventSubscription.  # noqa: E501

        True if the event is discontinued.  See the API change log for details on migration details.  # noqa: E501

        :return: The discontinued_flag of this WebhookEventSubscription.  # noqa: E501
        :rtype: bool
        """
        return self._discontinued_flag

    @discontinued_flag.setter
    def discontinued_flag(self, discontinued_flag):
        """Sets the discontinued_flag of this WebhookEventSubscription.

        True if the event is discontinued.  See the API change log for details on migration details.  # noqa: E501

        :param discontinued_flag: The discontinued_flag of this WebhookEventSubscription.  # noqa: E501
        :type: bool
        """

        self._discontinued_flag = discontinued_flag

    @property
    def event_description(self):
        """Gets the event_description of this WebhookEventSubscription.  # noqa: E501

        Description of the event  # noqa: E501

        :return: The event_description of this WebhookEventSubscription.  # noqa: E501
        :rtype: str
        """
        return self._event_description

    @event_description.setter
    def event_description(self, event_description):
        """Sets the event_description of this WebhookEventSubscription.

        Description of the event  # noqa: E501

        :param event_description: The event_description of this WebhookEventSubscription.  # noqa: E501
        :type: str
        """

        self._event_description = event_description

    @property
    def event_name(self):
        """Gets the event_name of this WebhookEventSubscription.  # noqa: E501

        Event name  # noqa: E501

        :return: The event_name of this WebhookEventSubscription.  # noqa: E501
        :rtype: str
        """
        return self._event_name

    @event_name.setter
    def event_name(self, event_name):
        """Sets the event_name of this WebhookEventSubscription.

        Event name  # noqa: E501

        :param event_name: The event_name of this WebhookEventSubscription.  # noqa: E501
        :type: str
        """

        self._event_name = event_name

    @property
    def event_ruler(self):
        """Gets the event_ruler of this WebhookEventSubscription.  # noqa: E501

        Optional - Event ruler expression to filter events to.  Only events that match this Ruler expression will be transmitted to the webhook.  # noqa: E501

        :return: The event_ruler of this WebhookEventSubscription.  # noqa: E501
        :rtype: str
        """
        return self._event_ruler

    @event_ruler.setter
    def event_ruler(self, event_ruler):
        """Sets the event_ruler of this WebhookEventSubscription.

        Optional - Event ruler expression to filter events to.  Only events that match this Ruler expression will be transmitted to the webhook.  # noqa: E501

        :param event_ruler: The event_ruler of this WebhookEventSubscription.  # noqa: E501
        :type: str
        """

        self._event_ruler = event_ruler

    @property
    def expansion(self):
        """Gets the expansion of this WebhookEventSubscription.  # noqa: E501

        The expand string for the notification object.  See the individual resource _expand documentation for valid values.  # noqa: E501

        :return: The expansion of this WebhookEventSubscription.  # noqa: E501
        :rtype: str
        """
        return self._expansion

    @expansion.setter
    def expansion(self, expansion):
        """Sets the expansion of this WebhookEventSubscription.

        The expand string for the notification object.  See the individual resource _expand documentation for valid values.  # noqa: E501

        :param expansion: The expansion of this WebhookEventSubscription.  # noqa: E501
        :type: str
        """

        self._expansion = expansion

    @property
    def subscribed(self):
        """Gets the subscribed of this WebhookEventSubscription.  # noqa: E501

        True if this is event is subscribed to  # noqa: E501

        :return: The subscribed of this WebhookEventSubscription.  # noqa: E501
        :rtype: bool
        """
        return self._subscribed

    @subscribed.setter
    def subscribed(self, subscribed):
        """Sets the subscribed of this WebhookEventSubscription.

        True if this is event is subscribed to  # noqa: E501

        :param subscribed: The subscribed of this WebhookEventSubscription.  # noqa: E501
        :type: bool
        """

        self._subscribed = subscribed

    @property
    def supports_reflow(self):
        """Gets the supports_reflow of this WebhookEventSubscription.  # noqa: E501

        True if the event can be triggered to reflow existing records  # noqa: E501

        :return: The supports_reflow of this WebhookEventSubscription.  # noqa: E501
        :rtype: bool
        """
        return self._supports_reflow

    @supports_reflow.setter
    def supports_reflow(self, supports_reflow):
        """Sets the supports_reflow of this WebhookEventSubscription.

        True if the event can be triggered to reflow existing records  # noqa: E501

        :param supports_reflow: The supports_reflow of this WebhookEventSubscription.  # noqa: E501
        :type: bool
        """

        self._supports_reflow = supports_reflow

    @property
    def webhook_event_oid(self):
        """Gets the webhook_event_oid of this WebhookEventSubscription.  # noqa: E501

        The webhook event object identifier  # noqa: E501

        :return: The webhook_event_oid of this WebhookEventSubscription.  # noqa: E501
        :rtype: int
        """
        return self._webhook_event_oid

    @webhook_event_oid.setter
    def webhook_event_oid(self, webhook_event_oid):
        """Sets the webhook_event_oid of this WebhookEventSubscription.

        The webhook event object identifier  # noqa: E501

        :param webhook_event_oid: The webhook_event_oid of this WebhookEventSubscription.  # noqa: E501
        :type: int
        """

        self._webhook_event_oid = webhook_event_oid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WebhookEventSubscription, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WebhookEventSubscription):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
