# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AutoOrderItemSimpleSchedule(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'frequency': 'str',
        'item_id': 'str',
        'repeat_count': 'int'
    }

    attribute_map = {
        'frequency': 'frequency',
        'item_id': 'item_id',
        'repeat_count': 'repeat_count'
    }

    def __init__(self, frequency=None, item_id=None, repeat_count=None):
        """
        AutoOrderItemSimpleSchedule - a model defined in Swagger
        """

        self._frequency = None
        self._item_id = None
        self._repeat_count = None
        self.discriminator = None

        if frequency is not None:
          self.frequency = frequency
        if item_id is not None:
          self.item_id = item_id
        if repeat_count is not None:
          self.repeat_count = repeat_count

    @property
    def frequency(self):
        """
        Gets the frequency of this AutoOrderItemSimpleSchedule.
        Frequency of the rebill if not a fixed schedule

        :return: The frequency of this AutoOrderItemSimpleSchedule.
        :rtype: str
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """
        Sets the frequency of this AutoOrderItemSimpleSchedule.
        Frequency of the rebill if not a fixed schedule

        :param frequency: The frequency of this AutoOrderItemSimpleSchedule.
        :type: str
        """
        allowed_values = ["Weekly", "Biweekly", "Every...", "Every 10 Days", "Every 24 Days", "Every 28 Days", "Monthly", "Every 45 Days", "Every 2 Months", "Every 3 Months", "Every 4 Months", "Every 6 Months", "Yearly"]
        if frequency not in allowed_values:
            raise ValueError(
                "Invalid value for `frequency` ({0}), must be one of {1}"
                .format(frequency, allowed_values)
            )

        self._frequency = frequency

    @property
    def item_id(self):
        """
        Gets the item_id of this AutoOrderItemSimpleSchedule.
        Item ID that should rebill

        :return: The item_id of this AutoOrderItemSimpleSchedule.
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """
        Sets the item_id of this AutoOrderItemSimpleSchedule.
        Item ID that should rebill

        :param item_id: The item_id of this AutoOrderItemSimpleSchedule.
        :type: str
        """

        self._item_id = item_id

    @property
    def repeat_count(self):
        """
        Gets the repeat_count of this AutoOrderItemSimpleSchedule.
        The number of times this simple schedule is configured for

        :return: The repeat_count of this AutoOrderItemSimpleSchedule.
        :rtype: int
        """
        return self._repeat_count

    @repeat_count.setter
    def repeat_count(self, repeat_count):
        """
        Sets the repeat_count of this AutoOrderItemSimpleSchedule.
        The number of times this simple schedule is configured for

        :param repeat_count: The repeat_count of this AutoOrderItemSimpleSchedule.
        :type: int
        """

        self._repeat_count = repeat_count

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AutoOrderItemSimpleSchedule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
