# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class HitPageView(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bounce': 'bool',
        'meta_data': 'list[HitPageViewMetaData]',
        'method': 'str',
        'prefetch': 'bool',
        'query': 'str',
        'recording': 'bool',
        'redirect': 'bool',
        'referrer': 'str',
        'time_on_page': 'float',
        'title': 'str',
        'url': 'str'
    }

    attribute_map = {
        'bounce': 'bounce',
        'meta_data': 'meta_data',
        'method': 'method',
        'prefetch': 'prefetch',
        'query': 'query',
        'recording': 'recording',
        'redirect': 'redirect',
        'referrer': 'referrer',
        'time_on_page': 'time_on_page',
        'title': 'title',
        'url': 'url'
    }

    def __init__(self, bounce=None, meta_data=None, method=None, prefetch=None, query=None, recording=None, redirect=None, referrer=None, time_on_page=None, title=None, url=None):  # noqa: E501
        """HitPageView - a model defined in Swagger"""  # noqa: E501

        self._bounce = None
        self._meta_data = None
        self._method = None
        self._prefetch = None
        self._query = None
        self._recording = None
        self._redirect = None
        self._referrer = None
        self._time_on_page = None
        self._title = None
        self._url = None
        self.discriminator = None

        if bounce is not None:
            self.bounce = bounce
        if meta_data is not None:
            self.meta_data = meta_data
        if method is not None:
            self.method = method
        if prefetch is not None:
            self.prefetch = prefetch
        if query is not None:
            self.query = query
        if recording is not None:
            self.recording = recording
        if redirect is not None:
            self.redirect = redirect
        if referrer is not None:
            self.referrer = referrer
        if time_on_page is not None:
            self.time_on_page = time_on_page
        if title is not None:
            self.title = title
        if url is not None:
            self.url = url

    @property
    def bounce(self):
        """Gets the bounce of this HitPageView.  # noqa: E501


        :return: The bounce of this HitPageView.  # noqa: E501
        :rtype: bool
        """
        return self._bounce

    @bounce.setter
    def bounce(self, bounce):
        """Sets the bounce of this HitPageView.


        :param bounce: The bounce of this HitPageView.  # noqa: E501
        :type: bool
        """

        self._bounce = bounce

    @property
    def meta_data(self):
        """Gets the meta_data of this HitPageView.  # noqa: E501


        :return: The meta_data of this HitPageView.  # noqa: E501
        :rtype: list[HitPageViewMetaData]
        """
        return self._meta_data

    @meta_data.setter
    def meta_data(self, meta_data):
        """Sets the meta_data of this HitPageView.


        :param meta_data: The meta_data of this HitPageView.  # noqa: E501
        :type: list[HitPageViewMetaData]
        """

        self._meta_data = meta_data

    @property
    def method(self):
        """Gets the method of this HitPageView.  # noqa: E501


        :return: The method of this HitPageView.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this HitPageView.


        :param method: The method of this HitPageView.  # noqa: E501
        :type: str
        """

        self._method = method

    @property
    def prefetch(self):
        """Gets the prefetch of this HitPageView.  # noqa: E501


        :return: The prefetch of this HitPageView.  # noqa: E501
        :rtype: bool
        """
        return self._prefetch

    @prefetch.setter
    def prefetch(self, prefetch):
        """Sets the prefetch of this HitPageView.


        :param prefetch: The prefetch of this HitPageView.  # noqa: E501
        :type: bool
        """

        self._prefetch = prefetch

    @property
    def query(self):
        """Gets the query of this HitPageView.  # noqa: E501


        :return: The query of this HitPageView.  # noqa: E501
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this HitPageView.


        :param query: The query of this HitPageView.  # noqa: E501
        :type: str
        """

        self._query = query

    @property
    def recording(self):
        """Gets the recording of this HitPageView.  # noqa: E501


        :return: The recording of this HitPageView.  # noqa: E501
        :rtype: bool
        """
        return self._recording

    @recording.setter
    def recording(self, recording):
        """Sets the recording of this HitPageView.


        :param recording: The recording of this HitPageView.  # noqa: E501
        :type: bool
        """

        self._recording = recording

    @property
    def redirect(self):
        """Gets the redirect of this HitPageView.  # noqa: E501


        :return: The redirect of this HitPageView.  # noqa: E501
        :rtype: bool
        """
        return self._redirect

    @redirect.setter
    def redirect(self, redirect):
        """Sets the redirect of this HitPageView.


        :param redirect: The redirect of this HitPageView.  # noqa: E501
        :type: bool
        """

        self._redirect = redirect

    @property
    def referrer(self):
        """Gets the referrer of this HitPageView.  # noqa: E501


        :return: The referrer of this HitPageView.  # noqa: E501
        :rtype: str
        """
        return self._referrer

    @referrer.setter
    def referrer(self, referrer):
        """Sets the referrer of this HitPageView.


        :param referrer: The referrer of this HitPageView.  # noqa: E501
        :type: str
        """

        self._referrer = referrer

    @property
    def time_on_page(self):
        """Gets the time_on_page of this HitPageView.  # noqa: E501


        :return: The time_on_page of this HitPageView.  # noqa: E501
        :rtype: float
        """
        return self._time_on_page

    @time_on_page.setter
    def time_on_page(self, time_on_page):
        """Sets the time_on_page of this HitPageView.


        :param time_on_page: The time_on_page of this HitPageView.  # noqa: E501
        :type: float
        """

        self._time_on_page = time_on_page

    @property
    def title(self):
        """Gets the title of this HitPageView.  # noqa: E501


        :return: The title of this HitPageView.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this HitPageView.


        :param title: The title of this HitPageView.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def url(self):
        """Gets the url of this HitPageView.  # noqa: E501


        :return: The url of this HitPageView.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this HitPageView.


        :param url: The url of this HitPageView.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HitPageView, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HitPageView):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
