# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class EmailTemplate(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'container_cjson': 'str',
        'description': 'str',
        'email_template_oid': 'int',
        'email_template_vm_path': 'str',
        'merchant_id': 'str',
        'name': 'str',
        'preview_amazon_listing_key': 'str',
        'sort_order': 'int',
        'storefront_oid': 'int',
        'system': 'bool',
        'trigger_type': 'str'
    }

    attribute_map = {
        'container_cjson': 'container_cjson',
        'description': 'description',
        'email_template_oid': 'email_template_oid',
        'email_template_vm_path': 'email_template_vm_path',
        'merchant_id': 'merchant_id',
        'name': 'name',
        'preview_amazon_listing_key': 'preview_amazon_listing_key',
        'sort_order': 'sort_order',
        'storefront_oid': 'storefront_oid',
        'system': 'system',
        'trigger_type': 'trigger_type'
    }

    def __init__(self, container_cjson=None, description=None, email_template_oid=None, email_template_vm_path=None, merchant_id=None, name=None, preview_amazon_listing_key=None, sort_order=None, storefront_oid=None, system=None, trigger_type=None):
        """
        EmailTemplate - a model defined in Swagger
        """

        self._container_cjson = None
        self._description = None
        self._email_template_oid = None
        self._email_template_vm_path = None
        self._merchant_id = None
        self._name = None
        self._preview_amazon_listing_key = None
        self._sort_order = None
        self._storefront_oid = None
        self._system = None
        self._trigger_type = None
        self.discriminator = None

        if container_cjson is not None:
          self.container_cjson = container_cjson
        if description is not None:
          self.description = description
        if email_template_oid is not None:
          self.email_template_oid = email_template_oid
        if email_template_vm_path is not None:
          self.email_template_vm_path = email_template_vm_path
        if merchant_id is not None:
          self.merchant_id = merchant_id
        if name is not None:
          self.name = name
        if preview_amazon_listing_key is not None:
          self.preview_amazon_listing_key = preview_amazon_listing_key
        if sort_order is not None:
          self.sort_order = sort_order
        if storefront_oid is not None:
          self.storefront_oid = storefront_oid
        if system is not None:
          self.system = system
        if trigger_type is not None:
          self.trigger_type = trigger_type

    @property
    def container_cjson(self):
        """
        Gets the container_cjson of this EmailTemplate.
        Container cjson

        :return: The container_cjson of this EmailTemplate.
        :rtype: str
        """
        return self._container_cjson

    @container_cjson.setter
    def container_cjson(self, container_cjson):
        """
        Sets the container_cjson of this EmailTemplate.
        Container cjson

        :param container_cjson: The container_cjson of this EmailTemplate.
        :type: str
        """

        self._container_cjson = container_cjson

    @property
    def description(self):
        """
        Gets the description of this EmailTemplate.
        Description of email template

        :return: The description of this EmailTemplate.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this EmailTemplate.
        Description of email template

        :param description: The description of this EmailTemplate.
        :type: str
        """

        self._description = description

    @property
    def email_template_oid(self):
        """
        Gets the email_template_oid of this EmailTemplate.
        Email template oid

        :return: The email_template_oid of this EmailTemplate.
        :rtype: int
        """
        return self._email_template_oid

    @email_template_oid.setter
    def email_template_oid(self, email_template_oid):
        """
        Sets the email_template_oid of this EmailTemplate.
        Email template oid

        :param email_template_oid: The email_template_oid of this EmailTemplate.
        :type: int
        """

        self._email_template_oid = email_template_oid

    @property
    def email_template_vm_path(self):
        """
        Gets the email_template_vm_path of this EmailTemplate.
        Email Template VM Path

        :return: The email_template_vm_path of this EmailTemplate.
        :rtype: str
        """
        return self._email_template_vm_path

    @email_template_vm_path.setter
    def email_template_vm_path(self, email_template_vm_path):
        """
        Sets the email_template_vm_path of this EmailTemplate.
        Email Template VM Path

        :param email_template_vm_path: The email_template_vm_path of this EmailTemplate.
        :type: str
        """

        self._email_template_vm_path = email_template_vm_path

    @property
    def merchant_id(self):
        """
        Gets the merchant_id of this EmailTemplate.
        Merchant ID

        :return: The merchant_id of this EmailTemplate.
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """
        Sets the merchant_id of this EmailTemplate.
        Merchant ID

        :param merchant_id: The merchant_id of this EmailTemplate.
        :type: str
        """

        self._merchant_id = merchant_id

    @property
    def name(self):
        """
        Gets the name of this EmailTemplate.
        Name of email template

        :return: The name of this EmailTemplate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this EmailTemplate.
        Name of email template

        :param name: The name of this EmailTemplate.
        :type: str
        """
        if name is not None and len(name) > 250:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `250`")

        self._name = name

    @property
    def preview_amazon_listing_key(self):
        """
        Gets the preview_amazon_listing_key of this EmailTemplate.
        Amazon key for preview png image

        :return: The preview_amazon_listing_key of this EmailTemplate.
        :rtype: str
        """
        return self._preview_amazon_listing_key

    @preview_amazon_listing_key.setter
    def preview_amazon_listing_key(self, preview_amazon_listing_key):
        """
        Sets the preview_amazon_listing_key of this EmailTemplate.
        Amazon key for preview png image

        :param preview_amazon_listing_key: The preview_amazon_listing_key of this EmailTemplate.
        :type: str
        """
        if preview_amazon_listing_key is not None and len(preview_amazon_listing_key) > 250:
            raise ValueError("Invalid value for `preview_amazon_listing_key`, length must be less than or equal to `250`")

        self._preview_amazon_listing_key = preview_amazon_listing_key

    @property
    def sort_order(self):
        """
        Gets the sort_order of this EmailTemplate.
        Sort order (optional)

        :return: The sort_order of this EmailTemplate.
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """
        Sets the sort_order of this EmailTemplate.
        Sort order (optional)

        :param sort_order: The sort_order of this EmailTemplate.
        :type: int
        """

        self._sort_order = sort_order

    @property
    def storefront_oid(self):
        """
        Gets the storefront_oid of this EmailTemplate.
        StoreFront oid

        :return: The storefront_oid of this EmailTemplate.
        :rtype: int
        """
        return self._storefront_oid

    @storefront_oid.setter
    def storefront_oid(self, storefront_oid):
        """
        Sets the storefront_oid of this EmailTemplate.
        StoreFront oid

        :param storefront_oid: The storefront_oid of this EmailTemplate.
        :type: int
        """

        self._storefront_oid = storefront_oid

    @property
    def system(self):
        """
        Gets the system of this EmailTemplate.
        True if this email template is system-wide,false if merchant specific

        :return: The system of this EmailTemplate.
        :rtype: bool
        """
        return self._system

    @system.setter
    def system(self, system):
        """
        Sets the system of this EmailTemplate.
        True if this email template is system-wide,false if merchant specific

        :param system: The system of this EmailTemplate.
        :type: bool
        """

        self._system = system

    @property
    def trigger_type(self):
        """
        Gets the trigger_type of this EmailTemplate.
        Trigger type

        :return: The trigger_type of this EmailTemplate.
        :rtype: str
        """
        return self._trigger_type

    @trigger_type.setter
    def trigger_type(self, trigger_type):
        """
        Sets the trigger_type of this EmailTemplate.
        Trigger type

        :param trigger_type: The trigger_type of this EmailTemplate.
        :type: str
        """
        if trigger_type is not None and len(trigger_type) > 100:
            raise ValueError("Invalid value for `trigger_type`, length must be less than or equal to `100`")

        self._trigger_type = trigger_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, EmailTemplate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
