# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CustomerSoftwareEntitlement(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'activation_code': 'str',
        'activation_dts': 'str',
        'customer_software_entitlement_oid': 'int',
        'expiration_dts': 'str',
        'purchased_via_item_description': 'str',
        'purchased_via_item_id': 'str',
        'purchased_via_order_id': 'str',
        'software_sku': 'str'
    }

    attribute_map = {
        'activation_code': 'activation_code',
        'activation_dts': 'activation_dts',
        'customer_software_entitlement_oid': 'customer_software_entitlement_oid',
        'expiration_dts': 'expiration_dts',
        'purchased_via_item_description': 'purchased_via_item_description',
        'purchased_via_item_id': 'purchased_via_item_id',
        'purchased_via_order_id': 'purchased_via_order_id',
        'software_sku': 'software_sku'
    }

    def __init__(self, activation_code=None, activation_dts=None, customer_software_entitlement_oid=None, expiration_dts=None, purchased_via_item_description=None, purchased_via_item_id=None, purchased_via_order_id=None, software_sku=None):
        """
        CustomerSoftwareEntitlement - a model defined in Swagger
        """

        self._activation_code = None
        self._activation_dts = None
        self._customer_software_entitlement_oid = None
        self._expiration_dts = None
        self._purchased_via_item_description = None
        self._purchased_via_item_id = None
        self._purchased_via_order_id = None
        self._software_sku = None
        self.discriminator = None

        if activation_code is not None:
          self.activation_code = activation_code
        if activation_dts is not None:
          self.activation_dts = activation_dts
        if customer_software_entitlement_oid is not None:
          self.customer_software_entitlement_oid = customer_software_entitlement_oid
        if expiration_dts is not None:
          self.expiration_dts = expiration_dts
        if purchased_via_item_description is not None:
          self.purchased_via_item_description = purchased_via_item_description
        if purchased_via_item_id is not None:
          self.purchased_via_item_id = purchased_via_item_id
        if purchased_via_order_id is not None:
          self.purchased_via_order_id = purchased_via_order_id
        if software_sku is not None:
          self.software_sku = software_sku

    @property
    def activation_code(self):
        """
        Gets the activation_code of this CustomerSoftwareEntitlement.
        Activation Code Associated with the software

        :return: The activation_code of this CustomerSoftwareEntitlement.
        :rtype: str
        """
        return self._activation_code

    @activation_code.setter
    def activation_code(self, activation_code):
        """
        Sets the activation_code of this CustomerSoftwareEntitlement.
        Activation Code Associated with the software

        :param activation_code: The activation_code of this CustomerSoftwareEntitlement.
        :type: str
        """
        if activation_code is not None and len(activation_code) > 50:
            raise ValueError("Invalid value for `activation_code`, length must be less than or equal to `50`")

        self._activation_code = activation_code

    @property
    def activation_dts(self):
        """
        Gets the activation_dts of this CustomerSoftwareEntitlement.
        Date/time when the activation code was created

        :return: The activation_dts of this CustomerSoftwareEntitlement.
        :rtype: str
        """
        return self._activation_dts

    @activation_dts.setter
    def activation_dts(self, activation_dts):
        """
        Sets the activation_dts of this CustomerSoftwareEntitlement.
        Date/time when the activation code was created

        :param activation_dts: The activation_dts of this CustomerSoftwareEntitlement.
        :type: str
        """

        self._activation_dts = activation_dts

    @property
    def customer_software_entitlement_oid(self):
        """
        Gets the customer_software_entitlement_oid of this CustomerSoftwareEntitlement.
        Customer profile software entitlement object identifier

        :return: The customer_software_entitlement_oid of this CustomerSoftwareEntitlement.
        :rtype: int
        """
        return self._customer_software_entitlement_oid

    @customer_software_entitlement_oid.setter
    def customer_software_entitlement_oid(self, customer_software_entitlement_oid):
        """
        Sets the customer_software_entitlement_oid of this CustomerSoftwareEntitlement.
        Customer profile software entitlement object identifier

        :param customer_software_entitlement_oid: The customer_software_entitlement_oid of this CustomerSoftwareEntitlement.
        :type: int
        """

        self._customer_software_entitlement_oid = customer_software_entitlement_oid

    @property
    def expiration_dts(self):
        """
        Gets the expiration_dts of this CustomerSoftwareEntitlement.
        Date/time when the activation code will expire

        :return: The expiration_dts of this CustomerSoftwareEntitlement.
        :rtype: str
        """
        return self._expiration_dts

    @expiration_dts.setter
    def expiration_dts(self, expiration_dts):
        """
        Sets the expiration_dts of this CustomerSoftwareEntitlement.
        Date/time when the activation code will expire

        :param expiration_dts: The expiration_dts of this CustomerSoftwareEntitlement.
        :type: str
        """

        self._expiration_dts = expiration_dts

    @property
    def purchased_via_item_description(self):
        """
        Gets the purchased_via_item_description of this CustomerSoftwareEntitlement.
        Item description used to purchase this software.

        :return: The purchased_via_item_description of this CustomerSoftwareEntitlement.
        :rtype: str
        """
        return self._purchased_via_item_description

    @purchased_via_item_description.setter
    def purchased_via_item_description(self, purchased_via_item_description):
        """
        Sets the purchased_via_item_description of this CustomerSoftwareEntitlement.
        Item description used to purchase this software.

        :param purchased_via_item_description: The purchased_via_item_description of this CustomerSoftwareEntitlement.
        :type: str
        """
        if purchased_via_item_description is not None and len(purchased_via_item_description) > 512:
            raise ValueError("Invalid value for `purchased_via_item_description`, length must be less than or equal to `512`")

        self._purchased_via_item_description = purchased_via_item_description

    @property
    def purchased_via_item_id(self):
        """
        Gets the purchased_via_item_id of this CustomerSoftwareEntitlement.
        Item ID used to purchase this software.

        :return: The purchased_via_item_id of this CustomerSoftwareEntitlement.
        :rtype: str
        """
        return self._purchased_via_item_id

    @purchased_via_item_id.setter
    def purchased_via_item_id(self, purchased_via_item_id):
        """
        Sets the purchased_via_item_id of this CustomerSoftwareEntitlement.
        Item ID used to purchase this software.

        :param purchased_via_item_id: The purchased_via_item_id of this CustomerSoftwareEntitlement.
        :type: str
        """
        if purchased_via_item_id is not None and len(purchased_via_item_id) > 20:
            raise ValueError("Invalid value for `purchased_via_item_id`, length must be less than or equal to `20`")

        self._purchased_via_item_id = purchased_via_item_id

    @property
    def purchased_via_order_id(self):
        """
        Gets the purchased_via_order_id of this CustomerSoftwareEntitlement.
        Order ID used to purchase this software.

        :return: The purchased_via_order_id of this CustomerSoftwareEntitlement.
        :rtype: str
        """
        return self._purchased_via_order_id

    @purchased_via_order_id.setter
    def purchased_via_order_id(self, purchased_via_order_id):
        """
        Sets the purchased_via_order_id of this CustomerSoftwareEntitlement.
        Order ID used to purchase this software.

        :param purchased_via_order_id: The purchased_via_order_id of this CustomerSoftwareEntitlement.
        :type: str
        """
        if purchased_via_order_id is not None and len(purchased_via_order_id) > 30:
            raise ValueError("Invalid value for `purchased_via_order_id`, length must be less than or equal to `30`")

        self._purchased_via_order_id = purchased_via_order_id

    @property
    def software_sku(self):
        """
        Gets the software_sku of this CustomerSoftwareEntitlement.
        SKU of the software

        :return: The software_sku of this CustomerSoftwareEntitlement.
        :rtype: str
        """
        return self._software_sku

    @software_sku.setter
    def software_sku(self, software_sku):
        """
        Sets the software_sku of this CustomerSoftwareEntitlement.
        SKU of the software

        :param software_sku: The software_sku of this CustomerSoftwareEntitlement.
        :type: str
        """
        if software_sku is not None and len(software_sku) > 30:
            raise ValueError("Invalid value for `software_sku`, length must be less than or equal to `30`")

        self._software_sku = software_sku

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CustomerSoftwareEntitlement):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
