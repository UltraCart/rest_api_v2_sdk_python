# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ScreenRecordingFilterGeoDistance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'distance': 'int',
        'distance_uom': 'str',
        'from_address': 'str',
        'lat': 'float',
        'lon': 'float'
    }

    attribute_map = {
        'distance': 'distance',
        'distance_uom': 'distance_uom',
        'from_address': 'from_address',
        'lat': 'lat',
        'lon': 'lon'
    }

    def __init__(self, distance=None, distance_uom=None, from_address=None, lat=None, lon=None):  # noqa: E501
        """ScreenRecordingFilterGeoDistance - a model defined in Swagger"""  # noqa: E501

        self._distance = None
        self._distance_uom = None
        self._from_address = None
        self._lat = None
        self._lon = None
        self.discriminator = None

        if distance is not None:
            self.distance = distance
        if distance_uom is not None:
            self.distance_uom = distance_uom
        if from_address is not None:
            self.from_address = from_address
        if lat is not None:
            self.lat = lat
        if lon is not None:
            self.lon = lon

    @property
    def distance(self):
        """Gets the distance of this ScreenRecordingFilterGeoDistance.  # noqa: E501


        :return: The distance of this ScreenRecordingFilterGeoDistance.  # noqa: E501
        :rtype: int
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this ScreenRecordingFilterGeoDistance.


        :param distance: The distance of this ScreenRecordingFilterGeoDistance.  # noqa: E501
        :type: int
        """

        self._distance = distance

    @property
    def distance_uom(self):
        """Gets the distance_uom of this ScreenRecordingFilterGeoDistance.  # noqa: E501


        :return: The distance_uom of this ScreenRecordingFilterGeoDistance.  # noqa: E501
        :rtype: str
        """
        return self._distance_uom

    @distance_uom.setter
    def distance_uom(self, distance_uom):
        """Sets the distance_uom of this ScreenRecordingFilterGeoDistance.


        :param distance_uom: The distance_uom of this ScreenRecordingFilterGeoDistance.  # noqa: E501
        :type: str
        """

        self._distance_uom = distance_uom

    @property
    def from_address(self):
        """Gets the from_address of this ScreenRecordingFilterGeoDistance.  # noqa: E501


        :return: The from_address of this ScreenRecordingFilterGeoDistance.  # noqa: E501
        :rtype: str
        """
        return self._from_address

    @from_address.setter
    def from_address(self, from_address):
        """Sets the from_address of this ScreenRecordingFilterGeoDistance.


        :param from_address: The from_address of this ScreenRecordingFilterGeoDistance.  # noqa: E501
        :type: str
        """

        self._from_address = from_address

    @property
    def lat(self):
        """Gets the lat of this ScreenRecordingFilterGeoDistance.  # noqa: E501


        :return: The lat of this ScreenRecordingFilterGeoDistance.  # noqa: E501
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this ScreenRecordingFilterGeoDistance.


        :param lat: The lat of this ScreenRecordingFilterGeoDistance.  # noqa: E501
        :type: float
        """

        self._lat = lat

    @property
    def lon(self):
        """Gets the lon of this ScreenRecordingFilterGeoDistance.  # noqa: E501


        :return: The lon of this ScreenRecordingFilterGeoDistance.  # noqa: E501
        :rtype: float
        """
        return self._lon

    @lon.setter
    def lon(self, lon):
        """Sets the lon of this ScreenRecordingFilterGeoDistance.


        :param lon: The lon of this ScreenRecordingFilterGeoDistance.  # noqa: E501
        :type: float
        """

        self._lon = lon

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScreenRecordingFilterGeoDistance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScreenRecordingFilterGeoDistance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
