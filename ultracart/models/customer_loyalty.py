# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CustomerLoyalty(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'current_points': 'int',
        'ledger_entries': 'list[CustomerLoyaltyLedger]',
        'pending_points': 'int',
        'redemptions': 'list[CustomerLoyaltyRedemption]'
    }

    attribute_map = {
        'current_points': 'current_points',
        'ledger_entries': 'ledger_entries',
        'pending_points': 'pending_points',
        'redemptions': 'redemptions'
    }

    def __init__(self, current_points=None, ledger_entries=None, pending_points=None, redemptions=None):  # noqa: E501
        """CustomerLoyalty - a model defined in Swagger"""  # noqa: E501

        self._current_points = None
        self._ledger_entries = None
        self._pending_points = None
        self._redemptions = None
        self.discriminator = None

        if current_points is not None:
            self.current_points = current_points
        if ledger_entries is not None:
            self.ledger_entries = ledger_entries
        if pending_points is not None:
            self.pending_points = pending_points
        if redemptions is not None:
            self.redemptions = redemptions

    @property
    def current_points(self):
        """Gets the current_points of this CustomerLoyalty.  # noqa: E501

        Current Points  # noqa: E501

        :return: The current_points of this CustomerLoyalty.  # noqa: E501
        :rtype: int
        """
        return self._current_points

    @current_points.setter
    def current_points(self, current_points):
        """Sets the current_points of this CustomerLoyalty.

        Current Points  # noqa: E501

        :param current_points: The current_points of this CustomerLoyalty.  # noqa: E501
        :type: int
        """

        self._current_points = current_points

    @property
    def ledger_entries(self):
        """Gets the ledger_entries of this CustomerLoyalty.  # noqa: E501

        Ledger entries  # noqa: E501

        :return: The ledger_entries of this CustomerLoyalty.  # noqa: E501
        :rtype: list[CustomerLoyaltyLedger]
        """
        return self._ledger_entries

    @ledger_entries.setter
    def ledger_entries(self, ledger_entries):
        """Sets the ledger_entries of this CustomerLoyalty.

        Ledger entries  # noqa: E501

        :param ledger_entries: The ledger_entries of this CustomerLoyalty.  # noqa: E501
        :type: list[CustomerLoyaltyLedger]
        """

        self._ledger_entries = ledger_entries

    @property
    def pending_points(self):
        """Gets the pending_points of this CustomerLoyalty.  # noqa: E501

        Pending Points  # noqa: E501

        :return: The pending_points of this CustomerLoyalty.  # noqa: E501
        :rtype: int
        """
        return self._pending_points

    @pending_points.setter
    def pending_points(self, pending_points):
        """Sets the pending_points of this CustomerLoyalty.

        Pending Points  # noqa: E501

        :param pending_points: The pending_points of this CustomerLoyalty.  # noqa: E501
        :type: int
        """

        self._pending_points = pending_points

    @property
    def redemptions(self):
        """Gets the redemptions of this CustomerLoyalty.  # noqa: E501

        Redemptions  # noqa: E501

        :return: The redemptions of this CustomerLoyalty.  # noqa: E501
        :rtype: list[CustomerLoyaltyRedemption]
        """
        return self._redemptions

    @redemptions.setter
    def redemptions(self, redemptions):
        """Sets the redemptions of this CustomerLoyalty.

        Redemptions  # noqa: E501

        :param redemptions: The redemptions of this CustomerLoyalty.  # noqa: E501
        :type: list[CustomerLoyaltyRedemption]
        """

        self._redemptions = redemptions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomerLoyalty, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomerLoyalty):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
