# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AffiliateClick(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'affiliate_click_oid': 'int',
        'affiliate_link_oid': 'int',
        'affiliate_oid': 'int',
        'click_dts': 'str',
        'ip_address': 'str',
        'landing_page': 'str',
        'landing_page_query_string': 'str',
        'link': 'AffiliateLink',
        'referrer': 'str',
        'referrer_query_string': 'str',
        'sub_id': 'str'
    }

    attribute_map = {
        'affiliate_click_oid': 'affiliate_click_oid',
        'affiliate_link_oid': 'affiliate_link_oid',
        'affiliate_oid': 'affiliate_oid',
        'click_dts': 'click_dts',
        'ip_address': 'ip_address',
        'landing_page': 'landing_page',
        'landing_page_query_string': 'landing_page_query_string',
        'link': 'link',
        'referrer': 'referrer',
        'referrer_query_string': 'referrer_query_string',
        'sub_id': 'sub_id'
    }

    def __init__(self, affiliate_click_oid=None, affiliate_link_oid=None, affiliate_oid=None, click_dts=None, ip_address=None, landing_page=None, landing_page_query_string=None, link=None, referrer=None, referrer_query_string=None, sub_id=None):  # noqa: E501
        """AffiliateClick - a model defined in Swagger"""  # noqa: E501

        self._affiliate_click_oid = None
        self._affiliate_link_oid = None
        self._affiliate_oid = None
        self._click_dts = None
        self._ip_address = None
        self._landing_page = None
        self._landing_page_query_string = None
        self._link = None
        self._referrer = None
        self._referrer_query_string = None
        self._sub_id = None
        self.discriminator = None

        if affiliate_click_oid is not None:
            self.affiliate_click_oid = affiliate_click_oid
        if affiliate_link_oid is not None:
            self.affiliate_link_oid = affiliate_link_oid
        if affiliate_oid is not None:
            self.affiliate_oid = affiliate_oid
        if click_dts is not None:
            self.click_dts = click_dts
        if ip_address is not None:
            self.ip_address = ip_address
        if landing_page is not None:
            self.landing_page = landing_page
        if landing_page_query_string is not None:
            self.landing_page_query_string = landing_page_query_string
        if link is not None:
            self.link = link
        if referrer is not None:
            self.referrer = referrer
        if referrer_query_string is not None:
            self.referrer_query_string = referrer_query_string
        if sub_id is not None:
            self.sub_id = sub_id

    @property
    def affiliate_click_oid(self):
        """Gets the affiliate_click_oid of this AffiliateClick.  # noqa: E501

        Unique object identifier for this click  # noqa: E501

        :return: The affiliate_click_oid of this AffiliateClick.  # noqa: E501
        :rtype: int
        """
        return self._affiliate_click_oid

    @affiliate_click_oid.setter
    def affiliate_click_oid(self, affiliate_click_oid):
        """Sets the affiliate_click_oid of this AffiliateClick.

        Unique object identifier for this click  # noqa: E501

        :param affiliate_click_oid: The affiliate_click_oid of this AffiliateClick.  # noqa: E501
        :type: int
        """

        self._affiliate_click_oid = affiliate_click_oid

    @property
    def affiliate_link_oid(self):
        """Gets the affiliate_link_oid of this AffiliateClick.  # noqa: E501

        Unique object identifier for for the link that this click is associated with  # noqa: E501

        :return: The affiliate_link_oid of this AffiliateClick.  # noqa: E501
        :rtype: int
        """
        return self._affiliate_link_oid

    @affiliate_link_oid.setter
    def affiliate_link_oid(self, affiliate_link_oid):
        """Sets the affiliate_link_oid of this AffiliateClick.

        Unique object identifier for for the link that this click is associated with  # noqa: E501

        :param affiliate_link_oid: The affiliate_link_oid of this AffiliateClick.  # noqa: E501
        :type: int
        """

        self._affiliate_link_oid = affiliate_link_oid

    @property
    def affiliate_oid(self):
        """Gets the affiliate_oid of this AffiliateClick.  # noqa: E501

        Affiliate object ID associated with this click  # noqa: E501

        :return: The affiliate_oid of this AffiliateClick.  # noqa: E501
        :rtype: int
        """
        return self._affiliate_oid

    @affiliate_oid.setter
    def affiliate_oid(self, affiliate_oid):
        """Sets the affiliate_oid of this AffiliateClick.

        Affiliate object ID associated with this click  # noqa: E501

        :param affiliate_oid: The affiliate_oid of this AffiliateClick.  # noqa: E501
        :type: int
        """

        self._affiliate_oid = affiliate_oid

    @property
    def click_dts(self):
        """Gets the click_dts of this AffiliateClick.  # noqa: E501

        Date/time that the click was made  # noqa: E501

        :return: The click_dts of this AffiliateClick.  # noqa: E501
        :rtype: str
        """
        return self._click_dts

    @click_dts.setter
    def click_dts(self, click_dts):
        """Sets the click_dts of this AffiliateClick.

        Date/time that the click was made  # noqa: E501

        :param click_dts: The click_dts of this AffiliateClick.  # noqa: E501
        :type: str
        """

        self._click_dts = click_dts

    @property
    def ip_address(self):
        """Gets the ip_address of this AffiliateClick.  # noqa: E501

        IP address that generated the click  # noqa: E501

        :return: The ip_address of this AffiliateClick.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this AffiliateClick.

        IP address that generated the click  # noqa: E501

        :param ip_address: The ip_address of this AffiliateClick.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def landing_page(self):
        """Gets the landing_page of this AffiliateClick.  # noqa: E501

        URL of the landing page the customer was sent to.  # noqa: E501

        :return: The landing_page of this AffiliateClick.  # noqa: E501
        :rtype: str
        """
        return self._landing_page

    @landing_page.setter
    def landing_page(self, landing_page):
        """Sets the landing_page of this AffiliateClick.

        URL of the landing page the customer was sent to.  # noqa: E501

        :param landing_page: The landing_page of this AffiliateClick.  # noqa: E501
        :type: str
        """

        self._landing_page = landing_page

    @property
    def landing_page_query_string(self):
        """Gets the landing_page_query_string of this AffiliateClick.  # noqa: E501

        Query string on the landing page URL the customer was sent to.  # noqa: E501

        :return: The landing_page_query_string of this AffiliateClick.  # noqa: E501
        :rtype: str
        """
        return self._landing_page_query_string

    @landing_page_query_string.setter
    def landing_page_query_string(self, landing_page_query_string):
        """Sets the landing_page_query_string of this AffiliateClick.

        Query string on the landing page URL the customer was sent to.  # noqa: E501

        :param landing_page_query_string: The landing_page_query_string of this AffiliateClick.  # noqa: E501
        :type: str
        """

        self._landing_page_query_string = landing_page_query_string

    @property
    def link(self):
        """Gets the link of this AffiliateClick.  # noqa: E501


        :return: The link of this AffiliateClick.  # noqa: E501
        :rtype: AffiliateLink
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this AffiliateClick.


        :param link: The link of this AffiliateClick.  # noqa: E501
        :type: AffiliateLink
        """

        self._link = link

    @property
    def referrer(self):
        """Gets the referrer of this AffiliateClick.  # noqa: E501

        URL that referred the click (Browser Header Referer)  # noqa: E501

        :return: The referrer of this AffiliateClick.  # noqa: E501
        :rtype: str
        """
        return self._referrer

    @referrer.setter
    def referrer(self, referrer):
        """Sets the referrer of this AffiliateClick.

        URL that referred the click (Browser Header Referer)  # noqa: E501

        :param referrer: The referrer of this AffiliateClick.  # noqa: E501
        :type: str
        """

        self._referrer = referrer

    @property
    def referrer_query_string(self):
        """Gets the referrer_query_string of this AffiliateClick.  # noqa: E501

        Query string that was on the referrer URL.  # noqa: E501

        :return: The referrer_query_string of this AffiliateClick.  # noqa: E501
        :rtype: str
        """
        return self._referrer_query_string

    @referrer_query_string.setter
    def referrer_query_string(self, referrer_query_string):
        """Sets the referrer_query_string of this AffiliateClick.

        Query string that was on the referrer URL.  # noqa: E501

        :param referrer_query_string: The referrer_query_string of this AffiliateClick.  # noqa: E501
        :type: str
        """

        self._referrer_query_string = referrer_query_string

    @property
    def sub_id(self):
        """Gets the sub_id of this AffiliateClick.  # noqa: E501

        Sub ID value passed on the click  # noqa: E501

        :return: The sub_id of this AffiliateClick.  # noqa: E501
        :rtype: str
        """
        return self._sub_id

    @sub_id.setter
    def sub_id(self, sub_id):
        """Sets the sub_id of this AffiliateClick.

        Sub ID value passed on the click  # noqa: E501

        :param sub_id: The sub_id of this AffiliateClick.  # noqa: E501
        :type: str
        """

        self._sub_id = sub_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AffiliateClick, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AffiliateClick):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
