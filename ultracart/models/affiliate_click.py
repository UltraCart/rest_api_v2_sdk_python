# coding: utf-8

"""
    UltraCart Rest API V2

    This is the next generation UltraCart REST API...

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class AffiliateClick(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, affiliate_click_oid=None, affiliate_link_oid=None, affiliate_oid=None, click_dts=None, ip_address=None, landing_page=None, landing_page_query_string=None, link=None, referrer=None, referrer_query_string=None, sub_id=None):
        """
        AffiliateClick - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'affiliate_click_oid': 'int',
            'affiliate_link_oid': 'int',
            'affiliate_oid': 'int',
            'click_dts': 'str',
            'ip_address': 'str',
            'landing_page': 'str',
            'landing_page_query_string': 'str',
            'link': 'AffiliateLink',
            'referrer': 'str',
            'referrer_query_string': 'str',
            'sub_id': 'str'
        }

        self.attribute_map = {
            'affiliate_click_oid': 'affiliate_click_oid',
            'affiliate_link_oid': 'affiliate_link_oid',
            'affiliate_oid': 'affiliate_oid',
            'click_dts': 'click_dts',
            'ip_address': 'ip_address',
            'landing_page': 'landing_page',
            'landing_page_query_string': 'landing_page_query_string',
            'link': 'link',
            'referrer': 'referrer',
            'referrer_query_string': 'referrer_query_string',
            'sub_id': 'sub_id'
        }

        self._affiliate_click_oid = affiliate_click_oid
        self._affiliate_link_oid = affiliate_link_oid
        self._affiliate_oid = affiliate_oid
        self._click_dts = click_dts
        self._ip_address = ip_address
        self._landing_page = landing_page
        self._landing_page_query_string = landing_page_query_string
        self._link = link
        self._referrer = referrer
        self._referrer_query_string = referrer_query_string
        self._sub_id = sub_id

    @property
    def affiliate_click_oid(self):
        """
        Gets the affiliate_click_oid of this AffiliateClick.
        Unique object identifier for this click

        :return: The affiliate_click_oid of this AffiliateClick.
        :rtype: int
        """
        return self._affiliate_click_oid

    @affiliate_click_oid.setter
    def affiliate_click_oid(self, affiliate_click_oid):
        """
        Sets the affiliate_click_oid of this AffiliateClick.
        Unique object identifier for this click

        :param affiliate_click_oid: The affiliate_click_oid of this AffiliateClick.
        :type: int
        """

        self._affiliate_click_oid = affiliate_click_oid

    @property
    def affiliate_link_oid(self):
        """
        Gets the affiliate_link_oid of this AffiliateClick.
        Unique object identifier for for the link that this click is associated with

        :return: The affiliate_link_oid of this AffiliateClick.
        :rtype: int
        """
        return self._affiliate_link_oid

    @affiliate_link_oid.setter
    def affiliate_link_oid(self, affiliate_link_oid):
        """
        Sets the affiliate_link_oid of this AffiliateClick.
        Unique object identifier for for the link that this click is associated with

        :param affiliate_link_oid: The affiliate_link_oid of this AffiliateClick.
        :type: int
        """

        self._affiliate_link_oid = affiliate_link_oid

    @property
    def affiliate_oid(self):
        """
        Gets the affiliate_oid of this AffiliateClick.
        Affiliate object ID associated with this click

        :return: The affiliate_oid of this AffiliateClick.
        :rtype: int
        """
        return self._affiliate_oid

    @affiliate_oid.setter
    def affiliate_oid(self, affiliate_oid):
        """
        Sets the affiliate_oid of this AffiliateClick.
        Affiliate object ID associated with this click

        :param affiliate_oid: The affiliate_oid of this AffiliateClick.
        :type: int
        """

        self._affiliate_oid = affiliate_oid

    @property
    def click_dts(self):
        """
        Gets the click_dts of this AffiliateClick.
        Date/time that the click was made

        :return: The click_dts of this AffiliateClick.
        :rtype: str
        """
        return self._click_dts

    @click_dts.setter
    def click_dts(self, click_dts):
        """
        Sets the click_dts of this AffiliateClick.
        Date/time that the click was made

        :param click_dts: The click_dts of this AffiliateClick.
        :type: str
        """

        self._click_dts = click_dts

    @property
    def ip_address(self):
        """
        Gets the ip_address of this AffiliateClick.
        IP address that generated the click

        :return: The ip_address of this AffiliateClick.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """
        Sets the ip_address of this AffiliateClick.
        IP address that generated the click

        :param ip_address: The ip_address of this AffiliateClick.
        :type: str
        """

        self._ip_address = ip_address

    @property
    def landing_page(self):
        """
        Gets the landing_page of this AffiliateClick.
        URL of the landing page the customer was sent to.

        :return: The landing_page of this AffiliateClick.
        :rtype: str
        """
        return self._landing_page

    @landing_page.setter
    def landing_page(self, landing_page):
        """
        Sets the landing_page of this AffiliateClick.
        URL of the landing page the customer was sent to.

        :param landing_page: The landing_page of this AffiliateClick.
        :type: str
        """

        self._landing_page = landing_page

    @property
    def landing_page_query_string(self):
        """
        Gets the landing_page_query_string of this AffiliateClick.
        Query string on the landing page URL the customer was sent to.

        :return: The landing_page_query_string of this AffiliateClick.
        :rtype: str
        """
        return self._landing_page_query_string

    @landing_page_query_string.setter
    def landing_page_query_string(self, landing_page_query_string):
        """
        Sets the landing_page_query_string of this AffiliateClick.
        Query string on the landing page URL the customer was sent to.

        :param landing_page_query_string: The landing_page_query_string of this AffiliateClick.
        :type: str
        """

        self._landing_page_query_string = landing_page_query_string

    @property
    def link(self):
        """
        Gets the link of this AffiliateClick.


        :return: The link of this AffiliateClick.
        :rtype: AffiliateLink
        """
        return self._link

    @link.setter
    def link(self, link):
        """
        Sets the link of this AffiliateClick.


        :param link: The link of this AffiliateClick.
        :type: AffiliateLink
        """

        self._link = link

    @property
    def referrer(self):
        """
        Gets the referrer of this AffiliateClick.
        URL that referred the click (Browser Header Referer)

        :return: The referrer of this AffiliateClick.
        :rtype: str
        """
        return self._referrer

    @referrer.setter
    def referrer(self, referrer):
        """
        Sets the referrer of this AffiliateClick.
        URL that referred the click (Browser Header Referer)

        :param referrer: The referrer of this AffiliateClick.
        :type: str
        """

        self._referrer = referrer

    @property
    def referrer_query_string(self):
        """
        Gets the referrer_query_string of this AffiliateClick.
        Query string that was on the referrer URL.

        :return: The referrer_query_string of this AffiliateClick.
        :rtype: str
        """
        return self._referrer_query_string

    @referrer_query_string.setter
    def referrer_query_string(self, referrer_query_string):
        """
        Sets the referrer_query_string of this AffiliateClick.
        Query string that was on the referrer URL.

        :param referrer_query_string: The referrer_query_string of this AffiliateClick.
        :type: str
        """

        self._referrer_query_string = referrer_query_string

    @property
    def sub_id(self):
        """
        Gets the sub_id of this AffiliateClick.
        Sub ID value passed on the click

        :return: The sub_id of this AffiliateClick.
        :rtype: str
        """
        return self._sub_id

    @sub_id.setter
    def sub_id(self, sub_id):
        """
        Sets the sub_id of this AffiliateClick.
        Sub ID value passed on the click

        :param sub_id: The sub_id of this AffiliateClick.
        :type: str
        """

        self._sub_id = sub_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
