# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OrderMarketing(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'advertising_source': 'str',
        'cell_phone_opt_in': 'bool',
        'mailing_list': 'bool',
        'referral_code': 'str'
    }

    attribute_map = {
        'advertising_source': 'advertising_source',
        'cell_phone_opt_in': 'cell_phone_opt_in',
        'mailing_list': 'mailing_list',
        'referral_code': 'referral_code'
    }

    def __init__(self, advertising_source=None, cell_phone_opt_in=None, mailing_list=None, referral_code=None):  # noqa: E501
        """OrderMarketing - a model defined in Swagger"""  # noqa: E501

        self._advertising_source = None
        self._cell_phone_opt_in = None
        self._mailing_list = None
        self._referral_code = None
        self.discriminator = None

        if advertising_source is not None:
            self.advertising_source = advertising_source
        if cell_phone_opt_in is not None:
            self.cell_phone_opt_in = cell_phone_opt_in
        if mailing_list is not None:
            self.mailing_list = mailing_list
        if referral_code is not None:
            self.referral_code = referral_code

    @property
    def advertising_source(self):
        """Gets the advertising_source of this OrderMarketing.  # noqa: E501

        Advertising source  # noqa: E501

        :return: The advertising_source of this OrderMarketing.  # noqa: E501
        :rtype: str
        """
        return self._advertising_source

    @advertising_source.setter
    def advertising_source(self, advertising_source):
        """Sets the advertising_source of this OrderMarketing.

        Advertising source  # noqa: E501

        :param advertising_source: The advertising_source of this OrderMarketing.  # noqa: E501
        :type: str
        """
        if advertising_source is not None and len(advertising_source) > 50:
            raise ValueError("Invalid value for `advertising_source`, length must be less than or equal to `50`")  # noqa: E501

        self._advertising_source = advertising_source

    @property
    def cell_phone_opt_in(self):
        """Gets the cell_phone_opt_in of this OrderMarketing.  # noqa: E501

        True if the customer has opted into SMS marketing  # noqa: E501

        :return: The cell_phone_opt_in of this OrderMarketing.  # noqa: E501
        :rtype: bool
        """
        return self._cell_phone_opt_in

    @cell_phone_opt_in.setter
    def cell_phone_opt_in(self, cell_phone_opt_in):
        """Sets the cell_phone_opt_in of this OrderMarketing.

        True if the customer has opted into SMS marketing  # noqa: E501

        :param cell_phone_opt_in: The cell_phone_opt_in of this OrderMarketing.  # noqa: E501
        :type: bool
        """

        self._cell_phone_opt_in = cell_phone_opt_in

    @property
    def mailing_list(self):
        """Gets the mailing_list of this OrderMarketing.  # noqa: E501

        True if the customer has opted into mailing list subscription  # noqa: E501

        :return: The mailing_list of this OrderMarketing.  # noqa: E501
        :rtype: bool
        """
        return self._mailing_list

    @mailing_list.setter
    def mailing_list(self, mailing_list):
        """Sets the mailing_list of this OrderMarketing.

        True if the customer has opted into mailing list subscription  # noqa: E501

        :param mailing_list: The mailing_list of this OrderMarketing.  # noqa: E501
        :type: bool
        """

        self._mailing_list = mailing_list

    @property
    def referral_code(self):
        """Gets the referral_code of this OrderMarketing.  # noqa: E501

        Referral code  # noqa: E501

        :return: The referral_code of this OrderMarketing.  # noqa: E501
        :rtype: str
        """
        return self._referral_code

    @referral_code.setter
    def referral_code(self, referral_code):
        """Sets the referral_code of this OrderMarketing.

        Referral code  # noqa: E501

        :param referral_code: The referral_code of this OrderMarketing.  # noqa: E501
        :type: str
        """
        if referral_code is not None and len(referral_code) > 30:
            raise ValueError("Invalid value for `referral_code`, length must be less than or equal to `30`")  # noqa: E501

        self._referral_code = referral_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderMarketing, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderMarketing):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
