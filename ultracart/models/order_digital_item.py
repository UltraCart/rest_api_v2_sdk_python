# coding: utf-8

"""
    UltraCart Rest API V2

    This is the next generation UltraCart REST API...

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class OrderDigitalItem(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, file_size=None, last_download=None, last_download_ip_address=None, original_filename=None, product_code=None, product_description=None, remaining_downloads=None, url=None):
        """
        OrderDigitalItem - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'file_size': 'int',
            'last_download': 'str',
            'last_download_ip_address': 'str',
            'original_filename': 'str',
            'product_code': 'str',
            'product_description': 'str',
            'remaining_downloads': 'int',
            'url': 'str'
        }

        self.attribute_map = {
            'file_size': 'file_size',
            'last_download': 'last_download',
            'last_download_ip_address': 'last_download_ip_address',
            'original_filename': 'original_filename',
            'product_code': 'product_code',
            'product_description': 'product_description',
            'remaining_downloads': 'remaining_downloads',
            'url': 'url'
        }

        self._file_size = file_size
        self._last_download = last_download
        self._last_download_ip_address = last_download_ip_address
        self._original_filename = original_filename
        self._product_code = product_code
        self._product_description = product_description
        self._remaining_downloads = remaining_downloads
        self._url = url

    @property
    def file_size(self):
        """
        Gets the file_size of this OrderDigitalItem.
        File size

        :return: The file_size of this OrderDigitalItem.
        :rtype: int
        """
        return self._file_size

    @file_size.setter
    def file_size(self, file_size):
        """
        Sets the file_size of this OrderDigitalItem.
        File size

        :param file_size: The file_size of this OrderDigitalItem.
        :type: int
        """

        self._file_size = file_size

    @property
    def last_download(self):
        """
        Gets the last_download of this OrderDigitalItem.
        Last download

        :return: The last_download of this OrderDigitalItem.
        :rtype: str
        """
        return self._last_download

    @last_download.setter
    def last_download(self, last_download):
        """
        Sets the last_download of this OrderDigitalItem.
        Last download

        :param last_download: The last_download of this OrderDigitalItem.
        :type: str
        """

        self._last_download = last_download

    @property
    def last_download_ip_address(self):
        """
        Gets the last_download_ip_address of this OrderDigitalItem.
        IP address that performed the last download

        :return: The last_download_ip_address of this OrderDigitalItem.
        :rtype: str
        """
        return self._last_download_ip_address

    @last_download_ip_address.setter
    def last_download_ip_address(self, last_download_ip_address):
        """
        Sets the last_download_ip_address of this OrderDigitalItem.
        IP address that performed the last download

        :param last_download_ip_address: The last_download_ip_address of this OrderDigitalItem.
        :type: str
        """

        self._last_download_ip_address = last_download_ip_address

    @property
    def original_filename(self):
        """
        Gets the original_filename of this OrderDigitalItem.
        Original file name

        :return: The original_filename of this OrderDigitalItem.
        :rtype: str
        """
        return self._original_filename

    @original_filename.setter
    def original_filename(self, original_filename):
        """
        Sets the original_filename of this OrderDigitalItem.
        Original file name

        :param original_filename: The original_filename of this OrderDigitalItem.
        :type: str
        """

        self._original_filename = original_filename

    @property
    def product_code(self):
        """
        Gets the product_code of this OrderDigitalItem.
        Item id associated with this item

        :return: The product_code of this OrderDigitalItem.
        :rtype: str
        """
        return self._product_code

    @product_code.setter
    def product_code(self, product_code):
        """
        Sets the product_code of this OrderDigitalItem.
        Item id associated with this item

        :param product_code: The product_code of this OrderDigitalItem.
        :type: str
        """

        self._product_code = product_code

    @property
    def product_description(self):
        """
        Gets the product_description of this OrderDigitalItem.
        Item description associated with this item

        :return: The product_description of this OrderDigitalItem.
        :rtype: str
        """
        return self._product_description

    @product_description.setter
    def product_description(self, product_description):
        """
        Sets the product_description of this OrderDigitalItem.
        Item description associated with this item

        :param product_description: The product_description of this OrderDigitalItem.
        :type: str
        """

        self._product_description = product_description

    @property
    def remaining_downloads(self):
        """
        Gets the remaining_downloads of this OrderDigitalItem.
        Remaining number of downloads

        :return: The remaining_downloads of this OrderDigitalItem.
        :rtype: int
        """
        return self._remaining_downloads

    @remaining_downloads.setter
    def remaining_downloads(self, remaining_downloads):
        """
        Sets the remaining_downloads of this OrderDigitalItem.
        Remaining number of downloads

        :param remaining_downloads: The remaining_downloads of this OrderDigitalItem.
        :type: int
        """

        self._remaining_downloads = remaining_downloads

    @property
    def url(self):
        """
        Gets the url of this OrderDigitalItem.
        URL that the customer can click to download the specific digital item

        :return: The url of this OrderDigitalItem.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this OrderDigitalItem.
        URL that the customer can click to download the specific digital item

        :param url: The url of this OrderDigitalItem.
        :type: str
        """

        self._url = url

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
