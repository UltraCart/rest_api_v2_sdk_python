# coding: utf-8

"""
    UltraCart Rest API V2

    This is the next generation UltraCart REST API...

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ItemVariantItem(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, description=None, merchant_item_multimedia_oid=None, variant_merchant_item_id=None, variant_merchant_item_oid=None, variation_options=None, variations=None):
        """
        ItemVariantItem - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'description': 'str',
            'merchant_item_multimedia_oid': 'int',
            'variant_merchant_item_id': 'str',
            'variant_merchant_item_oid': 'int',
            'variation_options': 'list[str]',
            'variations': 'list[str]'
        }

        self.attribute_map = {
            'description': 'description',
            'merchant_item_multimedia_oid': 'merchant_item_multimedia_oid',
            'variant_merchant_item_id': 'variant_merchant_item_id',
            'variant_merchant_item_oid': 'variant_merchant_item_oid',
            'variation_options': 'variation_options',
            'variations': 'variations'
        }

        self._description = description
        self._merchant_item_multimedia_oid = merchant_item_multimedia_oid
        self._variant_merchant_item_id = variant_merchant_item_id
        self._variant_merchant_item_oid = variant_merchant_item_oid
        self._variation_options = variation_options
        self._variations = variations

    @property
    def description(self):
        """
        Gets the description of this ItemVariantItem.
        Description

        :return: The description of this ItemVariantItem.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this ItemVariantItem.
        Description

        :param description: The description of this ItemVariantItem.
        :type: str
        """

        if not description:
            raise ValueError("Invalid value for `description`, must not be `None`")
        if len(description) > 512:
            raise ValueError("Invalid value for `description`, length must be less than `512`")

        self._description = description

    @property
    def merchant_item_multimedia_oid(self):
        """
        Gets the merchant_item_multimedia_oid of this ItemVariantItem.
        Multimedia object identifier

        :return: The merchant_item_multimedia_oid of this ItemVariantItem.
        :rtype: int
        """
        return self._merchant_item_multimedia_oid

    @merchant_item_multimedia_oid.setter
    def merchant_item_multimedia_oid(self, merchant_item_multimedia_oid):
        """
        Sets the merchant_item_multimedia_oid of this ItemVariantItem.
        Multimedia object identifier

        :param merchant_item_multimedia_oid: The merchant_item_multimedia_oid of this ItemVariantItem.
        :type: int
        """

        self._merchant_item_multimedia_oid = merchant_item_multimedia_oid

    @property
    def variant_merchant_item_id(self):
        """
        Gets the variant_merchant_item_id of this ItemVariantItem.
        Variant item id

        :return: The variant_merchant_item_id of this ItemVariantItem.
        :rtype: str
        """
        return self._variant_merchant_item_id

    @variant_merchant_item_id.setter
    def variant_merchant_item_id(self, variant_merchant_item_id):
        """
        Sets the variant_merchant_item_id of this ItemVariantItem.
        Variant item id

        :param variant_merchant_item_id: The variant_merchant_item_id of this ItemVariantItem.
        :type: str
        """

        self._variant_merchant_item_id = variant_merchant_item_id

    @property
    def variant_merchant_item_oid(self):
        """
        Gets the variant_merchant_item_oid of this ItemVariantItem.
        Variant item object identifier

        :return: The variant_merchant_item_oid of this ItemVariantItem.
        :rtype: int
        """
        return self._variant_merchant_item_oid

    @variant_merchant_item_oid.setter
    def variant_merchant_item_oid(self, variant_merchant_item_oid):
        """
        Sets the variant_merchant_item_oid of this ItemVariantItem.
        Variant item object identifier

        :param variant_merchant_item_oid: The variant_merchant_item_oid of this ItemVariantItem.
        :type: int
        """

        self._variant_merchant_item_oid = variant_merchant_item_oid

    @property
    def variation_options(self):
        """
        Gets the variation_options of this ItemVariantItem.
        Variation options

        :return: The variation_options of this ItemVariantItem.
        :rtype: list[str]
        """
        return self._variation_options

    @variation_options.setter
    def variation_options(self, variation_options):
        """
        Sets the variation_options of this ItemVariantItem.
        Variation options

        :param variation_options: The variation_options of this ItemVariantItem.
        :type: list[str]
        """

        self._variation_options = variation_options

    @property
    def variations(self):
        """
        Gets the variations of this ItemVariantItem.
        Variations

        :return: The variations of this ItemVariantItem.
        :rtype: list[str]
        """
        return self._variations

    @variations.setter
    def variations(self, variations):
        """
        Sets the variations of this ItemVariantItem.
        Variations

        :param variations: The variations of this ItemVariantItem.
        :type: list[str]
        """

        self._variations = variations

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
