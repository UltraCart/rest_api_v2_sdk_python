# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class EmailPerformanceDaily(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bounce_count': 'int',
        'delivered_count': 'int',
        'revenue': 'float',
        'sequence_send_count': 'int',
        'spam_count': 'int',
        'stat_dts': 'str',
        'transactional_send_count': 'int'
    }

    attribute_map = {
        'bounce_count': 'bounce_count',
        'delivered_count': 'delivered_count',
        'revenue': 'revenue',
        'sequence_send_count': 'sequence_send_count',
        'spam_count': 'spam_count',
        'stat_dts': 'stat_dts',
        'transactional_send_count': 'transactional_send_count'
    }

    def __init__(self, bounce_count=None, delivered_count=None, revenue=None, sequence_send_count=None, spam_count=None, stat_dts=None, transactional_send_count=None):
        """
        EmailPerformanceDaily - a model defined in Swagger
        """

        self._bounce_count = None
        self._delivered_count = None
        self._revenue = None
        self._sequence_send_count = None
        self._spam_count = None
        self._stat_dts = None
        self._transactional_send_count = None
        self.discriminator = None

        if bounce_count is not None:
          self.bounce_count = bounce_count
        if delivered_count is not None:
          self.delivered_count = delivered_count
        if revenue is not None:
          self.revenue = revenue
        if sequence_send_count is not None:
          self.sequence_send_count = sequence_send_count
        if spam_count is not None:
          self.spam_count = spam_count
        if stat_dts is not None:
          self.stat_dts = stat_dts
        if transactional_send_count is not None:
          self.transactional_send_count = transactional_send_count

    @property
    def bounce_count(self):
        """
        Gets the bounce_count of this EmailPerformanceDaily.
        Bounce count

        :return: The bounce_count of this EmailPerformanceDaily.
        :rtype: int
        """
        return self._bounce_count

    @bounce_count.setter
    def bounce_count(self, bounce_count):
        """
        Sets the bounce_count of this EmailPerformanceDaily.
        Bounce count

        :param bounce_count: The bounce_count of this EmailPerformanceDaily.
        :type: int
        """

        self._bounce_count = bounce_count

    @property
    def delivered_count(self):
        """
        Gets the delivered_count of this EmailPerformanceDaily.
        Delivered count

        :return: The delivered_count of this EmailPerformanceDaily.
        :rtype: int
        """
        return self._delivered_count

    @delivered_count.setter
    def delivered_count(self, delivered_count):
        """
        Sets the delivered_count of this EmailPerformanceDaily.
        Delivered count

        :param delivered_count: The delivered_count of this EmailPerformanceDaily.
        :type: int
        """

        self._delivered_count = delivered_count

    @property
    def revenue(self):
        """
        Gets the revenue of this EmailPerformanceDaily.
        Revenue

        :return: The revenue of this EmailPerformanceDaily.
        :rtype: float
        """
        return self._revenue

    @revenue.setter
    def revenue(self, revenue):
        """
        Sets the revenue of this EmailPerformanceDaily.
        Revenue

        :param revenue: The revenue of this EmailPerformanceDaily.
        :type: float
        """

        self._revenue = revenue

    @property
    def sequence_send_count(self):
        """
        Gets the sequence_send_count of this EmailPerformanceDaily.
        Total sequence (campaign/flow) emails sent

        :return: The sequence_send_count of this EmailPerformanceDaily.
        :rtype: int
        """
        return self._sequence_send_count

    @sequence_send_count.setter
    def sequence_send_count(self, sequence_send_count):
        """
        Sets the sequence_send_count of this EmailPerformanceDaily.
        Total sequence (campaign/flow) emails sent

        :param sequence_send_count: The sequence_send_count of this EmailPerformanceDaily.
        :type: int
        """

        self._sequence_send_count = sequence_send_count

    @property
    def spam_count(self):
        """
        Gets the spam_count of this EmailPerformanceDaily.
        Spam complaints

        :return: The spam_count of this EmailPerformanceDaily.
        :rtype: int
        """
        return self._spam_count

    @spam_count.setter
    def spam_count(self, spam_count):
        """
        Sets the spam_count of this EmailPerformanceDaily.
        Spam complaints

        :param spam_count: The spam_count of this EmailPerformanceDaily.
        :type: int
        """

        self._spam_count = spam_count

    @property
    def stat_dts(self):
        """
        Gets the stat_dts of this EmailPerformanceDaily.
        The date that these statistcs are for

        :return: The stat_dts of this EmailPerformanceDaily.
        :rtype: str
        """
        return self._stat_dts

    @stat_dts.setter
    def stat_dts(self, stat_dts):
        """
        Sets the stat_dts of this EmailPerformanceDaily.
        The date that these statistcs are for

        :param stat_dts: The stat_dts of this EmailPerformanceDaily.
        :type: str
        """

        self._stat_dts = stat_dts

    @property
    def transactional_send_count(self):
        """
        Gets the transactional_send_count of this EmailPerformanceDaily.
        Total transactions emails sent

        :return: The transactional_send_count of this EmailPerformanceDaily.
        :rtype: int
        """
        return self._transactional_send_count

    @transactional_send_count.setter
    def transactional_send_count(self, transactional_send_count):
        """
        Sets the transactional_send_count of this EmailPerformanceDaily.
        Total transactions emails sent

        :param transactional_send_count: The transactional_send_count of this EmailPerformanceDaily.
        :type: int
        """

        self._transactional_send_count = transactional_send_count

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, EmailPerformanceDaily):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
