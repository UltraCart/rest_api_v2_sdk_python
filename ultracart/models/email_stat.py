# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class EmailStat(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'click_count': 'int',
        'click_count_formatted': 'str',
        'delivered_count': 'int',
        'delivered_count_formatted': 'str',
        'kickbox_count': 'int',
        'kickbox_count_formatted': 'str',
        'merchant_id': 'str',
        'name': 'str',
        'open_count': 'int',
        'open_count_formatted': 'str',
        'permanent_bounce_count': 'int',
        'permanent_bounce_count_formatted': 'str',
        'profit': 'float',
        'profit_formatted': 'str',
        'revenue': 'float',
        'revenue_formatted': 'str',
        'send_count': 'int',
        'send_count_formatted': 'str',
        'skipped_count': 'int',
        'skipped_count_formatted': 'str',
        'spam_count': 'int',
        'spam_count_formatted': 'str',
        'stat_type': 'str',
        'status': 'str',
        'status_dts': 'str',
        'storefront_oid': 'int',
        'uuid': 'str',
        'view_count': 'int',
        'view_count_formatted': 'str'
    }

    attribute_map = {
        'click_count': 'click_count',
        'click_count_formatted': 'click_count_formatted',
        'delivered_count': 'delivered_count',
        'delivered_count_formatted': 'delivered_count_formatted',
        'kickbox_count': 'kickbox_count',
        'kickbox_count_formatted': 'kickbox_count_formatted',
        'merchant_id': 'merchant_id',
        'name': 'name',
        'open_count': 'open_count',
        'open_count_formatted': 'open_count_formatted',
        'permanent_bounce_count': 'permanent_bounce_count',
        'permanent_bounce_count_formatted': 'permanent_bounce_count_formatted',
        'profit': 'profit',
        'profit_formatted': 'profit_formatted',
        'revenue': 'revenue',
        'revenue_formatted': 'revenue_formatted',
        'send_count': 'send_count',
        'send_count_formatted': 'send_count_formatted',
        'skipped_count': 'skipped_count',
        'skipped_count_formatted': 'skipped_count_formatted',
        'spam_count': 'spam_count',
        'spam_count_formatted': 'spam_count_formatted',
        'stat_type': 'stat_type',
        'status': 'status',
        'status_dts': 'status_dts',
        'storefront_oid': 'storefront_oid',
        'uuid': 'uuid',
        'view_count': 'view_count',
        'view_count_formatted': 'view_count_formatted'
    }

    def __init__(self, click_count=None, click_count_formatted=None, delivered_count=None, delivered_count_formatted=None, kickbox_count=None, kickbox_count_formatted=None, merchant_id=None, name=None, open_count=None, open_count_formatted=None, permanent_bounce_count=None, permanent_bounce_count_formatted=None, profit=None, profit_formatted=None, revenue=None, revenue_formatted=None, send_count=None, send_count_formatted=None, skipped_count=None, skipped_count_formatted=None, spam_count=None, spam_count_formatted=None, stat_type=None, status=None, status_dts=None, storefront_oid=None, uuid=None, view_count=None, view_count_formatted=None):
        """
        EmailStat - a model defined in Swagger
        """

        self._click_count = None
        self._click_count_formatted = None
        self._delivered_count = None
        self._delivered_count_formatted = None
        self._kickbox_count = None
        self._kickbox_count_formatted = None
        self._merchant_id = None
        self._name = None
        self._open_count = None
        self._open_count_formatted = None
        self._permanent_bounce_count = None
        self._permanent_bounce_count_formatted = None
        self._profit = None
        self._profit_formatted = None
        self._revenue = None
        self._revenue_formatted = None
        self._send_count = None
        self._send_count_formatted = None
        self._skipped_count = None
        self._skipped_count_formatted = None
        self._spam_count = None
        self._spam_count_formatted = None
        self._stat_type = None
        self._status = None
        self._status_dts = None
        self._storefront_oid = None
        self._uuid = None
        self._view_count = None
        self._view_count_formatted = None
        self.discriminator = None

        if click_count is not None:
          self.click_count = click_count
        if click_count_formatted is not None:
          self.click_count_formatted = click_count_formatted
        if delivered_count is not None:
          self.delivered_count = delivered_count
        if delivered_count_formatted is not None:
          self.delivered_count_formatted = delivered_count_formatted
        if kickbox_count is not None:
          self.kickbox_count = kickbox_count
        if kickbox_count_formatted is not None:
          self.kickbox_count_formatted = kickbox_count_formatted
        if merchant_id is not None:
          self.merchant_id = merchant_id
        if name is not None:
          self.name = name
        if open_count is not None:
          self.open_count = open_count
        if open_count_formatted is not None:
          self.open_count_formatted = open_count_formatted
        if permanent_bounce_count is not None:
          self.permanent_bounce_count = permanent_bounce_count
        if permanent_bounce_count_formatted is not None:
          self.permanent_bounce_count_formatted = permanent_bounce_count_formatted
        if profit is not None:
          self.profit = profit
        if profit_formatted is not None:
          self.profit_formatted = profit_formatted
        if revenue is not None:
          self.revenue = revenue
        if revenue_formatted is not None:
          self.revenue_formatted = revenue_formatted
        if send_count is not None:
          self.send_count = send_count
        if send_count_formatted is not None:
          self.send_count_formatted = send_count_formatted
        if skipped_count is not None:
          self.skipped_count = skipped_count
        if skipped_count_formatted is not None:
          self.skipped_count_formatted = skipped_count_formatted
        if spam_count is not None:
          self.spam_count = spam_count
        if spam_count_formatted is not None:
          self.spam_count_formatted = spam_count_formatted
        if stat_type is not None:
          self.stat_type = stat_type
        if status is not None:
          self.status = status
        if status_dts is not None:
          self.status_dts = status_dts
        if storefront_oid is not None:
          self.storefront_oid = storefront_oid
        if uuid is not None:
          self.uuid = uuid
        if view_count is not None:
          self.view_count = view_count
        if view_count_formatted is not None:
          self.view_count_formatted = view_count_formatted

    @property
    def click_count(self):
        """
        Gets the click_count of this EmailStat.
        Count of clicked emails

        :return: The click_count of this EmailStat.
        :rtype: int
        """
        return self._click_count

    @click_count.setter
    def click_count(self, click_count):
        """
        Sets the click_count of this EmailStat.
        Count of clicked emails

        :param click_count: The click_count of this EmailStat.
        :type: int
        """

        self._click_count = click_count

    @property
    def click_count_formatted(self):
        """
        Gets the click_count_formatted of this EmailStat.
        Count of clicked emails, formatted

        :return: The click_count_formatted of this EmailStat.
        :rtype: str
        """
        return self._click_count_formatted

    @click_count_formatted.setter
    def click_count_formatted(self, click_count_formatted):
        """
        Sets the click_count_formatted of this EmailStat.
        Count of clicked emails, formatted

        :param click_count_formatted: The click_count_formatted of this EmailStat.
        :type: str
        """

        self._click_count_formatted = click_count_formatted

    @property
    def delivered_count(self):
        """
        Gets the delivered_count of this EmailStat.
        Count of delivered emails

        :return: The delivered_count of this EmailStat.
        :rtype: int
        """
        return self._delivered_count

    @delivered_count.setter
    def delivered_count(self, delivered_count):
        """
        Sets the delivered_count of this EmailStat.
        Count of delivered emails

        :param delivered_count: The delivered_count of this EmailStat.
        :type: int
        """

        self._delivered_count = delivered_count

    @property
    def delivered_count_formatted(self):
        """
        Gets the delivered_count_formatted of this EmailStat.
        Count of delivered emails, formatted

        :return: The delivered_count_formatted of this EmailStat.
        :rtype: str
        """
        return self._delivered_count_formatted

    @delivered_count_formatted.setter
    def delivered_count_formatted(self, delivered_count_formatted):
        """
        Sets the delivered_count_formatted of this EmailStat.
        Count of delivered emails, formatted

        :param delivered_count_formatted: The delivered_count_formatted of this EmailStat.
        :type: str
        """

        self._delivered_count_formatted = delivered_count_formatted

    @property
    def kickbox_count(self):
        """
        Gets the kickbox_count of this EmailStat.
        Count of emails kicked

        :return: The kickbox_count of this EmailStat.
        :rtype: int
        """
        return self._kickbox_count

    @kickbox_count.setter
    def kickbox_count(self, kickbox_count):
        """
        Sets the kickbox_count of this EmailStat.
        Count of emails kicked

        :param kickbox_count: The kickbox_count of this EmailStat.
        :type: int
        """

        self._kickbox_count = kickbox_count

    @property
    def kickbox_count_formatted(self):
        """
        Gets the kickbox_count_formatted of this EmailStat.
        Count of emails kicked, formatted

        :return: The kickbox_count_formatted of this EmailStat.
        :rtype: str
        """
        return self._kickbox_count_formatted

    @kickbox_count_formatted.setter
    def kickbox_count_formatted(self, kickbox_count_formatted):
        """
        Sets the kickbox_count_formatted of this EmailStat.
        Count of emails kicked, formatted

        :param kickbox_count_formatted: The kickbox_count_formatted of this EmailStat.
        :type: str
        """

        self._kickbox_count_formatted = kickbox_count_formatted

    @property
    def merchant_id(self):
        """
        Gets the merchant_id of this EmailStat.
        Merchant ID

        :return: The merchant_id of this EmailStat.
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """
        Sets the merchant_id of this EmailStat.
        Merchant ID

        :param merchant_id: The merchant_id of this EmailStat.
        :type: str
        """

        self._merchant_id = merchant_id

    @property
    def name(self):
        """
        Gets the name of this EmailStat.
        List or segment name

        :return: The name of this EmailStat.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this EmailStat.
        List or segment name

        :param name: The name of this EmailStat.
        :type: str
        """

        self._name = name

    @property
    def open_count(self):
        """
        Gets the open_count of this EmailStat.
        Count of opened emails

        :return: The open_count of this EmailStat.
        :rtype: int
        """
        return self._open_count

    @open_count.setter
    def open_count(self, open_count):
        """
        Sets the open_count of this EmailStat.
        Count of opened emails

        :param open_count: The open_count of this EmailStat.
        :type: int
        """

        self._open_count = open_count

    @property
    def open_count_formatted(self):
        """
        Gets the open_count_formatted of this EmailStat.
        Count of opened emails, formatted

        :return: The open_count_formatted of this EmailStat.
        :rtype: str
        """
        return self._open_count_formatted

    @open_count_formatted.setter
    def open_count_formatted(self, open_count_formatted):
        """
        Sets the open_count_formatted of this EmailStat.
        Count of opened emails, formatted

        :param open_count_formatted: The open_count_formatted of this EmailStat.
        :type: str
        """

        self._open_count_formatted = open_count_formatted

    @property
    def permanent_bounce_count(self):
        """
        Gets the permanent_bounce_count of this EmailStat.
        Count of emails permanently bounced

        :return: The permanent_bounce_count of this EmailStat.
        :rtype: int
        """
        return self._permanent_bounce_count

    @permanent_bounce_count.setter
    def permanent_bounce_count(self, permanent_bounce_count):
        """
        Sets the permanent_bounce_count of this EmailStat.
        Count of emails permanently bounced

        :param permanent_bounce_count: The permanent_bounce_count of this EmailStat.
        :type: int
        """

        self._permanent_bounce_count = permanent_bounce_count

    @property
    def permanent_bounce_count_formatted(self):
        """
        Gets the permanent_bounce_count_formatted of this EmailStat.
        Count of emails permanently bounced, formatted

        :return: The permanent_bounce_count_formatted of this EmailStat.
        :rtype: str
        """
        return self._permanent_bounce_count_formatted

    @permanent_bounce_count_formatted.setter
    def permanent_bounce_count_formatted(self, permanent_bounce_count_formatted):
        """
        Sets the permanent_bounce_count_formatted of this EmailStat.
        Count of emails permanently bounced, formatted

        :param permanent_bounce_count_formatted: The permanent_bounce_count_formatted of this EmailStat.
        :type: str
        """

        self._permanent_bounce_count_formatted = permanent_bounce_count_formatted

    @property
    def profit(self):
        """
        Gets the profit of this EmailStat.
        Profit

        :return: The profit of this EmailStat.
        :rtype: float
        """
        return self._profit

    @profit.setter
    def profit(self, profit):
        """
        Sets the profit of this EmailStat.
        Profit

        :param profit: The profit of this EmailStat.
        :type: float
        """

        self._profit = profit

    @property
    def profit_formatted(self):
        """
        Gets the profit_formatted of this EmailStat.
        Profit, formatted

        :return: The profit_formatted of this EmailStat.
        :rtype: str
        """
        return self._profit_formatted

    @profit_formatted.setter
    def profit_formatted(self, profit_formatted):
        """
        Sets the profit_formatted of this EmailStat.
        Profit, formatted

        :param profit_formatted: The profit_formatted of this EmailStat.
        :type: str
        """

        self._profit_formatted = profit_formatted

    @property
    def revenue(self):
        """
        Gets the revenue of this EmailStat.
        Revenue

        :return: The revenue of this EmailStat.
        :rtype: float
        """
        return self._revenue

    @revenue.setter
    def revenue(self, revenue):
        """
        Sets the revenue of this EmailStat.
        Revenue

        :param revenue: The revenue of this EmailStat.
        :type: float
        """

        self._revenue = revenue

    @property
    def revenue_formatted(self):
        """
        Gets the revenue_formatted of this EmailStat.
        Revenue, formatted

        :return: The revenue_formatted of this EmailStat.
        :rtype: str
        """
        return self._revenue_formatted

    @revenue_formatted.setter
    def revenue_formatted(self, revenue_formatted):
        """
        Sets the revenue_formatted of this EmailStat.
        Revenue, formatted

        :param revenue_formatted: The revenue_formatted of this EmailStat.
        :type: str
        """

        self._revenue_formatted = revenue_formatted

    @property
    def send_count(self):
        """
        Gets the send_count of this EmailStat.
        Count of emails sent

        :return: The send_count of this EmailStat.
        :rtype: int
        """
        return self._send_count

    @send_count.setter
    def send_count(self, send_count):
        """
        Sets the send_count of this EmailStat.
        Count of emails sent

        :param send_count: The send_count of this EmailStat.
        :type: int
        """

        self._send_count = send_count

    @property
    def send_count_formatted(self):
        """
        Gets the send_count_formatted of this EmailStat.
        Count of emails sent, formatted

        :return: The send_count_formatted of this EmailStat.
        :rtype: str
        """
        return self._send_count_formatted

    @send_count_formatted.setter
    def send_count_formatted(self, send_count_formatted):
        """
        Sets the send_count_formatted of this EmailStat.
        Count of emails sent, formatted

        :param send_count_formatted: The send_count_formatted of this EmailStat.
        :type: str
        """

        self._send_count_formatted = send_count_formatted

    @property
    def skipped_count(self):
        """
        Gets the skipped_count of this EmailStat.
        Count of skipped emails

        :return: The skipped_count of this EmailStat.
        :rtype: int
        """
        return self._skipped_count

    @skipped_count.setter
    def skipped_count(self, skipped_count):
        """
        Sets the skipped_count of this EmailStat.
        Count of skipped emails

        :param skipped_count: The skipped_count of this EmailStat.
        :type: int
        """

        self._skipped_count = skipped_count

    @property
    def skipped_count_formatted(self):
        """
        Gets the skipped_count_formatted of this EmailStat.
        Count of skipped emails, formatted

        :return: The skipped_count_formatted of this EmailStat.
        :rtype: str
        """
        return self._skipped_count_formatted

    @skipped_count_formatted.setter
    def skipped_count_formatted(self, skipped_count_formatted):
        """
        Sets the skipped_count_formatted of this EmailStat.
        Count of skipped emails, formatted

        :param skipped_count_formatted: The skipped_count_formatted of this EmailStat.
        :type: str
        """

        self._skipped_count_formatted = skipped_count_formatted

    @property
    def spam_count(self):
        """
        Gets the spam_count of this EmailStat.
        Count of emails classified as spam

        :return: The spam_count of this EmailStat.
        :rtype: int
        """
        return self._spam_count

    @spam_count.setter
    def spam_count(self, spam_count):
        """
        Sets the spam_count of this EmailStat.
        Count of emails classified as spam

        :param spam_count: The spam_count of this EmailStat.
        :type: int
        """

        self._spam_count = spam_count

    @property
    def spam_count_formatted(self):
        """
        Gets the spam_count_formatted of this EmailStat.
        Count of emails classified as spam, formatted

        :return: The spam_count_formatted of this EmailStat.
        :rtype: str
        """
        return self._spam_count_formatted

    @spam_count_formatted.setter
    def spam_count_formatted(self, spam_count_formatted):
        """
        Sets the spam_count_formatted of this EmailStat.
        Count of emails classified as spam, formatted

        :param spam_count_formatted: The spam_count_formatted of this EmailStat.
        :type: str
        """

        self._spam_count_formatted = spam_count_formatted

    @property
    def stat_type(self):
        """
        Gets the stat_type of this EmailStat.
        Campaign, Flow or None (for anything else)

        :return: The stat_type of this EmailStat.
        :rtype: str
        """
        return self._stat_type

    @stat_type.setter
    def stat_type(self, stat_type):
        """
        Sets the stat_type of this EmailStat.
        Campaign, Flow or None (for anything else)

        :param stat_type: The stat_type of this EmailStat.
        :type: str
        """

        self._stat_type = stat_type

    @property
    def status(self):
        """
        Gets the status of this EmailStat.
        Status of campaign or flow

        :return: The status of this EmailStat.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this EmailStat.
        Status of campaign or flow

        :param status: The status of this EmailStat.
        :type: str
        """

        self._status = status

    @property
    def status_dts(self):
        """
        Gets the status_dts of this EmailStat.
        Status dts of campaign or flow

        :return: The status_dts of this EmailStat.
        :rtype: str
        """
        return self._status_dts

    @status_dts.setter
    def status_dts(self, status_dts):
        """
        Sets the status_dts of this EmailStat.
        Status dts of campaign or flow

        :param status_dts: The status_dts of this EmailStat.
        :type: str
        """

        self._status_dts = status_dts

    @property
    def storefront_oid(self):
        """
        Gets the storefront_oid of this EmailStat.
        Storefront oid

        :return: The storefront_oid of this EmailStat.
        :rtype: int
        """
        return self._storefront_oid

    @storefront_oid.setter
    def storefront_oid(self, storefront_oid):
        """
        Sets the storefront_oid of this EmailStat.
        Storefront oid

        :param storefront_oid: The storefront_oid of this EmailStat.
        :type: int
        """

        self._storefront_oid = storefront_oid

    @property
    def uuid(self):
        """
        Gets the uuid of this EmailStat.
        List or segment uuid

        :return: The uuid of this EmailStat.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """
        Sets the uuid of this EmailStat.
        List or segment uuid

        :param uuid: The uuid of this EmailStat.
        :type: str
        """

        self._uuid = uuid

    @property
    def view_count(self):
        """
        Gets the view_count of this EmailStat.
        Count of views

        :return: The view_count of this EmailStat.
        :rtype: int
        """
        return self._view_count

    @view_count.setter
    def view_count(self, view_count):
        """
        Sets the view_count of this EmailStat.
        Count of views

        :param view_count: The view_count of this EmailStat.
        :type: int
        """

        self._view_count = view_count

    @property
    def view_count_formatted(self):
        """
        Gets the view_count_formatted of this EmailStat.
        Count of views, formatted

        :return: The view_count_formatted of this EmailStat.
        :rtype: str
        """
        return self._view_count_formatted

    @view_count_formatted.setter
    def view_count_formatted(self, view_count_formatted):
        """
        Sets the view_count_formatted of this EmailStat.
        Count of views, formatted

        :param view_count_formatted: The view_count_formatted of this EmailStat.
        :type: str
        """

        self._view_count_formatted = view_count_formatted

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, EmailStat):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
