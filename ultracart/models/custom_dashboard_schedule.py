# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CustomDashboardSchedule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cron_trigger_expression': 'str',
        'data_warehouse_custom_dashboard_oid': 'int',
        'data_warehouse_custom_dashboard_schedule_oid': 'int',
        'emails': 'list[str]',
        'next_send_dts': 'str'
    }

    attribute_map = {
        'cron_trigger_expression': 'cron_trigger_expression',
        'data_warehouse_custom_dashboard_oid': 'data_warehouse_custom_dashboard_oid',
        'data_warehouse_custom_dashboard_schedule_oid': 'data_warehouse_custom_dashboard_schedule_oid',
        'emails': 'emails',
        'next_send_dts': 'next_send_dts'
    }

    def __init__(self, cron_trigger_expression=None, data_warehouse_custom_dashboard_oid=None, data_warehouse_custom_dashboard_schedule_oid=None, emails=None, next_send_dts=None):  # noqa: E501
        """CustomDashboardSchedule - a model defined in Swagger"""  # noqa: E501

        self._cron_trigger_expression = None
        self._data_warehouse_custom_dashboard_oid = None
        self._data_warehouse_custom_dashboard_schedule_oid = None
        self._emails = None
        self._next_send_dts = None
        self.discriminator = None

        if cron_trigger_expression is not None:
            self.cron_trigger_expression = cron_trigger_expression
        if data_warehouse_custom_dashboard_oid is not None:
            self.data_warehouse_custom_dashboard_oid = data_warehouse_custom_dashboard_oid
        if data_warehouse_custom_dashboard_schedule_oid is not None:
            self.data_warehouse_custom_dashboard_schedule_oid = data_warehouse_custom_dashboard_schedule_oid
        if emails is not None:
            self.emails = emails
        if next_send_dts is not None:
            self.next_send_dts = next_send_dts

    @property
    def cron_trigger_expression(self):
        """Gets the cron_trigger_expression of this CustomDashboardSchedule.  # noqa: E501


        :return: The cron_trigger_expression of this CustomDashboardSchedule.  # noqa: E501
        :rtype: str
        """
        return self._cron_trigger_expression

    @cron_trigger_expression.setter
    def cron_trigger_expression(self, cron_trigger_expression):
        """Sets the cron_trigger_expression of this CustomDashboardSchedule.


        :param cron_trigger_expression: The cron_trigger_expression of this CustomDashboardSchedule.  # noqa: E501
        :type: str
        """

        self._cron_trigger_expression = cron_trigger_expression

    @property
    def data_warehouse_custom_dashboard_oid(self):
        """Gets the data_warehouse_custom_dashboard_oid of this CustomDashboardSchedule.  # noqa: E501


        :return: The data_warehouse_custom_dashboard_oid of this CustomDashboardSchedule.  # noqa: E501
        :rtype: int
        """
        return self._data_warehouse_custom_dashboard_oid

    @data_warehouse_custom_dashboard_oid.setter
    def data_warehouse_custom_dashboard_oid(self, data_warehouse_custom_dashboard_oid):
        """Sets the data_warehouse_custom_dashboard_oid of this CustomDashboardSchedule.


        :param data_warehouse_custom_dashboard_oid: The data_warehouse_custom_dashboard_oid of this CustomDashboardSchedule.  # noqa: E501
        :type: int
        """

        self._data_warehouse_custom_dashboard_oid = data_warehouse_custom_dashboard_oid

    @property
    def data_warehouse_custom_dashboard_schedule_oid(self):
        """Gets the data_warehouse_custom_dashboard_schedule_oid of this CustomDashboardSchedule.  # noqa: E501


        :return: The data_warehouse_custom_dashboard_schedule_oid of this CustomDashboardSchedule.  # noqa: E501
        :rtype: int
        """
        return self._data_warehouse_custom_dashboard_schedule_oid

    @data_warehouse_custom_dashboard_schedule_oid.setter
    def data_warehouse_custom_dashboard_schedule_oid(self, data_warehouse_custom_dashboard_schedule_oid):
        """Sets the data_warehouse_custom_dashboard_schedule_oid of this CustomDashboardSchedule.


        :param data_warehouse_custom_dashboard_schedule_oid: The data_warehouse_custom_dashboard_schedule_oid of this CustomDashboardSchedule.  # noqa: E501
        :type: int
        """

        self._data_warehouse_custom_dashboard_schedule_oid = data_warehouse_custom_dashboard_schedule_oid

    @property
    def emails(self):
        """Gets the emails of this CustomDashboardSchedule.  # noqa: E501


        :return: The emails of this CustomDashboardSchedule.  # noqa: E501
        :rtype: list[str]
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this CustomDashboardSchedule.


        :param emails: The emails of this CustomDashboardSchedule.  # noqa: E501
        :type: list[str]
        """

        self._emails = emails

    @property
    def next_send_dts(self):
        """Gets the next_send_dts of this CustomDashboardSchedule.  # noqa: E501

        Date/time that the next send will occur.  # noqa: E501

        :return: The next_send_dts of this CustomDashboardSchedule.  # noqa: E501
        :rtype: str
        """
        return self._next_send_dts

    @next_send_dts.setter
    def next_send_dts(self, next_send_dts):
        """Sets the next_send_dts of this CustomDashboardSchedule.

        Date/time that the next send will occur.  # noqa: E501

        :param next_send_dts: The next_send_dts of this CustomDashboardSchedule.  # noqa: E501
        :type: str
        """

        self._next_send_dts = next_send_dts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomDashboardSchedule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomDashboardSchedule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
