# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CustomerEDI(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'channel_partner_oid': 'int',
        'distribution_center_number': 'str',
        'store_number': 'str'
    }

    attribute_map = {
        'channel_partner_oid': 'channel_partner_oid',
        'distribution_center_number': 'distribution_center_number',
        'store_number': 'store_number'
    }

    def __init__(self, channel_partner_oid=None, distribution_center_number=None, store_number=None):  # noqa: E501
        """CustomerEDI - a model defined in Swagger"""  # noqa: E501

        self._channel_partner_oid = None
        self._distribution_center_number = None
        self._store_number = None
        self.discriminator = None

        if channel_partner_oid is not None:
            self.channel_partner_oid = channel_partner_oid
        if distribution_center_number is not None:
            self.distribution_center_number = distribution_center_number
        if store_number is not None:
            self.store_number = store_number

    @property
    def channel_partner_oid(self):
        """Gets the channel_partner_oid of this CustomerEDI.  # noqa: E501

        EDI channel partner this customer profile is associated with  # noqa: E501

        :return: The channel_partner_oid of this CustomerEDI.  # noqa: E501
        :rtype: int
        """
        return self._channel_partner_oid

    @channel_partner_oid.setter
    def channel_partner_oid(self, channel_partner_oid):
        """Sets the channel_partner_oid of this CustomerEDI.

        EDI channel partner this customer profile is associated with  # noqa: E501

        :param channel_partner_oid: The channel_partner_oid of this CustomerEDI.  # noqa: E501
        :type: int
        """

        self._channel_partner_oid = channel_partner_oid

    @property
    def distribution_center_number(self):
        """Gets the distribution_center_number of this CustomerEDI.  # noqa: E501

        The EDI distribution center number associated with this customer profile.  # noqa: E501

        :return: The distribution_center_number of this CustomerEDI.  # noqa: E501
        :rtype: str
        """
        return self._distribution_center_number

    @distribution_center_number.setter
    def distribution_center_number(self, distribution_center_number):
        """Sets the distribution_center_number of this CustomerEDI.

        The EDI distribution center number associated with this customer profile.  # noqa: E501

        :param distribution_center_number: The distribution_center_number of this CustomerEDI.  # noqa: E501
        :type: str
        """

        self._distribution_center_number = distribution_center_number

    @property
    def store_number(self):
        """Gets the store_number of this CustomerEDI.  # noqa: E501

        The EDI store number associated with this customer profile.  # noqa: E501

        :return: The store_number of this CustomerEDI.  # noqa: E501
        :rtype: str
        """
        return self._store_number

    @store_number.setter
    def store_number(self, store_number):
        """Sets the store_number of this CustomerEDI.

        The EDI store number associated with this customer profile.  # noqa: E501

        :param store_number: The store_number of this CustomerEDI.  # noqa: E501
        :type: str
        """

        self._store_number = store_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomerEDI, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomerEDI):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
