# coding: utf-8

"""
    UltraCart Rest API V2

    This is the next generation UltraCart REST API...

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CartFinalizeOrderRequestOptions(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auto_approve_purchase_order': 'bool',
        'channel_partner_code': 'str',
        'channel_partner_oid': 'int',
        'channel_partner_order_id': 'str',
        'consider_recurring': 'bool',
        'credit_card_authorization_amount': 'float',
        'credit_card_authorization_date': 'str',
        'credit_card_authorization_reference_number': 'str',
        'no_realtime_payment_processing': 'bool',
        'setup_next_cart': 'bool',
        'skip_payment_processing': 'bool',
        'store_completed': 'bool',
        'store_if_payment_declines': 'bool'
    }

    attribute_map = {
        'auto_approve_purchase_order': 'auto_approve_purchase_order',
        'channel_partner_code': 'channel_partner_code',
        'channel_partner_oid': 'channel_partner_oid',
        'channel_partner_order_id': 'channel_partner_order_id',
        'consider_recurring': 'consider_recurring',
        'credit_card_authorization_amount': 'credit_card_authorization_amount',
        'credit_card_authorization_date': 'credit_card_authorization_date',
        'credit_card_authorization_reference_number': 'credit_card_authorization_reference_number',
        'no_realtime_payment_processing': 'no_realtime_payment_processing',
        'setup_next_cart': 'setup_next_cart',
        'skip_payment_processing': 'skip_payment_processing',
        'store_completed': 'store_completed',
        'store_if_payment_declines': 'store_if_payment_declines'
    }

    def __init__(self, auto_approve_purchase_order=None, channel_partner_code=None, channel_partner_oid=None, channel_partner_order_id=None, consider_recurring=None, credit_card_authorization_amount=None, credit_card_authorization_date=None, credit_card_authorization_reference_number=None, no_realtime_payment_processing=None, setup_next_cart=None, skip_payment_processing=None, store_completed=None, store_if_payment_declines=None):
        """
        CartFinalizeOrderRequestOptions - a model defined in Swagger
        """

        self._auto_approve_purchase_order = None
        self._channel_partner_code = None
        self._channel_partner_oid = None
        self._channel_partner_order_id = None
        self._consider_recurring = None
        self._credit_card_authorization_amount = None
        self._credit_card_authorization_date = None
        self._credit_card_authorization_reference_number = None
        self._no_realtime_payment_processing = None
        self._setup_next_cart = None
        self._skip_payment_processing = None
        self._store_completed = None
        self._store_if_payment_declines = None
        self.discriminator = None

        if auto_approve_purchase_order is not None:
          self.auto_approve_purchase_order = auto_approve_purchase_order
        if channel_partner_code is not None:
          self.channel_partner_code = channel_partner_code
        if channel_partner_oid is not None:
          self.channel_partner_oid = channel_partner_oid
        if channel_partner_order_id is not None:
          self.channel_partner_order_id = channel_partner_order_id
        if consider_recurring is not None:
          self.consider_recurring = consider_recurring
        if credit_card_authorization_amount is not None:
          self.credit_card_authorization_amount = credit_card_authorization_amount
        if credit_card_authorization_date is not None:
          self.credit_card_authorization_date = credit_card_authorization_date
        if credit_card_authorization_reference_number is not None:
          self.credit_card_authorization_reference_number = credit_card_authorization_reference_number
        if no_realtime_payment_processing is not None:
          self.no_realtime_payment_processing = no_realtime_payment_processing
        if setup_next_cart is not None:
          self.setup_next_cart = setup_next_cart
        if skip_payment_processing is not None:
          self.skip_payment_processing = skip_payment_processing
        if store_completed is not None:
          self.store_completed = store_completed
        if store_if_payment_declines is not None:
          self.store_if_payment_declines = store_if_payment_declines

    @property
    def auto_approve_purchase_order(self):
        """
        Gets the auto_approve_purchase_order of this CartFinalizeOrderRequestOptions.
        Automatically approve the purchase order

        :return: The auto_approve_purchase_order of this CartFinalizeOrderRequestOptions.
        :rtype: bool
        """
        return self._auto_approve_purchase_order

    @auto_approve_purchase_order.setter
    def auto_approve_purchase_order(self, auto_approve_purchase_order):
        """
        Sets the auto_approve_purchase_order of this CartFinalizeOrderRequestOptions.
        Automatically approve the purchase order

        :param auto_approve_purchase_order: The auto_approve_purchase_order of this CartFinalizeOrderRequestOptions.
        :type: bool
        """

        self._auto_approve_purchase_order = auto_approve_purchase_order

    @property
    def channel_partner_code(self):
        """
        Gets the channel_partner_code of this CartFinalizeOrderRequestOptions.
        Channel partner code to associate this order with

        :return: The channel_partner_code of this CartFinalizeOrderRequestOptions.
        :rtype: str
        """
        return self._channel_partner_code

    @channel_partner_code.setter
    def channel_partner_code(self, channel_partner_code):
        """
        Sets the channel_partner_code of this CartFinalizeOrderRequestOptions.
        Channel partner code to associate this order with

        :param channel_partner_code: The channel_partner_code of this CartFinalizeOrderRequestOptions.
        :type: str
        """

        self._channel_partner_code = channel_partner_code

    @property
    def channel_partner_oid(self):
        """
        Gets the channel_partner_oid of this CartFinalizeOrderRequestOptions.
        Channel partner oid to associate this order with

        :return: The channel_partner_oid of this CartFinalizeOrderRequestOptions.
        :rtype: int
        """
        return self._channel_partner_oid

    @channel_partner_oid.setter
    def channel_partner_oid(self, channel_partner_oid):
        """
        Sets the channel_partner_oid of this CartFinalizeOrderRequestOptions.
        Channel partner oid to associate this order with

        :param channel_partner_oid: The channel_partner_oid of this CartFinalizeOrderRequestOptions.
        :type: int
        """

        self._channel_partner_oid = channel_partner_oid

    @property
    def channel_partner_order_id(self):
        """
        Gets the channel_partner_order_id of this CartFinalizeOrderRequestOptions.
        Channel partner order id for reference

        :return: The channel_partner_order_id of this CartFinalizeOrderRequestOptions.
        :rtype: str
        """
        return self._channel_partner_order_id

    @channel_partner_order_id.setter
    def channel_partner_order_id(self, channel_partner_order_id):
        """
        Sets the channel_partner_order_id of this CartFinalizeOrderRequestOptions.
        Channel partner order id for reference

        :param channel_partner_order_id: The channel_partner_order_id of this CartFinalizeOrderRequestOptions.
        :type: str
        """

        self._channel_partner_order_id = channel_partner_order_id

    @property
    def consider_recurring(self):
        """
        Gets the consider_recurring of this CartFinalizeOrderRequestOptions.
        Consider this order a recurring order for the purposes of payment gateway recurring flag

        :return: The consider_recurring of this CartFinalizeOrderRequestOptions.
        :rtype: bool
        """
        return self._consider_recurring

    @consider_recurring.setter
    def consider_recurring(self, consider_recurring):
        """
        Sets the consider_recurring of this CartFinalizeOrderRequestOptions.
        Consider this order a recurring order for the purposes of payment gateway recurring flag

        :param consider_recurring: The consider_recurring of this CartFinalizeOrderRequestOptions.
        :type: bool
        """

        self._consider_recurring = consider_recurring

    @property
    def credit_card_authorization_amount(self):
        """
        Gets the credit_card_authorization_amount of this CartFinalizeOrderRequestOptions.
        If the order was authorized outside of UltraCart, this is the amount of the authorization

        :return: The credit_card_authorization_amount of this CartFinalizeOrderRequestOptions.
        :rtype: float
        """
        return self._credit_card_authorization_amount

    @credit_card_authorization_amount.setter
    def credit_card_authorization_amount(self, credit_card_authorization_amount):
        """
        Sets the credit_card_authorization_amount of this CartFinalizeOrderRequestOptions.
        If the order was authorized outside of UltraCart, this is the amount of the authorization

        :param credit_card_authorization_amount: The credit_card_authorization_amount of this CartFinalizeOrderRequestOptions.
        :type: float
        """

        self._credit_card_authorization_amount = credit_card_authorization_amount

    @property
    def credit_card_authorization_date(self):
        """
        Gets the credit_card_authorization_date of this CartFinalizeOrderRequestOptions.
        If the order was authorized outside of UltraCart, this is the date/time of the authorization

        :return: The credit_card_authorization_date of this CartFinalizeOrderRequestOptions.
        :rtype: str
        """
        return self._credit_card_authorization_date

    @credit_card_authorization_date.setter
    def credit_card_authorization_date(self, credit_card_authorization_date):
        """
        Sets the credit_card_authorization_date of this CartFinalizeOrderRequestOptions.
        If the order was authorized outside of UltraCart, this is the date/time of the authorization

        :param credit_card_authorization_date: The credit_card_authorization_date of this CartFinalizeOrderRequestOptions.
        :type: str
        """

        self._credit_card_authorization_date = credit_card_authorization_date

    @property
    def credit_card_authorization_reference_number(self):
        """
        Gets the credit_card_authorization_reference_number of this CartFinalizeOrderRequestOptions.
        If the order was authorized outside of UltraCart, this is the authorization reference number

        :return: The credit_card_authorization_reference_number of this CartFinalizeOrderRequestOptions.
        :rtype: str
        """
        return self._credit_card_authorization_reference_number

    @credit_card_authorization_reference_number.setter
    def credit_card_authorization_reference_number(self, credit_card_authorization_reference_number):
        """
        Sets the credit_card_authorization_reference_number of this CartFinalizeOrderRequestOptions.
        If the order was authorized outside of UltraCart, this is the authorization reference number

        :param credit_card_authorization_reference_number: The credit_card_authorization_reference_number of this CartFinalizeOrderRequestOptions.
        :type: str
        """
        if credit_card_authorization_reference_number is not None and len(credit_card_authorization_reference_number) > 60:
            raise ValueError("Invalid value for `credit_card_authorization_reference_number`, length must be less than or equal to `60`")

        self._credit_card_authorization_reference_number = credit_card_authorization_reference_number

    @property
    def no_realtime_payment_processing(self):
        """
        Gets the no_realtime_payment_processing of this CartFinalizeOrderRequestOptions.
        Prevents normal real-time processing of the payment and sends the order to Accounts Receivable

        :return: The no_realtime_payment_processing of this CartFinalizeOrderRequestOptions.
        :rtype: bool
        """
        return self._no_realtime_payment_processing

    @no_realtime_payment_processing.setter
    def no_realtime_payment_processing(self, no_realtime_payment_processing):
        """
        Sets the no_realtime_payment_processing of this CartFinalizeOrderRequestOptions.
        Prevents normal real-time processing of the payment and sends the order to Accounts Receivable

        :param no_realtime_payment_processing: The no_realtime_payment_processing of this CartFinalizeOrderRequestOptions.
        :type: bool
        """

        self._no_realtime_payment_processing = no_realtime_payment_processing

    @property
    def setup_next_cart(self):
        """
        Gets the setup_next_cart of this CartFinalizeOrderRequestOptions.
        True if the system should create another cart automatically if the current cart was logged into a profile

        :return: The setup_next_cart of this CartFinalizeOrderRequestOptions.
        :rtype: bool
        """
        return self._setup_next_cart

    @setup_next_cart.setter
    def setup_next_cart(self, setup_next_cart):
        """
        Sets the setup_next_cart of this CartFinalizeOrderRequestOptions.
        True if the system should create another cart automatically if the current cart was logged into a profile

        :param setup_next_cart: The setup_next_cart of this CartFinalizeOrderRequestOptions.
        :type: bool
        """

        self._setup_next_cart = setup_next_cart

    @property
    def skip_payment_processing(self):
        """
        Gets the skip_payment_processing of this CartFinalizeOrderRequestOptions.
        Skip payment processing and move the order on to shipping (or completed if no shipping required)

        :return: The skip_payment_processing of this CartFinalizeOrderRequestOptions.
        :rtype: bool
        """
        return self._skip_payment_processing

    @skip_payment_processing.setter
    def skip_payment_processing(self, skip_payment_processing):
        """
        Sets the skip_payment_processing of this CartFinalizeOrderRequestOptions.
        Skip payment processing and move the order on to shipping (or completed if no shipping required)

        :param skip_payment_processing: The skip_payment_processing of this CartFinalizeOrderRequestOptions.
        :type: bool
        """

        self._skip_payment_processing = skip_payment_processing

    @property
    def store_completed(self):
        """
        Gets the store_completed of this CartFinalizeOrderRequestOptions.
        True the order in the completed stage

        :return: The store_completed of this CartFinalizeOrderRequestOptions.
        :rtype: bool
        """
        return self._store_completed

    @store_completed.setter
    def store_completed(self, store_completed):
        """
        Sets the store_completed of this CartFinalizeOrderRequestOptions.
        True the order in the completed stage

        :param store_completed: The store_completed of this CartFinalizeOrderRequestOptions.
        :type: bool
        """

        self._store_completed = store_completed

    @property
    def store_if_payment_declines(self):
        """
        Gets the store_if_payment_declines of this CartFinalizeOrderRequestOptions.
        Store the order in accounts receivable if the payment declines

        :return: The store_if_payment_declines of this CartFinalizeOrderRequestOptions.
        :rtype: bool
        """
        return self._store_if_payment_declines

    @store_if_payment_declines.setter
    def store_if_payment_declines(self, store_if_payment_declines):
        """
        Sets the store_if_payment_declines of this CartFinalizeOrderRequestOptions.
        Store the order in accounts receivable if the payment declines

        :param store_if_payment_declines: The store_if_payment_declines of this CartFinalizeOrderRequestOptions.
        :type: bool
        """

        self._store_if_payment_declines = store_if_payment_declines

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CartFinalizeOrderRequestOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
