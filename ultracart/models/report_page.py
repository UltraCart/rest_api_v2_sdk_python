# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ReportPage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'filters': 'list[ReportPageFilter]',
        'height': 'float',
        'title': 'str',
        'visualizations': 'list[ReportPageVisualization]',
        'width': 'float'
    }

    attribute_map = {
        'filters': 'filters',
        'height': 'height',
        'title': 'title',
        'visualizations': 'visualizations',
        'width': 'width'
    }

    def __init__(self, filters=None, height=None, title=None, visualizations=None, width=None):  # noqa: E501
        """ReportPage - a model defined in Swagger"""  # noqa: E501

        self._filters = None
        self._height = None
        self._title = None
        self._visualizations = None
        self._width = None
        self.discriminator = None

        if filters is not None:
            self.filters = filters
        if height is not None:
            self.height = height
        if title is not None:
            self.title = title
        if visualizations is not None:
            self.visualizations = visualizations
        if width is not None:
            self.width = width

    @property
    def filters(self):
        """Gets the filters of this ReportPage.  # noqa: E501


        :return: The filters of this ReportPage.  # noqa: E501
        :rtype: list[ReportPageFilter]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this ReportPage.


        :param filters: The filters of this ReportPage.  # noqa: E501
        :type: list[ReportPageFilter]
        """

        self._filters = filters

    @property
    def height(self):
        """Gets the height of this ReportPage.  # noqa: E501

        Height of the report page in inches  # noqa: E501

        :return: The height of this ReportPage.  # noqa: E501
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this ReportPage.

        Height of the report page in inches  # noqa: E501

        :param height: The height of this ReportPage.  # noqa: E501
        :type: float
        """

        self._height = height

    @property
    def title(self):
        """Gets the title of this ReportPage.  # noqa: E501


        :return: The title of this ReportPage.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ReportPage.


        :param title: The title of this ReportPage.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def visualizations(self):
        """Gets the visualizations of this ReportPage.  # noqa: E501

        Visualizations on the report page.  # noqa: E501

        :return: The visualizations of this ReportPage.  # noqa: E501
        :rtype: list[ReportPageVisualization]
        """
        return self._visualizations

    @visualizations.setter
    def visualizations(self, visualizations):
        """Sets the visualizations of this ReportPage.

        Visualizations on the report page.  # noqa: E501

        :param visualizations: The visualizations of this ReportPage.  # noqa: E501
        :type: list[ReportPageVisualization]
        """

        self._visualizations = visualizations

    @property
    def width(self):
        """Gets the width of this ReportPage.  # noqa: E501

        Width of the report page in inches  # noqa: E501

        :return: The width of this ReportPage.  # noqa: E501
        :rtype: float
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this ReportPage.

        Width of the report page in inches  # noqa: E501

        :param width: The width of this ReportPage.  # noqa: E501
        :type: float
        """

        self._width = width

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReportPage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportPage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
