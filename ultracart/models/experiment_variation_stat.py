# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ExperimentVariationStat(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'add_to_cart_count': 'int',
        'bounce_count': 'int',
        'duration_seconds_sum': 'int',
        'event_count': 'int',
        'initiate_checkout_count': 'int',
        'order_count': 'int',
        'order_item_count': 'int',
        'page_view_count': 'int',
        'revenue': 'float',
        'session_count': 'int',
        'stat_dts': 'str'
    }

    attribute_map = {
        'add_to_cart_count': 'add_to_cart_count',
        'bounce_count': 'bounce_count',
        'duration_seconds_sum': 'duration_seconds_sum',
        'event_count': 'event_count',
        'initiate_checkout_count': 'initiate_checkout_count',
        'order_count': 'order_count',
        'order_item_count': 'order_item_count',
        'page_view_count': 'page_view_count',
        'revenue': 'revenue',
        'session_count': 'session_count',
        'stat_dts': 'stat_dts'
    }

    def __init__(self, add_to_cart_count=None, bounce_count=None, duration_seconds_sum=None, event_count=None, initiate_checkout_count=None, order_count=None, order_item_count=None, page_view_count=None, revenue=None, session_count=None, stat_dts=None):  # noqa: E501
        """ExperimentVariationStat - a model defined in Swagger"""  # noqa: E501

        self._add_to_cart_count = None
        self._bounce_count = None
        self._duration_seconds_sum = None
        self._event_count = None
        self._initiate_checkout_count = None
        self._order_count = None
        self._order_item_count = None
        self._page_view_count = None
        self._revenue = None
        self._session_count = None
        self._stat_dts = None
        self.discriminator = None

        if add_to_cart_count is not None:
            self.add_to_cart_count = add_to_cart_count
        if bounce_count is not None:
            self.bounce_count = bounce_count
        if duration_seconds_sum is not None:
            self.duration_seconds_sum = duration_seconds_sum
        if event_count is not None:
            self.event_count = event_count
        if initiate_checkout_count is not None:
            self.initiate_checkout_count = initiate_checkout_count
        if order_count is not None:
            self.order_count = order_count
        if order_item_count is not None:
            self.order_item_count = order_item_count
        if page_view_count is not None:
            self.page_view_count = page_view_count
        if revenue is not None:
            self.revenue = revenue
        if session_count is not None:
            self.session_count = session_count
        if stat_dts is not None:
            self.stat_dts = stat_dts

    @property
    def add_to_cart_count(self):
        """Gets the add_to_cart_count of this ExperimentVariationStat.  # noqa: E501

        Total add to cart count for this variation  # noqa: E501

        :return: The add_to_cart_count of this ExperimentVariationStat.  # noqa: E501
        :rtype: int
        """
        return self._add_to_cart_count

    @add_to_cart_count.setter
    def add_to_cart_count(self, add_to_cart_count):
        """Sets the add_to_cart_count of this ExperimentVariationStat.

        Total add to cart count for this variation  # noqa: E501

        :param add_to_cart_count: The add_to_cart_count of this ExperimentVariationStat.  # noqa: E501
        :type: int
        """

        self._add_to_cart_count = add_to_cart_count

    @property
    def bounce_count(self):
        """Gets the bounce_count of this ExperimentVariationStat.  # noqa: E501

        Total bounce count for this variation  # noqa: E501

        :return: The bounce_count of this ExperimentVariationStat.  # noqa: E501
        :rtype: int
        """
        return self._bounce_count

    @bounce_count.setter
    def bounce_count(self, bounce_count):
        """Sets the bounce_count of this ExperimentVariationStat.

        Total bounce count for this variation  # noqa: E501

        :param bounce_count: The bounce_count of this ExperimentVariationStat.  # noqa: E501
        :type: int
        """

        self._bounce_count = bounce_count

    @property
    def duration_seconds_sum(self):
        """Gets the duration_seconds_sum of this ExperimentVariationStat.  # noqa: E501

        Total number of seconds spent on the site for this variation  # noqa: E501

        :return: The duration_seconds_sum of this ExperimentVariationStat.  # noqa: E501
        :rtype: int
        """
        return self._duration_seconds_sum

    @duration_seconds_sum.setter
    def duration_seconds_sum(self, duration_seconds_sum):
        """Sets the duration_seconds_sum of this ExperimentVariationStat.

        Total number of seconds spent on the site for this variation  # noqa: E501

        :param duration_seconds_sum: The duration_seconds_sum of this ExperimentVariationStat.  # noqa: E501
        :type: int
        """

        self._duration_seconds_sum = duration_seconds_sum

    @property
    def event_count(self):
        """Gets the event_count of this ExperimentVariationStat.  # noqa: E501

        Total event count for this variation  # noqa: E501

        :return: The event_count of this ExperimentVariationStat.  # noqa: E501
        :rtype: int
        """
        return self._event_count

    @event_count.setter
    def event_count(self, event_count):
        """Sets the event_count of this ExperimentVariationStat.

        Total event count for this variation  # noqa: E501

        :param event_count: The event_count of this ExperimentVariationStat.  # noqa: E501
        :type: int
        """

        self._event_count = event_count

    @property
    def initiate_checkout_count(self):
        """Gets the initiate_checkout_count of this ExperimentVariationStat.  # noqa: E501

        Total initiate checkout count for this variation  # noqa: E501

        :return: The initiate_checkout_count of this ExperimentVariationStat.  # noqa: E501
        :rtype: int
        """
        return self._initiate_checkout_count

    @initiate_checkout_count.setter
    def initiate_checkout_count(self, initiate_checkout_count):
        """Sets the initiate_checkout_count of this ExperimentVariationStat.

        Total initiate checkout count for this variation  # noqa: E501

        :param initiate_checkout_count: The initiate_checkout_count of this ExperimentVariationStat.  # noqa: E501
        :type: int
        """

        self._initiate_checkout_count = initiate_checkout_count

    @property
    def order_count(self):
        """Gets the order_count of this ExperimentVariationStat.  # noqa: E501

        Total order count for this variation  # noqa: E501

        :return: The order_count of this ExperimentVariationStat.  # noqa: E501
        :rtype: int
        """
        return self._order_count

    @order_count.setter
    def order_count(self, order_count):
        """Sets the order_count of this ExperimentVariationStat.

        Total order count for this variation  # noqa: E501

        :param order_count: The order_count of this ExperimentVariationStat.  # noqa: E501
        :type: int
        """

        self._order_count = order_count

    @property
    def order_item_count(self):
        """Gets the order_item_count of this ExperimentVariationStat.  # noqa: E501

        Total order item count for this variation  # noqa: E501

        :return: The order_item_count of this ExperimentVariationStat.  # noqa: E501
        :rtype: int
        """
        return self._order_item_count

    @order_item_count.setter
    def order_item_count(self, order_item_count):
        """Sets the order_item_count of this ExperimentVariationStat.

        Total order item count for this variation  # noqa: E501

        :param order_item_count: The order_item_count of this ExperimentVariationStat.  # noqa: E501
        :type: int
        """

        self._order_item_count = order_item_count

    @property
    def page_view_count(self):
        """Gets the page_view_count of this ExperimentVariationStat.  # noqa: E501

        Total page view count for this variation  # noqa: E501

        :return: The page_view_count of this ExperimentVariationStat.  # noqa: E501
        :rtype: int
        """
        return self._page_view_count

    @page_view_count.setter
    def page_view_count(self, page_view_count):
        """Sets the page_view_count of this ExperimentVariationStat.

        Total page view count for this variation  # noqa: E501

        :param page_view_count: The page_view_count of this ExperimentVariationStat.  # noqa: E501
        :type: int
        """

        self._page_view_count = page_view_count

    @property
    def revenue(self):
        """Gets the revenue of this ExperimentVariationStat.  # noqa: E501

        Total revenue for this variation  # noqa: E501

        :return: The revenue of this ExperimentVariationStat.  # noqa: E501
        :rtype: float
        """
        return self._revenue

    @revenue.setter
    def revenue(self, revenue):
        """Sets the revenue of this ExperimentVariationStat.

        Total revenue for this variation  # noqa: E501

        :param revenue: The revenue of this ExperimentVariationStat.  # noqa: E501
        :type: float
        """

        self._revenue = revenue

    @property
    def session_count(self):
        """Gets the session_count of this ExperimentVariationStat.  # noqa: E501

        Total sessions for this variation  # noqa: E501

        :return: The session_count of this ExperimentVariationStat.  # noqa: E501
        :rtype: int
        """
        return self._session_count

    @session_count.setter
    def session_count(self, session_count):
        """Sets the session_count of this ExperimentVariationStat.

        Total sessions for this variation  # noqa: E501

        :param session_count: The session_count of this ExperimentVariationStat.  # noqa: E501
        :type: int
        """

        self._session_count = session_count

    @property
    def stat_dts(self):
        """Gets the stat_dts of this ExperimentVariationStat.  # noqa: E501

        Date/time that the statistic was created  # noqa: E501

        :return: The stat_dts of this ExperimentVariationStat.  # noqa: E501
        :rtype: str
        """
        return self._stat_dts

    @stat_dts.setter
    def stat_dts(self, stat_dts):
        """Sets the stat_dts of this ExperimentVariationStat.

        Date/time that the statistic was created  # noqa: E501

        :param stat_dts: The stat_dts of this ExperimentVariationStat.  # noqa: E501
        :type: str
        """

        self._stat_dts = stat_dts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExperimentVariationStat, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExperimentVariationStat):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
