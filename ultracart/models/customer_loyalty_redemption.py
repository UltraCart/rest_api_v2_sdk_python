# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CustomerLoyaltyRedemption(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'coupon_code': 'str',
        'coupon_code_oid': 'int',
        'coupon_used': 'bool',
        'description_for_customer': 'str',
        'expiration_dts': 'str',
        'gift_certificate_code': 'str',
        'gift_certificate_oid': 'int',
        'loyalty_ledger_oid': 'int',
        'loyalty_points': 'int',
        'loyalty_redemption_oid': 'int',
        'order_id': 'str',
        'redemption_dts': 'str',
        'remaining_balance': 'float'
    }

    attribute_map = {
        'coupon_code': 'coupon_code',
        'coupon_code_oid': 'coupon_code_oid',
        'coupon_used': 'coupon_used',
        'description_for_customer': 'description_for_customer',
        'expiration_dts': 'expiration_dts',
        'gift_certificate_code': 'gift_certificate_code',
        'gift_certificate_oid': 'gift_certificate_oid',
        'loyalty_ledger_oid': 'loyalty_ledger_oid',
        'loyalty_points': 'loyalty_points',
        'loyalty_redemption_oid': 'loyalty_redemption_oid',
        'order_id': 'order_id',
        'redemption_dts': 'redemption_dts',
        'remaining_balance': 'remaining_balance'
    }

    def __init__(self, coupon_code=None, coupon_code_oid=None, coupon_used=None, description_for_customer=None, expiration_dts=None, gift_certificate_code=None, gift_certificate_oid=None, loyalty_ledger_oid=None, loyalty_points=None, loyalty_redemption_oid=None, order_id=None, redemption_dts=None, remaining_balance=None):  # noqa: E501
        """CustomerLoyaltyRedemption - a model defined in Swagger"""  # noqa: E501

        self._coupon_code = None
        self._coupon_code_oid = None
        self._coupon_used = None
        self._description_for_customer = None
        self._expiration_dts = None
        self._gift_certificate_code = None
        self._gift_certificate_oid = None
        self._loyalty_ledger_oid = None
        self._loyalty_points = None
        self._loyalty_redemption_oid = None
        self._order_id = None
        self._redemption_dts = None
        self._remaining_balance = None
        self.discriminator = None

        if coupon_code is not None:
            self.coupon_code = coupon_code
        if coupon_code_oid is not None:
            self.coupon_code_oid = coupon_code_oid
        if coupon_used is not None:
            self.coupon_used = coupon_used
        if description_for_customer is not None:
            self.description_for_customer = description_for_customer
        if expiration_dts is not None:
            self.expiration_dts = expiration_dts
        if gift_certificate_code is not None:
            self.gift_certificate_code = gift_certificate_code
        if gift_certificate_oid is not None:
            self.gift_certificate_oid = gift_certificate_oid
        if loyalty_ledger_oid is not None:
            self.loyalty_ledger_oid = loyalty_ledger_oid
        if loyalty_points is not None:
            self.loyalty_points = loyalty_points
        if loyalty_redemption_oid is not None:
            self.loyalty_redemption_oid = loyalty_redemption_oid
        if order_id is not None:
            self.order_id = order_id
        if redemption_dts is not None:
            self.redemption_dts = redemption_dts
        if remaining_balance is not None:
            self.remaining_balance = remaining_balance

    @property
    def coupon_code(self):
        """Gets the coupon_code of this CustomerLoyaltyRedemption.  # noqa: E501

        Coupon code  # noqa: E501

        :return: The coupon_code of this CustomerLoyaltyRedemption.  # noqa: E501
        :rtype: str
        """
        return self._coupon_code

    @coupon_code.setter
    def coupon_code(self, coupon_code):
        """Sets the coupon_code of this CustomerLoyaltyRedemption.

        Coupon code  # noqa: E501

        :param coupon_code: The coupon_code of this CustomerLoyaltyRedemption.  # noqa: E501
        :type: str
        """

        self._coupon_code = coupon_code

    @property
    def coupon_code_oid(self):
        """Gets the coupon_code_oid of this CustomerLoyaltyRedemption.  # noqa: E501

        Coupon code OID  # noqa: E501

        :return: The coupon_code_oid of this CustomerLoyaltyRedemption.  # noqa: E501
        :rtype: int
        """
        return self._coupon_code_oid

    @coupon_code_oid.setter
    def coupon_code_oid(self, coupon_code_oid):
        """Sets the coupon_code_oid of this CustomerLoyaltyRedemption.

        Coupon code OID  # noqa: E501

        :param coupon_code_oid: The coupon_code_oid of this CustomerLoyaltyRedemption.  # noqa: E501
        :type: int
        """

        self._coupon_code_oid = coupon_code_oid

    @property
    def coupon_used(self):
        """Gets the coupon_used of this CustomerLoyaltyRedemption.  # noqa: E501

        Coupon used  # noqa: E501

        :return: The coupon_used of this CustomerLoyaltyRedemption.  # noqa: E501
        :rtype: bool
        """
        return self._coupon_used

    @coupon_used.setter
    def coupon_used(self, coupon_used):
        """Sets the coupon_used of this CustomerLoyaltyRedemption.

        Coupon used  # noqa: E501

        :param coupon_used: The coupon_used of this CustomerLoyaltyRedemption.  # noqa: E501
        :type: bool
        """

        self._coupon_used = coupon_used

    @property
    def description_for_customer(self):
        """Gets the description_for_customer of this CustomerLoyaltyRedemption.  # noqa: E501

        Description for customer  # noqa: E501

        :return: The description_for_customer of this CustomerLoyaltyRedemption.  # noqa: E501
        :rtype: str
        """
        return self._description_for_customer

    @description_for_customer.setter
    def description_for_customer(self, description_for_customer):
        """Sets the description_for_customer of this CustomerLoyaltyRedemption.

        Description for customer  # noqa: E501

        :param description_for_customer: The description_for_customer of this CustomerLoyaltyRedemption.  # noqa: E501
        :type: str
        """

        self._description_for_customer = description_for_customer

    @property
    def expiration_dts(self):
        """Gets the expiration_dts of this CustomerLoyaltyRedemption.  # noqa: E501

        Expiration date  # noqa: E501

        :return: The expiration_dts of this CustomerLoyaltyRedemption.  # noqa: E501
        :rtype: str
        """
        return self._expiration_dts

    @expiration_dts.setter
    def expiration_dts(self, expiration_dts):
        """Sets the expiration_dts of this CustomerLoyaltyRedemption.

        Expiration date  # noqa: E501

        :param expiration_dts: The expiration_dts of this CustomerLoyaltyRedemption.  # noqa: E501
        :type: str
        """

        self._expiration_dts = expiration_dts

    @property
    def gift_certificate_code(self):
        """Gets the gift_certificate_code of this CustomerLoyaltyRedemption.  # noqa: E501

        Gift certificate code  # noqa: E501

        :return: The gift_certificate_code of this CustomerLoyaltyRedemption.  # noqa: E501
        :rtype: str
        """
        return self._gift_certificate_code

    @gift_certificate_code.setter
    def gift_certificate_code(self, gift_certificate_code):
        """Sets the gift_certificate_code of this CustomerLoyaltyRedemption.

        Gift certificate code  # noqa: E501

        :param gift_certificate_code: The gift_certificate_code of this CustomerLoyaltyRedemption.  # noqa: E501
        :type: str
        """

        self._gift_certificate_code = gift_certificate_code

    @property
    def gift_certificate_oid(self):
        """Gets the gift_certificate_oid of this CustomerLoyaltyRedemption.  # noqa: E501

        Gift certificate oid  # noqa: E501

        :return: The gift_certificate_oid of this CustomerLoyaltyRedemption.  # noqa: E501
        :rtype: int
        """
        return self._gift_certificate_oid

    @gift_certificate_oid.setter
    def gift_certificate_oid(self, gift_certificate_oid):
        """Sets the gift_certificate_oid of this CustomerLoyaltyRedemption.

        Gift certificate oid  # noqa: E501

        :param gift_certificate_oid: The gift_certificate_oid of this CustomerLoyaltyRedemption.  # noqa: E501
        :type: int
        """

        self._gift_certificate_oid = gift_certificate_oid

    @property
    def loyalty_ledger_oid(self):
        """Gets the loyalty_ledger_oid of this CustomerLoyaltyRedemption.  # noqa: E501

        Loyalty ledger OID  # noqa: E501

        :return: The loyalty_ledger_oid of this CustomerLoyaltyRedemption.  # noqa: E501
        :rtype: int
        """
        return self._loyalty_ledger_oid

    @loyalty_ledger_oid.setter
    def loyalty_ledger_oid(self, loyalty_ledger_oid):
        """Sets the loyalty_ledger_oid of this CustomerLoyaltyRedemption.

        Loyalty ledger OID  # noqa: E501

        :param loyalty_ledger_oid: The loyalty_ledger_oid of this CustomerLoyaltyRedemption.  # noqa: E501
        :type: int
        """

        self._loyalty_ledger_oid = loyalty_ledger_oid

    @property
    def loyalty_points(self):
        """Gets the loyalty_points of this CustomerLoyaltyRedemption.  # noqa: E501

        Loyalty points  # noqa: E501

        :return: The loyalty_points of this CustomerLoyaltyRedemption.  # noqa: E501
        :rtype: int
        """
        return self._loyalty_points

    @loyalty_points.setter
    def loyalty_points(self, loyalty_points):
        """Sets the loyalty_points of this CustomerLoyaltyRedemption.

        Loyalty points  # noqa: E501

        :param loyalty_points: The loyalty_points of this CustomerLoyaltyRedemption.  # noqa: E501
        :type: int
        """

        self._loyalty_points = loyalty_points

    @property
    def loyalty_redemption_oid(self):
        """Gets the loyalty_redemption_oid of this CustomerLoyaltyRedemption.  # noqa: E501

        Loyalty redemption OID  # noqa: E501

        :return: The loyalty_redemption_oid of this CustomerLoyaltyRedemption.  # noqa: E501
        :rtype: int
        """
        return self._loyalty_redemption_oid

    @loyalty_redemption_oid.setter
    def loyalty_redemption_oid(self, loyalty_redemption_oid):
        """Sets the loyalty_redemption_oid of this CustomerLoyaltyRedemption.

        Loyalty redemption OID  # noqa: E501

        :param loyalty_redemption_oid: The loyalty_redemption_oid of this CustomerLoyaltyRedemption.  # noqa: E501
        :type: int
        """

        self._loyalty_redemption_oid = loyalty_redemption_oid

    @property
    def order_id(self):
        """Gets the order_id of this CustomerLoyaltyRedemption.  # noqa: E501

        Order id  # noqa: E501

        :return: The order_id of this CustomerLoyaltyRedemption.  # noqa: E501
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this CustomerLoyaltyRedemption.

        Order id  # noqa: E501

        :param order_id: The order_id of this CustomerLoyaltyRedemption.  # noqa: E501
        :type: str
        """

        self._order_id = order_id

    @property
    def redemption_dts(self):
        """Gets the redemption_dts of this CustomerLoyaltyRedemption.  # noqa: E501

        Redemption date  # noqa: E501

        :return: The redemption_dts of this CustomerLoyaltyRedemption.  # noqa: E501
        :rtype: str
        """
        return self._redemption_dts

    @redemption_dts.setter
    def redemption_dts(self, redemption_dts):
        """Sets the redemption_dts of this CustomerLoyaltyRedemption.

        Redemption date  # noqa: E501

        :param redemption_dts: The redemption_dts of this CustomerLoyaltyRedemption.  # noqa: E501
        :type: str
        """

        self._redemption_dts = redemption_dts

    @property
    def remaining_balance(self):
        """Gets the remaining_balance of this CustomerLoyaltyRedemption.  # noqa: E501

        Remaining balance  # noqa: E501

        :return: The remaining_balance of this CustomerLoyaltyRedemption.  # noqa: E501
        :rtype: float
        """
        return self._remaining_balance

    @remaining_balance.setter
    def remaining_balance(self, remaining_balance):
        """Sets the remaining_balance of this CustomerLoyaltyRedemption.

        Remaining balance  # noqa: E501

        :param remaining_balance: The remaining_balance of this CustomerLoyaltyRedemption.  # noqa: E501
        :type: float
        """

        self._remaining_balance = remaining_balance

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomerLoyaltyRedemption, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomerLoyaltyRedemption):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
