# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ReportDataSetQuery(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'comparison_results': 'bool',
        'data_set_query_uuid': 'str',
        'data_source': 'ReportDataSource',
        'dimensions': 'list[ReportPageVisualizationDimension]',
        'filter': 'ReportFilter',
        'for_object_id': 'str',
        'for_object_type': 'str',
        'metrics': 'list[ReportPageVisualizationMetric]',
        'order_by_columns': 'list[ReportDataSetQueryOrderByColumn]',
        'page_size': 'int',
        'selected_filters': 'list[ReportFilter]',
        'skip_cache': 'bool',
        'user_data': 'str'
    }

    attribute_map = {
        'comparison_results': 'comparison_results',
        'data_set_query_uuid': 'data_set_query_uuid',
        'data_source': 'data_source',
        'dimensions': 'dimensions',
        'filter': 'filter',
        'for_object_id': 'for_object_id',
        'for_object_type': 'for_object_type',
        'metrics': 'metrics',
        'order_by_columns': 'order_by_columns',
        'page_size': 'page_size',
        'selected_filters': 'selected_filters',
        'skip_cache': 'skip_cache',
        'user_data': 'user_data'
    }

    def __init__(self, comparison_results=None, data_set_query_uuid=None, data_source=None, dimensions=None, filter=None, for_object_id=None, for_object_type=None, metrics=None, order_by_columns=None, page_size=None, selected_filters=None, skip_cache=None, user_data=None):  # noqa: E501
        """ReportDataSetQuery - a model defined in Swagger"""  # noqa: E501

        self._comparison_results = None
        self._data_set_query_uuid = None
        self._data_source = None
        self._dimensions = None
        self._filter = None
        self._for_object_id = None
        self._for_object_type = None
        self._metrics = None
        self._order_by_columns = None
        self._page_size = None
        self._selected_filters = None
        self._skip_cache = None
        self._user_data = None
        self.discriminator = None

        if comparison_results is not None:
            self.comparison_results = comparison_results
        if data_set_query_uuid is not None:
            self.data_set_query_uuid = data_set_query_uuid
        if data_source is not None:
            self.data_source = data_source
        if dimensions is not None:
            self.dimensions = dimensions
        if filter is not None:
            self.filter = filter
        if for_object_id is not None:
            self.for_object_id = for_object_id
        if for_object_type is not None:
            self.for_object_type = for_object_type
        if metrics is not None:
            self.metrics = metrics
        if order_by_columns is not None:
            self.order_by_columns = order_by_columns
        if page_size is not None:
            self.page_size = page_size
        if selected_filters is not None:
            self.selected_filters = selected_filters
        if skip_cache is not None:
            self.skip_cache = skip_cache
        if user_data is not None:
            self.user_data = user_data

    @property
    def comparison_results(self):
        """Gets the comparison_results of this ReportDataSetQuery.  # noqa: E501

        True if a date range filter is provided with comparison date ranges and two results should be returned for the query.  # noqa: E501

        :return: The comparison_results of this ReportDataSetQuery.  # noqa: E501
        :rtype: bool
        """
        return self._comparison_results

    @comparison_results.setter
    def comparison_results(self, comparison_results):
        """Sets the comparison_results of this ReportDataSetQuery.

        True if a date range filter is provided with comparison date ranges and two results should be returned for the query.  # noqa: E501

        :param comparison_results: The comparison_results of this ReportDataSetQuery.  # noqa: E501
        :type: bool
        """

        self._comparison_results = comparison_results

    @property
    def data_set_query_uuid(self):
        """Gets the data_set_query_uuid of this ReportDataSetQuery.  # noqa: E501

        A unique identifier assigned to the data set query that is returned.  # noqa: E501

        :return: The data_set_query_uuid of this ReportDataSetQuery.  # noqa: E501
        :rtype: str
        """
        return self._data_set_query_uuid

    @data_set_query_uuid.setter
    def data_set_query_uuid(self, data_set_query_uuid):
        """Sets the data_set_query_uuid of this ReportDataSetQuery.

        A unique identifier assigned to the data set query that is returned.  # noqa: E501

        :param data_set_query_uuid: The data_set_query_uuid of this ReportDataSetQuery.  # noqa: E501
        :type: str
        """

        self._data_set_query_uuid = data_set_query_uuid

    @property
    def data_source(self):
        """Gets the data_source of this ReportDataSetQuery.  # noqa: E501


        :return: The data_source of this ReportDataSetQuery.  # noqa: E501
        :rtype: ReportDataSource
        """
        return self._data_source

    @data_source.setter
    def data_source(self, data_source):
        """Sets the data_source of this ReportDataSetQuery.


        :param data_source: The data_source of this ReportDataSetQuery.  # noqa: E501
        :type: ReportDataSource
        """

        self._data_source = data_source

    @property
    def dimensions(self):
        """Gets the dimensions of this ReportDataSetQuery.  # noqa: E501


        :return: The dimensions of this ReportDataSetQuery.  # noqa: E501
        :rtype: list[ReportPageVisualizationDimension]
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this ReportDataSetQuery.


        :param dimensions: The dimensions of this ReportDataSetQuery.  # noqa: E501
        :type: list[ReportPageVisualizationDimension]
        """

        self._dimensions = dimensions

    @property
    def filter(self):
        """Gets the filter of this ReportDataSetQuery.  # noqa: E501


        :return: The filter of this ReportDataSetQuery.  # noqa: E501
        :rtype: ReportFilter
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this ReportDataSetQuery.


        :param filter: The filter of this ReportDataSetQuery.  # noqa: E501
        :type: ReportFilter
        """

        self._filter = filter

    @property
    def for_object_id(self):
        """Gets the for_object_id of this ReportDataSetQuery.  # noqa: E501

        An identifier that can be used to help match up the returned data set  # noqa: E501

        :return: The for_object_id of this ReportDataSetQuery.  # noqa: E501
        :rtype: str
        """
        return self._for_object_id

    @for_object_id.setter
    def for_object_id(self, for_object_id):
        """Sets the for_object_id of this ReportDataSetQuery.

        An identifier that can be used to help match up the returned data set  # noqa: E501

        :param for_object_id: The for_object_id of this ReportDataSetQuery.  # noqa: E501
        :type: str
        """

        self._for_object_id = for_object_id

    @property
    def for_object_type(self):
        """Gets the for_object_type of this ReportDataSetQuery.  # noqa: E501

        The type of object this data set is for  # noqa: E501

        :return: The for_object_type of this ReportDataSetQuery.  # noqa: E501
        :rtype: str
        """
        return self._for_object_type

    @for_object_type.setter
    def for_object_type(self, for_object_type):
        """Sets the for_object_type of this ReportDataSetQuery.

        The type of object this data set is for  # noqa: E501

        :param for_object_type: The for_object_type of this ReportDataSetQuery.  # noqa: E501
        :type: str
        """
        allowed_values = ["schema", "filter", "visualization"]  # noqa: E501
        if for_object_type not in allowed_values:
            raise ValueError(
                "Invalid value for `for_object_type` ({0}), must be one of {1}"  # noqa: E501
                .format(for_object_type, allowed_values)
            )

        self._for_object_type = for_object_type

    @property
    def metrics(self):
        """Gets the metrics of this ReportDataSetQuery.  # noqa: E501


        :return: The metrics of this ReportDataSetQuery.  # noqa: E501
        :rtype: list[ReportPageVisualizationMetric]
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this ReportDataSetQuery.


        :param metrics: The metrics of this ReportDataSetQuery.  # noqa: E501
        :type: list[ReportPageVisualizationMetric]
        """

        self._metrics = metrics

    @property
    def order_by_columns(self):
        """Gets the order_by_columns of this ReportDataSetQuery.  # noqa: E501

        The columns to order by in the final result.  If not specified the dimensions will be used  # noqa: E501

        :return: The order_by_columns of this ReportDataSetQuery.  # noqa: E501
        :rtype: list[ReportDataSetQueryOrderByColumn]
        """
        return self._order_by_columns

    @order_by_columns.setter
    def order_by_columns(self, order_by_columns):
        """Sets the order_by_columns of this ReportDataSetQuery.

        The columns to order by in the final result.  If not specified the dimensions will be used  # noqa: E501

        :param order_by_columns: The order_by_columns of this ReportDataSetQuery.  # noqa: E501
        :type: list[ReportDataSetQueryOrderByColumn]
        """

        self._order_by_columns = order_by_columns

    @property
    def page_size(self):
        """Gets the page_size of this ReportDataSetQuery.  # noqa: E501

        Result set page size.  The default value is 200 records.  Max is 10000.  # noqa: E501

        :return: The page_size of this ReportDataSetQuery.  # noqa: E501
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this ReportDataSetQuery.

        Result set page size.  The default value is 200 records.  Max is 10000.  # noqa: E501

        :param page_size: The page_size of this ReportDataSetQuery.  # noqa: E501
        :type: int
        """

        self._page_size = page_size

    @property
    def selected_filters(self):
        """Gets the selected_filters of this ReportDataSetQuery.  # noqa: E501


        :return: The selected_filters of this ReportDataSetQuery.  # noqa: E501
        :rtype: list[ReportFilter]
        """
        return self._selected_filters

    @selected_filters.setter
    def selected_filters(self, selected_filters):
        """Sets the selected_filters of this ReportDataSetQuery.


        :param selected_filters: The selected_filters of this ReportDataSetQuery.  # noqa: E501
        :type: list[ReportFilter]
        """

        self._selected_filters = selected_filters

    @property
    def skip_cache(self):
        """Gets the skip_cache of this ReportDataSetQuery.  # noqa: E501

        True if the 15 minute cache should be skipped.  # noqa: E501

        :return: The skip_cache of this ReportDataSetQuery.  # noqa: E501
        :rtype: bool
        """
        return self._skip_cache

    @skip_cache.setter
    def skip_cache(self, skip_cache):
        """Sets the skip_cache of this ReportDataSetQuery.

        True if the 15 minute cache should be skipped.  # noqa: E501

        :param skip_cache: The skip_cache of this ReportDataSetQuery.  # noqa: E501
        :type: bool
        """

        self._skip_cache = skip_cache

    @property
    def user_data(self):
        """Gets the user_data of this ReportDataSetQuery.  # noqa: E501

        Any other data that needs to be returned with the response to help the UI  # noqa: E501

        :return: The user_data of this ReportDataSetQuery.  # noqa: E501
        :rtype: str
        """
        return self._user_data

    @user_data.setter
    def user_data(self, user_data):
        """Sets the user_data of this ReportDataSetQuery.

        Any other data that needs to be returned with the response to help the UI  # noqa: E501

        :param user_data: The user_data of this ReportDataSetQuery.  # noqa: E501
        :type: str
        """

        self._user_data = user_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReportDataSetQuery, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportDataSetQuery):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
