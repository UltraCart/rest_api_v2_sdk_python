# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConversationWebchatQueueStatusAgent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'agent_status': 'str',
        'conversation_participant_arn': 'str',
        'conversation_participant_name': 'str',
        'last_chat_dts': 'str',
        'next_round_robin': 'bool'
    }

    attribute_map = {
        'agent_status': 'agent_status',
        'conversation_participant_arn': 'conversation_participant_arn',
        'conversation_participant_name': 'conversation_participant_name',
        'last_chat_dts': 'last_chat_dts',
        'next_round_robin': 'next_round_robin'
    }

    def __init__(self, agent_status=None, conversation_participant_arn=None, conversation_participant_name=None, last_chat_dts=None, next_round_robin=None):  # noqa: E501
        """ConversationWebchatQueueStatusAgent - a model defined in Swagger"""  # noqa: E501

        self._agent_status = None
        self._conversation_participant_arn = None
        self._conversation_participant_name = None
        self._last_chat_dts = None
        self._next_round_robin = None
        self.discriminator = None

        if agent_status is not None:
            self.agent_status = agent_status
        if conversation_participant_arn is not None:
            self.conversation_participant_arn = conversation_participant_arn
        if conversation_participant_name is not None:
            self.conversation_participant_name = conversation_participant_name
        if last_chat_dts is not None:
            self.last_chat_dts = last_chat_dts
        if next_round_robin is not None:
            self.next_round_robin = next_round_robin

    @property
    def agent_status(self):
        """Gets the agent_status of this ConversationWebchatQueueStatusAgent.  # noqa: E501


        :return: The agent_status of this ConversationWebchatQueueStatusAgent.  # noqa: E501
        :rtype: str
        """
        return self._agent_status

    @agent_status.setter
    def agent_status(self, agent_status):
        """Sets the agent_status of this ConversationWebchatQueueStatusAgent.


        :param agent_status: The agent_status of this ConversationWebchatQueueStatusAgent.  # noqa: E501
        :type: str
        """

        self._agent_status = agent_status

    @property
    def conversation_participant_arn(self):
        """Gets the conversation_participant_arn of this ConversationWebchatQueueStatusAgent.  # noqa: E501


        :return: The conversation_participant_arn of this ConversationWebchatQueueStatusAgent.  # noqa: E501
        :rtype: str
        """
        return self._conversation_participant_arn

    @conversation_participant_arn.setter
    def conversation_participant_arn(self, conversation_participant_arn):
        """Sets the conversation_participant_arn of this ConversationWebchatQueueStatusAgent.


        :param conversation_participant_arn: The conversation_participant_arn of this ConversationWebchatQueueStatusAgent.  # noqa: E501
        :type: str
        """

        self._conversation_participant_arn = conversation_participant_arn

    @property
    def conversation_participant_name(self):
        """Gets the conversation_participant_name of this ConversationWebchatQueueStatusAgent.  # noqa: E501


        :return: The conversation_participant_name of this ConversationWebchatQueueStatusAgent.  # noqa: E501
        :rtype: str
        """
        return self._conversation_participant_name

    @conversation_participant_name.setter
    def conversation_participant_name(self, conversation_participant_name):
        """Sets the conversation_participant_name of this ConversationWebchatQueueStatusAgent.


        :param conversation_participant_name: The conversation_participant_name of this ConversationWebchatQueueStatusAgent.  # noqa: E501
        :type: str
        """

        self._conversation_participant_name = conversation_participant_name

    @property
    def last_chat_dts(self):
        """Gets the last_chat_dts of this ConversationWebchatQueueStatusAgent.  # noqa: E501

        Date/time that this agent took their last chat  # noqa: E501

        :return: The last_chat_dts of this ConversationWebchatQueueStatusAgent.  # noqa: E501
        :rtype: str
        """
        return self._last_chat_dts

    @last_chat_dts.setter
    def last_chat_dts(self, last_chat_dts):
        """Sets the last_chat_dts of this ConversationWebchatQueueStatusAgent.

        Date/time that this agent took their last chat  # noqa: E501

        :param last_chat_dts: The last_chat_dts of this ConversationWebchatQueueStatusAgent.  # noqa: E501
        :type: str
        """

        self._last_chat_dts = last_chat_dts

    @property
    def next_round_robin(self):
        """Gets the next_round_robin of this ConversationWebchatQueueStatusAgent.  # noqa: E501


        :return: The next_round_robin of this ConversationWebchatQueueStatusAgent.  # noqa: E501
        :rtype: bool
        """
        return self._next_round_robin

    @next_round_robin.setter
    def next_round_robin(self, next_round_robin):
        """Sets the next_round_robin of this ConversationWebchatQueueStatusAgent.


        :param next_round_robin: The next_round_robin of this ConversationWebchatQueueStatusAgent.  # noqa: E501
        :type: bool
        """

        self._next_round_robin = next_round_robin

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConversationWebchatQueueStatusAgent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConversationWebchatQueueStatusAgent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
