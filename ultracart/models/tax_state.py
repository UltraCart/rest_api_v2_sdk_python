# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TaxState(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'accounting_code': 'str',
        'counties': 'list[TaxCounty]',
        'country_oid': 'int',
        'dont_collect_city': 'bool',
        'dont_collect_county': 'bool',
        'dont_collect_postal_code': 'bool',
        'dont_collect_state': 'bool',
        'state_code': 'str',
        'state_oid': 'int',
        'tax_gift_charge': 'bool',
        'tax_gift_wrap': 'bool',
        'tax_rate': 'float',
        'tax_rate_formatted': 'str',
        'tax_shipping': 'bool',
        'use_ultracart_managed_rates': 'bool'
    }

    attribute_map = {
        'accounting_code': 'accounting_code',
        'counties': 'counties',
        'country_oid': 'country_oid',
        'dont_collect_city': 'dont_collect_city',
        'dont_collect_county': 'dont_collect_county',
        'dont_collect_postal_code': 'dont_collect_postal_code',
        'dont_collect_state': 'dont_collect_state',
        'state_code': 'state_code',
        'state_oid': 'state_oid',
        'tax_gift_charge': 'tax_gift_charge',
        'tax_gift_wrap': 'tax_gift_wrap',
        'tax_rate': 'tax_rate',
        'tax_rate_formatted': 'tax_rate_formatted',
        'tax_shipping': 'tax_shipping',
        'use_ultracart_managed_rates': 'use_ultracart_managed_rates'
    }

    def __init__(self, accounting_code=None, counties=None, country_oid=None, dont_collect_city=None, dont_collect_county=None, dont_collect_postal_code=None, dont_collect_state=None, state_code=None, state_oid=None, tax_gift_charge=None, tax_gift_wrap=None, tax_rate=None, tax_rate_formatted=None, tax_shipping=None, use_ultracart_managed_rates=None):  # noqa: E501
        """TaxState - a model defined in Swagger"""  # noqa: E501

        self._accounting_code = None
        self._counties = None
        self._country_oid = None
        self._dont_collect_city = None
        self._dont_collect_county = None
        self._dont_collect_postal_code = None
        self._dont_collect_state = None
        self._state_code = None
        self._state_oid = None
        self._tax_gift_charge = None
        self._tax_gift_wrap = None
        self._tax_rate = None
        self._tax_rate_formatted = None
        self._tax_shipping = None
        self._use_ultracart_managed_rates = None
        self.discriminator = None

        if accounting_code is not None:
            self.accounting_code = accounting_code
        if counties is not None:
            self.counties = counties
        if country_oid is not None:
            self.country_oid = country_oid
        if dont_collect_city is not None:
            self.dont_collect_city = dont_collect_city
        if dont_collect_county is not None:
            self.dont_collect_county = dont_collect_county
        if dont_collect_postal_code is not None:
            self.dont_collect_postal_code = dont_collect_postal_code
        if dont_collect_state is not None:
            self.dont_collect_state = dont_collect_state
        if state_code is not None:
            self.state_code = state_code
        if state_oid is not None:
            self.state_oid = state_oid
        if tax_gift_charge is not None:
            self.tax_gift_charge = tax_gift_charge
        if tax_gift_wrap is not None:
            self.tax_gift_wrap = tax_gift_wrap
        if tax_rate is not None:
            self.tax_rate = tax_rate
        if tax_rate_formatted is not None:
            self.tax_rate_formatted = tax_rate_formatted
        if tax_shipping is not None:
            self.tax_shipping = tax_shipping
        if use_ultracart_managed_rates is not None:
            self.use_ultracart_managed_rates = use_ultracart_managed_rates

    @property
    def accounting_code(self):
        """Gets the accounting_code of this TaxState.  # noqa: E501

        Accounting code for programs such as QuickBooks  # noqa: E501

        :return: The accounting_code of this TaxState.  # noqa: E501
        :rtype: str
        """
        return self._accounting_code

    @accounting_code.setter
    def accounting_code(self, accounting_code):
        """Sets the accounting_code of this TaxState.

        Accounting code for programs such as QuickBooks  # noqa: E501

        :param accounting_code: The accounting_code of this TaxState.  # noqa: E501
        :type: str
        """

        self._accounting_code = accounting_code

    @property
    def counties(self):
        """Gets the counties of this TaxState.  # noqa: E501

        Counties within this state  # noqa: E501

        :return: The counties of this TaxState.  # noqa: E501
        :rtype: list[TaxCounty]
        """
        return self._counties

    @counties.setter
    def counties(self, counties):
        """Sets the counties of this TaxState.

        Counties within this state  # noqa: E501

        :param counties: The counties of this TaxState.  # noqa: E501
        :type: list[TaxCounty]
        """

        self._counties = counties

    @property
    def country_oid(self):
        """Gets the country_oid of this TaxState.  # noqa: E501

        Tax record object identifier used internally by database  # noqa: E501

        :return: The country_oid of this TaxState.  # noqa: E501
        :rtype: int
        """
        return self._country_oid

    @country_oid.setter
    def country_oid(self, country_oid):
        """Sets the country_oid of this TaxState.

        Tax record object identifier used internally by database  # noqa: E501

        :param country_oid: The country_oid of this TaxState.  # noqa: E501
        :type: int
        """

        self._country_oid = country_oid

    @property
    def dont_collect_city(self):
        """Gets the dont_collect_city of this TaxState.  # noqa: E501

        Flag instructing engine to not collect city tax for this state  # noqa: E501

        :return: The dont_collect_city of this TaxState.  # noqa: E501
        :rtype: bool
        """
        return self._dont_collect_city

    @dont_collect_city.setter
    def dont_collect_city(self, dont_collect_city):
        """Sets the dont_collect_city of this TaxState.

        Flag instructing engine to not collect city tax for this state  # noqa: E501

        :param dont_collect_city: The dont_collect_city of this TaxState.  # noqa: E501
        :type: bool
        """

        self._dont_collect_city = dont_collect_city

    @property
    def dont_collect_county(self):
        """Gets the dont_collect_county of this TaxState.  # noqa: E501

        Flag instructing engine to not collect county tax for this state  # noqa: E501

        :return: The dont_collect_county of this TaxState.  # noqa: E501
        :rtype: bool
        """
        return self._dont_collect_county

    @dont_collect_county.setter
    def dont_collect_county(self, dont_collect_county):
        """Sets the dont_collect_county of this TaxState.

        Flag instructing engine to not collect county tax for this state  # noqa: E501

        :param dont_collect_county: The dont_collect_county of this TaxState.  # noqa: E501
        :type: bool
        """

        self._dont_collect_county = dont_collect_county

    @property
    def dont_collect_postal_code(self):
        """Gets the dont_collect_postal_code of this TaxState.  # noqa: E501

        Flag instructing engine to not collect postal code tax for this state  # noqa: E501

        :return: The dont_collect_postal_code of this TaxState.  # noqa: E501
        :rtype: bool
        """
        return self._dont_collect_postal_code

    @dont_collect_postal_code.setter
    def dont_collect_postal_code(self, dont_collect_postal_code):
        """Sets the dont_collect_postal_code of this TaxState.

        Flag instructing engine to not collect postal code tax for this state  # noqa: E501

        :param dont_collect_postal_code: The dont_collect_postal_code of this TaxState.  # noqa: E501
        :type: bool
        """

        self._dont_collect_postal_code = dont_collect_postal_code

    @property
    def dont_collect_state(self):
        """Gets the dont_collect_state of this TaxState.  # noqa: E501

        Flag instructing engine to not collect state tax for this state  # noqa: E501

        :return: The dont_collect_state of this TaxState.  # noqa: E501
        :rtype: bool
        """
        return self._dont_collect_state

    @dont_collect_state.setter
    def dont_collect_state(self, dont_collect_state):
        """Sets the dont_collect_state of this TaxState.

        Flag instructing engine to not collect state tax for this state  # noqa: E501

        :param dont_collect_state: The dont_collect_state of this TaxState.  # noqa: E501
        :type: bool
        """

        self._dont_collect_state = dont_collect_state

    @property
    def state_code(self):
        """Gets the state_code of this TaxState.  # noqa: E501

        State code  # noqa: E501

        :return: The state_code of this TaxState.  # noqa: E501
        :rtype: str
        """
        return self._state_code

    @state_code.setter
    def state_code(self, state_code):
        """Sets the state_code of this TaxState.

        State code  # noqa: E501

        :param state_code: The state_code of this TaxState.  # noqa: E501
        :type: str
        """

        self._state_code = state_code

    @property
    def state_oid(self):
        """Gets the state_oid of this TaxState.  # noqa: E501

        Tax record object identifier used internally by database  # noqa: E501

        :return: The state_oid of this TaxState.  # noqa: E501
        :rtype: int
        """
        return self._state_oid

    @state_oid.setter
    def state_oid(self, state_oid):
        """Sets the state_oid of this TaxState.

        Tax record object identifier used internally by database  # noqa: E501

        :param state_oid: The state_oid of this TaxState.  # noqa: E501
        :type: int
        """

        self._state_oid = state_oid

    @property
    def tax_gift_charge(self):
        """Gets the tax_gift_charge of this TaxState.  # noqa: E501

        True if taxation within this jurisdiction should charge tax on gift charge  # noqa: E501

        :return: The tax_gift_charge of this TaxState.  # noqa: E501
        :rtype: bool
        """
        return self._tax_gift_charge

    @tax_gift_charge.setter
    def tax_gift_charge(self, tax_gift_charge):
        """Sets the tax_gift_charge of this TaxState.

        True if taxation within this jurisdiction should charge tax on gift charge  # noqa: E501

        :param tax_gift_charge: The tax_gift_charge of this TaxState.  # noqa: E501
        :type: bool
        """

        self._tax_gift_charge = tax_gift_charge

    @property
    def tax_gift_wrap(self):
        """Gets the tax_gift_wrap of this TaxState.  # noqa: E501

        True if taxation within this jurisdiction should charge tax on gift wrap  # noqa: E501

        :return: The tax_gift_wrap of this TaxState.  # noqa: E501
        :rtype: bool
        """
        return self._tax_gift_wrap

    @tax_gift_wrap.setter
    def tax_gift_wrap(self, tax_gift_wrap):
        """Sets the tax_gift_wrap of this TaxState.

        True if taxation within this jurisdiction should charge tax on gift wrap  # noqa: E501

        :param tax_gift_wrap: The tax_gift_wrap of this TaxState.  # noqa: E501
        :type: bool
        """

        self._tax_gift_wrap = tax_gift_wrap

    @property
    def tax_rate(self):
        """Gets the tax_rate of this TaxState.  # noqa: E501

        Tax Rate  # noqa: E501

        :return: The tax_rate of this TaxState.  # noqa: E501
        :rtype: float
        """
        return self._tax_rate

    @tax_rate.setter
    def tax_rate(self, tax_rate):
        """Sets the tax_rate of this TaxState.

        Tax Rate  # noqa: E501

        :param tax_rate: The tax_rate of this TaxState.  # noqa: E501
        :type: float
        """

        self._tax_rate = tax_rate

    @property
    def tax_rate_formatted(self):
        """Gets the tax_rate_formatted of this TaxState.  # noqa: E501

        Tax rate formatted  # noqa: E501

        :return: The tax_rate_formatted of this TaxState.  # noqa: E501
        :rtype: str
        """
        return self._tax_rate_formatted

    @tax_rate_formatted.setter
    def tax_rate_formatted(self, tax_rate_formatted):
        """Sets the tax_rate_formatted of this TaxState.

        Tax rate formatted  # noqa: E501

        :param tax_rate_formatted: The tax_rate_formatted of this TaxState.  # noqa: E501
        :type: str
        """

        self._tax_rate_formatted = tax_rate_formatted

    @property
    def tax_shipping(self):
        """Gets the tax_shipping of this TaxState.  # noqa: E501

        True if taxation within this jurisdiction should charge tax on shipping  # noqa: E501

        :return: The tax_shipping of this TaxState.  # noqa: E501
        :rtype: bool
        """
        return self._tax_shipping

    @tax_shipping.setter
    def tax_shipping(self, tax_shipping):
        """Sets the tax_shipping of this TaxState.

        True if taxation within this jurisdiction should charge tax on shipping  # noqa: E501

        :param tax_shipping: The tax_shipping of this TaxState.  # noqa: E501
        :type: bool
        """

        self._tax_shipping = tax_shipping

    @property
    def use_ultracart_managed_rates(self):
        """Gets the use_ultracart_managed_rates of this TaxState.  # noqa: E501

        If true, use UltraCart managed rates for this state  # noqa: E501

        :return: The use_ultracart_managed_rates of this TaxState.  # noqa: E501
        :rtype: bool
        """
        return self._use_ultracart_managed_rates

    @use_ultracart_managed_rates.setter
    def use_ultracart_managed_rates(self, use_ultracart_managed_rates):
        """Sets the use_ultracart_managed_rates of this TaxState.

        If true, use UltraCart managed rates for this state  # noqa: E501

        :param use_ultracart_managed_rates: The use_ultracart_managed_rates of this TaxState.  # noqa: E501
        :type: bool
        """

        self._use_ultracart_managed_rates = use_ultracart_managed_rates

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaxState, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaxState):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
