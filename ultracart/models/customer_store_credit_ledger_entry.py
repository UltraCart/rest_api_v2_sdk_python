# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CustomerStoreCreditLedgerEntry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action': 'str',
        'amount': 'float',
        'description': 'str',
        'entry_dts': 'str',
        'gift_certificate_ledger_oid': 'int',
        'gift_certificate_oid': 'int',
        'reference_order_id': 'str'
    }

    attribute_map = {
        'action': 'action',
        'amount': 'amount',
        'description': 'description',
        'entry_dts': 'entry_dts',
        'gift_certificate_ledger_oid': 'gift_certificate_ledger_oid',
        'gift_certificate_oid': 'gift_certificate_oid',
        'reference_order_id': 'reference_order_id'
    }

    def __init__(self, action=None, amount=None, description=None, entry_dts=None, gift_certificate_ledger_oid=None, gift_certificate_oid=None, reference_order_id=None):  # noqa: E501
        """CustomerStoreCreditLedgerEntry - a model defined in Swagger"""  # noqa: E501

        self._action = None
        self._amount = None
        self._description = None
        self._entry_dts = None
        self._gift_certificate_ledger_oid = None
        self._gift_certificate_oid = None
        self._reference_order_id = None
        self.discriminator = None

        if action is not None:
            self.action = action
        if amount is not None:
            self.amount = amount
        if description is not None:
            self.description = description
        if entry_dts is not None:
            self.entry_dts = entry_dts
        if gift_certificate_ledger_oid is not None:
            self.gift_certificate_ledger_oid = gift_certificate_ledger_oid
        if gift_certificate_oid is not None:
            self.gift_certificate_oid = gift_certificate_oid
        if reference_order_id is not None:
            self.reference_order_id = reference_order_id

    @property
    def action(self):
        """Gets the action of this CustomerStoreCreditLedgerEntry.  # noqa: E501

        Identifies the state of this ledger entry whether the entry is Vesting or Expiring  # noqa: E501

        :return: The action of this CustomerStoreCreditLedgerEntry.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this CustomerStoreCreditLedgerEntry.

        Identifies the state of this ledger entry whether the entry is Vesting or Expiring  # noqa: E501

        :param action: The action of this CustomerStoreCreditLedgerEntry.  # noqa: E501
        :type: str
        """

        self._action = action

    @property
    def amount(self):
        """Gets the amount of this CustomerStoreCreditLedgerEntry.  # noqa: E501

        The amount of the activity.  # noqa: E501

        :return: The amount of this CustomerStoreCreditLedgerEntry.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CustomerStoreCreditLedgerEntry.

        The amount of the activity.  # noqa: E501

        :param amount: The amount of this CustomerStoreCreditLedgerEntry.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def description(self):
        """Gets the description of this CustomerStoreCreditLedgerEntry.  # noqa: E501

        Description of what this ledger entry is used.  # noqa: E501

        :return: The description of this CustomerStoreCreditLedgerEntry.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CustomerStoreCreditLedgerEntry.

        Description of what this ledger entry is used.  # noqa: E501

        :param description: The description of this CustomerStoreCreditLedgerEntry.  # noqa: E501
        :type: str
        """
        if description is not None and len(description) > 50:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `50`")  # noqa: E501

        self._description = description

    @property
    def entry_dts(self):
        """Gets the entry_dts of this CustomerStoreCreditLedgerEntry.  # noqa: E501

        Date time of this ledger activity.  # noqa: E501

        :return: The entry_dts of this CustomerStoreCreditLedgerEntry.  # noqa: E501
        :rtype: str
        """
        return self._entry_dts

    @entry_dts.setter
    def entry_dts(self, entry_dts):
        """Sets the entry_dts of this CustomerStoreCreditLedgerEntry.

        Date time of this ledger activity.  # noqa: E501

        :param entry_dts: The entry_dts of this CustomerStoreCreditLedgerEntry.  # noqa: E501
        :type: str
        """

        self._entry_dts = entry_dts

    @property
    def gift_certificate_ledger_oid(self):
        """Gets the gift_certificate_ledger_oid of this CustomerStoreCreditLedgerEntry.  # noqa: E501

        Gift certificate ledger oid is a primary key for this object, used internally.  # noqa: E501

        :return: The gift_certificate_ledger_oid of this CustomerStoreCreditLedgerEntry.  # noqa: E501
        :rtype: int
        """
        return self._gift_certificate_ledger_oid

    @gift_certificate_ledger_oid.setter
    def gift_certificate_ledger_oid(self, gift_certificate_ledger_oid):
        """Sets the gift_certificate_ledger_oid of this CustomerStoreCreditLedgerEntry.

        Gift certificate ledger oid is a primary key for this object, used internally.  # noqa: E501

        :param gift_certificate_ledger_oid: The gift_certificate_ledger_oid of this CustomerStoreCreditLedgerEntry.  # noqa: E501
        :type: int
        """

        self._gift_certificate_ledger_oid = gift_certificate_ledger_oid

    @property
    def gift_certificate_oid(self):
        """Gets the gift_certificate_oid of this CustomerStoreCreditLedgerEntry.  # noqa: E501

        Gift certificate oid.  # noqa: E501

        :return: The gift_certificate_oid of this CustomerStoreCreditLedgerEntry.  # noqa: E501
        :rtype: int
        """
        return self._gift_certificate_oid

    @gift_certificate_oid.setter
    def gift_certificate_oid(self, gift_certificate_oid):
        """Sets the gift_certificate_oid of this CustomerStoreCreditLedgerEntry.

        Gift certificate oid.  # noqa: E501

        :param gift_certificate_oid: The gift_certificate_oid of this CustomerStoreCreditLedgerEntry.  # noqa: E501
        :type: int
        """

        self._gift_certificate_oid = gift_certificate_oid

    @property
    def reference_order_id(self):
        """Gets the reference_order_id of this CustomerStoreCreditLedgerEntry.  # noqa: E501

        The order id if this gift certificate was used as part of the payment.  # noqa: E501

        :return: The reference_order_id of this CustomerStoreCreditLedgerEntry.  # noqa: E501
        :rtype: str
        """
        return self._reference_order_id

    @reference_order_id.setter
    def reference_order_id(self, reference_order_id):
        """Sets the reference_order_id of this CustomerStoreCreditLedgerEntry.

        The order id if this gift certificate was used as part of the payment.  # noqa: E501

        :param reference_order_id: The reference_order_id of this CustomerStoreCreditLedgerEntry.  # noqa: E501
        :type: str
        """

        self._reference_order_id = reference_order_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomerStoreCreditLedgerEntry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomerStoreCreditLedgerEntry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
