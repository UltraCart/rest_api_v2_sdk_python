# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OrderCurrentStageHistory(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'after_stage': 'str',
        'before_stage': 'str',
        'transition_dts': 'str'
    }

    attribute_map = {
        'after_stage': 'after_stage',
        'before_stage': 'before_stage',
        'transition_dts': 'transition_dts'
    }

    def __init__(self, after_stage=None, before_stage=None, transition_dts=None):  # noqa: E501
        """OrderCurrentStageHistory - a model defined in Swagger"""  # noqa: E501

        self._after_stage = None
        self._before_stage = None
        self._transition_dts = None
        self.discriminator = None

        if after_stage is not None:
            self.after_stage = after_stage
        if before_stage is not None:
            self.before_stage = before_stage
        if transition_dts is not None:
            self.transition_dts = transition_dts

    @property
    def after_stage(self):
        """Gets the after_stage of this OrderCurrentStageHistory.  # noqa: E501

        New stage that the order is in.  # noqa: E501

        :return: The after_stage of this OrderCurrentStageHistory.  # noqa: E501
        :rtype: str
        """
        return self._after_stage

    @after_stage.setter
    def after_stage(self, after_stage):
        """Sets the after_stage of this OrderCurrentStageHistory.

        New stage that the order is in.  # noqa: E501

        :param after_stage: The after_stage of this OrderCurrentStageHistory.  # noqa: E501
        :type: str
        """
        allowed_values = ["Accounts Receivable", "Pending Clearance", "Fraud Review", "Rejected", "Shipping Department", "Completed Order", "Quote Request", "Quote Sent", "Least Cost Routing", "Unknown", "Pre-ordered", "Advanced Order Routing", "Hold"]  # noqa: E501
        if after_stage not in allowed_values:
            raise ValueError(
                "Invalid value for `after_stage` ({0}), must be one of {1}"  # noqa: E501
                .format(after_stage, allowed_values)
            )

        self._after_stage = after_stage

    @property
    def before_stage(self):
        """Gets the before_stage of this OrderCurrentStageHistory.  # noqa: E501

        Previous stage that the order was in.  # noqa: E501

        :return: The before_stage of this OrderCurrentStageHistory.  # noqa: E501
        :rtype: str
        """
        return self._before_stage

    @before_stage.setter
    def before_stage(self, before_stage):
        """Sets the before_stage of this OrderCurrentStageHistory.

        Previous stage that the order was in.  # noqa: E501

        :param before_stage: The before_stage of this OrderCurrentStageHistory.  # noqa: E501
        :type: str
        """
        allowed_values = ["Accounts Receivable", "Pending Clearance", "Fraud Review", "Rejected", "Shipping Department", "Completed Order", "Quote Request", "Quote Sent", "Least Cost Routing", "Unknown", "Pre-ordered", "Advanced Order Routing", "Hold"]  # noqa: E501
        if before_stage not in allowed_values:
            raise ValueError(
                "Invalid value for `before_stage` ({0}), must be one of {1}"  # noqa: E501
                .format(before_stage, allowed_values)
            )

        self._before_stage = before_stage

    @property
    def transition_dts(self):
        """Gets the transition_dts of this OrderCurrentStageHistory.  # noqa: E501

        Date/time that the stage transitioned  # noqa: E501

        :return: The transition_dts of this OrderCurrentStageHistory.  # noqa: E501
        :rtype: str
        """
        return self._transition_dts

    @transition_dts.setter
    def transition_dts(self, transition_dts):
        """Sets the transition_dts of this OrderCurrentStageHistory.

        Date/time that the stage transitioned  # noqa: E501

        :param transition_dts: The transition_dts of this OrderCurrentStageHistory.  # noqa: E501
        :type: str
        """

        self._transition_dts = transition_dts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderCurrentStageHistory, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderCurrentStageHistory):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
