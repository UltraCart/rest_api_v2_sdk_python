# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AutoOrderItemFutureSchedule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'item_id': 'str',
        'rebill_count': 'int',
        'shipment_dts': 'str',
        'unit_cost': 'float'
    }

    attribute_map = {
        'item_id': 'item_id',
        'rebill_count': 'rebill_count',
        'shipment_dts': 'shipment_dts',
        'unit_cost': 'unit_cost'
    }

    def __init__(self, item_id=None, rebill_count=None, shipment_dts=None, unit_cost=None):  # noqa: E501
        """AutoOrderItemFutureSchedule - a model defined in Swagger"""  # noqa: E501

        self._item_id = None
        self._rebill_count = None
        self._shipment_dts = None
        self._unit_cost = None
        self.discriminator = None

        if item_id is not None:
            self.item_id = item_id
        if rebill_count is not None:
            self.rebill_count = rebill_count
        if shipment_dts is not None:
            self.shipment_dts = shipment_dts
        if unit_cost is not None:
            self.unit_cost = unit_cost

    @property
    def item_id(self):
        """Gets the item_id of this AutoOrderItemFutureSchedule.  # noqa: E501

        Item ID that should rebill  # noqa: E501

        :return: The item_id of this AutoOrderItemFutureSchedule.  # noqa: E501
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this AutoOrderItemFutureSchedule.

        Item ID that should rebill  # noqa: E501

        :param item_id: The item_id of this AutoOrderItemFutureSchedule.  # noqa: E501
        :type: str
        """

        self._item_id = item_id

    @property
    def rebill_count(self):
        """Gets the rebill_count of this AutoOrderItemFutureSchedule.  # noqa: E501

        The number of times this rebill represents  # noqa: E501

        :return: The rebill_count of this AutoOrderItemFutureSchedule.  # noqa: E501
        :rtype: int
        """
        return self._rebill_count

    @rebill_count.setter
    def rebill_count(self, rebill_count):
        """Sets the rebill_count of this AutoOrderItemFutureSchedule.

        The number of times this rebill represents  # noqa: E501

        :param rebill_count: The rebill_count of this AutoOrderItemFutureSchedule.  # noqa: E501
        :type: int
        """

        self._rebill_count = rebill_count

    @property
    def shipment_dts(self):
        """Gets the shipment_dts of this AutoOrderItemFutureSchedule.  # noqa: E501

        Date/time that this item is scheduled to rebill  # noqa: E501

        :return: The shipment_dts of this AutoOrderItemFutureSchedule.  # noqa: E501
        :rtype: str
        """
        return self._shipment_dts

    @shipment_dts.setter
    def shipment_dts(self, shipment_dts):
        """Sets the shipment_dts of this AutoOrderItemFutureSchedule.

        Date/time that this item is scheduled to rebill  # noqa: E501

        :param shipment_dts: The shipment_dts of this AutoOrderItemFutureSchedule.  # noqa: E501
        :type: str
        """

        self._shipment_dts = shipment_dts

    @property
    def unit_cost(self):
        """Gets the unit_cost of this AutoOrderItemFutureSchedule.  # noqa: E501

        The unit cost of the item rebilling  # noqa: E501

        :return: The unit_cost of this AutoOrderItemFutureSchedule.  # noqa: E501
        :rtype: float
        """
        return self._unit_cost

    @unit_cost.setter
    def unit_cost(self, unit_cost):
        """Sets the unit_cost of this AutoOrderItemFutureSchedule.

        The unit cost of the item rebilling  # noqa: E501

        :param unit_cost: The unit_cost of this AutoOrderItemFutureSchedule.  # noqa: E501
        :type: float
        """

        self._unit_cost = unit_cost

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AutoOrderItemFutureSchedule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AutoOrderItemFutureSchedule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
