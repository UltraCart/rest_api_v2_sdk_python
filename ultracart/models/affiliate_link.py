# coding: utf-8

"""
    UltraCart Rest API V2

    This is the next generation UltraCart REST API...

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class AffiliateLink(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, affiliate_link_oid=None, affiliate_managed_link_oid=None, affiliate_oid=None, affiliate_program_item_oid=None, code=None, creative_oid=None, custom_html=None, custom_html_approval_status=None, custom_landing_url=None, deleted=None, invisible_link_approval_status=None, invisible_link_url_prefix=None, name=None, type=None):
        """
        AffiliateLink - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'affiliate_link_oid': 'int',
            'affiliate_managed_link_oid': 'int',
            'affiliate_oid': 'int',
            'affiliate_program_item_oid': 'int',
            'code': 'str',
            'creative_oid': 'int',
            'custom_html': 'str',
            'custom_html_approval_status': 'str',
            'custom_landing_url': 'str',
            'deleted': 'bool',
            'invisible_link_approval_status': 'str',
            'invisible_link_url_prefix': 'str',
            'name': 'str',
            'type': 'str'
        }

        self.attribute_map = {
            'affiliate_link_oid': 'affiliate_link_oid',
            'affiliate_managed_link_oid': 'affiliate_managed_link_oid',
            'affiliate_oid': 'affiliate_oid',
            'affiliate_program_item_oid': 'affiliate_program_item_oid',
            'code': 'code',
            'creative_oid': 'creative_oid',
            'custom_html': 'custom_html',
            'custom_html_approval_status': 'custom_html_approval_status',
            'custom_landing_url': 'custom_landing_url',
            'deleted': 'deleted',
            'invisible_link_approval_status': 'invisible_link_approval_status',
            'invisible_link_url_prefix': 'invisible_link_url_prefix',
            'name': 'name',
            'type': 'type'
        }

        self._affiliate_link_oid = affiliate_link_oid
        self._affiliate_managed_link_oid = affiliate_managed_link_oid
        self._affiliate_oid = affiliate_oid
        self._affiliate_program_item_oid = affiliate_program_item_oid
        self._code = code
        self._creative_oid = creative_oid
        self._custom_html = custom_html
        self._custom_html_approval_status = custom_html_approval_status
        self._custom_landing_url = custom_landing_url
        self._deleted = deleted
        self._invisible_link_approval_status = invisible_link_approval_status
        self._invisible_link_url_prefix = invisible_link_url_prefix
        self._name = name
        self._type = type

    @property
    def affiliate_link_oid(self):
        """
        Gets the affiliate_link_oid of this AffiliateLink.
        Unique object identifier associated with this link

        :return: The affiliate_link_oid of this AffiliateLink.
        :rtype: int
        """
        return self._affiliate_link_oid

    @affiliate_link_oid.setter
    def affiliate_link_oid(self, affiliate_link_oid):
        """
        Sets the affiliate_link_oid of this AffiliateLink.
        Unique object identifier associated with this link

        :param affiliate_link_oid: The affiliate_link_oid of this AffiliateLink.
        :type: int
        """

        self._affiliate_link_oid = affiliate_link_oid

    @property
    def affiliate_managed_link_oid(self):
        """
        Gets the affiliate_managed_link_oid of this AffiliateLink.
        Managed link OID that this link object was generated from

        :return: The affiliate_managed_link_oid of this AffiliateLink.
        :rtype: int
        """
        return self._affiliate_managed_link_oid

    @affiliate_managed_link_oid.setter
    def affiliate_managed_link_oid(self, affiliate_managed_link_oid):
        """
        Sets the affiliate_managed_link_oid of this AffiliateLink.
        Managed link OID that this link object was generated from

        :param affiliate_managed_link_oid: The affiliate_managed_link_oid of this AffiliateLink.
        :type: int
        """

        self._affiliate_managed_link_oid = affiliate_managed_link_oid

    @property
    def affiliate_oid(self):
        """
        Gets the affiliate_oid of this AffiliateLink.
        Affiliate object ID associated with this link

        :return: The affiliate_oid of this AffiliateLink.
        :rtype: int
        """
        return self._affiliate_oid

    @affiliate_oid.setter
    def affiliate_oid(self, affiliate_oid):
        """
        Sets the affiliate_oid of this AffiliateLink.
        Affiliate object ID associated with this link

        :param affiliate_oid: The affiliate_oid of this AffiliateLink.
        :type: int
        """

        self._affiliate_oid = affiliate_oid

    @property
    def affiliate_program_item_oid(self):
        """
        Gets the affiliate_program_item_oid of this AffiliateLink.
        The affiliate program item this managed link is associated with

        :return: The affiliate_program_item_oid of this AffiliateLink.
        :rtype: int
        """
        return self._affiliate_program_item_oid

    @affiliate_program_item_oid.setter
    def affiliate_program_item_oid(self, affiliate_program_item_oid):
        """
        Sets the affiliate_program_item_oid of this AffiliateLink.
        The affiliate program item this managed link is associated with

        :param affiliate_program_item_oid: The affiliate_program_item_oid of this AffiliateLink.
        :type: int
        """

        self._affiliate_program_item_oid = affiliate_program_item_oid

    @property
    def code(self):
        """
        Gets the code of this AffiliateLink.
        Code associated with the link

        :return: The code of this AffiliateLink.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """
        Sets the code of this AffiliateLink.
        Code associated with the link

        :param code: The code of this AffiliateLink.
        :type: str
        """

        self._code = code

    @property
    def creative_oid(self):
        """
        Gets the creative_oid of this AffiliateLink.
        Creative (image or text) associated with this link

        :return: The creative_oid of this AffiliateLink.
        :rtype: int
        """
        return self._creative_oid

    @creative_oid.setter
    def creative_oid(self, creative_oid):
        """
        Sets the creative_oid of this AffiliateLink.
        Creative (image or text) associated with this link

        :param creative_oid: The creative_oid of this AffiliateLink.
        :type: int
        """

        self._creative_oid = creative_oid

    @property
    def custom_html(self):
        """
        Gets the custom_html of this AffiliateLink.
        Custom HTML associated with this link

        :return: The custom_html of this AffiliateLink.
        :rtype: str
        """
        return self._custom_html

    @custom_html.setter
    def custom_html(self, custom_html):
        """
        Sets the custom_html of this AffiliateLink.
        Custom HTML associated with this link

        :param custom_html: The custom_html of this AffiliateLink.
        :type: str
        """

        self._custom_html = custom_html

    @property
    def custom_html_approval_status(self):
        """
        Gets the custom_html_approval_status of this AffiliateLink.
        Approved status of the custom html

        :return: The custom_html_approval_status of this AffiliateLink.
        :rtype: str
        """
        return self._custom_html_approval_status

    @custom_html_approval_status.setter
    def custom_html_approval_status(self, custom_html_approval_status):
        """
        Sets the custom_html_approval_status of this AffiliateLink.
        Approved status of the custom html

        :param custom_html_approval_status: The custom_html_approval_status of this AffiliateLink.
        :type: str
        """
        allowed_values = ["Pending", "Approved", "Rejected"]
        if custom_html_approval_status not in allowed_values:
            raise ValueError(
                "Invalid value for `custom_html_approval_status` ({0}), must be one of {1}"
                .format(custom_html_approval_status, allowed_values)
            )

        self._custom_html_approval_status = custom_html_approval_status

    @property
    def custom_landing_url(self):
        """
        Gets the custom_landing_url of this AffiliateLink.
        Custom landing page URL if configured

        :return: The custom_landing_url of this AffiliateLink.
        :rtype: str
        """
        return self._custom_landing_url

    @custom_landing_url.setter
    def custom_landing_url(self, custom_landing_url):
        """
        Sets the custom_landing_url of this AffiliateLink.
        Custom landing page URL if configured

        :param custom_landing_url: The custom_landing_url of this AffiliateLink.
        :type: str
        """

        self._custom_landing_url = custom_landing_url

    @property
    def deleted(self):
        """
        Gets the deleted of this AffiliateLink.
        True if the link has been deleted

        :return: The deleted of this AffiliateLink.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """
        Sets the deleted of this AffiliateLink.
        True if the link has been deleted

        :param deleted: The deleted of this AffiliateLink.
        :type: bool
        """

        self._deleted = deleted

    @property
    def invisible_link_approval_status(self):
        """
        Gets the invisible_link_approval_status of this AffiliateLink.
        Invisible link approval status

        :return: The invisible_link_approval_status of this AffiliateLink.
        :rtype: str
        """
        return self._invisible_link_approval_status

    @invisible_link_approval_status.setter
    def invisible_link_approval_status(self, invisible_link_approval_status):
        """
        Sets the invisible_link_approval_status of this AffiliateLink.
        Invisible link approval status

        :param invisible_link_approval_status: The invisible_link_approval_status of this AffiliateLink.
        :type: str
        """
        allowed_values = ["Pending", "Approved", "Rejected"]
        if invisible_link_approval_status not in allowed_values:
            raise ValueError(
                "Invalid value for `invisible_link_approval_status` ({0}), must be one of {1}"
                .format(invisible_link_approval_status, allowed_values)
            )

        self._invisible_link_approval_status = invisible_link_approval_status

    @property
    def invisible_link_url_prefix(self):
        """
        Gets the invisible_link_url_prefix of this AffiliateLink.
        Invisible link URL prefix

        :return: The invisible_link_url_prefix of this AffiliateLink.
        :rtype: str
        """
        return self._invisible_link_url_prefix

    @invisible_link_url_prefix.setter
    def invisible_link_url_prefix(self, invisible_link_url_prefix):
        """
        Sets the invisible_link_url_prefix of this AffiliateLink.
        Invisible link URL prefix

        :param invisible_link_url_prefix: The invisible_link_url_prefix of this AffiliateLink.
        :type: str
        """

        self._invisible_link_url_prefix = invisible_link_url_prefix

    @property
    def name(self):
        """
        Gets the name of this AffiliateLink.
        Name of the link

        :return: The name of this AffiliateLink.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this AffiliateLink.
        Name of the link

        :param name: The name of this AffiliateLink.
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """
        Gets the type of this AffiliateLink.
        Type of link

        :return: The type of this AffiliateLink.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this AffiliateLink.
        Type of link

        :param type: The type of this AffiliateLink.
        :type: str
        """
        allowed_values = ["image", "text", "invisible", "direct"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
