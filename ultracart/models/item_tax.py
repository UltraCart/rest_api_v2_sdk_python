# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ItemTax(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'exemptions': 'list[ItemTaxExemption]',
        'tax_free': 'bool',
        'tax_product_type': 'str',
        'taxable_cost': 'float'
    }

    attribute_map = {
        'exemptions': 'exemptions',
        'tax_free': 'tax_free',
        'tax_product_type': 'tax_product_type',
        'taxable_cost': 'taxable_cost'
    }

    def __init__(self, exemptions=None, tax_free=None, tax_product_type=None, taxable_cost=None):  # noqa: E501
        """ItemTax - a model defined in Swagger"""  # noqa: E501

        self._exemptions = None
        self._tax_free = None
        self._tax_product_type = None
        self._taxable_cost = None
        self.discriminator = None

        if exemptions is not None:
            self.exemptions = exemptions
        if tax_free is not None:
            self.tax_free = tax_free
        if tax_product_type is not None:
            self.tax_product_type = tax_product_type
        if taxable_cost is not None:
            self.taxable_cost = taxable_cost

    @property
    def exemptions(self):
        """Gets the exemptions of this ItemTax.  # noqa: E501

        Exemptions  # noqa: E501

        :return: The exemptions of this ItemTax.  # noqa: E501
        :rtype: list[ItemTaxExemption]
        """
        return self._exemptions

    @exemptions.setter
    def exemptions(self, exemptions):
        """Sets the exemptions of this ItemTax.

        Exemptions  # noqa: E501

        :param exemptions: The exemptions of this ItemTax.  # noqa: E501
        :type: list[ItemTaxExemption]
        """

        self._exemptions = exemptions

    @property
    def tax_free(self):
        """Gets the tax_free of this ItemTax.  # noqa: E501

        True if tax free  # noqa: E501

        :return: The tax_free of this ItemTax.  # noqa: E501
        :rtype: bool
        """
        return self._tax_free

    @tax_free.setter
    def tax_free(self, tax_free):
        """Sets the tax_free of this ItemTax.

        True if tax free  # noqa: E501

        :param tax_free: The tax_free of this ItemTax.  # noqa: E501
        :type: bool
        """

        self._tax_free = tax_free

    @property
    def tax_product_type(self):
        """Gets the tax_product_type of this ItemTax.  # noqa: E501

        Tax product type  # noqa: E501

        :return: The tax_product_type of this ItemTax.  # noqa: E501
        :rtype: str
        """
        return self._tax_product_type

    @tax_product_type.setter
    def tax_product_type(self, tax_product_type):
        """Sets the tax_product_type of this ItemTax.

        Tax product type  # noqa: E501

        :param tax_product_type: The tax_product_type of this ItemTax.  # noqa: E501
        :type: str
        """
        allowed_values = ["", "digital", "physical", "service"]  # noqa: E501
        if tax_product_type not in allowed_values:
            raise ValueError(
                "Invalid value for `tax_product_type` ({0}), must be one of {1}"  # noqa: E501
                .format(tax_product_type, allowed_values)
            )

        self._tax_product_type = tax_product_type

    @property
    def taxable_cost(self):
        """Gets the taxable_cost of this ItemTax.  # noqa: E501

        Taxable cost if different than regular cost  # noqa: E501

        :return: The taxable_cost of this ItemTax.  # noqa: E501
        :rtype: float
        """
        return self._taxable_cost

    @taxable_cost.setter
    def taxable_cost(self, taxable_cost):
        """Sets the taxable_cost of this ItemTax.

        Taxable cost if different than regular cost  # noqa: E501

        :param taxable_cost: The taxable_cost of this ItemTax.  # noqa: E501
        :type: float
        """

        self._taxable_cost = taxable_cost

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ItemTax, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ItemTax):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
