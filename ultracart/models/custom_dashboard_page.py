# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CustomDashboardPage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'page_height_inches': 'float',
        'page_width_inches': 'float',
        'reports': 'list[CustomDashboardPageReport]'
    }

    attribute_map = {
        'page_height_inches': 'page_height_inches',
        'page_width_inches': 'page_width_inches',
        'reports': 'reports'
    }

    def __init__(self, page_height_inches=None, page_width_inches=None, reports=None):  # noqa: E501
        """CustomDashboardPage - a model defined in Swagger"""  # noqa: E501

        self._page_height_inches = None
        self._page_width_inches = None
        self._reports = None
        self.discriminator = None

        if page_height_inches is not None:
            self.page_height_inches = page_height_inches
        if page_width_inches is not None:
            self.page_width_inches = page_width_inches
        if reports is not None:
            self.reports = reports

    @property
    def page_height_inches(self):
        """Gets the page_height_inches of this CustomDashboardPage.  # noqa: E501


        :return: The page_height_inches of this CustomDashboardPage.  # noqa: E501
        :rtype: float
        """
        return self._page_height_inches

    @page_height_inches.setter
    def page_height_inches(self, page_height_inches):
        """Sets the page_height_inches of this CustomDashboardPage.


        :param page_height_inches: The page_height_inches of this CustomDashboardPage.  # noqa: E501
        :type: float
        """

        self._page_height_inches = page_height_inches

    @property
    def page_width_inches(self):
        """Gets the page_width_inches of this CustomDashboardPage.  # noqa: E501


        :return: The page_width_inches of this CustomDashboardPage.  # noqa: E501
        :rtype: float
        """
        return self._page_width_inches

    @page_width_inches.setter
    def page_width_inches(self, page_width_inches):
        """Sets the page_width_inches of this CustomDashboardPage.


        :param page_width_inches: The page_width_inches of this CustomDashboardPage.  # noqa: E501
        :type: float
        """

        self._page_width_inches = page_width_inches

    @property
    def reports(self):
        """Gets the reports of this CustomDashboardPage.  # noqa: E501


        :return: The reports of this CustomDashboardPage.  # noqa: E501
        :rtype: list[CustomDashboardPageReport]
        """
        return self._reports

    @reports.setter
    def reports(self, reports):
        """Sets the reports of this CustomDashboardPage.


        :param reports: The reports of this CustomDashboardPage.  # noqa: E501
        :type: list[CustomDashboardPageReport]
        """

        self._reports = reports

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomDashboardPage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomDashboardPage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
