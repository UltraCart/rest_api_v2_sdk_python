# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ReportDataSourceSchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'config': 'str',
        'dimension': 'bool',
        'name': 'str',
        'type': 'str'
    }

    attribute_map = {
        'config': 'config',
        'dimension': 'dimension',
        'name': 'name',
        'type': 'type'
    }

    def __init__(self, config=None, dimension=None, name=None, type=None):  # noqa: E501
        """ReportDataSourceSchema - a model defined in Swagger"""  # noqa: E501

        self._config = None
        self._dimension = None
        self._name = None
        self._type = None
        self.discriminator = None

        if config is not None:
            self.config = config
        if dimension is not None:
            self.dimension = dimension
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type

    @property
    def config(self):
        """Gets the config of this ReportDataSourceSchema.  # noqa: E501

        A JSON representation of the configuration for this visualization  # noqa: E501

        :return: The config of this ReportDataSourceSchema.  # noqa: E501
        :rtype: str
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this ReportDataSourceSchema.

        A JSON representation of the configuration for this visualization  # noqa: E501

        :param config: The config of this ReportDataSourceSchema.  # noqa: E501
        :type: str
        """

        self._config = config

    @property
    def dimension(self):
        """Gets the dimension of this ReportDataSourceSchema.  # noqa: E501

        Whether or not this column can be used as a dimension within a visualization  # noqa: E501

        :return: The dimension of this ReportDataSourceSchema.  # noqa: E501
        :rtype: bool
        """
        return self._dimension

    @dimension.setter
    def dimension(self, dimension):
        """Sets the dimension of this ReportDataSourceSchema.

        Whether or not this column can be used as a dimension within a visualization  # noqa: E501

        :param dimension: The dimension of this ReportDataSourceSchema.  # noqa: E501
        :type: bool
        """

        self._dimension = dimension

    @property
    def name(self):
        """Gets the name of this ReportDataSourceSchema.  # noqa: E501


        :return: The name of this ReportDataSourceSchema.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ReportDataSourceSchema.


        :param name: The name of this ReportDataSourceSchema.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this ReportDataSourceSchema.  # noqa: E501

        Type of the column.  Only supporting the allowed values.  Any other types will be ignored.  # noqa: E501

        :return: The type of this ReportDataSourceSchema.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ReportDataSourceSchema.

        Type of the column.  Only supporting the allowed values.  Any other types will be ignored.  # noqa: E501

        :param type: The type of this ReportDataSourceSchema.  # noqa: E501
        :type: str
        """
        allowed_values = ["BIGNUMERIC", "BOOL", "DATE", "DATETIME", "FLOAT64", "INT64", "JSON", "NUMERIC", "STRING", "TIME", "TIMESTAMP"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReportDataSourceSchema, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportDataSourceSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
