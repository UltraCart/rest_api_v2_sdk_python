# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class LibraryItemQuery(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'category': 'str',
        'description': 'str',
        'industry': 'str',
        'price_high': 'float',
        'price_low': 'float',
        'public_items': 'bool',
        'published_dts_begin': 'str',
        'published_dts_end': 'str',
        'style': 'str',
        'title': 'str',
        'type': 'str'
    }

    attribute_map = {
        'category': 'category',
        'description': 'description',
        'industry': 'industry',
        'price_high': 'price_high',
        'price_low': 'price_low',
        'public_items': 'public_items',
        'published_dts_begin': 'published_dts_begin',
        'published_dts_end': 'published_dts_end',
        'style': 'style',
        'title': 'title',
        'type': 'type'
    }

    def __init__(self, category=None, description=None, industry=None, price_high=None, price_low=None, public_items=None, published_dts_begin=None, published_dts_end=None, style=None, title=None, type=None):  # noqa: E501
        """LibraryItemQuery - a model defined in Swagger"""  # noqa: E501

        self._category = None
        self._description = None
        self._industry = None
        self._price_high = None
        self._price_low = None
        self._public_items = None
        self._published_dts_begin = None
        self._published_dts_end = None
        self._style = None
        self._title = None
        self._type = None
        self.discriminator = None

        if category is not None:
            self.category = category
        if description is not None:
            self.description = description
        if industry is not None:
            self.industry = industry
        if price_high is not None:
            self.price_high = price_high
        if price_low is not None:
            self.price_low = price_low
        if public_items is not None:
            self.public_items = public_items
        if published_dts_begin is not None:
            self.published_dts_begin = published_dts_begin
        if published_dts_end is not None:
            self.published_dts_end = published_dts_end
        if style is not None:
            self.style = style
        if title is not None:
            self.title = title
        if type is not None:
            self.type = type

    @property
    def category(self):
        """Gets the category of this LibraryItemQuery.  # noqa: E501

        Category  # noqa: E501

        :return: The category of this LibraryItemQuery.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this LibraryItemQuery.

        Category  # noqa: E501

        :param category: The category of this LibraryItemQuery.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def description(self):
        """Gets the description of this LibraryItemQuery.  # noqa: E501

        Description of library item  # noqa: E501

        :return: The description of this LibraryItemQuery.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this LibraryItemQuery.

        Description of library item  # noqa: E501

        :param description: The description of this LibraryItemQuery.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def industry(self):
        """Gets the industry of this LibraryItemQuery.  # noqa: E501

        Industry  # noqa: E501

        :return: The industry of this LibraryItemQuery.  # noqa: E501
        :rtype: str
        """
        return self._industry

    @industry.setter
    def industry(self, industry):
        """Sets the industry of this LibraryItemQuery.

        Industry  # noqa: E501

        :param industry: The industry of this LibraryItemQuery.  # noqa: E501
        :type: str
        """

        self._industry = industry

    @property
    def price_high(self):
        """Gets the price_high of this LibraryItemQuery.  # noqa: E501

        Maximum price  # noqa: E501

        :return: The price_high of this LibraryItemQuery.  # noqa: E501
        :rtype: float
        """
        return self._price_high

    @price_high.setter
    def price_high(self, price_high):
        """Sets the price_high of this LibraryItemQuery.

        Maximum price  # noqa: E501

        :param price_high: The price_high of this LibraryItemQuery.  # noqa: E501
        :type: float
        """

        self._price_high = price_high

    @property
    def price_low(self):
        """Gets the price_low of this LibraryItemQuery.  # noqa: E501

        Minimum price  # noqa: E501

        :return: The price_low of this LibraryItemQuery.  # noqa: E501
        :rtype: float
        """
        return self._price_low

    @price_low.setter
    def price_low(self, price_low):
        """Sets the price_low of this LibraryItemQuery.

        Minimum price  # noqa: E501

        :param price_low: The price_low of this LibraryItemQuery.  # noqa: E501
        :type: float
        """

        self._price_low = price_low

    @property
    def public_items(self):
        """Gets the public_items of this LibraryItemQuery.  # noqa: E501

        Boolean, true returns back public items as well as merchant owned items  # noqa: E501

        :return: The public_items of this LibraryItemQuery.  # noqa: E501
        :rtype: bool
        """
        return self._public_items

    @public_items.setter
    def public_items(self, public_items):
        """Sets the public_items of this LibraryItemQuery.

        Boolean, true returns back public items as well as merchant owned items  # noqa: E501

        :param public_items: The public_items of this LibraryItemQuery.  # noqa: E501
        :type: bool
        """

        self._public_items = public_items

    @property
    def published_dts_begin(self):
        """Gets the published_dts_begin of this LibraryItemQuery.  # noqa: E501

        Minimum published date/time  # noqa: E501

        :return: The published_dts_begin of this LibraryItemQuery.  # noqa: E501
        :rtype: str
        """
        return self._published_dts_begin

    @published_dts_begin.setter
    def published_dts_begin(self, published_dts_begin):
        """Sets the published_dts_begin of this LibraryItemQuery.

        Minimum published date/time  # noqa: E501

        :param published_dts_begin: The published_dts_begin of this LibraryItemQuery.  # noqa: E501
        :type: str
        """

        self._published_dts_begin = published_dts_begin

    @property
    def published_dts_end(self):
        """Gets the published_dts_end of this LibraryItemQuery.  # noqa: E501

        Maximum published date/time  # noqa: E501

        :return: The published_dts_end of this LibraryItemQuery.  # noqa: E501
        :rtype: str
        """
        return self._published_dts_end

    @published_dts_end.setter
    def published_dts_end(self, published_dts_end):
        """Sets the published_dts_end of this LibraryItemQuery.

        Maximum published date/time  # noqa: E501

        :param published_dts_end: The published_dts_end of this LibraryItemQuery.  # noqa: E501
        :type: str
        """

        self._published_dts_end = published_dts_end

    @property
    def style(self):
        """Gets the style of this LibraryItemQuery.  # noqa: E501

        Library item style  # noqa: E501

        :return: The style of this LibraryItemQuery.  # noqa: E501
        :rtype: str
        """
        return self._style

    @style.setter
    def style(self, style):
        """Sets the style of this LibraryItemQuery.

        Library item style  # noqa: E501

        :param style: The style of this LibraryItemQuery.  # noqa: E501
        :type: str
        """

        self._style = style

    @property
    def title(self):
        """Gets the title of this LibraryItemQuery.  # noqa: E501

        Title of the library item  # noqa: E501

        :return: The title of this LibraryItemQuery.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this LibraryItemQuery.

        Title of the library item  # noqa: E501

        :param title: The title of this LibraryItemQuery.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this LibraryItemQuery.  # noqa: E501

        Library item type  # noqa: E501

        :return: The type of this LibraryItemQuery.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this LibraryItemQuery.

        Library item type  # noqa: E501

        :param type: The type of this LibraryItemQuery.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LibraryItemQuery, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LibraryItemQuery):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
