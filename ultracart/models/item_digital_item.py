# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ItemDigitalItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'click_wrap_agreement': 'str',
        'creation_dts': 'str',
        'description': 'str',
        'digital_item_oid': 'int',
        'file_size': 'int',
        'import_from_url': 'str',
        'mime_type': 'str',
        'original_filename': 'str',
        'pdf_meta': 'ItemDigitalItemPdfMeta'
    }

    attribute_map = {
        'click_wrap_agreement': 'click_wrap_agreement',
        'creation_dts': 'creation_dts',
        'description': 'description',
        'digital_item_oid': 'digital_item_oid',
        'file_size': 'file_size',
        'import_from_url': 'import_from_url',
        'mime_type': 'mime_type',
        'original_filename': 'original_filename',
        'pdf_meta': 'pdf_meta'
    }

    def __init__(self, click_wrap_agreement=None, creation_dts=None, description=None, digital_item_oid=None, file_size=None, import_from_url=None, mime_type=None, original_filename=None, pdf_meta=None):  # noqa: E501
        """ItemDigitalItem - a model defined in Swagger"""  # noqa: E501

        self._click_wrap_agreement = None
        self._creation_dts = None
        self._description = None
        self._digital_item_oid = None
        self._file_size = None
        self._import_from_url = None
        self._mime_type = None
        self._original_filename = None
        self._pdf_meta = None
        self.discriminator = None

        if click_wrap_agreement is not None:
            self.click_wrap_agreement = click_wrap_agreement
        if creation_dts is not None:
            self.creation_dts = creation_dts
        if description is not None:
            self.description = description
        if digital_item_oid is not None:
            self.digital_item_oid = digital_item_oid
        if file_size is not None:
            self.file_size = file_size
        if import_from_url is not None:
            self.import_from_url = import_from_url
        if mime_type is not None:
            self.mime_type = mime_type
        if original_filename is not None:
            self.original_filename = original_filename
        if pdf_meta is not None:
            self.pdf_meta = pdf_meta

    @property
    def click_wrap_agreement(self):
        """Gets the click_wrap_agreement of this ItemDigitalItem.  # noqa: E501

        Click wrap agreement is presented to the customer before they can purchase your product.  # noqa: E501

        :return: The click_wrap_agreement of this ItemDigitalItem.  # noqa: E501
        :rtype: str
        """
        return self._click_wrap_agreement

    @click_wrap_agreement.setter
    def click_wrap_agreement(self, click_wrap_agreement):
        """Sets the click_wrap_agreement of this ItemDigitalItem.

        Click wrap agreement is presented to the customer before they can purchase your product.  # noqa: E501

        :param click_wrap_agreement: The click_wrap_agreement of this ItemDigitalItem.  # noqa: E501
        :type: str
        """

        self._click_wrap_agreement = click_wrap_agreement

    @property
    def creation_dts(self):
        """Gets the creation_dts of this ItemDigitalItem.  # noqa: E501

        File creation date  # noqa: E501

        :return: The creation_dts of this ItemDigitalItem.  # noqa: E501
        :rtype: str
        """
        return self._creation_dts

    @creation_dts.setter
    def creation_dts(self, creation_dts):
        """Sets the creation_dts of this ItemDigitalItem.

        File creation date  # noqa: E501

        :param creation_dts: The creation_dts of this ItemDigitalItem.  # noqa: E501
        :type: str
        """

        self._creation_dts = creation_dts

    @property
    def description(self):
        """Gets the description of this ItemDigitalItem.  # noqa: E501

        Description of the digital item  # noqa: E501

        :return: The description of this ItemDigitalItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ItemDigitalItem.

        Description of the digital item  # noqa: E501

        :param description: The description of this ItemDigitalItem.  # noqa: E501
        :type: str
        """
        if description is not None and len(description) > 200:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `200`")  # noqa: E501

        self._description = description

    @property
    def digital_item_oid(self):
        """Gets the digital_item_oid of this ItemDigitalItem.  # noqa: E501

        The Digital item oid is a primary key used internally by UltraCart.  You should not set or change this value.  Doing so will have no effect.  # noqa: E501

        :return: The digital_item_oid of this ItemDigitalItem.  # noqa: E501
        :rtype: int
        """
        return self._digital_item_oid

    @digital_item_oid.setter
    def digital_item_oid(self, digital_item_oid):
        """Sets the digital_item_oid of this ItemDigitalItem.

        The Digital item oid is a primary key used internally by UltraCart.  You should not set or change this value.  Doing so will have no effect.  # noqa: E501

        :param digital_item_oid: The digital_item_oid of this ItemDigitalItem.  # noqa: E501
        :type: int
        """

        self._digital_item_oid = digital_item_oid

    @property
    def file_size(self):
        """Gets the file_size of this ItemDigitalItem.  # noqa: E501

        File size  # noqa: E501

        :return: The file_size of this ItemDigitalItem.  # noqa: E501
        :rtype: int
        """
        return self._file_size

    @file_size.setter
    def file_size(self, file_size):
        """Sets the file_size of this ItemDigitalItem.

        File size  # noqa: E501

        :param file_size: The file_size of this ItemDigitalItem.  # noqa: E501
        :type: int
        """

        self._file_size = file_size

    @property
    def import_from_url(self):
        """Gets the import_from_url of this ItemDigitalItem.  # noqa: E501

        This url is sourced to create or update a digital file in your digital library.  It is only considered during an insert or update operation.  # noqa: E501

        :return: The import_from_url of this ItemDigitalItem.  # noqa: E501
        :rtype: str
        """
        return self._import_from_url

    @import_from_url.setter
    def import_from_url(self, import_from_url):
        """Sets the import_from_url of this ItemDigitalItem.

        This url is sourced to create or update a digital file in your digital library.  It is only considered during an insert or update operation.  # noqa: E501

        :param import_from_url: The import_from_url of this ItemDigitalItem.  # noqa: E501
        :type: str
        """

        self._import_from_url = import_from_url

    @property
    def mime_type(self):
        """Gets the mime_type of this ItemDigitalItem.  # noqa: E501

        Mime type associated with the file  # noqa: E501

        :return: The mime_type of this ItemDigitalItem.  # noqa: E501
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this ItemDigitalItem.

        Mime type associated with the file  # noqa: E501

        :param mime_type: The mime_type of this ItemDigitalItem.  # noqa: E501
        :type: str
        """
        if mime_type is not None and len(mime_type) > 100:
            raise ValueError("Invalid value for `mime_type`, length must be less than or equal to `100`")  # noqa: E501

        self._mime_type = mime_type

    @property
    def original_filename(self):
        """Gets the original_filename of this ItemDigitalItem.  # noqa: E501

        Original filename  # noqa: E501

        :return: The original_filename of this ItemDigitalItem.  # noqa: E501
        :rtype: str
        """
        return self._original_filename

    @original_filename.setter
    def original_filename(self, original_filename):
        """Sets the original_filename of this ItemDigitalItem.

        Original filename  # noqa: E501

        :param original_filename: The original_filename of this ItemDigitalItem.  # noqa: E501
        :type: str
        """
        if original_filename is not None and len(original_filename) > 250:
            raise ValueError("Invalid value for `original_filename`, length must be less than or equal to `250`")  # noqa: E501

        self._original_filename = original_filename

    @property
    def pdf_meta(self):
        """Gets the pdf_meta of this ItemDigitalItem.  # noqa: E501


        :return: The pdf_meta of this ItemDigitalItem.  # noqa: E501
        :rtype: ItemDigitalItemPdfMeta
        """
        return self._pdf_meta

    @pdf_meta.setter
    def pdf_meta(self, pdf_meta):
        """Sets the pdf_meta of this ItemDigitalItem.


        :param pdf_meta: The pdf_meta of this ItemDigitalItem.  # noqa: E501
        :type: ItemDigitalItemPdfMeta
        """

        self._pdf_meta = pdf_meta

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ItemDigitalItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ItemDigitalItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
