# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CustomDashboardPageReport(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data_warehouse_report_config_oid': 'int',
        'grid_height': 'int',
        'grid_width': 'int',
        'grid_x': 'int',
        'grid_y': 'int'
    }

    attribute_map = {
        'data_warehouse_report_config_oid': 'data_warehouse_report_config_oid',
        'grid_height': 'grid_height',
        'grid_width': 'grid_width',
        'grid_x': 'grid_x',
        'grid_y': 'grid_y'
    }

    def __init__(self, data_warehouse_report_config_oid=None, grid_height=None, grid_width=None, grid_x=None, grid_y=None):  # noqa: E501
        """CustomDashboardPageReport - a model defined in Swagger"""  # noqa: E501

        self._data_warehouse_report_config_oid = None
        self._grid_height = None
        self._grid_width = None
        self._grid_x = None
        self._grid_y = None
        self.discriminator = None

        if data_warehouse_report_config_oid is not None:
            self.data_warehouse_report_config_oid = data_warehouse_report_config_oid
        if grid_height is not None:
            self.grid_height = grid_height
        if grid_width is not None:
            self.grid_width = grid_width
        if grid_x is not None:
            self.grid_x = grid_x
        if grid_y is not None:
            self.grid_y = grid_y

    @property
    def data_warehouse_report_config_oid(self):
        """Gets the data_warehouse_report_config_oid of this CustomDashboardPageReport.  # noqa: E501


        :return: The data_warehouse_report_config_oid of this CustomDashboardPageReport.  # noqa: E501
        :rtype: int
        """
        return self._data_warehouse_report_config_oid

    @data_warehouse_report_config_oid.setter
    def data_warehouse_report_config_oid(self, data_warehouse_report_config_oid):
        """Sets the data_warehouse_report_config_oid of this CustomDashboardPageReport.


        :param data_warehouse_report_config_oid: The data_warehouse_report_config_oid of this CustomDashboardPageReport.  # noqa: E501
        :type: int
        """

        self._data_warehouse_report_config_oid = data_warehouse_report_config_oid

    @property
    def grid_height(self):
        """Gets the grid_height of this CustomDashboardPageReport.  # noqa: E501


        :return: The grid_height of this CustomDashboardPageReport.  # noqa: E501
        :rtype: int
        """
        return self._grid_height

    @grid_height.setter
    def grid_height(self, grid_height):
        """Sets the grid_height of this CustomDashboardPageReport.


        :param grid_height: The grid_height of this CustomDashboardPageReport.  # noqa: E501
        :type: int
        """

        self._grid_height = grid_height

    @property
    def grid_width(self):
        """Gets the grid_width of this CustomDashboardPageReport.  # noqa: E501


        :return: The grid_width of this CustomDashboardPageReport.  # noqa: E501
        :rtype: int
        """
        return self._grid_width

    @grid_width.setter
    def grid_width(self, grid_width):
        """Sets the grid_width of this CustomDashboardPageReport.


        :param grid_width: The grid_width of this CustomDashboardPageReport.  # noqa: E501
        :type: int
        """

        self._grid_width = grid_width

    @property
    def grid_x(self):
        """Gets the grid_x of this CustomDashboardPageReport.  # noqa: E501


        :return: The grid_x of this CustomDashboardPageReport.  # noqa: E501
        :rtype: int
        """
        return self._grid_x

    @grid_x.setter
    def grid_x(self, grid_x):
        """Sets the grid_x of this CustomDashboardPageReport.


        :param grid_x: The grid_x of this CustomDashboardPageReport.  # noqa: E501
        :type: int
        """

        self._grid_x = grid_x

    @property
    def grid_y(self):
        """Gets the grid_y of this CustomDashboardPageReport.  # noqa: E501


        :return: The grid_y of this CustomDashboardPageReport.  # noqa: E501
        :rtype: int
        """
        return self._grid_y

    @grid_y.setter
    def grid_y(self, grid_y):
        """Sets the grid_y of this CustomDashboardPageReport.


        :param grid_y: The grid_y of this CustomDashboardPageReport.  # noqa: E501
        :type: int
        """

        self._grid_y = grid_y

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomDashboardPageReport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomDashboardPageReport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
