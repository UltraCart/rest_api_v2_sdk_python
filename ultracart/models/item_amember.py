# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ItemAmember(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amember_payment_duration_days': 'int',
        'amember_product_id': 'str'
    }

    attribute_map = {
        'amember_payment_duration_days': 'amember_payment_duration_days',
        'amember_product_id': 'amember_product_id'
    }

    def __init__(self, amember_payment_duration_days=None, amember_product_id=None):  # noqa: E501
        """ItemAmember - a model defined in Swagger"""  # noqa: E501

        self._amember_payment_duration_days = None
        self._amember_product_id = None
        self.discriminator = None

        if amember_payment_duration_days is not None:
            self.amember_payment_duration_days = amember_payment_duration_days
        if amember_product_id is not None:
            self.amember_product_id = amember_product_id

    @property
    def amember_payment_duration_days(self):
        """Gets the amember_payment_duration_days of this ItemAmember.  # noqa: E501

        The number of days that the customer should be given access to the item  # noqa: E501

        :return: The amember_payment_duration_days of this ItemAmember.  # noqa: E501
        :rtype: int
        """
        return self._amember_payment_duration_days

    @amember_payment_duration_days.setter
    def amember_payment_duration_days(self, amember_payment_duration_days):
        """Sets the amember_payment_duration_days of this ItemAmember.

        The number of days that the customer should be given access to the item  # noqa: E501

        :param amember_payment_duration_days: The amember_payment_duration_days of this ItemAmember.  # noqa: E501
        :type: int
        """

        self._amember_payment_duration_days = amember_payment_duration_days

    @property
    def amember_product_id(self):
        """Gets the amember_product_id of this ItemAmember.  # noqa: E501

        A-member product id give customer access to when they purchase this item  # noqa: E501

        :return: The amember_product_id of this ItemAmember.  # noqa: E501
        :rtype: str
        """
        return self._amember_product_id

    @amember_product_id.setter
    def amember_product_id(self, amember_product_id):
        """Sets the amember_product_id of this ItemAmember.

        A-member product id give customer access to when they purchase this item  # noqa: E501

        :param amember_product_id: The amember_product_id of this ItemAmember.  # noqa: E501
        :type: str
        """
        if amember_product_id is not None and len(amember_product_id) > 10:
            raise ValueError("Invalid value for `amember_product_id`, length must be less than or equal to `10`")  # noqa: E501

        self._amember_product_id = amember_product_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ItemAmember, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ItemAmember):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
