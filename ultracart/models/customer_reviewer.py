# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CustomerReviewer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auto_approve': 'bool',
        'average_overall_rating': 'float',
        'expert': 'bool',
        'first_review': 'str',
        'last_review': 'str',
        'location': 'str',
        'nickname': 'str',
        'number_helpful_review_votes': 'int',
        'rank': 'int',
        'reviews_contributed': 'int'
    }

    attribute_map = {
        'auto_approve': 'auto_approve',
        'average_overall_rating': 'average_overall_rating',
        'expert': 'expert',
        'first_review': 'first_review',
        'last_review': 'last_review',
        'location': 'location',
        'nickname': 'nickname',
        'number_helpful_review_votes': 'number_helpful_review_votes',
        'rank': 'rank',
        'reviews_contributed': 'reviews_contributed'
    }

    def __init__(self, auto_approve=None, average_overall_rating=None, expert=None, first_review=None, last_review=None, location=None, nickname=None, number_helpful_review_votes=None, rank=None, reviews_contributed=None):  # noqa: E501
        """CustomerReviewer - a model defined in Swagger"""  # noqa: E501

        self._auto_approve = None
        self._average_overall_rating = None
        self._expert = None
        self._first_review = None
        self._last_review = None
        self._location = None
        self._nickname = None
        self._number_helpful_review_votes = None
        self._rank = None
        self._reviews_contributed = None
        self.discriminator = None

        if auto_approve is not None:
            self.auto_approve = auto_approve
        if average_overall_rating is not None:
            self.average_overall_rating = average_overall_rating
        if expert is not None:
            self.expert = expert
        if first_review is not None:
            self.first_review = first_review
        if last_review is not None:
            self.last_review = last_review
        if location is not None:
            self.location = location
        if nickname is not None:
            self.nickname = nickname
        if number_helpful_review_votes is not None:
            self.number_helpful_review_votes = number_helpful_review_votes
        if rank is not None:
            self.rank = rank
        if reviews_contributed is not None:
            self.reviews_contributed = reviews_contributed

    @property
    def auto_approve(self):
        """Gets the auto_approve of this CustomerReviewer.  # noqa: E501

        True if reviewes from this customer profile should automatically be approved  # noqa: E501

        :return: The auto_approve of this CustomerReviewer.  # noqa: E501
        :rtype: bool
        """
        return self._auto_approve

    @auto_approve.setter
    def auto_approve(self, auto_approve):
        """Sets the auto_approve of this CustomerReviewer.

        True if reviewes from this customer profile should automatically be approved  # noqa: E501

        :param auto_approve: The auto_approve of this CustomerReviewer.  # noqa: E501
        :type: bool
        """

        self._auto_approve = auto_approve

    @property
    def average_overall_rating(self):
        """Gets the average_overall_rating of this CustomerReviewer.  # noqa: E501

        Average overall rating of items reviewed  # noqa: E501

        :return: The average_overall_rating of this CustomerReviewer.  # noqa: E501
        :rtype: float
        """
        return self._average_overall_rating

    @average_overall_rating.setter
    def average_overall_rating(self, average_overall_rating):
        """Sets the average_overall_rating of this CustomerReviewer.

        Average overall rating of items reviewed  # noqa: E501

        :param average_overall_rating: The average_overall_rating of this CustomerReviewer.  # noqa: E501
        :type: float
        """

        self._average_overall_rating = average_overall_rating

    @property
    def expert(self):
        """Gets the expert of this CustomerReviewer.  # noqa: E501

        True if the customer is an expert  # noqa: E501

        :return: The expert of this CustomerReviewer.  # noqa: E501
        :rtype: bool
        """
        return self._expert

    @expert.setter
    def expert(self, expert):
        """Sets the expert of this CustomerReviewer.

        True if the customer is an expert  # noqa: E501

        :param expert: The expert of this CustomerReviewer.  # noqa: E501
        :type: bool
        """

        self._expert = expert

    @property
    def first_review(self):
        """Gets the first_review of this CustomerReviewer.  # noqa: E501

        First review  # noqa: E501

        :return: The first_review of this CustomerReviewer.  # noqa: E501
        :rtype: str
        """
        return self._first_review

    @first_review.setter
    def first_review(self, first_review):
        """Sets the first_review of this CustomerReviewer.

        First review  # noqa: E501

        :param first_review: The first_review of this CustomerReviewer.  # noqa: E501
        :type: str
        """

        self._first_review = first_review

    @property
    def last_review(self):
        """Gets the last_review of this CustomerReviewer.  # noqa: E501

        Last review  # noqa: E501

        :return: The last_review of this CustomerReviewer.  # noqa: E501
        :rtype: str
        """
        return self._last_review

    @last_review.setter
    def last_review(self, last_review):
        """Sets the last_review of this CustomerReviewer.

        Last review  # noqa: E501

        :param last_review: The last_review of this CustomerReviewer.  # noqa: E501
        :type: str
        """

        self._last_review = last_review

    @property
    def location(self):
        """Gets the location of this CustomerReviewer.  # noqa: E501

        Location of the reviewer  # noqa: E501

        :return: The location of this CustomerReviewer.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this CustomerReviewer.

        Location of the reviewer  # noqa: E501

        :param location: The location of this CustomerReviewer.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def nickname(self):
        """Gets the nickname of this CustomerReviewer.  # noqa: E501

        Nickname of the reviewer  # noqa: E501

        :return: The nickname of this CustomerReviewer.  # noqa: E501
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """Sets the nickname of this CustomerReviewer.

        Nickname of the reviewer  # noqa: E501

        :param nickname: The nickname of this CustomerReviewer.  # noqa: E501
        :type: str
        """

        self._nickname = nickname

    @property
    def number_helpful_review_votes(self):
        """Gets the number_helpful_review_votes of this CustomerReviewer.  # noqa: E501

        Number of helpful review votes  # noqa: E501

        :return: The number_helpful_review_votes of this CustomerReviewer.  # noqa: E501
        :rtype: int
        """
        return self._number_helpful_review_votes

    @number_helpful_review_votes.setter
    def number_helpful_review_votes(self, number_helpful_review_votes):
        """Sets the number_helpful_review_votes of this CustomerReviewer.

        Number of helpful review votes  # noqa: E501

        :param number_helpful_review_votes: The number_helpful_review_votes of this CustomerReviewer.  # noqa: E501
        :type: int
        """

        self._number_helpful_review_votes = number_helpful_review_votes

    @property
    def rank(self):
        """Gets the rank of this CustomerReviewer.  # noqa: E501

        Rank of this reviewer  # noqa: E501

        :return: The rank of this CustomerReviewer.  # noqa: E501
        :rtype: int
        """
        return self._rank

    @rank.setter
    def rank(self, rank):
        """Sets the rank of this CustomerReviewer.

        Rank of this reviewer  # noqa: E501

        :param rank: The rank of this CustomerReviewer.  # noqa: E501
        :type: int
        """

        self._rank = rank

    @property
    def reviews_contributed(self):
        """Gets the reviews_contributed of this CustomerReviewer.  # noqa: E501

        Number of reviews contributed  # noqa: E501

        :return: The reviews_contributed of this CustomerReviewer.  # noqa: E501
        :rtype: int
        """
        return self._reviews_contributed

    @reviews_contributed.setter
    def reviews_contributed(self, reviews_contributed):
        """Sets the reviews_contributed of this CustomerReviewer.

        Number of reviews contributed  # noqa: E501

        :param reviews_contributed: The reviews_contributed of this CustomerReviewer.  # noqa: E501
        :type: int
        """

        self._reviews_contributed = reviews_contributed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomerReviewer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomerReviewer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
