# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class UltraCartConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'exempt_from_colorado_retail_delivery_fee': 'bool',
        'exempt_from_minnesota_retail_delivery_fee': 'bool',
        'tax_billing': 'bool'
    }

    attribute_map = {
        'exempt_from_colorado_retail_delivery_fee': 'exempt_from_colorado_retail_delivery_fee',
        'exempt_from_minnesota_retail_delivery_fee': 'exempt_from_minnesota_retail_delivery_fee',
        'tax_billing': 'tax_billing'
    }

    def __init__(self, exempt_from_colorado_retail_delivery_fee=None, exempt_from_minnesota_retail_delivery_fee=None, tax_billing=None):  # noqa: E501
        """UltraCartConfig - a model defined in Swagger"""  # noqa: E501

        self._exempt_from_colorado_retail_delivery_fee = None
        self._exempt_from_minnesota_retail_delivery_fee = None
        self._tax_billing = None
        self.discriminator = None

        if exempt_from_colorado_retail_delivery_fee is not None:
            self.exempt_from_colorado_retail_delivery_fee = exempt_from_colorado_retail_delivery_fee
        if exempt_from_minnesota_retail_delivery_fee is not None:
            self.exempt_from_minnesota_retail_delivery_fee = exempt_from_minnesota_retail_delivery_fee
        if tax_billing is not None:
            self.tax_billing = tax_billing

    @property
    def exempt_from_colorado_retail_delivery_fee(self):
        """Gets the exempt_from_colorado_retail_delivery_fee of this UltraCartConfig.  # noqa: E501

        True if the Colorado Retail Delivery Fee should not be collected  # noqa: E501

        :return: The exempt_from_colorado_retail_delivery_fee of this UltraCartConfig.  # noqa: E501
        :rtype: bool
        """
        return self._exempt_from_colorado_retail_delivery_fee

    @exempt_from_colorado_retail_delivery_fee.setter
    def exempt_from_colorado_retail_delivery_fee(self, exempt_from_colorado_retail_delivery_fee):
        """Sets the exempt_from_colorado_retail_delivery_fee of this UltraCartConfig.

        True if the Colorado Retail Delivery Fee should not be collected  # noqa: E501

        :param exempt_from_colorado_retail_delivery_fee: The exempt_from_colorado_retail_delivery_fee of this UltraCartConfig.  # noqa: E501
        :type: bool
        """

        self._exempt_from_colorado_retail_delivery_fee = exempt_from_colorado_retail_delivery_fee

    @property
    def exempt_from_minnesota_retail_delivery_fee(self):
        """Gets the exempt_from_minnesota_retail_delivery_fee of this UltraCartConfig.  # noqa: E501

        True if the Minnesota Retail Delivery Fee should not be collected  # noqa: E501

        :return: The exempt_from_minnesota_retail_delivery_fee of this UltraCartConfig.  # noqa: E501
        :rtype: bool
        """
        return self._exempt_from_minnesota_retail_delivery_fee

    @exempt_from_minnesota_retail_delivery_fee.setter
    def exempt_from_minnesota_retail_delivery_fee(self, exempt_from_minnesota_retail_delivery_fee):
        """Sets the exempt_from_minnesota_retail_delivery_fee of this UltraCartConfig.

        True if the Minnesota Retail Delivery Fee should not be collected  # noqa: E501

        :param exempt_from_minnesota_retail_delivery_fee: The exempt_from_minnesota_retail_delivery_fee of this UltraCartConfig.  # noqa: E501
        :type: bool
        """

        self._exempt_from_minnesota_retail_delivery_fee = exempt_from_minnesota_retail_delivery_fee

    @property
    def tax_billing(self):
        """Gets the tax_billing of this UltraCartConfig.  # noqa: E501

        True if sales tax should be collected based on billing address instead of shipping address  # noqa: E501

        :return: The tax_billing of this UltraCartConfig.  # noqa: E501
        :rtype: bool
        """
        return self._tax_billing

    @tax_billing.setter
    def tax_billing(self, tax_billing):
        """Sets the tax_billing of this UltraCartConfig.

        True if sales tax should be collected based on billing address instead of shipping address  # noqa: E501

        :param tax_billing: The tax_billing of this UltraCartConfig.  # noqa: E501
        :type: bool
        """

        self._tax_billing = tax_billing

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UltraCartConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UltraCartConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
