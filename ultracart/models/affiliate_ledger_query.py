# coding: utf-8

"""
    UltraCart Rest API V2

    This is the next generation UltraCart REST API...

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class AffiliateLedgerQuery(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, affiliate_oid=None, item_id=None, order_id=None, sub_id=None, transaction_dts_begin=None, transaction_dts_end=None):
        """
        AffiliateLedgerQuery - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'affiliate_oid': 'int',
            'item_id': 'str',
            'order_id': 'str',
            'sub_id': 'str',
            'transaction_dts_begin': 'str',
            'transaction_dts_end': 'str'
        }

        self.attribute_map = {
            'affiliate_oid': 'affiliate_oid',
            'item_id': 'item_id',
            'order_id': 'order_id',
            'sub_id': 'sub_id',
            'transaction_dts_begin': 'transaction_dts_begin',
            'transaction_dts_end': 'transaction_dts_end'
        }

        self._affiliate_oid = affiliate_oid
        self._item_id = item_id
        self._order_id = order_id
        self._sub_id = sub_id
        self._transaction_dts_begin = transaction_dts_begin
        self._transaction_dts_end = transaction_dts_end

    @property
    def affiliate_oid(self):
        """
        Gets the affiliate_oid of this AffiliateLedgerQuery.
        Affiliate ID associated with the ledger

        :return: The affiliate_oid of this AffiliateLedgerQuery.
        :rtype: int
        """
        return self._affiliate_oid

    @affiliate_oid.setter
    def affiliate_oid(self, affiliate_oid):
        """
        Sets the affiliate_oid of this AffiliateLedgerQuery.
        Affiliate ID associated with the ledger

        :param affiliate_oid: The affiliate_oid of this AffiliateLedgerQuery.
        :type: int
        """

        self._affiliate_oid = affiliate_oid

    @property
    def item_id(self):
        """
        Gets the item_id of this AffiliateLedgerQuery.
        Item id associated with the ledger entry

        :return: The item_id of this AffiliateLedgerQuery.
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """
        Sets the item_id of this AffiliateLedgerQuery.
        Item id associated with the ledger entry

        :param item_id: The item_id of this AffiliateLedgerQuery.
        :type: str
        """

        self._item_id = item_id

    @property
    def order_id(self):
        """
        Gets the order_id of this AffiliateLedgerQuery.
        Order ID associated with the ledger entries

        :return: The order_id of this AffiliateLedgerQuery.
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """
        Sets the order_id of this AffiliateLedgerQuery.
        Order ID associated with the ledger entries

        :param order_id: The order_id of this AffiliateLedgerQuery.
        :type: str
        """

        self._order_id = order_id

    @property
    def sub_id(self):
        """
        Gets the sub_id of this AffiliateLedgerQuery.
        Sub ID value passed on the click that generated the ledger

        :return: The sub_id of this AffiliateLedgerQuery.
        :rtype: str
        """
        return self._sub_id

    @sub_id.setter
    def sub_id(self, sub_id):
        """
        Sets the sub_id of this AffiliateLedgerQuery.
        Sub ID value passed on the click that generated the ledger

        :param sub_id: The sub_id of this AffiliateLedgerQuery.
        :type: str
        """

        self._sub_id = sub_id

    @property
    def transaction_dts_begin(self):
        """
        Gets the transaction_dts_begin of this AffiliateLedgerQuery.
        Minimum transaction date/time to return

        :return: The transaction_dts_begin of this AffiliateLedgerQuery.
        :rtype: str
        """
        return self._transaction_dts_begin

    @transaction_dts_begin.setter
    def transaction_dts_begin(self, transaction_dts_begin):
        """
        Sets the transaction_dts_begin of this AffiliateLedgerQuery.
        Minimum transaction date/time to return

        :param transaction_dts_begin: The transaction_dts_begin of this AffiliateLedgerQuery.
        :type: str
        """

        self._transaction_dts_begin = transaction_dts_begin

    @property
    def transaction_dts_end(self):
        """
        Gets the transaction_dts_end of this AffiliateLedgerQuery.
        Maximum transaction date/time to return

        :return: The transaction_dts_end of this AffiliateLedgerQuery.
        :rtype: str
        """
        return self._transaction_dts_end

    @transaction_dts_end.setter
    def transaction_dts_end(self, transaction_dts_end):
        """
        Sets the transaction_dts_end of this AffiliateLedgerQuery.
        Maximum transaction date/time to return

        :param transaction_dts_end: The transaction_dts_end of this AffiliateLedgerQuery.
        :type: str
        """

        self._transaction_dts_end = transaction_dts_end

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
