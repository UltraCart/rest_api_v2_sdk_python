# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CustomerPrivacy(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'last_update_dts': 'str',
        'marketing': 'bool',
        'preference': 'bool',
        'statistics': 'bool'
    }

    attribute_map = {
        'last_update_dts': 'last_update_dts',
        'marketing': 'marketing',
        'preference': 'preference',
        'statistics': 'statistics'
    }

    def __init__(self, last_update_dts=None, marketing=None, preference=None, statistics=None):
        """
        CustomerPrivacy - a model defined in Swagger
        """

        self._last_update_dts = None
        self._marketing = None
        self._preference = None
        self._statistics = None
        self.discriminator = None

        if last_update_dts is not None:
          self.last_update_dts = last_update_dts
        if marketing is not None:
          self.marketing = marketing
        if preference is not None:
          self.preference = preference
        if statistics is not None:
          self.statistics = statistics

    @property
    def last_update_dts(self):
        """
        Gets the last_update_dts of this CustomerPrivacy.
        Last update date

        :return: The last_update_dts of this CustomerPrivacy.
        :rtype: str
        """
        return self._last_update_dts

    @last_update_dts.setter
    def last_update_dts(self, last_update_dts):
        """
        Sets the last_update_dts of this CustomerPrivacy.
        Last update date

        :param last_update_dts: The last_update_dts of this CustomerPrivacy.
        :type: str
        """

        self._last_update_dts = last_update_dts

    @property
    def marketing(self):
        """
        Gets the marketing of this CustomerPrivacy.
        The customer has opted in to marketing

        :return: The marketing of this CustomerPrivacy.
        :rtype: bool
        """
        return self._marketing

    @marketing.setter
    def marketing(self, marketing):
        """
        Sets the marketing of this CustomerPrivacy.
        The customer has opted in to marketing

        :param marketing: The marketing of this CustomerPrivacy.
        :type: bool
        """

        self._marketing = marketing

    @property
    def preference(self):
        """
        Gets the preference of this CustomerPrivacy.
        The customer has opted in to preference tracking

        :return: The preference of this CustomerPrivacy.
        :rtype: bool
        """
        return self._preference

    @preference.setter
    def preference(self, preference):
        """
        Sets the preference of this CustomerPrivacy.
        The customer has opted in to preference tracking

        :param preference: The preference of this CustomerPrivacy.
        :type: bool
        """

        self._preference = preference

    @property
    def statistics(self):
        """
        Gets the statistics of this CustomerPrivacy.
        The customer has opted in to statistics collection

        :return: The statistics of this CustomerPrivacy.
        :rtype: bool
        """
        return self._statistics

    @statistics.setter
    def statistics(self, statistics):
        """
        Sets the statistics of this CustomerPrivacy.
        The customer has opted in to statistics collection

        :param statistics: The statistics of this CustomerPrivacy.
        :type: bool
        """

        self._statistics = statistics

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CustomerPrivacy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
