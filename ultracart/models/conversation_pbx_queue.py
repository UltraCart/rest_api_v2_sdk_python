# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConversationPbxQueue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'announce_queue_position': 'bool',
        'conversation_pbx_queue_uuid': 'str',
        'conversation_voicemail_mailbox_uuid': 'str',
        'hold_conversation_pbx_audio_uuid': 'str',
        'max_hold_seconds': 'int',
        'members': 'ConversationPbxQueueMembers',
        'merchant_id': 'str',
        'name': 'str',
        'no_agent_available_play_audio_uuid': 'str',
        'no_agent_available_say': 'str',
        'no_agent_available_say_voice': 'str',
        'play_audio_uuid': 'str',
        'record_call': 'bool',
        'say': 'str',
        'say_voice': 'str',
        'twilio_taskrouter_workflow_sid': 'str',
        'twilio_workspace_queue_sid': 'str',
        'voicemail': 'bool',
        'wait_critical_seconds': 'int',
        'wait_warning_seconds': 'int',
        'wrap_up_seconds': 'int'
    }

    attribute_map = {
        'announce_queue_position': 'announce_queue_position',
        'conversation_pbx_queue_uuid': 'conversation_pbx_queue_uuid',
        'conversation_voicemail_mailbox_uuid': 'conversation_voicemail_mailbox_uuid',
        'hold_conversation_pbx_audio_uuid': 'hold_conversation_pbx_audio_uuid',
        'max_hold_seconds': 'max_hold_seconds',
        'members': 'members',
        'merchant_id': 'merchant_id',
        'name': 'name',
        'no_agent_available_play_audio_uuid': 'no_agent_available_play_audio_uuid',
        'no_agent_available_say': 'no_agent_available_say',
        'no_agent_available_say_voice': 'no_agent_available_say_voice',
        'play_audio_uuid': 'play_audio_uuid',
        'record_call': 'record_call',
        'say': 'say',
        'say_voice': 'say_voice',
        'twilio_taskrouter_workflow_sid': 'twilio_taskrouter_workflow_sid',
        'twilio_workspace_queue_sid': 'twilio_workspace_queue_sid',
        'voicemail': 'voicemail',
        'wait_critical_seconds': 'wait_critical_seconds',
        'wait_warning_seconds': 'wait_warning_seconds',
        'wrap_up_seconds': 'wrap_up_seconds'
    }

    def __init__(self, announce_queue_position=None, conversation_pbx_queue_uuid=None, conversation_voicemail_mailbox_uuid=None, hold_conversation_pbx_audio_uuid=None, max_hold_seconds=None, members=None, merchant_id=None, name=None, no_agent_available_play_audio_uuid=None, no_agent_available_say=None, no_agent_available_say_voice=None, play_audio_uuid=None, record_call=None, say=None, say_voice=None, twilio_taskrouter_workflow_sid=None, twilio_workspace_queue_sid=None, voicemail=None, wait_critical_seconds=None, wait_warning_seconds=None, wrap_up_seconds=None):  # noqa: E501
        """ConversationPbxQueue - a model defined in Swagger"""  # noqa: E501

        self._announce_queue_position = None
        self._conversation_pbx_queue_uuid = None
        self._conversation_voicemail_mailbox_uuid = None
        self._hold_conversation_pbx_audio_uuid = None
        self._max_hold_seconds = None
        self._members = None
        self._merchant_id = None
        self._name = None
        self._no_agent_available_play_audio_uuid = None
        self._no_agent_available_say = None
        self._no_agent_available_say_voice = None
        self._play_audio_uuid = None
        self._record_call = None
        self._say = None
        self._say_voice = None
        self._twilio_taskrouter_workflow_sid = None
        self._twilio_workspace_queue_sid = None
        self._voicemail = None
        self._wait_critical_seconds = None
        self._wait_warning_seconds = None
        self._wrap_up_seconds = None
        self.discriminator = None

        if announce_queue_position is not None:
            self.announce_queue_position = announce_queue_position
        if conversation_pbx_queue_uuid is not None:
            self.conversation_pbx_queue_uuid = conversation_pbx_queue_uuid
        if conversation_voicemail_mailbox_uuid is not None:
            self.conversation_voicemail_mailbox_uuid = conversation_voicemail_mailbox_uuid
        if hold_conversation_pbx_audio_uuid is not None:
            self.hold_conversation_pbx_audio_uuid = hold_conversation_pbx_audio_uuid
        if max_hold_seconds is not None:
            self.max_hold_seconds = max_hold_seconds
        if members is not None:
            self.members = members
        if merchant_id is not None:
            self.merchant_id = merchant_id
        if name is not None:
            self.name = name
        if no_agent_available_play_audio_uuid is not None:
            self.no_agent_available_play_audio_uuid = no_agent_available_play_audio_uuid
        if no_agent_available_say is not None:
            self.no_agent_available_say = no_agent_available_say
        if no_agent_available_say_voice is not None:
            self.no_agent_available_say_voice = no_agent_available_say_voice
        if play_audio_uuid is not None:
            self.play_audio_uuid = play_audio_uuid
        if record_call is not None:
            self.record_call = record_call
        if say is not None:
            self.say = say
        if say_voice is not None:
            self.say_voice = say_voice
        if twilio_taskrouter_workflow_sid is not None:
            self.twilio_taskrouter_workflow_sid = twilio_taskrouter_workflow_sid
        if twilio_workspace_queue_sid is not None:
            self.twilio_workspace_queue_sid = twilio_workspace_queue_sid
        if voicemail is not None:
            self.voicemail = voicemail
        if wait_critical_seconds is not None:
            self.wait_critical_seconds = wait_critical_seconds
        if wait_warning_seconds is not None:
            self.wait_warning_seconds = wait_warning_seconds
        if wrap_up_seconds is not None:
            self.wrap_up_seconds = wrap_up_seconds

    @property
    def announce_queue_position(self):
        """Gets the announce_queue_position of this ConversationPbxQueue.  # noqa: E501

        If true, the customer is told their queue position upon entering the queue  # noqa: E501

        :return: The announce_queue_position of this ConversationPbxQueue.  # noqa: E501
        :rtype: bool
        """
        return self._announce_queue_position

    @announce_queue_position.setter
    def announce_queue_position(self, announce_queue_position):
        """Sets the announce_queue_position of this ConversationPbxQueue.

        If true, the customer is told their queue position upon entering the queue  # noqa: E501

        :param announce_queue_position: The announce_queue_position of this ConversationPbxQueue.  # noqa: E501
        :type: bool
        """

        self._announce_queue_position = announce_queue_position

    @property
    def conversation_pbx_queue_uuid(self):
        """Gets the conversation_pbx_queue_uuid of this ConversationPbxQueue.  # noqa: E501

        Conversation Pbx Queue unique identifier  # noqa: E501

        :return: The conversation_pbx_queue_uuid of this ConversationPbxQueue.  # noqa: E501
        :rtype: str
        """
        return self._conversation_pbx_queue_uuid

    @conversation_pbx_queue_uuid.setter
    def conversation_pbx_queue_uuid(self, conversation_pbx_queue_uuid):
        """Sets the conversation_pbx_queue_uuid of this ConversationPbxQueue.

        Conversation Pbx Queue unique identifier  # noqa: E501

        :param conversation_pbx_queue_uuid: The conversation_pbx_queue_uuid of this ConversationPbxQueue.  # noqa: E501
        :type: str
        """

        self._conversation_pbx_queue_uuid = conversation_pbx_queue_uuid

    @property
    def conversation_voicemail_mailbox_uuid(self):
        """Gets the conversation_voicemail_mailbox_uuid of this ConversationPbxQueue.  # noqa: E501

        The voicemail mailbox associated with this queue  # noqa: E501

        :return: The conversation_voicemail_mailbox_uuid of this ConversationPbxQueue.  # noqa: E501
        :rtype: str
        """
        return self._conversation_voicemail_mailbox_uuid

    @conversation_voicemail_mailbox_uuid.setter
    def conversation_voicemail_mailbox_uuid(self, conversation_voicemail_mailbox_uuid):
        """Sets the conversation_voicemail_mailbox_uuid of this ConversationPbxQueue.

        The voicemail mailbox associated with this queue  # noqa: E501

        :param conversation_voicemail_mailbox_uuid: The conversation_voicemail_mailbox_uuid of this ConversationPbxQueue.  # noqa: E501
        :type: str
        """
        if conversation_voicemail_mailbox_uuid is not None and len(conversation_voicemail_mailbox_uuid) > 50:
            raise ValueError("Invalid value for `conversation_voicemail_mailbox_uuid`, length must be less than or equal to `50`")  # noqa: E501

        self._conversation_voicemail_mailbox_uuid = conversation_voicemail_mailbox_uuid

    @property
    def hold_conversation_pbx_audio_uuid(self):
        """Gets the hold_conversation_pbx_audio_uuid of this ConversationPbxQueue.  # noqa: E501

        The audio to play while holding in a queue  # noqa: E501

        :return: The hold_conversation_pbx_audio_uuid of this ConversationPbxQueue.  # noqa: E501
        :rtype: str
        """
        return self._hold_conversation_pbx_audio_uuid

    @hold_conversation_pbx_audio_uuid.setter
    def hold_conversation_pbx_audio_uuid(self, hold_conversation_pbx_audio_uuid):
        """Sets the hold_conversation_pbx_audio_uuid of this ConversationPbxQueue.

        The audio to play while holding in a queue  # noqa: E501

        :param hold_conversation_pbx_audio_uuid: The hold_conversation_pbx_audio_uuid of this ConversationPbxQueue.  # noqa: E501
        :type: str
        """
        if hold_conversation_pbx_audio_uuid is not None and len(hold_conversation_pbx_audio_uuid) > 50:
            raise ValueError("Invalid value for `hold_conversation_pbx_audio_uuid`, length must be less than or equal to `50`")  # noqa: E501

        self._hold_conversation_pbx_audio_uuid = hold_conversation_pbx_audio_uuid

    @property
    def max_hold_seconds(self):
        """Gets the max_hold_seconds of this ConversationPbxQueue.  # noqa: E501

        The maximum number of seconds for a customer to hold in a queue  # noqa: E501

        :return: The max_hold_seconds of this ConversationPbxQueue.  # noqa: E501
        :rtype: int
        """
        return self._max_hold_seconds

    @max_hold_seconds.setter
    def max_hold_seconds(self, max_hold_seconds):
        """Sets the max_hold_seconds of this ConversationPbxQueue.

        The maximum number of seconds for a customer to hold in a queue  # noqa: E501

        :param max_hold_seconds: The max_hold_seconds of this ConversationPbxQueue.  # noqa: E501
        :type: int
        """

        self._max_hold_seconds = max_hold_seconds

    @property
    def members(self):
        """Gets the members of this ConversationPbxQueue.  # noqa: E501


        :return: The members of this ConversationPbxQueue.  # noqa: E501
        :rtype: ConversationPbxQueueMembers
        """
        return self._members

    @members.setter
    def members(self, members):
        """Sets the members of this ConversationPbxQueue.


        :param members: The members of this ConversationPbxQueue.  # noqa: E501
        :type: ConversationPbxQueueMembers
        """

        self._members = members

    @property
    def merchant_id(self):
        """Gets the merchant_id of this ConversationPbxQueue.  # noqa: E501

        Merchant Id  # noqa: E501

        :return: The merchant_id of this ConversationPbxQueue.  # noqa: E501
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this ConversationPbxQueue.

        Merchant Id  # noqa: E501

        :param merchant_id: The merchant_id of this ConversationPbxQueue.  # noqa: E501
        :type: str
        """
        if merchant_id is not None and len(merchant_id) > 5:
            raise ValueError("Invalid value for `merchant_id`, length must be less than or equal to `5`")  # noqa: E501

        self._merchant_id = merchant_id

    @property
    def name(self):
        """Gets the name of this ConversationPbxQueue.  # noqa: E501

        Name of queue  # noqa: E501

        :return: The name of this ConversationPbxQueue.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConversationPbxQueue.

        Name of queue  # noqa: E501

        :param name: The name of this ConversationPbxQueue.  # noqa: E501
        :type: str
        """
        if name is not None and len(name) > 50:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `50`")  # noqa: E501

        self._name = name

    @property
    def no_agent_available_play_audio_uuid(self):
        """Gets the no_agent_available_play_audio_uuid of this ConversationPbxQueue.  # noqa: E501

        When no agent is available after the max_hold_seconds, say this  # noqa: E501

        :return: The no_agent_available_play_audio_uuid of this ConversationPbxQueue.  # noqa: E501
        :rtype: str
        """
        return self._no_agent_available_play_audio_uuid

    @no_agent_available_play_audio_uuid.setter
    def no_agent_available_play_audio_uuid(self, no_agent_available_play_audio_uuid):
        """Sets the no_agent_available_play_audio_uuid of this ConversationPbxQueue.

        When no agent is available after the max_hold_seconds, say this  # noqa: E501

        :param no_agent_available_play_audio_uuid: The no_agent_available_play_audio_uuid of this ConversationPbxQueue.  # noqa: E501
        :type: str
        """
        if no_agent_available_play_audio_uuid is not None and len(no_agent_available_play_audio_uuid) > 50:
            raise ValueError("Invalid value for `no_agent_available_play_audio_uuid`, length must be less than or equal to `50`")  # noqa: E501

        self._no_agent_available_play_audio_uuid = no_agent_available_play_audio_uuid

    @property
    def no_agent_available_say(self):
        """Gets the no_agent_available_say of this ConversationPbxQueue.  # noqa: E501

        When no agent is available after the max_hold_seconds, say this  # noqa: E501

        :return: The no_agent_available_say of this ConversationPbxQueue.  # noqa: E501
        :rtype: str
        """
        return self._no_agent_available_say

    @no_agent_available_say.setter
    def no_agent_available_say(self, no_agent_available_say):
        """Sets the no_agent_available_say of this ConversationPbxQueue.

        When no agent is available after the max_hold_seconds, say this  # noqa: E501

        :param no_agent_available_say: The no_agent_available_say of this ConversationPbxQueue.  # noqa: E501
        :type: str
        """

        self._no_agent_available_say = no_agent_available_say

    @property
    def no_agent_available_say_voice(self):
        """Gets the no_agent_available_say_voice of this ConversationPbxQueue.  # noqa: E501

        The type of voice used to say text when no agent is available  # noqa: E501

        :return: The no_agent_available_say_voice of this ConversationPbxQueue.  # noqa: E501
        :rtype: str
        """
        return self._no_agent_available_say_voice

    @no_agent_available_say_voice.setter
    def no_agent_available_say_voice(self, no_agent_available_say_voice):
        """Sets the no_agent_available_say_voice of this ConversationPbxQueue.

        The type of voice used to say text when no agent is available  # noqa: E501

        :param no_agent_available_say_voice: The no_agent_available_say_voice of this ConversationPbxQueue.  # noqa: E501
        :type: str
        """
        if no_agent_available_say_voice is not None and len(no_agent_available_say_voice) > 50:
            raise ValueError("Invalid value for `no_agent_available_say_voice`, length must be less than or equal to `50`")  # noqa: E501

        self._no_agent_available_say_voice = no_agent_available_say_voice

    @property
    def play_audio_uuid(self):
        """Gets the play_audio_uuid of this ConversationPbxQueue.  # noqa: E501

        Audio played when customer enters a queue  # noqa: E501

        :return: The play_audio_uuid of this ConversationPbxQueue.  # noqa: E501
        :rtype: str
        """
        return self._play_audio_uuid

    @play_audio_uuid.setter
    def play_audio_uuid(self, play_audio_uuid):
        """Sets the play_audio_uuid of this ConversationPbxQueue.

        Audio played when customer enters a queue  # noqa: E501

        :param play_audio_uuid: The play_audio_uuid of this ConversationPbxQueue.  # noqa: E501
        :type: str
        """
        if play_audio_uuid is not None and len(play_audio_uuid) > 50:
            raise ValueError("Invalid value for `play_audio_uuid`, length must be less than or equal to `50`")  # noqa: E501

        self._play_audio_uuid = play_audio_uuid

    @property
    def record_call(self):
        """Gets the record_call of this ConversationPbxQueue.  # noqa: E501

        If true, any calls in this queue are recorded  # noqa: E501

        :return: The record_call of this ConversationPbxQueue.  # noqa: E501
        :rtype: bool
        """
        return self._record_call

    @record_call.setter
    def record_call(self, record_call):
        """Sets the record_call of this ConversationPbxQueue.

        If true, any calls in this queue are recorded  # noqa: E501

        :param record_call: The record_call of this ConversationPbxQueue.  # noqa: E501
        :type: bool
        """

        self._record_call = record_call

    @property
    def say(self):
        """Gets the say of this ConversationPbxQueue.  # noqa: E501

        Say text when a customer enters queue  # noqa: E501

        :return: The say of this ConversationPbxQueue.  # noqa: E501
        :rtype: str
        """
        return self._say

    @say.setter
    def say(self, say):
        """Sets the say of this ConversationPbxQueue.

        Say text when a customer enters queue  # noqa: E501

        :param say: The say of this ConversationPbxQueue.  # noqa: E501
        :type: str
        """

        self._say = say

    @property
    def say_voice(self):
        """Gets the say_voice of this ConversationPbxQueue.  # noqa: E501

        The type of voice to use when say text is spoken  # noqa: E501

        :return: The say_voice of this ConversationPbxQueue.  # noqa: E501
        :rtype: str
        """
        return self._say_voice

    @say_voice.setter
    def say_voice(self, say_voice):
        """Sets the say_voice of this ConversationPbxQueue.

        The type of voice to use when say text is spoken  # noqa: E501

        :param say_voice: The say_voice of this ConversationPbxQueue.  # noqa: E501
        :type: str
        """
        if say_voice is not None and len(say_voice) > 50:
            raise ValueError("Invalid value for `say_voice`, length must be less than or equal to `50`")  # noqa: E501

        self._say_voice = say_voice

    @property
    def twilio_taskrouter_workflow_sid(self):
        """Gets the twilio_taskrouter_workflow_sid of this ConversationPbxQueue.  # noqa: E501

        Twilio taskrouter workflow sid  # noqa: E501

        :return: The twilio_taskrouter_workflow_sid of this ConversationPbxQueue.  # noqa: E501
        :rtype: str
        """
        return self._twilio_taskrouter_workflow_sid

    @twilio_taskrouter_workflow_sid.setter
    def twilio_taskrouter_workflow_sid(self, twilio_taskrouter_workflow_sid):
        """Sets the twilio_taskrouter_workflow_sid of this ConversationPbxQueue.

        Twilio taskrouter workflow sid  # noqa: E501

        :param twilio_taskrouter_workflow_sid: The twilio_taskrouter_workflow_sid of this ConversationPbxQueue.  # noqa: E501
        :type: str
        """
        if twilio_taskrouter_workflow_sid is not None and len(twilio_taskrouter_workflow_sid) > 100:
            raise ValueError("Invalid value for `twilio_taskrouter_workflow_sid`, length must be less than or equal to `100`")  # noqa: E501

        self._twilio_taskrouter_workflow_sid = twilio_taskrouter_workflow_sid

    @property
    def twilio_workspace_queue_sid(self):
        """Gets the twilio_workspace_queue_sid of this ConversationPbxQueue.  # noqa: E501

        Twilio workspace queue sid  # noqa: E501

        :return: The twilio_workspace_queue_sid of this ConversationPbxQueue.  # noqa: E501
        :rtype: str
        """
        return self._twilio_workspace_queue_sid

    @twilio_workspace_queue_sid.setter
    def twilio_workspace_queue_sid(self, twilio_workspace_queue_sid):
        """Sets the twilio_workspace_queue_sid of this ConversationPbxQueue.

        Twilio workspace queue sid  # noqa: E501

        :param twilio_workspace_queue_sid: The twilio_workspace_queue_sid of this ConversationPbxQueue.  # noqa: E501
        :type: str
        """
        if twilio_workspace_queue_sid is not None and len(twilio_workspace_queue_sid) > 50:
            raise ValueError("Invalid value for `twilio_workspace_queue_sid`, length must be less than or equal to `50`")  # noqa: E501

        self._twilio_workspace_queue_sid = twilio_workspace_queue_sid

    @property
    def voicemail(self):
        """Gets the voicemail of this ConversationPbxQueue.  # noqa: E501

        If true, this queue has a voicemail associated with it  # noqa: E501

        :return: The voicemail of this ConversationPbxQueue.  # noqa: E501
        :rtype: bool
        """
        return self._voicemail

    @voicemail.setter
    def voicemail(self, voicemail):
        """Sets the voicemail of this ConversationPbxQueue.

        If true, this queue has a voicemail associated with it  # noqa: E501

        :param voicemail: The voicemail of this ConversationPbxQueue.  # noqa: E501
        :type: bool
        """

        self._voicemail = voicemail

    @property
    def wait_critical_seconds(self):
        """Gets the wait_critical_seconds of this ConversationPbxQueue.  # noqa: E501

        Wait time in seconds before critical  # noqa: E501

        :return: The wait_critical_seconds of this ConversationPbxQueue.  # noqa: E501
        :rtype: int
        """
        return self._wait_critical_seconds

    @wait_critical_seconds.setter
    def wait_critical_seconds(self, wait_critical_seconds):
        """Sets the wait_critical_seconds of this ConversationPbxQueue.

        Wait time in seconds before critical  # noqa: E501

        :param wait_critical_seconds: The wait_critical_seconds of this ConversationPbxQueue.  # noqa: E501
        :type: int
        """

        self._wait_critical_seconds = wait_critical_seconds

    @property
    def wait_warning_seconds(self):
        """Gets the wait_warning_seconds of this ConversationPbxQueue.  # noqa: E501

        Wait time in seconds before warning  # noqa: E501

        :return: The wait_warning_seconds of this ConversationPbxQueue.  # noqa: E501
        :rtype: int
        """
        return self._wait_warning_seconds

    @wait_warning_seconds.setter
    def wait_warning_seconds(self, wait_warning_seconds):
        """Sets the wait_warning_seconds of this ConversationPbxQueue.

        Wait time in seconds before warning  # noqa: E501

        :param wait_warning_seconds: The wait_warning_seconds of this ConversationPbxQueue.  # noqa: E501
        :type: int
        """

        self._wait_warning_seconds = wait_warning_seconds

    @property
    def wrap_up_seconds(self):
        """Gets the wrap_up_seconds of this ConversationPbxQueue.  # noqa: E501

        Wrap up time in seconds  # noqa: E501

        :return: The wrap_up_seconds of this ConversationPbxQueue.  # noqa: E501
        :rtype: int
        """
        return self._wrap_up_seconds

    @wrap_up_seconds.setter
    def wrap_up_seconds(self, wrap_up_seconds):
        """Sets the wrap_up_seconds of this ConversationPbxQueue.

        Wrap up time in seconds  # noqa: E501

        :param wrap_up_seconds: The wrap_up_seconds of this ConversationPbxQueue.  # noqa: E501
        :type: int
        """

        self._wrap_up_seconds = wrap_up_seconds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConversationPbxQueue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConversationPbxQueue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
