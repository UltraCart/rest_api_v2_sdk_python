# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ReportPageVisualization(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'config': 'str',
        'data_source_name': 'str',
        'dimensions': 'list[ReportPageVisualizationDimension]',
        'metrics': 'list[ReportPageVisualizationMetric]',
        'name': 'str',
        'show_comparison': 'bool',
        'styles': 'str',
        'type': 'str',
        'visualization_uuid': 'str'
    }

    attribute_map = {
        'config': 'config',
        'data_source_name': 'data_source_name',
        'dimensions': 'dimensions',
        'metrics': 'metrics',
        'name': 'name',
        'show_comparison': 'show_comparison',
        'styles': 'styles',
        'type': 'type',
        'visualization_uuid': 'visualization_uuid'
    }

    def __init__(self, config=None, data_source_name=None, dimensions=None, metrics=None, name=None, show_comparison=None, styles=None, type=None, visualization_uuid=None):  # noqa: E501
        """ReportPageVisualization - a model defined in Swagger"""  # noqa: E501

        self._config = None
        self._data_source_name = None
        self._dimensions = None
        self._metrics = None
        self._name = None
        self._show_comparison = None
        self._styles = None
        self._type = None
        self._visualization_uuid = None
        self.discriminator = None

        if config is not None:
            self.config = config
        if data_source_name is not None:
            self.data_source_name = data_source_name
        if dimensions is not None:
            self.dimensions = dimensions
        if metrics is not None:
            self.metrics = metrics
        if name is not None:
            self.name = name
        if show_comparison is not None:
            self.show_comparison = show_comparison
        if styles is not None:
            self.styles = styles
        if type is not None:
            self.type = type
        if visualization_uuid is not None:
            self.visualization_uuid = visualization_uuid

    @property
    def config(self):
        """Gets the config of this ReportPageVisualization.  # noqa: E501

        A JSON representation of the configuration for this visualization  # noqa: E501

        :return: The config of this ReportPageVisualization.  # noqa: E501
        :rtype: str
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this ReportPageVisualization.

        A JSON representation of the configuration for this visualization  # noqa: E501

        :param config: The config of this ReportPageVisualization.  # noqa: E501
        :type: str
        """

        self._config = config

    @property
    def data_source_name(self):
        """Gets the data_source_name of this ReportPageVisualization.  # noqa: E501


        :return: The data_source_name of this ReportPageVisualization.  # noqa: E501
        :rtype: str
        """
        return self._data_source_name

    @data_source_name.setter
    def data_source_name(self, data_source_name):
        """Sets the data_source_name of this ReportPageVisualization.


        :param data_source_name: The data_source_name of this ReportPageVisualization.  # noqa: E501
        :type: str
        """

        self._data_source_name = data_source_name

    @property
    def dimensions(self):
        """Gets the dimensions of this ReportPageVisualization.  # noqa: E501


        :return: The dimensions of this ReportPageVisualization.  # noqa: E501
        :rtype: list[ReportPageVisualizationDimension]
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this ReportPageVisualization.


        :param dimensions: The dimensions of this ReportPageVisualization.  # noqa: E501
        :type: list[ReportPageVisualizationDimension]
        """

        self._dimensions = dimensions

    @property
    def metrics(self):
        """Gets the metrics of this ReportPageVisualization.  # noqa: E501


        :return: The metrics of this ReportPageVisualization.  # noqa: E501
        :rtype: list[ReportPageVisualizationMetric]
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this ReportPageVisualization.


        :param metrics: The metrics of this ReportPageVisualization.  # noqa: E501
        :type: list[ReportPageVisualizationMetric]
        """

        self._metrics = metrics

    @property
    def name(self):
        """Gets the name of this ReportPageVisualization.  # noqa: E501


        :return: The name of this ReportPageVisualization.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ReportPageVisualization.


        :param name: The name of this ReportPageVisualization.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def show_comparison(self):
        """Gets the show_comparison of this ReportPageVisualization.  # noqa: E501

        True if the visualization should show a comparison based upon the date range  # noqa: E501

        :return: The show_comparison of this ReportPageVisualization.  # noqa: E501
        :rtype: bool
        """
        return self._show_comparison

    @show_comparison.setter
    def show_comparison(self, show_comparison):
        """Sets the show_comparison of this ReportPageVisualization.

        True if the visualization should show a comparison based upon the date range  # noqa: E501

        :param show_comparison: The show_comparison of this ReportPageVisualization.  # noqa: E501
        :type: bool
        """

        self._show_comparison = show_comparison

    @property
    def styles(self):
        """Gets the styles of this ReportPageVisualization.  # noqa: E501

        A JSON representation of the style configuration for this visualization  # noqa: E501

        :return: The styles of this ReportPageVisualization.  # noqa: E501
        :rtype: str
        """
        return self._styles

    @styles.setter
    def styles(self, styles):
        """Sets the styles of this ReportPageVisualization.

        A JSON representation of the style configuration for this visualization  # noqa: E501

        :param styles: The styles of this ReportPageVisualization.  # noqa: E501
        :type: str
        """

        self._styles = styles

    @property
    def type(self):
        """Gets the type of this ReportPageVisualization.  # noqa: E501

        Type of visualization  # noqa: E501

        :return: The type of this ReportPageVisualization.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ReportPageVisualization.

        Type of visualization  # noqa: E501

        :param type: The type of this ReportPageVisualization.  # noqa: E501
        :type: str
        """
        allowed_values = ["score card", "line chart", "bar chart", "text", "table", "gauge"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def visualization_uuid(self):
        """Gets the visualization_uuid of this ReportPageVisualization.  # noqa: E501

        A UUID for the visualization  # noqa: E501

        :return: The visualization_uuid of this ReportPageVisualization.  # noqa: E501
        :rtype: str
        """
        return self._visualization_uuid

    @visualization_uuid.setter
    def visualization_uuid(self, visualization_uuid):
        """Sets the visualization_uuid of this ReportPageVisualization.

        A UUID for the visualization  # noqa: E501

        :param visualization_uuid: The visualization_uuid of this ReportPageVisualization.  # noqa: E501
        :type: str
        """

        self._visualization_uuid = visualization_uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReportPageVisualization, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportPageVisualization):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
