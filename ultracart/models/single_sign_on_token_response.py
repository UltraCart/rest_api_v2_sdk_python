# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SingleSignOnTokenResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'expiration_dts': 'str',
        'ip_address': 'str',
        'simple_key': 'str'
    }

    attribute_map = {
        'expiration_dts': 'expiration_dts',
        'ip_address': 'ip_address',
        'simple_key': 'simple_key'
    }

    def __init__(self, expiration_dts=None, ip_address=None, simple_key=None):  # noqa: E501
        """SingleSignOnTokenResponse - a model defined in Swagger"""  # noqa: E501

        self._expiration_dts = None
        self._ip_address = None
        self._simple_key = None
        self.discriminator = None

        if expiration_dts is not None:
            self.expiration_dts = expiration_dts
        if ip_address is not None:
            self.ip_address = ip_address
        if simple_key is not None:
            self.simple_key = simple_key

    @property
    def expiration_dts(self):
        """Gets the expiration_dts of this SingleSignOnTokenResponse.  # noqa: E501

        Expiration date/time after which time the key is no longer valid  # noqa: E501

        :return: The expiration_dts of this SingleSignOnTokenResponse.  # noqa: E501
        :rtype: str
        """
        return self._expiration_dts

    @expiration_dts.setter
    def expiration_dts(self, expiration_dts):
        """Sets the expiration_dts of this SingleSignOnTokenResponse.

        Expiration date/time after which time the key is no longer valid  # noqa: E501

        :param expiration_dts: The expiration_dts of this SingleSignOnTokenResponse.  # noqa: E501
        :type: str
        """

        self._expiration_dts = expiration_dts

    @property
    def ip_address(self):
        """Gets the ip_address of this SingleSignOnTokenResponse.  # noqa: E501

        IP address of the user which we recommend you lock the simple key's usage to.  # noqa: E501

        :return: The ip_address of this SingleSignOnTokenResponse.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this SingleSignOnTokenResponse.

        IP address of the user which we recommend you lock the simple key's usage to.  # noqa: E501

        :param ip_address: The ip_address of this SingleSignOnTokenResponse.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def simple_key(self):
        """Gets the simple_key of this SingleSignOnTokenResponse.  # noqa: E501

        The simple key that can then be used to make SDK calls on the users behalf.  # noqa: E501

        :return: The simple_key of this SingleSignOnTokenResponse.  # noqa: E501
        :rtype: str
        """
        return self._simple_key

    @simple_key.setter
    def simple_key(self, simple_key):
        """Sets the simple_key of this SingleSignOnTokenResponse.

        The simple key that can then be used to make SDK calls on the users behalf.  # noqa: E501

        :param simple_key: The simple_key of this SingleSignOnTokenResponse.  # noqa: E501
        :type: str
        """

        self._simple_key = simple_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SingleSignOnTokenResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SingleSignOnTokenResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
