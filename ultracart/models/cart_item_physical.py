# coding: utf-8

"""
    UltraCart Rest API V2

    This is the next generation UltraCart REST API...

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CartItemPhysical(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'height': 'Distance',
        'length': 'Distance',
        'weight': 'Weight',
        'width': 'Distance'
    }

    attribute_map = {
        'height': 'height',
        'length': 'length',
        'weight': 'weight',
        'width': 'width'
    }

    def __init__(self, height=None, length=None, weight=None, width=None):
        """
        CartItemPhysical - a model defined in Swagger
        """

        self._height = None
        self._length = None
        self._weight = None
        self._width = None
        self.discriminator = None

        if height is not None:
          self.height = height
        if length is not None:
          self.length = length
        if weight is not None:
          self.weight = weight
        if width is not None:
          self.width = width

    @property
    def height(self):
        """
        Gets the height of this CartItemPhysical.

        :return: The height of this CartItemPhysical.
        :rtype: Distance
        """
        return self._height

    @height.setter
    def height(self, height):
        """
        Sets the height of this CartItemPhysical.

        :param height: The height of this CartItemPhysical.
        :type: Distance
        """

        self._height = height

    @property
    def length(self):
        """
        Gets the length of this CartItemPhysical.

        :return: The length of this CartItemPhysical.
        :rtype: Distance
        """
        return self._length

    @length.setter
    def length(self, length):
        """
        Sets the length of this CartItemPhysical.

        :param length: The length of this CartItemPhysical.
        :type: Distance
        """

        self._length = length

    @property
    def weight(self):
        """
        Gets the weight of this CartItemPhysical.

        :return: The weight of this CartItemPhysical.
        :rtype: Weight
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """
        Sets the weight of this CartItemPhysical.

        :param weight: The weight of this CartItemPhysical.
        :type: Weight
        """

        self._weight = weight

    @property
    def width(self):
        """
        Gets the width of this CartItemPhysical.

        :return: The width of this CartItemPhysical.
        :rtype: Distance
        """
        return self._width

    @width.setter
    def width(self, width):
        """
        Sets the width of this CartItemPhysical.

        :param width: The width of this CartItemPhysical.
        :type: Distance
        """

        self._width = width

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CartItemPhysical):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
