# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConversationPbxAudio(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'audio_s3_listing_key': 'str',
        'conversation_pbx_audio_uuid': 'str',
        'default_hold_music': 'bool',
        'description': 'str',
        'filename': 'str',
        'merchant_id': 'str',
        'mime_type': 'str',
        'url': 'str',
        'user_id': 'int',
        'version': 'int'
    }

    attribute_map = {
        'audio_s3_listing_key': 'audio_s3_listing_key',
        'conversation_pbx_audio_uuid': 'conversation_pbx_audio_uuid',
        'default_hold_music': 'default_hold_music',
        'description': 'description',
        'filename': 'filename',
        'merchant_id': 'merchant_id',
        'mime_type': 'mime_type',
        'url': 'url',
        'user_id': 'user_id',
        'version': 'version'
    }

    def __init__(self, audio_s3_listing_key=None, conversation_pbx_audio_uuid=None, default_hold_music=None, description=None, filename=None, merchant_id=None, mime_type=None, url=None, user_id=None, version=None):  # noqa: E501
        """ConversationPbxAudio - a model defined in Swagger"""  # noqa: E501

        self._audio_s3_listing_key = None
        self._conversation_pbx_audio_uuid = None
        self._default_hold_music = None
        self._description = None
        self._filename = None
        self._merchant_id = None
        self._mime_type = None
        self._url = None
        self._user_id = None
        self._version = None
        self.discriminator = None

        if audio_s3_listing_key is not None:
            self.audio_s3_listing_key = audio_s3_listing_key
        if conversation_pbx_audio_uuid is not None:
            self.conversation_pbx_audio_uuid = conversation_pbx_audio_uuid
        if default_hold_music is not None:
            self.default_hold_music = default_hold_music
        if description is not None:
            self.description = description
        if filename is not None:
            self.filename = filename
        if merchant_id is not None:
            self.merchant_id = merchant_id
        if mime_type is not None:
            self.mime_type = mime_type
        if url is not None:
            self.url = url
        if user_id is not None:
            self.user_id = user_id
        if version is not None:
            self.version = version

    @property
    def audio_s3_listing_key(self):
        """Gets the audio_s3_listing_key of this ConversationPbxAudio.  # noqa: E501

        Audio S3 Listing Key  # noqa: E501

        :return: The audio_s3_listing_key of this ConversationPbxAudio.  # noqa: E501
        :rtype: str
        """
        return self._audio_s3_listing_key

    @audio_s3_listing_key.setter
    def audio_s3_listing_key(self, audio_s3_listing_key):
        """Sets the audio_s3_listing_key of this ConversationPbxAudio.

        Audio S3 Listing Key  # noqa: E501

        :param audio_s3_listing_key: The audio_s3_listing_key of this ConversationPbxAudio.  # noqa: E501
        :type: str
        """
        if audio_s3_listing_key is not None and len(audio_s3_listing_key) > 250:
            raise ValueError("Invalid value for `audio_s3_listing_key`, length must be less than or equal to `250`")  # noqa: E501

        self._audio_s3_listing_key = audio_s3_listing_key

    @property
    def conversation_pbx_audio_uuid(self):
        """Gets the conversation_pbx_audio_uuid of this ConversationPbxAudio.  # noqa: E501

        Conversation Pbx Audio UUID  # noqa: E501

        :return: The conversation_pbx_audio_uuid of this ConversationPbxAudio.  # noqa: E501
        :rtype: str
        """
        return self._conversation_pbx_audio_uuid

    @conversation_pbx_audio_uuid.setter
    def conversation_pbx_audio_uuid(self, conversation_pbx_audio_uuid):
        """Sets the conversation_pbx_audio_uuid of this ConversationPbxAudio.

        Conversation Pbx Audio UUID  # noqa: E501

        :param conversation_pbx_audio_uuid: The conversation_pbx_audio_uuid of this ConversationPbxAudio.  # noqa: E501
        :type: str
        """
        if conversation_pbx_audio_uuid is not None and len(conversation_pbx_audio_uuid) > 50:
            raise ValueError("Invalid value for `conversation_pbx_audio_uuid`, length must be less than or equal to `50`")  # noqa: E501

        self._conversation_pbx_audio_uuid = conversation_pbx_audio_uuid

    @property
    def default_hold_music(self):
        """Gets the default_hold_music of this ConversationPbxAudio.  # noqa: E501

        If true, this will be the default hold music  # noqa: E501

        :return: The default_hold_music of this ConversationPbxAudio.  # noqa: E501
        :rtype: bool
        """
        return self._default_hold_music

    @default_hold_music.setter
    def default_hold_music(self, default_hold_music):
        """Sets the default_hold_music of this ConversationPbxAudio.

        If true, this will be the default hold music  # noqa: E501

        :param default_hold_music: The default_hold_music of this ConversationPbxAudio.  # noqa: E501
        :type: bool
        """

        self._default_hold_music = default_hold_music

    @property
    def description(self):
        """Gets the description of this ConversationPbxAudio.  # noqa: E501

        Description of this audio  # noqa: E501

        :return: The description of this ConversationPbxAudio.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConversationPbxAudio.

        Description of this audio  # noqa: E501

        :param description: The description of this ConversationPbxAudio.  # noqa: E501
        :type: str
        """
        if description is not None and len(description) > 100:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `100`")  # noqa: E501

        self._description = description

    @property
    def filename(self):
        """Gets the filename of this ConversationPbxAudio.  # noqa: E501

        Filename  # noqa: E501

        :return: The filename of this ConversationPbxAudio.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this ConversationPbxAudio.

        Filename  # noqa: E501

        :param filename: The filename of this ConversationPbxAudio.  # noqa: E501
        :type: str
        """
        if filename is not None and len(filename) > 100:
            raise ValueError("Invalid value for `filename`, length must be less than or equal to `100`")  # noqa: E501

        self._filename = filename

    @property
    def merchant_id(self):
        """Gets the merchant_id of this ConversationPbxAudio.  # noqa: E501

        Merchant Id  # noqa: E501

        :return: The merchant_id of this ConversationPbxAudio.  # noqa: E501
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this ConversationPbxAudio.

        Merchant Id  # noqa: E501

        :param merchant_id: The merchant_id of this ConversationPbxAudio.  # noqa: E501
        :type: str
        """
        if merchant_id is not None and len(merchant_id) > 5:
            raise ValueError("Invalid value for `merchant_id`, length must be less than or equal to `5`")  # noqa: E501

        self._merchant_id = merchant_id

    @property
    def mime_type(self):
        """Gets the mime_type of this ConversationPbxAudio.  # noqa: E501

        Mime Type  # noqa: E501

        :return: The mime_type of this ConversationPbxAudio.  # noqa: E501
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this ConversationPbxAudio.

        Mime Type  # noqa: E501

        :param mime_type: The mime_type of this ConversationPbxAudio.  # noqa: E501
        :type: str
        """
        if mime_type is not None and len(mime_type) > 100:
            raise ValueError("Invalid value for `mime_type`, length must be less than or equal to `100`")  # noqa: E501

        self._mime_type = mime_type

    @property
    def url(self):
        """Gets the url of this ConversationPbxAudio.  # noqa: E501

        URL  # noqa: E501

        :return: The url of this ConversationPbxAudio.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ConversationPbxAudio.

        URL  # noqa: E501

        :param url: The url of this ConversationPbxAudio.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def user_id(self):
        """Gets the user_id of this ConversationPbxAudio.  # noqa: E501

        User Id  # noqa: E501

        :return: The user_id of this ConversationPbxAudio.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ConversationPbxAudio.

        User Id  # noqa: E501

        :param user_id: The user_id of this ConversationPbxAudio.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def version(self):
        """Gets the version of this ConversationPbxAudio.  # noqa: E501

        Version  # noqa: E501

        :return: The version of this ConversationPbxAudio.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ConversationPbxAudio.

        Version  # noqa: E501

        :param version: The version of this ConversationPbxAudio.  # noqa: E501
        :type: int
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConversationPbxAudio, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConversationPbxAudio):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
