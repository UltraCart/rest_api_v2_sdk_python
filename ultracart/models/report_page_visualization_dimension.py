# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ReportPageVisualizationDimension(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_as': 'str',
        'cast': 'str',
        'column': 'str',
        'datetime_timezone': 'str',
        'datetime_trunc': 'str',
        'extract': 'str',
        'function': 'str'
    }

    attribute_map = {
        '_as': 'as',
        'cast': 'cast',
        'column': 'column',
        'datetime_timezone': 'datetime_timezone',
        'datetime_trunc': 'datetime_trunc',
        'extract': 'extract',
        'function': 'function'
    }

    def __init__(self, _as=None, cast=None, column=None, datetime_timezone=None, datetime_trunc=None, extract=None, function=None):  # noqa: E501
        """ReportPageVisualizationDimension - a model defined in Swagger"""  # noqa: E501

        self.__as = None
        self._cast = None
        self._column = None
        self._datetime_timezone = None
        self._datetime_trunc = None
        self._extract = None
        self._function = None
        self.discriminator = None

        if _as is not None:
            self._as = _as
        if cast is not None:
            self.cast = cast
        if column is not None:
            self.column = column
        if datetime_timezone is not None:
            self.datetime_timezone = datetime_timezone
        if datetime_trunc is not None:
            self.datetime_trunc = datetime_trunc
        if extract is not None:
            self.extract = extract
        if function is not None:
            self.function = function

    @property
    def _as(self):
        """Gets the _as of this ReportPageVisualizationDimension.  # noqa: E501

        Return the column as a different name  # noqa: E501

        :return: The _as of this ReportPageVisualizationDimension.  # noqa: E501
        :rtype: str
        """
        return self.__as

    @_as.setter
    def _as(self, _as):
        """Sets the _as of this ReportPageVisualizationDimension.

        Return the column as a different name  # noqa: E501

        :param _as: The _as of this ReportPageVisualizationDimension.  # noqa: E501
        :type: str
        """

        self.__as = _as

    @property
    def cast(self):
        """Gets the cast of this ReportPageVisualizationDimension.  # noqa: E501

        Cast the column to a different data type such as DATETIME -> DATE  # noqa: E501

        :return: The cast of this ReportPageVisualizationDimension.  # noqa: E501
        :rtype: str
        """
        return self._cast

    @cast.setter
    def cast(self, cast):
        """Sets the cast of this ReportPageVisualizationDimension.

        Cast the column to a different data type such as DATETIME -> DATE  # noqa: E501

        :param cast: The cast of this ReportPageVisualizationDimension.  # noqa: E501
        :type: str
        """

        self._cast = cast

    @property
    def column(self):
        """Gets the column of this ReportPageVisualizationDimension.  # noqa: E501


        :return: The column of this ReportPageVisualizationDimension.  # noqa: E501
        :rtype: str
        """
        return self._column

    @column.setter
    def column(self, column):
        """Sets the column of this ReportPageVisualizationDimension.


        :param column: The column of this ReportPageVisualizationDimension.  # noqa: E501
        :type: str
        """

        self._column = column

    @property
    def datetime_timezone(self):
        """Gets the datetime_timezone of this ReportPageVisualizationDimension.  # noqa: E501

        The timezone to shift the date to  # noqa: E501

        :return: The datetime_timezone of this ReportPageVisualizationDimension.  # noqa: E501
        :rtype: str
        """
        return self._datetime_timezone

    @datetime_timezone.setter
    def datetime_timezone(self, datetime_timezone):
        """Sets the datetime_timezone of this ReportPageVisualizationDimension.

        The timezone to shift the date to  # noqa: E501

        :param datetime_timezone: The datetime_timezone of this ReportPageVisualizationDimension.  # noqa: E501
        :type: str
        """

        self._datetime_timezone = datetime_timezone

    @property
    def datetime_trunc(self):
        """Gets the datetime_trunc of this ReportPageVisualizationDimension.  # noqa: E501

        The type of truncation to perform on the date, DAY, WEEK(MONDAY), etc.  # noqa: E501

        :return: The datetime_trunc of this ReportPageVisualizationDimension.  # noqa: E501
        :rtype: str
        """
        return self._datetime_trunc

    @datetime_trunc.setter
    def datetime_trunc(self, datetime_trunc):
        """Sets the datetime_trunc of this ReportPageVisualizationDimension.

        The type of truncation to perform on the date, DAY, WEEK(MONDAY), etc.  # noqa: E501

        :param datetime_trunc: The datetime_trunc of this ReportPageVisualizationDimension.  # noqa: E501
        :type: str
        """

        self._datetime_trunc = datetime_trunc

    @property
    def extract(self):
        """Gets the extract of this ReportPageVisualizationDimension.  # noqa: E501

        Part of a datetime to extract  # noqa: E501

        :return: The extract of this ReportPageVisualizationDimension.  # noqa: E501
        :rtype: str
        """
        return self._extract

    @extract.setter
    def extract(self, extract):
        """Sets the extract of this ReportPageVisualizationDimension.

        Part of a datetime to extract  # noqa: E501

        :param extract: The extract of this ReportPageVisualizationDimension.  # noqa: E501
        :type: str
        """

        self._extract = extract

    @property
    def function(self):
        """Gets the function of this ReportPageVisualizationDimension.  # noqa: E501

        The function to perform around the column such as DATE_TRUNC(@column, day)  # noqa: E501

        :return: The function of this ReportPageVisualizationDimension.  # noqa: E501
        :rtype: str
        """
        return self._function

    @function.setter
    def function(self, function):
        """Sets the function of this ReportPageVisualizationDimension.

        The function to perform around the column such as DATE_TRUNC(@column, day)  # noqa: E501

        :param function: The function of this ReportPageVisualizationDimension.  # noqa: E501
        :type: str
        """

        self._function = function

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReportPageVisualizationDimension, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportPageVisualizationDimension):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
