# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ScreenRecordingFilterIpSearch(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'does_not_exist': 'bool',
        'exists': 'bool',
        '_is': 'str',
        'is_not': 'str'
    }

    attribute_map = {
        'does_not_exist': 'does_not_exist',
        'exists': 'exists',
        '_is': 'is',
        'is_not': 'is_not'
    }

    def __init__(self, does_not_exist=None, exists=None, _is=None, is_not=None):  # noqa: E501
        """ScreenRecordingFilterIpSearch - a model defined in Swagger"""  # noqa: E501

        self._does_not_exist = None
        self._exists = None
        self.__is = None
        self._is_not = None
        self.discriminator = None

        if does_not_exist is not None:
            self.does_not_exist = does_not_exist
        if exists is not None:
            self.exists = exists
        if _is is not None:
            self._is = _is
        if is_not is not None:
            self.is_not = is_not

    @property
    def does_not_exist(self):
        """Gets the does_not_exist of this ScreenRecordingFilterIpSearch.  # noqa: E501


        :return: The does_not_exist of this ScreenRecordingFilterIpSearch.  # noqa: E501
        :rtype: bool
        """
        return self._does_not_exist

    @does_not_exist.setter
    def does_not_exist(self, does_not_exist):
        """Sets the does_not_exist of this ScreenRecordingFilterIpSearch.


        :param does_not_exist: The does_not_exist of this ScreenRecordingFilterIpSearch.  # noqa: E501
        :type: bool
        """

        self._does_not_exist = does_not_exist

    @property
    def exists(self):
        """Gets the exists of this ScreenRecordingFilterIpSearch.  # noqa: E501


        :return: The exists of this ScreenRecordingFilterIpSearch.  # noqa: E501
        :rtype: bool
        """
        return self._exists

    @exists.setter
    def exists(self, exists):
        """Sets the exists of this ScreenRecordingFilterIpSearch.


        :param exists: The exists of this ScreenRecordingFilterIpSearch.  # noqa: E501
        :type: bool
        """

        self._exists = exists

    @property
    def _is(self):
        """Gets the _is of this ScreenRecordingFilterIpSearch.  # noqa: E501


        :return: The _is of this ScreenRecordingFilterIpSearch.  # noqa: E501
        :rtype: str
        """
        return self.__is

    @_is.setter
    def _is(self, _is):
        """Sets the _is of this ScreenRecordingFilterIpSearch.


        :param _is: The _is of this ScreenRecordingFilterIpSearch.  # noqa: E501
        :type: str
        """

        self.__is = _is

    @property
    def is_not(self):
        """Gets the is_not of this ScreenRecordingFilterIpSearch.  # noqa: E501


        :return: The is_not of this ScreenRecordingFilterIpSearch.  # noqa: E501
        :rtype: str
        """
        return self._is_not

    @is_not.setter
    def is_not(self, is_not):
        """Sets the is_not of this ScreenRecordingFilterIpSearch.


        :param is_not: The is_not of this ScreenRecordingFilterIpSearch.  # noqa: E501
        :type: str
        """

        self._is_not = is_not

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScreenRecordingFilterIpSearch, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScreenRecordingFilterIpSearch):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
