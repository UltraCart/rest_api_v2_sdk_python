# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OrderTrackingNumberDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'city': 'str',
        'event_dts': 'str',
        'event_local_date': 'str',
        'event_local_time': 'str',
        'event_timezone_id': 'str',
        'state': 'str',
        'subtag': 'str',
        'subtag_message': 'str',
        'tag': 'str',
        'tag_description': 'str',
        'tag_icon': 'str',
        'zip': 'str'
    }

    attribute_map = {
        'city': 'city',
        'event_dts': 'event_dts',
        'event_local_date': 'event_local_date',
        'event_local_time': 'event_local_time',
        'event_timezone_id': 'event_timezone_id',
        'state': 'state',
        'subtag': 'subtag',
        'subtag_message': 'subtag_message',
        'tag': 'tag',
        'tag_description': 'tag_description',
        'tag_icon': 'tag_icon',
        'zip': 'zip'
    }

    def __init__(self, city=None, event_dts=None, event_local_date=None, event_local_time=None, event_timezone_id=None, state=None, subtag=None, subtag_message=None, tag=None, tag_description=None, tag_icon=None, zip=None):  # noqa: E501
        """OrderTrackingNumberDetail - a model defined in Swagger"""  # noqa: E501

        self._city = None
        self._event_dts = None
        self._event_local_date = None
        self._event_local_time = None
        self._event_timezone_id = None
        self._state = None
        self._subtag = None
        self._subtag_message = None
        self._tag = None
        self._tag_description = None
        self._tag_icon = None
        self._zip = None
        self.discriminator = None

        if city is not None:
            self.city = city
        if event_dts is not None:
            self.event_dts = event_dts
        if event_local_date is not None:
            self.event_local_date = event_local_date
        if event_local_time is not None:
            self.event_local_time = event_local_time
        if event_timezone_id is not None:
            self.event_timezone_id = event_timezone_id
        if state is not None:
            self.state = state
        if subtag is not None:
            self.subtag = subtag
        if subtag_message is not None:
            self.subtag_message = subtag_message
        if tag is not None:
            self.tag = tag
        if tag_description is not None:
            self.tag_description = tag_description
        if tag_icon is not None:
            self.tag_icon = tag_icon
        if zip is not None:
            self.zip = zip

    @property
    def city(self):
        """Gets the city of this OrderTrackingNumberDetail.  # noqa: E501


        :return: The city of this OrderTrackingNumberDetail.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this OrderTrackingNumberDetail.


        :param city: The city of this OrderTrackingNumberDetail.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def event_dts(self):
        """Gets the event_dts of this OrderTrackingNumberDetail.  # noqa: E501

        ISO 8601 timestamp that the event occurred  # noqa: E501

        :return: The event_dts of this OrderTrackingNumberDetail.  # noqa: E501
        :rtype: str
        """
        return self._event_dts

    @event_dts.setter
    def event_dts(self, event_dts):
        """Sets the event_dts of this OrderTrackingNumberDetail.

        ISO 8601 timestamp that the event occurred  # noqa: E501

        :param event_dts: The event_dts of this OrderTrackingNumberDetail.  # noqa: E501
        :type: str
        """

        self._event_dts = event_dts

    @property
    def event_local_date(self):
        """Gets the event_local_date of this OrderTrackingNumberDetail.  # noqa: E501


        :return: The event_local_date of this OrderTrackingNumberDetail.  # noqa: E501
        :rtype: str
        """
        return self._event_local_date

    @event_local_date.setter
    def event_local_date(self, event_local_date):
        """Sets the event_local_date of this OrderTrackingNumberDetail.


        :param event_local_date: The event_local_date of this OrderTrackingNumberDetail.  # noqa: E501
        :type: str
        """

        self._event_local_date = event_local_date

    @property
    def event_local_time(self):
        """Gets the event_local_time of this OrderTrackingNumberDetail.  # noqa: E501


        :return: The event_local_time of this OrderTrackingNumberDetail.  # noqa: E501
        :rtype: str
        """
        return self._event_local_time

    @event_local_time.setter
    def event_local_time(self, event_local_time):
        """Sets the event_local_time of this OrderTrackingNumberDetail.


        :param event_local_time: The event_local_time of this OrderTrackingNumberDetail.  # noqa: E501
        :type: str
        """

        self._event_local_time = event_local_time

    @property
    def event_timezone_id(self):
        """Gets the event_timezone_id of this OrderTrackingNumberDetail.  # noqa: E501

        Timezone the event occurred in.  Use this in conjunction with event_dts to format a local date/time.  # noqa: E501

        :return: The event_timezone_id of this OrderTrackingNumberDetail.  # noqa: E501
        :rtype: str
        """
        return self._event_timezone_id

    @event_timezone_id.setter
    def event_timezone_id(self, event_timezone_id):
        """Sets the event_timezone_id of this OrderTrackingNumberDetail.

        Timezone the event occurred in.  Use this in conjunction with event_dts to format a local date/time.  # noqa: E501

        :param event_timezone_id: The event_timezone_id of this OrderTrackingNumberDetail.  # noqa: E501
        :type: str
        """

        self._event_timezone_id = event_timezone_id

    @property
    def state(self):
        """Gets the state of this OrderTrackingNumberDetail.  # noqa: E501


        :return: The state of this OrderTrackingNumberDetail.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this OrderTrackingNumberDetail.


        :param state: The state of this OrderTrackingNumberDetail.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def subtag(self):
        """Gets the subtag of this OrderTrackingNumberDetail.  # noqa: E501


        :return: The subtag of this OrderTrackingNumberDetail.  # noqa: E501
        :rtype: str
        """
        return self._subtag

    @subtag.setter
    def subtag(self, subtag):
        """Sets the subtag of this OrderTrackingNumberDetail.


        :param subtag: The subtag of this OrderTrackingNumberDetail.  # noqa: E501
        :type: str
        """

        self._subtag = subtag

    @property
    def subtag_message(self):
        """Gets the subtag_message of this OrderTrackingNumberDetail.  # noqa: E501


        :return: The subtag_message of this OrderTrackingNumberDetail.  # noqa: E501
        :rtype: str
        """
        return self._subtag_message

    @subtag_message.setter
    def subtag_message(self, subtag_message):
        """Sets the subtag_message of this OrderTrackingNumberDetail.


        :param subtag_message: The subtag_message of this OrderTrackingNumberDetail.  # noqa: E501
        :type: str
        """

        self._subtag_message = subtag_message

    @property
    def tag(self):
        """Gets the tag of this OrderTrackingNumberDetail.  # noqa: E501


        :return: The tag of this OrderTrackingNumberDetail.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this OrderTrackingNumberDetail.


        :param tag: The tag of this OrderTrackingNumberDetail.  # noqa: E501
        :type: str
        """

        self._tag = tag

    @property
    def tag_description(self):
        """Gets the tag_description of this OrderTrackingNumberDetail.  # noqa: E501


        :return: The tag_description of this OrderTrackingNumberDetail.  # noqa: E501
        :rtype: str
        """
        return self._tag_description

    @tag_description.setter
    def tag_description(self, tag_description):
        """Sets the tag_description of this OrderTrackingNumberDetail.


        :param tag_description: The tag_description of this OrderTrackingNumberDetail.  # noqa: E501
        :type: str
        """

        self._tag_description = tag_description

    @property
    def tag_icon(self):
        """Gets the tag_icon of this OrderTrackingNumberDetail.  # noqa: E501


        :return: The tag_icon of this OrderTrackingNumberDetail.  # noqa: E501
        :rtype: str
        """
        return self._tag_icon

    @tag_icon.setter
    def tag_icon(self, tag_icon):
        """Sets the tag_icon of this OrderTrackingNumberDetail.


        :param tag_icon: The tag_icon of this OrderTrackingNumberDetail.  # noqa: E501
        :type: str
        """

        self._tag_icon = tag_icon

    @property
    def zip(self):
        """Gets the zip of this OrderTrackingNumberDetail.  # noqa: E501


        :return: The zip of this OrderTrackingNumberDetail.  # noqa: E501
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """Sets the zip of this OrderTrackingNumberDetail.


        :param zip: The zip of this OrderTrackingNumberDetail.  # noqa: E501
        :type: str
        """

        self._zip = zip

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderTrackingNumberDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderTrackingNumberDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
