# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TransactionGatewaysRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'default_credit_card_transaction_type': 'str',
        'gateways': 'list[TransactionGateway]',
        'theme_credit_card_transaction_types': 'list[PaymentsThemeTransactionType]'
    }

    attribute_map = {
        'default_credit_card_transaction_type': 'default_credit_card_transaction_type',
        'gateways': 'gateways',
        'theme_credit_card_transaction_types': 'theme_credit_card_transaction_types'
    }

    def __init__(self, default_credit_card_transaction_type=None, gateways=None, theme_credit_card_transaction_types=None):  # noqa: E501
        """TransactionGatewaysRequest - a model defined in Swagger"""  # noqa: E501

        self._default_credit_card_transaction_type = None
        self._gateways = None
        self._theme_credit_card_transaction_types = None
        self.discriminator = None

        if default_credit_card_transaction_type is not None:
            self.default_credit_card_transaction_type = default_credit_card_transaction_type
        if gateways is not None:
            self.gateways = gateways
        if theme_credit_card_transaction_types is not None:
            self.theme_credit_card_transaction_types = theme_credit_card_transaction_types

    @property
    def default_credit_card_transaction_type(self):
        """Gets the default_credit_card_transaction_type of this TransactionGatewaysRequest.  # noqa: E501

        The default transaction type for this merchant account  # noqa: E501

        :return: The default_credit_card_transaction_type of this TransactionGatewaysRequest.  # noqa: E501
        :rtype: str
        """
        return self._default_credit_card_transaction_type

    @default_credit_card_transaction_type.setter
    def default_credit_card_transaction_type(self, default_credit_card_transaction_type):
        """Sets the default_credit_card_transaction_type of this TransactionGatewaysRequest.

        The default transaction type for this merchant account  # noqa: E501

        :param default_credit_card_transaction_type: The default_credit_card_transaction_type of this TransactionGatewaysRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["auth and capture", "auth then capture", "auth only"]  # noqa: E501
        if default_credit_card_transaction_type not in allowed_values:
            raise ValueError(
                "Invalid value for `default_credit_card_transaction_type` ({0}), must be one of {1}"  # noqa: E501
                .format(default_credit_card_transaction_type, allowed_values)
            )

        self._default_credit_card_transaction_type = default_credit_card_transaction_type

    @property
    def gateways(self):
        """Gets the gateways of this TransactionGatewaysRequest.  # noqa: E501


        :return: The gateways of this TransactionGatewaysRequest.  # noqa: E501
        :rtype: list[TransactionGateway]
        """
        return self._gateways

    @gateways.setter
    def gateways(self, gateways):
        """Sets the gateways of this TransactionGatewaysRequest.


        :param gateways: The gateways of this TransactionGatewaysRequest.  # noqa: E501
        :type: list[TransactionGateway]
        """

        self._gateways = gateways

    @property
    def theme_credit_card_transaction_types(self):
        """Gets the theme_credit_card_transaction_types of this TransactionGatewaysRequest.  # noqa: E501

        A list of the storefronts and themes for this merchant account and what type of transaction should be attempted  # noqa: E501

        :return: The theme_credit_card_transaction_types of this TransactionGatewaysRequest.  # noqa: E501
        :rtype: list[PaymentsThemeTransactionType]
        """
        return self._theme_credit_card_transaction_types

    @theme_credit_card_transaction_types.setter
    def theme_credit_card_transaction_types(self, theme_credit_card_transaction_types):
        """Sets the theme_credit_card_transaction_types of this TransactionGatewaysRequest.

        A list of the storefronts and themes for this merchant account and what type of transaction should be attempted  # noqa: E501

        :param theme_credit_card_transaction_types: The theme_credit_card_transaction_types of this TransactionGatewaysRequest.  # noqa: E501
        :type: list[PaymentsThemeTransactionType]
        """

        self._theme_credit_card_transaction_types = theme_credit_card_transaction_types

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TransactionGatewaysRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransactionGatewaysRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
