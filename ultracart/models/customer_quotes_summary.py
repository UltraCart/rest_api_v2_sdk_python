# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CustomerQuotesSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'first_quote_dts': 'str',
        'last_quote_dts': 'str',
        'quote_count': 'int',
        'total': 'float'
    }

    attribute_map = {
        'first_quote_dts': 'first_quote_dts',
        'last_quote_dts': 'last_quote_dts',
        'quote_count': 'quote_count',
        'total': 'total'
    }

    def __init__(self, first_quote_dts=None, last_quote_dts=None, quote_count=None, total=None):  # noqa: E501
        """CustomerQuotesSummary - a model defined in Swagger"""  # noqa: E501

        self._first_quote_dts = None
        self._last_quote_dts = None
        self._quote_count = None
        self._total = None
        self.discriminator = None

        if first_quote_dts is not None:
            self.first_quote_dts = first_quote_dts
        if last_quote_dts is not None:
            self.last_quote_dts = last_quote_dts
        if quote_count is not None:
            self.quote_count = quote_count
        if total is not None:
            self.total = total

    @property
    def first_quote_dts(self):
        """Gets the first_quote_dts of this CustomerQuotesSummary.  # noqa: E501

        First quote date  # noqa: E501

        :return: The first_quote_dts of this CustomerQuotesSummary.  # noqa: E501
        :rtype: str
        """
        return self._first_quote_dts

    @first_quote_dts.setter
    def first_quote_dts(self, first_quote_dts):
        """Sets the first_quote_dts of this CustomerQuotesSummary.

        First quote date  # noqa: E501

        :param first_quote_dts: The first_quote_dts of this CustomerQuotesSummary.  # noqa: E501
        :type: str
        """

        self._first_quote_dts = first_quote_dts

    @property
    def last_quote_dts(self):
        """Gets the last_quote_dts of this CustomerQuotesSummary.  # noqa: E501

        Last quote date  # noqa: E501

        :return: The last_quote_dts of this CustomerQuotesSummary.  # noqa: E501
        :rtype: str
        """
        return self._last_quote_dts

    @last_quote_dts.setter
    def last_quote_dts(self, last_quote_dts):
        """Sets the last_quote_dts of this CustomerQuotesSummary.

        Last quote date  # noqa: E501

        :param last_quote_dts: The last_quote_dts of this CustomerQuotesSummary.  # noqa: E501
        :type: str
        """

        self._last_quote_dts = last_quote_dts

    @property
    def quote_count(self):
        """Gets the quote_count of this CustomerQuotesSummary.  # noqa: E501

        Total number of quote  # noqa: E501

        :return: The quote_count of this CustomerQuotesSummary.  # noqa: E501
        :rtype: int
        """
        return self._quote_count

    @quote_count.setter
    def quote_count(self, quote_count):
        """Sets the quote_count of this CustomerQuotesSummary.

        Total number of quote  # noqa: E501

        :param quote_count: The quote_count of this CustomerQuotesSummary.  # noqa: E501
        :type: int
        """

        self._quote_count = quote_count

    @property
    def total(self):
        """Gets the total of this CustomerQuotesSummary.  # noqa: E501

        Total amount associated with the quotes  # noqa: E501

        :return: The total of this CustomerQuotesSummary.  # noqa: E501
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this CustomerQuotesSummary.

        Total amount associated with the quotes  # noqa: E501

        :param total: The total of this CustomerQuotesSummary.  # noqa: E501
        :type: float
        """

        self._total = total

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomerQuotesSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomerQuotesSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
