# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConversationAgentProfile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'chat_limit': 'int',
        'default_language_iso_code': 'str',
        'default_status': 'str',
        'display_name': 'str',
        'name': 'str',
        'profile_image_upload_key': 'str',
        'profile_image_url': 'str'
    }

    attribute_map = {
        'chat_limit': 'chat_limit',
        'default_language_iso_code': 'default_language_iso_code',
        'default_status': 'default_status',
        'display_name': 'display_name',
        'name': 'name',
        'profile_image_upload_key': 'profile_image_upload_key',
        'profile_image_url': 'profile_image_url'
    }

    def __init__(self, chat_limit=None, default_language_iso_code=None, default_status=None, display_name=None, name=None, profile_image_upload_key=None, profile_image_url=None):  # noqa: E501
        """ConversationAgentProfile - a model defined in Swagger"""  # noqa: E501

        self._chat_limit = None
        self._default_language_iso_code = None
        self._default_status = None
        self._display_name = None
        self._name = None
        self._profile_image_upload_key = None
        self._profile_image_url = None
        self.discriminator = None

        if chat_limit is not None:
            self.chat_limit = chat_limit
        if default_language_iso_code is not None:
            self.default_language_iso_code = default_language_iso_code
        if default_status is not None:
            self.default_status = default_status
        if display_name is not None:
            self.display_name = display_name
        if name is not None:
            self.name = name
        if profile_image_upload_key is not None:
            self.profile_image_upload_key = profile_image_upload_key
        if profile_image_url is not None:
            self.profile_image_url = profile_image_url

    @property
    def chat_limit(self):
        """Gets the chat_limit of this ConversationAgentProfile.  # noqa: E501

        The number of engagement chats that can be pushed on them at any given time.  # noqa: E501

        :return: The chat_limit of this ConversationAgentProfile.  # noqa: E501
        :rtype: int
        """
        return self._chat_limit

    @chat_limit.setter
    def chat_limit(self, chat_limit):
        """Sets the chat_limit of this ConversationAgentProfile.

        The number of engagement chats that can be pushed on them at any given time.  # noqa: E501

        :param chat_limit: The chat_limit of this ConversationAgentProfile.  # noqa: E501
        :type: int
        """

        self._chat_limit = chat_limit

    @property
    def default_language_iso_code(self):
        """Gets the default_language_iso_code of this ConversationAgentProfile.  # noqa: E501

        The default language the agent is chatting in  # noqa: E501

        :return: The default_language_iso_code of this ConversationAgentProfile.  # noqa: E501
        :rtype: str
        """
        return self._default_language_iso_code

    @default_language_iso_code.setter
    def default_language_iso_code(self, default_language_iso_code):
        """Sets the default_language_iso_code of this ConversationAgentProfile.

        The default language the agent is chatting in  # noqa: E501

        :param default_language_iso_code: The default_language_iso_code of this ConversationAgentProfile.  # noqa: E501
        :type: str
        """

        self._default_language_iso_code = default_language_iso_code

    @property
    def default_status(self):
        """Gets the default_status of this ConversationAgentProfile.  # noqa: E501

        Default status when the agent loads conversations app.  # noqa: E501

        :return: The default_status of this ConversationAgentProfile.  # noqa: E501
        :rtype: str
        """
        return self._default_status

    @default_status.setter
    def default_status(self, default_status):
        """Sets the default_status of this ConversationAgentProfile.

        Default status when the agent loads conversations app.  # noqa: E501

        :param default_status: The default_status of this ConversationAgentProfile.  # noqa: E501
        :type: str
        """
        allowed_values = ["available", "busy", "unavailable"]  # noqa: E501
        if default_status not in allowed_values:
            raise ValueError(
                "Invalid value for `default_status` ({0}), must be one of {1}"  # noqa: E501
                .format(default_status, allowed_values)
            )

        self._default_status = default_status

    @property
    def display_name(self):
        """Gets the display_name of this ConversationAgentProfile.  # noqa: E501

        An alternate name that the agent wants to use in chat.  # noqa: E501

        :return: The display_name of this ConversationAgentProfile.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ConversationAgentProfile.

        An alternate name that the agent wants to use in chat.  # noqa: E501

        :param display_name: The display_name of this ConversationAgentProfile.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def name(self):
        """Gets the name of this ConversationAgentProfile.  # noqa: E501

        Their actual user name for profile settings display as placeholder test  # noqa: E501

        :return: The name of this ConversationAgentProfile.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConversationAgentProfile.

        Their actual user name for profile settings display as placeholder test  # noqa: E501

        :param name: The name of this ConversationAgentProfile.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def profile_image_upload_key(self):
        """Gets the profile_image_upload_key of this ConversationAgentProfile.  # noqa: E501

        An upload key used to update the profile image.  # noqa: E501

        :return: The profile_image_upload_key of this ConversationAgentProfile.  # noqa: E501
        :rtype: str
        """
        return self._profile_image_upload_key

    @profile_image_upload_key.setter
    def profile_image_upload_key(self, profile_image_upload_key):
        """Sets the profile_image_upload_key of this ConversationAgentProfile.

        An upload key used to update the profile image.  # noqa: E501

        :param profile_image_upload_key: The profile_image_upload_key of this ConversationAgentProfile.  # noqa: E501
        :type: str
        """

        self._profile_image_upload_key = profile_image_upload_key

    @property
    def profile_image_url(self):
        """Gets the profile_image_url of this ConversationAgentProfile.  # noqa: E501

        Their current profile image URL  # noqa: E501

        :return: The profile_image_url of this ConversationAgentProfile.  # noqa: E501
        :rtype: str
        """
        return self._profile_image_url

    @profile_image_url.setter
    def profile_image_url(self, profile_image_url):
        """Sets the profile_image_url of this ConversationAgentProfile.

        Their current profile image URL  # noqa: E501

        :param profile_image_url: The profile_image_url of this ConversationAgentProfile.  # noqa: E501
        :type: str
        """

        self._profile_image_url = profile_image_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConversationAgentProfile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConversationAgentProfile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
