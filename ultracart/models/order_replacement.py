# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class OrderReplacement(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'additional_merchant_notes_new_order': 'str',
        'additional_merchant_notes_original_order': 'str',
        'custom_field1': 'str',
        'custom_field2': 'str',
        'custom_field3': 'str',
        'custom_field4': 'str',
        'custom_field5': 'str',
        'custom_field6': 'str',
        'custom_field7': 'str',
        'free': 'bool',
        'immediate_charge': 'bool',
        'items': 'list[OrderReplacementItem]',
        'original_order_id': 'str',
        'shipping_method': 'str',
        'skip_payment': 'bool'
    }

    attribute_map = {
        'additional_merchant_notes_new_order': 'additional_merchant_notes_new_order',
        'additional_merchant_notes_original_order': 'additional_merchant_notes_original_order',
        'custom_field1': 'custom_field1',
        'custom_field2': 'custom_field2',
        'custom_field3': 'custom_field3',
        'custom_field4': 'custom_field4',
        'custom_field5': 'custom_field5',
        'custom_field6': 'custom_field6',
        'custom_field7': 'custom_field7',
        'free': 'free',
        'immediate_charge': 'immediate_charge',
        'items': 'items',
        'original_order_id': 'original_order_id',
        'shipping_method': 'shipping_method',
        'skip_payment': 'skip_payment'
    }

    def __init__(self, additional_merchant_notes_new_order=None, additional_merchant_notes_original_order=None, custom_field1=None, custom_field2=None, custom_field3=None, custom_field4=None, custom_field5=None, custom_field6=None, custom_field7=None, free=None, immediate_charge=None, items=None, original_order_id=None, shipping_method=None, skip_payment=None):
        """
        OrderReplacement - a model defined in Swagger
        """

        self._additional_merchant_notes_new_order = None
        self._additional_merchant_notes_original_order = None
        self._custom_field1 = None
        self._custom_field2 = None
        self._custom_field3 = None
        self._custom_field4 = None
        self._custom_field5 = None
        self._custom_field6 = None
        self._custom_field7 = None
        self._free = None
        self._immediate_charge = None
        self._items = None
        self._original_order_id = None
        self._shipping_method = None
        self._skip_payment = None
        self.discriminator = None

        if additional_merchant_notes_new_order is not None:
          self.additional_merchant_notes_new_order = additional_merchant_notes_new_order
        if additional_merchant_notes_original_order is not None:
          self.additional_merchant_notes_original_order = additional_merchant_notes_original_order
        if custom_field1 is not None:
          self.custom_field1 = custom_field1
        if custom_field2 is not None:
          self.custom_field2 = custom_field2
        if custom_field3 is not None:
          self.custom_field3 = custom_field3
        if custom_field4 is not None:
          self.custom_field4 = custom_field4
        if custom_field5 is not None:
          self.custom_field5 = custom_field5
        if custom_field6 is not None:
          self.custom_field6 = custom_field6
        if custom_field7 is not None:
          self.custom_field7 = custom_field7
        if free is not None:
          self.free = free
        if immediate_charge is not None:
          self.immediate_charge = immediate_charge
        if items is not None:
          self.items = items
        if original_order_id is not None:
          self.original_order_id = original_order_id
        if shipping_method is not None:
          self.shipping_method = shipping_method
        if skip_payment is not None:
          self.skip_payment = skip_payment

    @property
    def additional_merchant_notes_new_order(self):
        """
        Gets the additional_merchant_notes_new_order of this OrderReplacement.
        Additional merchant notes to append to the new order

        :return: The additional_merchant_notes_new_order of this OrderReplacement.
        :rtype: str
        """
        return self._additional_merchant_notes_new_order

    @additional_merchant_notes_new_order.setter
    def additional_merchant_notes_new_order(self, additional_merchant_notes_new_order):
        """
        Sets the additional_merchant_notes_new_order of this OrderReplacement.
        Additional merchant notes to append to the new order

        :param additional_merchant_notes_new_order: The additional_merchant_notes_new_order of this OrderReplacement.
        :type: str
        """

        self._additional_merchant_notes_new_order = additional_merchant_notes_new_order

    @property
    def additional_merchant_notes_original_order(self):
        """
        Gets the additional_merchant_notes_original_order of this OrderReplacement.
        Additional merchant notes to append to the original order

        :return: The additional_merchant_notes_original_order of this OrderReplacement.
        :rtype: str
        """
        return self._additional_merchant_notes_original_order

    @additional_merchant_notes_original_order.setter
    def additional_merchant_notes_original_order(self, additional_merchant_notes_original_order):
        """
        Sets the additional_merchant_notes_original_order of this OrderReplacement.
        Additional merchant notes to append to the original order

        :param additional_merchant_notes_original_order: The additional_merchant_notes_original_order of this OrderReplacement.
        :type: str
        """

        self._additional_merchant_notes_original_order = additional_merchant_notes_original_order

    @property
    def custom_field1(self):
        """
        Gets the custom_field1 of this OrderReplacement.
        Custom field 1

        :return: The custom_field1 of this OrderReplacement.
        :rtype: str
        """
        return self._custom_field1

    @custom_field1.setter
    def custom_field1(self, custom_field1):
        """
        Sets the custom_field1 of this OrderReplacement.
        Custom field 1

        :param custom_field1: The custom_field1 of this OrderReplacement.
        :type: str
        """
        if custom_field1 is not None and len(custom_field1) > 50:
            raise ValueError("Invalid value for `custom_field1`, length must be less than or equal to `50`")

        self._custom_field1 = custom_field1

    @property
    def custom_field2(self):
        """
        Gets the custom_field2 of this OrderReplacement.
        Custom field 2

        :return: The custom_field2 of this OrderReplacement.
        :rtype: str
        """
        return self._custom_field2

    @custom_field2.setter
    def custom_field2(self, custom_field2):
        """
        Sets the custom_field2 of this OrderReplacement.
        Custom field 2

        :param custom_field2: The custom_field2 of this OrderReplacement.
        :type: str
        """
        if custom_field2 is not None and len(custom_field2) > 50:
            raise ValueError("Invalid value for `custom_field2`, length must be less than or equal to `50`")

        self._custom_field2 = custom_field2

    @property
    def custom_field3(self):
        """
        Gets the custom_field3 of this OrderReplacement.
        Custom field 3

        :return: The custom_field3 of this OrderReplacement.
        :rtype: str
        """
        return self._custom_field3

    @custom_field3.setter
    def custom_field3(self, custom_field3):
        """
        Sets the custom_field3 of this OrderReplacement.
        Custom field 3

        :param custom_field3: The custom_field3 of this OrderReplacement.
        :type: str
        """
        if custom_field3 is not None and len(custom_field3) > 50:
            raise ValueError("Invalid value for `custom_field3`, length must be less than or equal to `50`")

        self._custom_field3 = custom_field3

    @property
    def custom_field4(self):
        """
        Gets the custom_field4 of this OrderReplacement.
        Custom field 4

        :return: The custom_field4 of this OrderReplacement.
        :rtype: str
        """
        return self._custom_field4

    @custom_field4.setter
    def custom_field4(self, custom_field4):
        """
        Sets the custom_field4 of this OrderReplacement.
        Custom field 4

        :param custom_field4: The custom_field4 of this OrderReplacement.
        :type: str
        """
        if custom_field4 is not None and len(custom_field4) > 50:
            raise ValueError("Invalid value for `custom_field4`, length must be less than or equal to `50`")

        self._custom_field4 = custom_field4

    @property
    def custom_field5(self):
        """
        Gets the custom_field5 of this OrderReplacement.
        Custom field 5

        :return: The custom_field5 of this OrderReplacement.
        :rtype: str
        """
        return self._custom_field5

    @custom_field5.setter
    def custom_field5(self, custom_field5):
        """
        Sets the custom_field5 of this OrderReplacement.
        Custom field 5

        :param custom_field5: The custom_field5 of this OrderReplacement.
        :type: str
        """
        if custom_field5 is not None and len(custom_field5) > 75:
            raise ValueError("Invalid value for `custom_field5`, length must be less than or equal to `75`")

        self._custom_field5 = custom_field5

    @property
    def custom_field6(self):
        """
        Gets the custom_field6 of this OrderReplacement.
        Custom field 6

        :return: The custom_field6 of this OrderReplacement.
        :rtype: str
        """
        return self._custom_field6

    @custom_field6.setter
    def custom_field6(self, custom_field6):
        """
        Sets the custom_field6 of this OrderReplacement.
        Custom field 6

        :param custom_field6: The custom_field6 of this OrderReplacement.
        :type: str
        """
        if custom_field6 is not None and len(custom_field6) > 50:
            raise ValueError("Invalid value for `custom_field6`, length must be less than or equal to `50`")

        self._custom_field6 = custom_field6

    @property
    def custom_field7(self):
        """
        Gets the custom_field7 of this OrderReplacement.
        Custom field 7

        :return: The custom_field7 of this OrderReplacement.
        :rtype: str
        """
        return self._custom_field7

    @custom_field7.setter
    def custom_field7(self, custom_field7):
        """
        Sets the custom_field7 of this OrderReplacement.
        Custom field 7

        :param custom_field7: The custom_field7 of this OrderReplacement.
        :type: str
        """
        if custom_field7 is not None and len(custom_field7) > 50:
            raise ValueError("Invalid value for `custom_field7`, length must be less than or equal to `50`")

        self._custom_field7 = custom_field7

    @property
    def free(self):
        """
        Gets the free of this OrderReplacement.
        Set to true if this replacement shipment should be free for the customer.

        :return: The free of this OrderReplacement.
        :rtype: bool
        """
        return self._free

    @free.setter
    def free(self, free):
        """
        Sets the free of this OrderReplacement.
        Set to true if this replacement shipment should be free for the customer.

        :param free: The free of this OrderReplacement.
        :type: bool
        """

        self._free = free

    @property
    def immediate_charge(self):
        """
        Gets the immediate_charge of this OrderReplacement.
        Set to true if you want to immediately charge the payment on this order, otherwise it will go to Accounts Receivable.

        :return: The immediate_charge of this OrderReplacement.
        :rtype: bool
        """
        return self._immediate_charge

    @immediate_charge.setter
    def immediate_charge(self, immediate_charge):
        """
        Sets the immediate_charge of this OrderReplacement.
        Set to true if you want to immediately charge the payment on this order, otherwise it will go to Accounts Receivable.

        :param immediate_charge: The immediate_charge of this OrderReplacement.
        :type: bool
        """

        self._immediate_charge = immediate_charge

    @property
    def items(self):
        """
        Gets the items of this OrderReplacement.
        Items to include in the replacement order

        :return: The items of this OrderReplacement.
        :rtype: list[OrderReplacementItem]
        """
        return self._items

    @items.setter
    def items(self, items):
        """
        Sets the items of this OrderReplacement.
        Items to include in the replacement order

        :param items: The items of this OrderReplacement.
        :type: list[OrderReplacementItem]
        """

        self._items = items

    @property
    def original_order_id(self):
        """
        Gets the original_order_id of this OrderReplacement.
        Original order id

        :return: The original_order_id of this OrderReplacement.
        :rtype: str
        """
        return self._original_order_id

    @original_order_id.setter
    def original_order_id(self, original_order_id):
        """
        Sets the original_order_id of this OrderReplacement.
        Original order id

        :param original_order_id: The original_order_id of this OrderReplacement.
        :type: str
        """

        self._original_order_id = original_order_id

    @property
    def shipping_method(self):
        """
        Gets the shipping_method of this OrderReplacement.
        Shipping method to use.  If not specified or invalid then least cost shipping will take place.

        :return: The shipping_method of this OrderReplacement.
        :rtype: str
        """
        return self._shipping_method

    @shipping_method.setter
    def shipping_method(self, shipping_method):
        """
        Sets the shipping_method of this OrderReplacement.
        Shipping method to use.  If not specified or invalid then least cost shipping will take place.

        :param shipping_method: The shipping_method of this OrderReplacement.
        :type: str
        """

        self._shipping_method = shipping_method

    @property
    def skip_payment(self):
        """
        Gets the skip_payment of this OrderReplacement.
        Set to true if you want to skip the payment as if it was successful.

        :return: The skip_payment of this OrderReplacement.
        :rtype: bool
        """
        return self._skip_payment

    @skip_payment.setter
    def skip_payment(self, skip_payment):
        """
        Sets the skip_payment of this OrderReplacement.
        Set to true if you want to skip the payment as if it was successful.

        :param skip_payment: The skip_payment of this OrderReplacement.
        :type: bool
        """

        self._skip_payment = skip_payment

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, OrderReplacement):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
