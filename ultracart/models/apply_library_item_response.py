# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ApplyLibraryItemResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cjson': 'str',
        'content_type': 'str',
        'email_template_vm_path': 'str',
        'error': 'Error',
        'metadata': 'ResponseMetadata',
        'storefront_oid': 'int',
        'success': 'bool',
        'title': 'str',
        'uuid': 'str',
        'warning': 'Warning'
    }

    attribute_map = {
        'cjson': 'cjson',
        'content_type': 'content_type',
        'email_template_vm_path': 'email_template_vm_path',
        'error': 'error',
        'metadata': 'metadata',
        'storefront_oid': 'storefront_oid',
        'success': 'success',
        'title': 'title',
        'uuid': 'uuid',
        'warning': 'warning'
    }

    def __init__(self, cjson=None, content_type=None, email_template_vm_path=None, error=None, metadata=None, storefront_oid=None, success=None, title=None, uuid=None, warning=None):  # noqa: E501
        """ApplyLibraryItemResponse - a model defined in Swagger"""  # noqa: E501

        self._cjson = None
        self._content_type = None
        self._email_template_vm_path = None
        self._error = None
        self._metadata = None
        self._storefront_oid = None
        self._success = None
        self._title = None
        self._uuid = None
        self._warning = None
        self.discriminator = None

        if cjson is not None:
            self.cjson = cjson
        if content_type is not None:
            self.content_type = content_type
        if email_template_vm_path is not None:
            self.email_template_vm_path = email_template_vm_path
        if error is not None:
            self.error = error
        if metadata is not None:
            self.metadata = metadata
        if storefront_oid is not None:
            self.storefront_oid = storefront_oid
        if success is not None:
            self.success = success
        if title is not None:
            self.title = title
        if uuid is not None:
            self.uuid = uuid
        if warning is not None:
            self.warning = warning

    @property
    def cjson(self):
        """Gets the cjson of this ApplyLibraryItemResponse.  # noqa: E501

        Cjson from library item, only populated if this library item was a cjson snippet or marketing email (not transactional)  # noqa: E501

        :return: The cjson of this ApplyLibraryItemResponse.  # noqa: E501
        :rtype: str
        """
        return self._cjson

    @cjson.setter
    def cjson(self, cjson):
        """Sets the cjson of this ApplyLibraryItemResponse.

        Cjson from library item, only populated if this library item was a cjson snippet or marketing email (not transactional)  # noqa: E501

        :param cjson: The cjson of this ApplyLibraryItemResponse.  # noqa: E501
        :type: str
        """

        self._cjson = cjson

    @property
    def content_type(self):
        """Gets the content_type of this ApplyLibraryItemResponse.  # noqa: E501

        flow, campaign, cjson, upsell, transactional_email or email  # noqa: E501

        :return: The content_type of this ApplyLibraryItemResponse.  # noqa: E501
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this ApplyLibraryItemResponse.

        flow, campaign, cjson, upsell, transactional_email or email  # noqa: E501

        :param content_type: The content_type of this ApplyLibraryItemResponse.  # noqa: E501
        :type: str
        """

        self._content_type = content_type

    @property
    def email_template_vm_path(self):
        """Gets the email_template_vm_path of this ApplyLibraryItemResponse.  # noqa: E501

        If a marketing email was applied, this is the path to the template encapsulating the cjson.  This is needed for the UltraCart UI.  # noqa: E501

        :return: The email_template_vm_path of this ApplyLibraryItemResponse.  # noqa: E501
        :rtype: str
        """
        return self._email_template_vm_path

    @email_template_vm_path.setter
    def email_template_vm_path(self, email_template_vm_path):
        """Sets the email_template_vm_path of this ApplyLibraryItemResponse.

        If a marketing email was applied, this is the path to the template encapsulating the cjson.  This is needed for the UltraCart UI.  # noqa: E501

        :param email_template_vm_path: The email_template_vm_path of this ApplyLibraryItemResponse.  # noqa: E501
        :type: str
        """

        self._email_template_vm_path = email_template_vm_path

    @property
    def error(self):
        """Gets the error of this ApplyLibraryItemResponse.  # noqa: E501


        :return: The error of this ApplyLibraryItemResponse.  # noqa: E501
        :rtype: Error
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this ApplyLibraryItemResponse.


        :param error: The error of this ApplyLibraryItemResponse.  # noqa: E501
        :type: Error
        """

        self._error = error

    @property
    def metadata(self):
        """Gets the metadata of this ApplyLibraryItemResponse.  # noqa: E501


        :return: The metadata of this ApplyLibraryItemResponse.  # noqa: E501
        :rtype: ResponseMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this ApplyLibraryItemResponse.


        :param metadata: The metadata of this ApplyLibraryItemResponse.  # noqa: E501
        :type: ResponseMetadata
        """

        self._metadata = metadata

    @property
    def storefront_oid(self):
        """Gets the storefront_oid of this ApplyLibraryItemResponse.  # noqa: E501

        StoreFront oid where content originates necessary for tracking down relative assets  # noqa: E501

        :return: The storefront_oid of this ApplyLibraryItemResponse.  # noqa: E501
        :rtype: int
        """
        return self._storefront_oid

    @storefront_oid.setter
    def storefront_oid(self, storefront_oid):
        """Sets the storefront_oid of this ApplyLibraryItemResponse.

        StoreFront oid where content originates necessary for tracking down relative assets  # noqa: E501

        :param storefront_oid: The storefront_oid of this ApplyLibraryItemResponse.  # noqa: E501
        :type: int
        """

        self._storefront_oid = storefront_oid

    @property
    def success(self):
        """Gets the success of this ApplyLibraryItemResponse.  # noqa: E501

        Indicates if API call was successful  # noqa: E501

        :return: The success of this ApplyLibraryItemResponse.  # noqa: E501
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this ApplyLibraryItemResponse.

        Indicates if API call was successful  # noqa: E501

        :param success: The success of this ApplyLibraryItemResponse.  # noqa: E501
        :type: bool
        """

        self._success = success

    @property
    def title(self):
        """Gets the title of this ApplyLibraryItemResponse.  # noqa: E501

        title of library item, usually the name of the flow or campaign, or description of cjson  # noqa: E501

        :return: The title of this ApplyLibraryItemResponse.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ApplyLibraryItemResponse.

        title of library item, usually the name of the flow or campaign, or description of cjson  # noqa: E501

        :param title: The title of this ApplyLibraryItemResponse.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def uuid(self):
        """Gets the uuid of this ApplyLibraryItemResponse.  # noqa: E501

        UUID of marketing email or communication flow/campaign if this library item was an email, campaign or flow  # noqa: E501

        :return: The uuid of this ApplyLibraryItemResponse.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this ApplyLibraryItemResponse.

        UUID of marketing email or communication flow/campaign if this library item was an email, campaign or flow  # noqa: E501

        :param uuid: The uuid of this ApplyLibraryItemResponse.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def warning(self):
        """Gets the warning of this ApplyLibraryItemResponse.  # noqa: E501


        :return: The warning of this ApplyLibraryItemResponse.  # noqa: E501
        :rtype: Warning
        """
        return self._warning

    @warning.setter
    def warning(self, warning):
        """Sets the warning of this ApplyLibraryItemResponse.


        :param warning: The warning of this ApplyLibraryItemResponse.  # noqa: E501
        :type: Warning
        """

        self._warning = warning

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApplyLibraryItemResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplyLibraryItemResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
