# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CustomerEmail(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'customer_profile_email_oid': 'int',
        'email': 'str',
        'label': 'str',
        'receipt_notification': 'bool',
        'refund_notification': 'bool',
        'shipment_notification': 'bool'
    }

    attribute_map = {
        'customer_profile_email_oid': 'customer_profile_email_oid',
        'email': 'email',
        'label': 'label',
        'receipt_notification': 'receipt_notification',
        'refund_notification': 'refund_notification',
        'shipment_notification': 'shipment_notification'
    }

    def __init__(self, customer_profile_email_oid=None, email=None, label=None, receipt_notification=None, refund_notification=None, shipment_notification=None):
        """
        CustomerEmail - a model defined in Swagger
        """

        self._customer_profile_email_oid = None
        self._email = None
        self._label = None
        self._receipt_notification = None
        self._refund_notification = None
        self._shipment_notification = None
        self.discriminator = None

        if customer_profile_email_oid is not None:
          self.customer_profile_email_oid = customer_profile_email_oid
        if email is not None:
          self.email = email
        if label is not None:
          self.label = label
        if receipt_notification is not None:
          self.receipt_notification = receipt_notification
        if refund_notification is not None:
          self.refund_notification = refund_notification
        if shipment_notification is not None:
          self.shipment_notification = shipment_notification

    @property
    def customer_profile_email_oid(self):
        """
        Gets the customer_profile_email_oid of this CustomerEmail.
        ID of the email

        :return: The customer_profile_email_oid of this CustomerEmail.
        :rtype: int
        """
        return self._customer_profile_email_oid

    @customer_profile_email_oid.setter
    def customer_profile_email_oid(self, customer_profile_email_oid):
        """
        Sets the customer_profile_email_oid of this CustomerEmail.
        ID of the email

        :param customer_profile_email_oid: The customer_profile_email_oid of this CustomerEmail.
        :type: int
        """

        self._customer_profile_email_oid = customer_profile_email_oid

    @property
    def email(self):
        """
        Gets the email of this CustomerEmail.
        Email

        :return: The email of this CustomerEmail.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this CustomerEmail.
        Email

        :param email: The email of this CustomerEmail.
        :type: str
        """
        if email is not None and len(email) > 100:
            raise ValueError("Invalid value for `email`, length must be less than or equal to `100`")

        self._email = email

    @property
    def label(self):
        """
        Gets the label of this CustomerEmail.
        Label

        :return: The label of this CustomerEmail.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """
        Sets the label of this CustomerEmail.
        Label

        :param label: The label of this CustomerEmail.
        :type: str
        """
        if label is not None and len(label) > 100:
            raise ValueError("Invalid value for `label`, length must be less than or equal to `100`")

        self._label = label

    @property
    def receipt_notification(self):
        """
        Gets the receipt_notification of this CustomerEmail.
        CC this email on receipt notifications

        :return: The receipt_notification of this CustomerEmail.
        :rtype: bool
        """
        return self._receipt_notification

    @receipt_notification.setter
    def receipt_notification(self, receipt_notification):
        """
        Sets the receipt_notification of this CustomerEmail.
        CC this email on receipt notifications

        :param receipt_notification: The receipt_notification of this CustomerEmail.
        :type: bool
        """

        self._receipt_notification = receipt_notification

    @property
    def refund_notification(self):
        """
        Gets the refund_notification of this CustomerEmail.
        CC this email on refund notifications

        :return: The refund_notification of this CustomerEmail.
        :rtype: bool
        """
        return self._refund_notification

    @refund_notification.setter
    def refund_notification(self, refund_notification):
        """
        Sets the refund_notification of this CustomerEmail.
        CC this email on refund notifications

        :param refund_notification: The refund_notification of this CustomerEmail.
        :type: bool
        """

        self._refund_notification = refund_notification

    @property
    def shipment_notification(self):
        """
        Gets the shipment_notification of this CustomerEmail.
        CC this email on shipment notifications

        :return: The shipment_notification of this CustomerEmail.
        :rtype: bool
        """
        return self._shipment_notification

    @shipment_notification.setter
    def shipment_notification(self, shipment_notification):
        """
        Sets the shipment_notification of this CustomerEmail.
        CC this email on shipment notifications

        :param shipment_notification: The shipment_notification of this CustomerEmail.
        :type: bool
        """

        self._shipment_notification = shipment_notification

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CustomerEmail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
