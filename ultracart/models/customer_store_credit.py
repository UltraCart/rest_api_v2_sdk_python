# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CustomerStoreCredit(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'available': 'float',
        'expiring': 'float',
        'future_ledgers': 'list[CustomerStoreCreditLedgerEntry]',
        'past_ledgers': 'list[CustomerStoreCreditLedgerEntry]',
        'total': 'float',
        'vesting': 'float'
    }

    attribute_map = {
        'available': 'available',
        'expiring': 'expiring',
        'future_ledgers': 'future_ledgers',
        'past_ledgers': 'past_ledgers',
        'total': 'total',
        'vesting': 'vesting'
    }

    def __init__(self, available=None, expiring=None, future_ledgers=None, past_ledgers=None, total=None, vesting=None):  # noqa: E501
        """CustomerStoreCredit - a model defined in Swagger"""  # noqa: E501

        self._available = None
        self._expiring = None
        self._future_ledgers = None
        self._past_ledgers = None
        self._total = None
        self._vesting = None
        self.discriminator = None

        if available is not None:
            self.available = available
        if expiring is not None:
            self.expiring = expiring
        if future_ledgers is not None:
            self.future_ledgers = future_ledgers
        if past_ledgers is not None:
            self.past_ledgers = past_ledgers
        if total is not None:
            self.total = total
        if vesting is not None:
            self.vesting = vesting

    @property
    def available(self):
        """Gets the available of this CustomerStoreCredit.  # noqa: E501

        Available store credit which is defined as unused and vested  # noqa: E501

        :return: The available of this CustomerStoreCredit.  # noqa: E501
        :rtype: float
        """
        return self._available

    @available.setter
    def available(self, available):
        """Sets the available of this CustomerStoreCredit.

        Available store credit which is defined as unused and vested  # noqa: E501

        :param available: The available of this CustomerStoreCredit.  # noqa: E501
        :type: float
        """

        self._available = available

    @property
    def expiring(self):
        """Gets the expiring of this CustomerStoreCredit.  # noqa: E501

        Amount of store credit expiring within 30 days  # noqa: E501

        :return: The expiring of this CustomerStoreCredit.  # noqa: E501
        :rtype: float
        """
        return self._expiring

    @expiring.setter
    def expiring(self, expiring):
        """Sets the expiring of this CustomerStoreCredit.

        Amount of store credit expiring within 30 days  # noqa: E501

        :param expiring: The expiring of this CustomerStoreCredit.  # noqa: E501
        :type: float
        """

        self._expiring = expiring

    @property
    def future_ledgers(self):
        """Gets the future_ledgers of this CustomerStoreCredit.  # noqa: E501

        Array of future ledger entries including expiring entries  # noqa: E501

        :return: The future_ledgers of this CustomerStoreCredit.  # noqa: E501
        :rtype: list[CustomerStoreCreditLedgerEntry]
        """
        return self._future_ledgers

    @future_ledgers.setter
    def future_ledgers(self, future_ledgers):
        """Sets the future_ledgers of this CustomerStoreCredit.

        Array of future ledger entries including expiring entries  # noqa: E501

        :param future_ledgers: The future_ledgers of this CustomerStoreCredit.  # noqa: E501
        :type: list[CustomerStoreCreditLedgerEntry]
        """

        self._future_ledgers = future_ledgers

    @property
    def past_ledgers(self):
        """Gets the past_ledgers of this CustomerStoreCredit.  # noqa: E501

        Array of past ledger entries including accrual, usage, and expiring entries  # noqa: E501

        :return: The past_ledgers of this CustomerStoreCredit.  # noqa: E501
        :rtype: list[CustomerStoreCreditLedgerEntry]
        """
        return self._past_ledgers

    @past_ledgers.setter
    def past_ledgers(self, past_ledgers):
        """Sets the past_ledgers of this CustomerStoreCredit.

        Array of past ledger entries including accrual, usage, and expiring entries  # noqa: E501

        :param past_ledgers: The past_ledgers of this CustomerStoreCredit.  # noqa: E501
        :type: list[CustomerStoreCreditLedgerEntry]
        """

        self._past_ledgers = past_ledgers

    @property
    def total(self):
        """Gets the total of this CustomerStoreCredit.  # noqa: E501

        Total lifetime store credit for this customer.  # noqa: E501

        :return: The total of this CustomerStoreCredit.  # noqa: E501
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this CustomerStoreCredit.

        Total lifetime store credit for this customer.  # noqa: E501

        :param total: The total of this CustomerStoreCredit.  # noqa: E501
        :type: float
        """

        self._total = total

    @property
    def vesting(self):
        """Gets the vesting of this CustomerStoreCredit.  # noqa: E501

        Amount of store credit vesting  # noqa: E501

        :return: The vesting of this CustomerStoreCredit.  # noqa: E501
        :rtype: float
        """
        return self._vesting

    @vesting.setter
    def vesting(self, vesting):
        """Sets the vesting of this CustomerStoreCredit.

        Amount of store credit vesting  # noqa: E501

        :param vesting: The vesting of this CustomerStoreCredit.  # noqa: E501
        :type: float
        """

        self._vesting = vesting

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomerStoreCredit, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomerStoreCredit):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
