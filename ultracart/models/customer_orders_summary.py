# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CustomerOrdersSummary(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'first_order_dts': 'str',
        'last_order_dts': 'str',
        'order_count': 'int',
        'total': 'float'
    }

    attribute_map = {
        'first_order_dts': 'first_order_dts',
        'last_order_dts': 'last_order_dts',
        'order_count': 'order_count',
        'total': 'total'
    }

    def __init__(self, first_order_dts=None, last_order_dts=None, order_count=None, total=None):
        """
        CustomerOrdersSummary - a model defined in Swagger
        """

        self._first_order_dts = None
        self._last_order_dts = None
        self._order_count = None
        self._total = None
        self.discriminator = None

        if first_order_dts is not None:
          self.first_order_dts = first_order_dts
        if last_order_dts is not None:
          self.last_order_dts = last_order_dts
        if order_count is not None:
          self.order_count = order_count
        if total is not None:
          self.total = total

    @property
    def first_order_dts(self):
        """
        Gets the first_order_dts of this CustomerOrdersSummary.
        First order date

        :return: The first_order_dts of this CustomerOrdersSummary.
        :rtype: str
        """
        return self._first_order_dts

    @first_order_dts.setter
    def first_order_dts(self, first_order_dts):
        """
        Sets the first_order_dts of this CustomerOrdersSummary.
        First order date

        :param first_order_dts: The first_order_dts of this CustomerOrdersSummary.
        :type: str
        """

        self._first_order_dts = first_order_dts

    @property
    def last_order_dts(self):
        """
        Gets the last_order_dts of this CustomerOrdersSummary.
        Last order date

        :return: The last_order_dts of this CustomerOrdersSummary.
        :rtype: str
        """
        return self._last_order_dts

    @last_order_dts.setter
    def last_order_dts(self, last_order_dts):
        """
        Sets the last_order_dts of this CustomerOrdersSummary.
        Last order date

        :param last_order_dts: The last_order_dts of this CustomerOrdersSummary.
        :type: str
        """

        self._last_order_dts = last_order_dts

    @property
    def order_count(self):
        """
        Gets the order_count of this CustomerOrdersSummary.
        Total number of orders

        :return: The order_count of this CustomerOrdersSummary.
        :rtype: int
        """
        return self._order_count

    @order_count.setter
    def order_count(self, order_count):
        """
        Sets the order_count of this CustomerOrdersSummary.
        Total number of orders

        :param order_count: The order_count of this CustomerOrdersSummary.
        :type: int
        """

        self._order_count = order_count

    @property
    def total(self):
        """
        Gets the total of this CustomerOrdersSummary.
        Total amount associated with the orders

        :return: The total of this CustomerOrdersSummary.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """
        Sets the total of this CustomerOrdersSummary.
        Total amount associated with the orders

        :param total: The total of this CustomerOrdersSummary.
        :type: float
        """

        self._total = total

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CustomerOrdersSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
