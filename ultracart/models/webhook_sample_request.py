# coding: utf-8

"""
    UltraCart Rest API V2

    This is the next generation UltraCart REST API...

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class WebhookSampleRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'request': 'str',
        'request_headers': 'list[HTTPHeader]',
        'request_id': 'str',
        'uri': 'str'
    }

    attribute_map = {
        'request': 'request',
        'request_headers': 'request_headers',
        'request_id': 'request_id',
        'uri': 'uri'
    }

    def __init__(self, request=None, request_headers=None, request_id=None, uri=None):
        """
        WebhookSampleRequest - a model defined in Swagger
        """

        self._request = None
        self._request_headers = None
        self._request_id = None
        self._uri = None
        self.discriminator = None

        if request is not None:
          self.request = request
        if request_headers is not None:
          self.request_headers = request_headers
        if request_id is not None:
          self.request_id = request_id
        if uri is not None:
          self.uri = uri

    @property
    def request(self):
        """
        Gets the request of this WebhookSampleRequest.
        Request

        :return: The request of this WebhookSampleRequest.
        :rtype: str
        """
        return self._request

    @request.setter
    def request(self, request):
        """
        Sets the request of this WebhookSampleRequest.
        Request

        :param request: The request of this WebhookSampleRequest.
        :type: str
        """

        self._request = request

    @property
    def request_headers(self):
        """
        Gets the request_headers of this WebhookSampleRequest.
        Request headers

        :return: The request_headers of this WebhookSampleRequest.
        :rtype: list[HTTPHeader]
        """
        return self._request_headers

    @request_headers.setter
    def request_headers(self, request_headers):
        """
        Sets the request_headers of this WebhookSampleRequest.
        Request headers

        :param request_headers: The request_headers of this WebhookSampleRequest.
        :type: list[HTTPHeader]
        """

        self._request_headers = request_headers

    @property
    def request_id(self):
        """
        Gets the request_id of this WebhookSampleRequest.
        Request id

        :return: The request_id of this WebhookSampleRequest.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """
        Sets the request_id of this WebhookSampleRequest.
        Request id

        :param request_id: The request_id of this WebhookSampleRequest.
        :type: str
        """

        self._request_id = request_id

    @property
    def uri(self):
        """
        Gets the uri of this WebhookSampleRequest.
        URI to send request to

        :return: The uri of this WebhookSampleRequest.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """
        Sets the uri of this WebhookSampleRequest.
        URI to send request to

        :param uri: The uri of this WebhookSampleRequest.
        :type: str
        """

        self._uri = uri

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WebhookSampleRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
