# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CustomReportQuery(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'conditional_formatting_start_column': 'int',
        'freeze_columns': 'int',
        'pii_columns': 'list[str]',
        'query': 'str',
        'sheet_name': 'str',
        'title': 'str'
    }

    attribute_map = {
        'conditional_formatting_start_column': 'conditional_formatting_start_column',
        'freeze_columns': 'freeze_columns',
        'pii_columns': 'pii_columns',
        'query': 'query',
        'sheet_name': 'sheet_name',
        'title': 'title'
    }

    def __init__(self, conditional_formatting_start_column=None, freeze_columns=None, pii_columns=None, query=None, sheet_name=None, title=None):  # noqa: E501
        """CustomReportQuery - a model defined in Swagger"""  # noqa: E501

        self._conditional_formatting_start_column = None
        self._freeze_columns = None
        self._pii_columns = None
        self._query = None
        self._sheet_name = None
        self._title = None
        self.discriminator = None

        if conditional_formatting_start_column is not None:
            self.conditional_formatting_start_column = conditional_formatting_start_column
        if freeze_columns is not None:
            self.freeze_columns = freeze_columns
        if pii_columns is not None:
            self.pii_columns = pii_columns
        if query is not None:
            self.query = query
        if sheet_name is not None:
            self.sheet_name = sheet_name
        if title is not None:
            self.title = title

    @property
    def conditional_formatting_start_column(self):
        """Gets the conditional_formatting_start_column of this CustomReportQuery.  # noqa: E501


        :return: The conditional_formatting_start_column of this CustomReportQuery.  # noqa: E501
        :rtype: int
        """
        return self._conditional_formatting_start_column

    @conditional_formatting_start_column.setter
    def conditional_formatting_start_column(self, conditional_formatting_start_column):
        """Sets the conditional_formatting_start_column of this CustomReportQuery.


        :param conditional_formatting_start_column: The conditional_formatting_start_column of this CustomReportQuery.  # noqa: E501
        :type: int
        """

        self._conditional_formatting_start_column = conditional_formatting_start_column

    @property
    def freeze_columns(self):
        """Gets the freeze_columns of this CustomReportQuery.  # noqa: E501


        :return: The freeze_columns of this CustomReportQuery.  # noqa: E501
        :rtype: int
        """
        return self._freeze_columns

    @freeze_columns.setter
    def freeze_columns(self, freeze_columns):
        """Sets the freeze_columns of this CustomReportQuery.


        :param freeze_columns: The freeze_columns of this CustomReportQuery.  # noqa: E501
        :type: int
        """

        self._freeze_columns = freeze_columns

    @property
    def pii_columns(self):
        """Gets the pii_columns of this CustomReportQuery.  # noqa: E501


        :return: The pii_columns of this CustomReportQuery.  # noqa: E501
        :rtype: list[str]
        """
        return self._pii_columns

    @pii_columns.setter
    def pii_columns(self, pii_columns):
        """Sets the pii_columns of this CustomReportQuery.


        :param pii_columns: The pii_columns of this CustomReportQuery.  # noqa: E501
        :type: list[str]
        """

        self._pii_columns = pii_columns

    @property
    def query(self):
        """Gets the query of this CustomReportQuery.  # noqa: E501


        :return: The query of this CustomReportQuery.  # noqa: E501
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this CustomReportQuery.


        :param query: The query of this CustomReportQuery.  # noqa: E501
        :type: str
        """

        self._query = query

    @property
    def sheet_name(self):
        """Gets the sheet_name of this CustomReportQuery.  # noqa: E501


        :return: The sheet_name of this CustomReportQuery.  # noqa: E501
        :rtype: str
        """
        return self._sheet_name

    @sheet_name.setter
    def sheet_name(self, sheet_name):
        """Sets the sheet_name of this CustomReportQuery.


        :param sheet_name: The sheet_name of this CustomReportQuery.  # noqa: E501
        :type: str
        """

        self._sheet_name = sheet_name

    @property
    def title(self):
        """Gets the title of this CustomReportQuery.  # noqa: E501


        :return: The title of this CustomReportQuery.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this CustomReportQuery.


        :param title: The title of this CustomReportQuery.  # noqa: E501
        :type: str
        """

        self._title = title

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomReportQuery, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomReportQuery):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
