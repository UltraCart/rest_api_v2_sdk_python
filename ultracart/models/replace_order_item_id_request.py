# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ReplaceOrderItemIdRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'item_index': 'int',
        'merchant_item_id': 'str',
        'order_id': 'str',
        'replacement_merchant_item_id': 'str'
    }

    attribute_map = {
        'item_index': 'item_index',
        'merchant_item_id': 'merchant_item_id',
        'order_id': 'order_id',
        'replacement_merchant_item_id': 'replacement_merchant_item_id'
    }

    def __init__(self, item_index=None, merchant_item_id=None, order_id=None, replacement_merchant_item_id=None):  # noqa: E501
        """ReplaceOrderItemIdRequest - a model defined in Swagger"""  # noqa: E501

        self._item_index = None
        self._merchant_item_id = None
        self._order_id = None
        self._replacement_merchant_item_id = None
        self.discriminator = None

        if item_index is not None:
            self.item_index = item_index
        if merchant_item_id is not None:
            self.merchant_item_id = merchant_item_id
        if order_id is not None:
            self.order_id = order_id
        if replacement_merchant_item_id is not None:
            self.replacement_merchant_item_id = replacement_merchant_item_id

    @property
    def item_index(self):
        """Gets the item_index of this ReplaceOrderItemIdRequest.  # noqa: E501

        Index of the item on the order.  Must match order.items[].item_index  # noqa: E501

        :return: The item_index of this ReplaceOrderItemIdRequest.  # noqa: E501
        :rtype: int
        """
        return self._item_index

    @item_index.setter
    def item_index(self, item_index):
        """Sets the item_index of this ReplaceOrderItemIdRequest.

        Index of the item on the order.  Must match order.items[].item_index  # noqa: E501

        :param item_index: The item_index of this ReplaceOrderItemIdRequest.  # noqa: E501
        :type: int
        """

        self._item_index = item_index

    @property
    def merchant_item_id(self):
        """Gets the merchant_item_id of this ReplaceOrderItemIdRequest.  # noqa: E501

        Item ID  # noqa: E501

        :return: The merchant_item_id of this ReplaceOrderItemIdRequest.  # noqa: E501
        :rtype: str
        """
        return self._merchant_item_id

    @merchant_item_id.setter
    def merchant_item_id(self, merchant_item_id):
        """Sets the merchant_item_id of this ReplaceOrderItemIdRequest.

        Item ID  # noqa: E501

        :param merchant_item_id: The merchant_item_id of this ReplaceOrderItemIdRequest.  # noqa: E501
        :type: str
        """
        if merchant_item_id is not None and len(merchant_item_id) > 20:
            raise ValueError("Invalid value for `merchant_item_id`, length must be less than or equal to `20`")  # noqa: E501

        self._merchant_item_id = merchant_item_id

    @property
    def order_id(self):
        """Gets the order_id of this ReplaceOrderItemIdRequest.  # noqa: E501

        Order ID  # noqa: E501

        :return: The order_id of this ReplaceOrderItemIdRequest.  # noqa: E501
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this ReplaceOrderItemIdRequest.

        Order ID  # noqa: E501

        :param order_id: The order_id of this ReplaceOrderItemIdRequest.  # noqa: E501
        :type: str
        """

        self._order_id = order_id

    @property
    def replacement_merchant_item_id(self):
        """Gets the replacement_merchant_item_id of this ReplaceOrderItemIdRequest.  # noqa: E501

        Replacement Item ID  # noqa: E501

        :return: The replacement_merchant_item_id of this ReplaceOrderItemIdRequest.  # noqa: E501
        :rtype: str
        """
        return self._replacement_merchant_item_id

    @replacement_merchant_item_id.setter
    def replacement_merchant_item_id(self, replacement_merchant_item_id):
        """Sets the replacement_merchant_item_id of this ReplaceOrderItemIdRequest.

        Replacement Item ID  # noqa: E501

        :param replacement_merchant_item_id: The replacement_merchant_item_id of this ReplaceOrderItemIdRequest.  # noqa: E501
        :type: str
        """
        if replacement_merchant_item_id is not None and len(replacement_merchant_item_id) > 20:
            raise ValueError("Invalid value for `replacement_merchant_item_id`, length must be less than or equal to `20`")  # noqa: E501

        self._replacement_merchant_item_id = replacement_merchant_item_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReplaceOrderItemIdRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReplaceOrderItemIdRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
