# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CartSettingsShippingCalendar(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'blackouts': 'list[str]',
        'days_of_week': 'list[bool]',
        'earliest': 'str',
        'require': 'bool',
        'show': 'bool'
    }

    attribute_map = {
        'blackouts': 'blackouts',
        'days_of_week': 'days_of_week',
        'earliest': 'earliest',
        'require': 'require',
        'show': 'show'
    }

    def __init__(self, blackouts=None, days_of_week=None, earliest=None, require=None, show=None):
        """
        CartSettingsShippingCalendar - a model defined in Swagger
        """

        self._blackouts = None
        self._days_of_week = None
        self._earliest = None
        self._require = None
        self._show = None
        self.discriminator = None

        if blackouts is not None:
          self.blackouts = blackouts
        if days_of_week is not None:
          self.days_of_week = days_of_week
        if earliest is not None:
          self.earliest = earliest
        if require is not None:
          self.require = require
        if show is not None:
          self.show = show

    @property
    def blackouts(self):
        """
        Gets the blackouts of this CartSettingsShippingCalendar.
        Specified dates that are blacked out on the calendar in ISO8601 format

        :return: The blackouts of this CartSettingsShippingCalendar.
        :rtype: list[str]
        """
        return self._blackouts

    @blackouts.setter
    def blackouts(self, blackouts):
        """
        Sets the blackouts of this CartSettingsShippingCalendar.
        Specified dates that are blacked out on the calendar in ISO8601 format

        :param blackouts: The blackouts of this CartSettingsShippingCalendar.
        :type: list[str]
        """

        self._blackouts = blackouts

    @property
    def days_of_week(self):
        """
        Gets the days_of_week of this CartSettingsShippingCalendar.
        Days of week that should be enabled on the calendar (0 - Sunday through 6 - Saturday)

        :return: The days_of_week of this CartSettingsShippingCalendar.
        :rtype: list[bool]
        """
        return self._days_of_week

    @days_of_week.setter
    def days_of_week(self, days_of_week):
        """
        Sets the days_of_week of this CartSettingsShippingCalendar.
        Days of week that should be enabled on the calendar (0 - Sunday through 6 - Saturday)

        :param days_of_week: The days_of_week of this CartSettingsShippingCalendar.
        :type: list[bool]
        """

        self._days_of_week = days_of_week

    @property
    def earliest(self):
        """
        Gets the earliest of this CartSettingsShippingCalendar.
        The earliest date that can be selected on the calendar

        :return: The earliest of this CartSettingsShippingCalendar.
        :rtype: str
        """
        return self._earliest

    @earliest.setter
    def earliest(self, earliest):
        """
        Sets the earliest of this CartSettingsShippingCalendar.
        The earliest date that can be selected on the calendar

        :param earliest: The earliest of this CartSettingsShippingCalendar.
        :type: str
        """

        self._earliest = earliest

    @property
    def require(self):
        """
        Gets the require of this CartSettingsShippingCalendar.
        True if the customer is required to select a date

        :return: The require of this CartSettingsShippingCalendar.
        :rtype: bool
        """
        return self._require

    @require.setter
    def require(self, require):
        """
        Sets the require of this CartSettingsShippingCalendar.
        True if the customer is required to select a date

        :param require: The require of this CartSettingsShippingCalendar.
        :type: bool
        """

        self._require = require

    @property
    def show(self):
        """
        Gets the show of this CartSettingsShippingCalendar.
        True if this calendar should be shown to the customer

        :return: The show of this CartSettingsShippingCalendar.
        :rtype: bool
        """
        return self._show

    @show.setter
    def show(self, show):
        """
        Sets the show of this CartSettingsShippingCalendar.
        True if this calendar should be shown to the customer

        :param show: The show of this CartSettingsShippingCalendar.
        :type: bool
        """

        self._show = show

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CartSettingsShippingCalendar):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
