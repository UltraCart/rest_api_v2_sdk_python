# coding: utf-8

"""
    UltraCart Rest API V2

    This is the next generation UltraCart REST API...

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class CustomerCard(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, card_expiration_month=None, card_expiration_year=None, card_number=None, card_number_token=None, card_type=None, customer_profile_credit_card_id=None, customer_profile_oid=None):
        """
        CustomerCard - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'card_expiration_month': 'int',
            'card_expiration_year': 'int',
            'card_number': 'str',
            'card_number_token': 'str',
            'card_type': 'str',
            'customer_profile_credit_card_id': 'int',
            'customer_profile_oid': 'int'
        }

        self.attribute_map = {
            'card_expiration_month': 'card_expiration_month',
            'card_expiration_year': 'card_expiration_year',
            'card_number': 'card_number',
            'card_number_token': 'card_number_token',
            'card_type': 'card_type',
            'customer_profile_credit_card_id': 'customer_profile_credit_card_id',
            'customer_profile_oid': 'customer_profile_oid'
        }

        self._card_expiration_month = card_expiration_month
        self._card_expiration_year = card_expiration_year
        self._card_number = card_number
        self._card_number_token = card_number_token
        self._card_type = card_type
        self._customer_profile_credit_card_id = customer_profile_credit_card_id
        self._customer_profile_oid = customer_profile_oid

    @property
    def card_expiration_month(self):
        """
        Gets the card_expiration_month of this CustomerCard.
        Card expiration month (1-12)

        :return: The card_expiration_month of this CustomerCard.
        :rtype: int
        """
        return self._card_expiration_month

    @card_expiration_month.setter
    def card_expiration_month(self, card_expiration_month):
        """
        Sets the card_expiration_month of this CustomerCard.
        Card expiration month (1-12)

        :param card_expiration_month: The card_expiration_month of this CustomerCard.
        :type: int
        """

        self._card_expiration_month = card_expiration_month

    @property
    def card_expiration_year(self):
        """
        Gets the card_expiration_year of this CustomerCard.
        Card expiration year (four digit year)

        :return: The card_expiration_year of this CustomerCard.
        :rtype: int
        """
        return self._card_expiration_year

    @card_expiration_year.setter
    def card_expiration_year(self, card_expiration_year):
        """
        Sets the card_expiration_year of this CustomerCard.
        Card expiration year (four digit year)

        :param card_expiration_year: The card_expiration_year of this CustomerCard.
        :type: int
        """

        self._card_expiration_year = card_expiration_year

    @property
    def card_number(self):
        """
        Gets the card_number of this CustomerCard.
        Card number (masked to the last 4)

        :return: The card_number of this CustomerCard.
        :rtype: str
        """
        return self._card_number

    @card_number.setter
    def card_number(self, card_number):
        """
        Sets the card_number of this CustomerCard.
        Card number (masked to the last 4)

        :param card_number: The card_number of this CustomerCard.
        :type: str
        """

        self._card_number = card_number

    @property
    def card_number_token(self):
        """
        Gets the card_number_token of this CustomerCard.
        Hosted field token for the card number

        :return: The card_number_token of this CustomerCard.
        :rtype: str
        """
        return self._card_number_token

    @card_number_token.setter
    def card_number_token(self, card_number_token):
        """
        Sets the card_number_token of this CustomerCard.
        Hosted field token for the card number

        :param card_number_token: The card_number_token of this CustomerCard.
        :type: str
        """

        self._card_number_token = card_number_token

    @property
    def card_type(self):
        """
        Gets the card_type of this CustomerCard.
        Card type

        :return: The card_type of this CustomerCard.
        :rtype: str
        """
        return self._card_type

    @card_type.setter
    def card_type(self, card_type):
        """
        Sets the card_type of this CustomerCard.
        Card type

        :param card_type: The card_type of this CustomerCard.
        :type: str
        """

        self._card_type = card_type

    @property
    def customer_profile_credit_card_id(self):
        """
        Gets the customer_profile_credit_card_id of this CustomerCard.
        ID of the stored credit card to use

        :return: The customer_profile_credit_card_id of this CustomerCard.
        :rtype: int
        """
        return self._customer_profile_credit_card_id

    @customer_profile_credit_card_id.setter
    def customer_profile_credit_card_id(self, customer_profile_credit_card_id):
        """
        Sets the customer_profile_credit_card_id of this CustomerCard.
        ID of the stored credit card to use

        :param customer_profile_credit_card_id: The customer_profile_credit_card_id of this CustomerCard.
        :type: int
        """

        self._customer_profile_credit_card_id = customer_profile_credit_card_id

    @property
    def customer_profile_oid(self):
        """
        Gets the customer_profile_oid of this CustomerCard.
        Customer profile object identifier

        :return: The customer_profile_oid of this CustomerCard.
        :rtype: int
        """
        return self._customer_profile_oid

    @customer_profile_oid.setter
    def customer_profile_oid(self, customer_profile_oid):
        """
        Sets the customer_profile_oid of this CustomerCard.
        Customer profile object identifier

        :param customer_profile_oid: The customer_profile_oid of this CustomerCard.
        :type: int
        """

        self._customer_profile_oid = customer_profile_oid

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
