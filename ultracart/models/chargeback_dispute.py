# coding: utf-8

"""
    UltraCart Rest API V2

    This is the next generation UltraCart REST API...

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ChargebackDispute(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, account_number=None, adjustment_request_text=None, amount=None, auth_code=None, case_number=None, chargeback_dispute_oid=None, chargeback_dts=None, currency=None, customer_care_notes=None, encryption_key=None, expiration_dts=None, fax_failure_reason=None, fax_number=None, fax_transaction_id=None, icsid=None, merchant_account_profile_oid=None, order=None, order_id=None, partial_card_number=None, pdf_file_oid=None, reason_code=None, status=None, website_url=None):
        """
        ChargebackDispute - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'account_number': 'str',
            'adjustment_request_text': 'str',
            'amount': 'float',
            'auth_code': 'str',
            'case_number': 'str',
            'chargeback_dispute_oid': 'int',
            'chargeback_dts': 'str',
            'currency': 'str',
            'customer_care_notes': 'str',
            'encryption_key': 'str',
            'expiration_dts': 'str',
            'fax_failure_reason': 'str',
            'fax_number': 'str',
            'fax_transaction_id': 'int',
            'icsid': 'str',
            'merchant_account_profile_oid': 'int',
            'order': 'Order',
            'order_id': 'str',
            'partial_card_number': 'str',
            'pdf_file_oid': 'str',
            'reason_code': 'str',
            'status': 'str',
            'website_url': 'str'
        }

        self.attribute_map = {
            'account_number': 'account_number',
            'adjustment_request_text': 'adjustment_request_text',
            'amount': 'amount',
            'auth_code': 'auth_code',
            'case_number': 'case_number',
            'chargeback_dispute_oid': 'chargeback_dispute_oid',
            'chargeback_dts': 'chargeback_dts',
            'currency': 'currency',
            'customer_care_notes': 'customer_care_notes',
            'encryption_key': 'encryption_key',
            'expiration_dts': 'expiration_dts',
            'fax_failure_reason': 'fax_failure_reason',
            'fax_number': 'fax_number',
            'fax_transaction_id': 'fax_transaction_id',
            'icsid': 'icsid',
            'merchant_account_profile_oid': 'merchant_account_profile_oid',
            'order': 'order',
            'order_id': 'order_id',
            'partial_card_number': 'partial_card_number',
            'pdf_file_oid': 'pdf_file_oid',
            'reason_code': 'reason_code',
            'status': 'status',
            'website_url': 'website_url'
        }

        self._account_number = account_number
        self._adjustment_request_text = adjustment_request_text
        self._amount = amount
        self._auth_code = auth_code
        self._case_number = case_number
        self._chargeback_dispute_oid = chargeback_dispute_oid
        self._chargeback_dts = chargeback_dts
        self._currency = currency
        self._customer_care_notes = customer_care_notes
        self._encryption_key = encryption_key
        self._expiration_dts = expiration_dts
        self._fax_failure_reason = fax_failure_reason
        self._fax_number = fax_number
        self._fax_transaction_id = fax_transaction_id
        self._icsid = icsid
        self._merchant_account_profile_oid = merchant_account_profile_oid
        self._order = order
        self._order_id = order_id
        self._partial_card_number = partial_card_number
        self._pdf_file_oid = pdf_file_oid
        self._reason_code = reason_code
        self._status = status
        self._website_url = website_url

    @property
    def account_number(self):
        """
        Gets the account_number of this ChargebackDispute.
        Account number

        :return: The account_number of this ChargebackDispute.
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """
        Sets the account_number of this ChargebackDispute.
        Account number

        :param account_number: The account_number of this ChargebackDispute.
        :type: str
        """

        if not account_number:
            raise ValueError("Invalid value for `account_number`, must not be `None`")
        if len(account_number) > 50:
            raise ValueError("Invalid value for `account_number`, length must be less than `50`")

        self._account_number = account_number

    @property
    def adjustment_request_text(self):
        """
        Gets the adjustment_request_text of this ChargebackDispute.
        Adjustment request text

        :return: The adjustment_request_text of this ChargebackDispute.
        :rtype: str
        """
        return self._adjustment_request_text

    @adjustment_request_text.setter
    def adjustment_request_text(self, adjustment_request_text):
        """
        Sets the adjustment_request_text of this ChargebackDispute.
        Adjustment request text

        :param adjustment_request_text: The adjustment_request_text of this ChargebackDispute.
        :type: str
        """

        self._adjustment_request_text = adjustment_request_text

    @property
    def amount(self):
        """
        Gets the amount of this ChargebackDispute.
        Amount

        :return: The amount of this ChargebackDispute.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """
        Sets the amount of this ChargebackDispute.
        Amount

        :param amount: The amount of this ChargebackDispute.
        :type: float
        """

        self._amount = amount

    @property
    def auth_code(self):
        """
        Gets the auth_code of this ChargebackDispute.
        Auth code

        :return: The auth_code of this ChargebackDispute.
        :rtype: str
        """
        return self._auth_code

    @auth_code.setter
    def auth_code(self, auth_code):
        """
        Sets the auth_code of this ChargebackDispute.
        Auth code

        :param auth_code: The auth_code of this ChargebackDispute.
        :type: str
        """

        if not auth_code:
            raise ValueError("Invalid value for `auth_code`, must not be `None`")
        if len(auth_code) > 20:
            raise ValueError("Invalid value for `auth_code`, length must be less than `20`")

        self._auth_code = auth_code

    @property
    def case_number(self):
        """
        Gets the case_number of this ChargebackDispute.
        Case number

        :return: The case_number of this ChargebackDispute.
        :rtype: str
        """
        return self._case_number

    @case_number.setter
    def case_number(self, case_number):
        """
        Sets the case_number of this ChargebackDispute.
        Case number

        :param case_number: The case_number of this ChargebackDispute.
        :type: str
        """

        if not case_number:
            raise ValueError("Invalid value for `case_number`, must not be `None`")
        if len(case_number) > 50:
            raise ValueError("Invalid value for `case_number`, length must be less than `50`")

        self._case_number = case_number

    @property
    def chargeback_dispute_oid(self):
        """
        Gets the chargeback_dispute_oid of this ChargebackDispute.
        Chargeback Dispute Oid

        :return: The chargeback_dispute_oid of this ChargebackDispute.
        :rtype: int
        """
        return self._chargeback_dispute_oid

    @chargeback_dispute_oid.setter
    def chargeback_dispute_oid(self, chargeback_dispute_oid):
        """
        Sets the chargeback_dispute_oid of this ChargebackDispute.
        Chargeback Dispute Oid

        :param chargeback_dispute_oid: The chargeback_dispute_oid of this ChargebackDispute.
        :type: int
        """

        self._chargeback_dispute_oid = chargeback_dispute_oid

    @property
    def chargeback_dts(self):
        """
        Gets the chargeback_dts of this ChargebackDispute.
        Chargeback dts

        :return: The chargeback_dts of this ChargebackDispute.
        :rtype: str
        """
        return self._chargeback_dts

    @chargeback_dts.setter
    def chargeback_dts(self, chargeback_dts):
        """
        Sets the chargeback_dts of this ChargebackDispute.
        Chargeback dts

        :param chargeback_dts: The chargeback_dts of this ChargebackDispute.
        :type: str
        """

        self._chargeback_dts = chargeback_dts

    @property
    def currency(self):
        """
        Gets the currency of this ChargebackDispute.
        Currency

        :return: The currency of this ChargebackDispute.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """
        Sets the currency of this ChargebackDispute.
        Currency

        :param currency: The currency of this ChargebackDispute.
        :type: str
        """

        if not currency:
            raise ValueError("Invalid value for `currency`, must not be `None`")
        if len(currency) > 10:
            raise ValueError("Invalid value for `currency`, length must be less than `10`")

        self._currency = currency

    @property
    def customer_care_notes(self):
        """
        Gets the customer_care_notes of this ChargebackDispute.
        Customer care notes

        :return: The customer_care_notes of this ChargebackDispute.
        :rtype: str
        """
        return self._customer_care_notes

    @customer_care_notes.setter
    def customer_care_notes(self, customer_care_notes):
        """
        Sets the customer_care_notes of this ChargebackDispute.
        Customer care notes

        :param customer_care_notes: The customer_care_notes of this ChargebackDispute.
        :type: str
        """

        self._customer_care_notes = customer_care_notes

    @property
    def encryption_key(self):
        """
        Gets the encryption_key of this ChargebackDispute.
        Encryption key

        :return: The encryption_key of this ChargebackDispute.
        :rtype: str
        """
        return self._encryption_key

    @encryption_key.setter
    def encryption_key(self, encryption_key):
        """
        Sets the encryption_key of this ChargebackDispute.
        Encryption key

        :param encryption_key: The encryption_key of this ChargebackDispute.
        :type: str
        """

        if not encryption_key:
            raise ValueError("Invalid value for `encryption_key`, must not be `None`")
        if len(encryption_key) > 100:
            raise ValueError("Invalid value for `encryption_key`, length must be less than `100`")

        self._encryption_key = encryption_key

    @property
    def expiration_dts(self):
        """
        Gets the expiration_dts of this ChargebackDispute.
        Expiration Dts

        :return: The expiration_dts of this ChargebackDispute.
        :rtype: str
        """
        return self._expiration_dts

    @expiration_dts.setter
    def expiration_dts(self, expiration_dts):
        """
        Sets the expiration_dts of this ChargebackDispute.
        Expiration Dts

        :param expiration_dts: The expiration_dts of this ChargebackDispute.
        :type: str
        """

        self._expiration_dts = expiration_dts

    @property
    def fax_failure_reason(self):
        """
        Gets the fax_failure_reason of this ChargebackDispute.
        Fax failure reason

        :return: The fax_failure_reason of this ChargebackDispute.
        :rtype: str
        """
        return self._fax_failure_reason

    @fax_failure_reason.setter
    def fax_failure_reason(self, fax_failure_reason):
        """
        Sets the fax_failure_reason of this ChargebackDispute.
        Fax failure reason

        :param fax_failure_reason: The fax_failure_reason of this ChargebackDispute.
        :type: str
        """

        if not fax_failure_reason:
            raise ValueError("Invalid value for `fax_failure_reason`, must not be `None`")
        if len(fax_failure_reason) > 250:
            raise ValueError("Invalid value for `fax_failure_reason`, length must be less than `250`")

        self._fax_failure_reason = fax_failure_reason

    @property
    def fax_number(self):
        """
        Gets the fax_number of this ChargebackDispute.
        Fax number

        :return: The fax_number of this ChargebackDispute.
        :rtype: str
        """
        return self._fax_number

    @fax_number.setter
    def fax_number(self, fax_number):
        """
        Sets the fax_number of this ChargebackDispute.
        Fax number

        :param fax_number: The fax_number of this ChargebackDispute.
        :type: str
        """

        if not fax_number:
            raise ValueError("Invalid value for `fax_number`, must not be `None`")
        if len(fax_number) > 20:
            raise ValueError("Invalid value for `fax_number`, length must be less than `20`")

        self._fax_number = fax_number

    @property
    def fax_transaction_id(self):
        """
        Gets the fax_transaction_id of this ChargebackDispute.
        Fax transaction id

        :return: The fax_transaction_id of this ChargebackDispute.
        :rtype: int
        """
        return self._fax_transaction_id

    @fax_transaction_id.setter
    def fax_transaction_id(self, fax_transaction_id):
        """
        Sets the fax_transaction_id of this ChargebackDispute.
        Fax transaction id

        :param fax_transaction_id: The fax_transaction_id of this ChargebackDispute.
        :type: int
        """

        self._fax_transaction_id = fax_transaction_id

    @property
    def icsid(self):
        """
        Gets the icsid of this ChargebackDispute.
        icsid

        :return: The icsid of this ChargebackDispute.
        :rtype: str
        """
        return self._icsid

    @icsid.setter
    def icsid(self, icsid):
        """
        Sets the icsid of this ChargebackDispute.
        icsid

        :param icsid: The icsid of this ChargebackDispute.
        :type: str
        """

        if not icsid:
            raise ValueError("Invalid value for `icsid`, must not be `None`")
        if len(icsid) > 50:
            raise ValueError("Invalid value for `icsid`, length must be less than `50`")

        self._icsid = icsid

    @property
    def merchant_account_profile_oid(self):
        """
        Gets the merchant_account_profile_oid of this ChargebackDispute.
        Merchant account profile oid

        :return: The merchant_account_profile_oid of this ChargebackDispute.
        :rtype: int
        """
        return self._merchant_account_profile_oid

    @merchant_account_profile_oid.setter
    def merchant_account_profile_oid(self, merchant_account_profile_oid):
        """
        Sets the merchant_account_profile_oid of this ChargebackDispute.
        Merchant account profile oid

        :param merchant_account_profile_oid: The merchant_account_profile_oid of this ChargebackDispute.
        :type: int
        """

        self._merchant_account_profile_oid = merchant_account_profile_oid

    @property
    def order(self):
        """
        Gets the order of this ChargebackDispute.


        :return: The order of this ChargebackDispute.
        :rtype: Order
        """
        return self._order

    @order.setter
    def order(self, order):
        """
        Sets the order of this ChargebackDispute.


        :param order: The order of this ChargebackDispute.
        :type: Order
        """

        self._order = order

    @property
    def order_id(self):
        """
        Gets the order_id of this ChargebackDispute.
        Order Id

        :return: The order_id of this ChargebackDispute.
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """
        Sets the order_id of this ChargebackDispute.
        Order Id

        :param order_id: The order_id of this ChargebackDispute.
        :type: str
        """

        if not order_id:
            raise ValueError("Invalid value for `order_id`, must not be `None`")
        if len(order_id) > 30:
            raise ValueError("Invalid value for `order_id`, length must be less than `30`")

        self._order_id = order_id

    @property
    def partial_card_number(self):
        """
        Gets the partial_card_number of this ChargebackDispute.
        Partial card number

        :return: The partial_card_number of this ChargebackDispute.
        :rtype: str
        """
        return self._partial_card_number

    @partial_card_number.setter
    def partial_card_number(self, partial_card_number):
        """
        Sets the partial_card_number of this ChargebackDispute.
        Partial card number

        :param partial_card_number: The partial_card_number of this ChargebackDispute.
        :type: str
        """

        if not partial_card_number:
            raise ValueError("Invalid value for `partial_card_number`, must not be `None`")
        if len(partial_card_number) > 20:
            raise ValueError("Invalid value for `partial_card_number`, length must be less than `20`")

        self._partial_card_number = partial_card_number

    @property
    def pdf_file_oid(self):
        """
        Gets the pdf_file_oid of this ChargebackDispute.
        PDF file oid

        :return: The pdf_file_oid of this ChargebackDispute.
        :rtype: str
        """
        return self._pdf_file_oid

    @pdf_file_oid.setter
    def pdf_file_oid(self, pdf_file_oid):
        """
        Sets the pdf_file_oid of this ChargebackDispute.
        PDF file oid

        :param pdf_file_oid: The pdf_file_oid of this ChargebackDispute.
        :type: str
        """

        if not pdf_file_oid:
            raise ValueError("Invalid value for `pdf_file_oid`, must not be `None`")
        if len(pdf_file_oid) > 32:
            raise ValueError("Invalid value for `pdf_file_oid`, length must be less than `32`")

        self._pdf_file_oid = pdf_file_oid

    @property
    def reason_code(self):
        """
        Gets the reason_code of this ChargebackDispute.
        Reason code

        :return: The reason_code of this ChargebackDispute.
        :rtype: str
        """
        return self._reason_code

    @reason_code.setter
    def reason_code(self, reason_code):
        """
        Sets the reason_code of this ChargebackDispute.
        Reason code

        :param reason_code: The reason_code of this ChargebackDispute.
        :type: str
        """

        if not reason_code:
            raise ValueError("Invalid value for `reason_code`, must not be `None`")
        if len(reason_code) > 70:
            raise ValueError("Invalid value for `reason_code`, length must be less than `70`")

        self._reason_code = reason_code

    @property
    def status(self):
        """
        Gets the status of this ChargebackDispute.
        Status

        :return: The status of this ChargebackDispute.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this ChargebackDispute.
        Status

        :param status: The status of this ChargebackDispute.
        :type: str
        """

        if not status:
            raise ValueError("Invalid value for `status`, must not be `None`")
        if len(status) > 20:
            raise ValueError("Invalid value for `status`, length must be less than `20`")

        self._status = status

    @property
    def website_url(self):
        """
        Gets the website_url of this ChargebackDispute.
        Website URL

        :return: The website_url of this ChargebackDispute.
        :rtype: str
        """
        return self._website_url

    @website_url.setter
    def website_url(self, website_url):
        """
        Sets the website_url of this ChargebackDispute.
        Website URL

        :param website_url: The website_url of this ChargebackDispute.
        :type: str
        """

        if not website_url:
            raise ValueError("Invalid value for `website_url`, must not be `None`")
        if len(website_url) > 250:
            raise ValueError("Invalid value for `website_url`, length must be less than `250`")

        self._website_url = website_url

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
