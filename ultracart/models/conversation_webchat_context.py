# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConversationWebchatContext(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auto_orders': 'list[AutoOrder]',
        'cart': 'Cart',
        'current_url': 'str',
        'orders': 'list[Order]',
        'page_view': 'list[HitPageView]',
        'session_start': 'HitSessionStart',
        'session_start_dts': 'str',
        'session_utm': 'HitSessionUtm'
    }

    attribute_map = {
        'auto_orders': 'auto_orders',
        'cart': 'cart',
        'current_url': 'current_url',
        'orders': 'orders',
        'page_view': 'page_view',
        'session_start': 'session_start',
        'session_start_dts': 'session_start_dts',
        'session_utm': 'session_utm'
    }

    def __init__(self, auto_orders=None, cart=None, current_url=None, orders=None, page_view=None, session_start=None, session_start_dts=None, session_utm=None):  # noqa: E501
        """ConversationWebchatContext - a model defined in Swagger"""  # noqa: E501

        self._auto_orders = None
        self._cart = None
        self._current_url = None
        self._orders = None
        self._page_view = None
        self._session_start = None
        self._session_start_dts = None
        self._session_utm = None
        self.discriminator = None

        if auto_orders is not None:
            self.auto_orders = auto_orders
        if cart is not None:
            self.cart = cart
        if current_url is not None:
            self.current_url = current_url
        if orders is not None:
            self.orders = orders
        if page_view is not None:
            self.page_view = page_view
        if session_start is not None:
            self.session_start = session_start
        if session_start_dts is not None:
            self.session_start_dts = session_start_dts
        if session_utm is not None:
            self.session_utm = session_utm

    @property
    def auto_orders(self):
        """Gets the auto_orders of this ConversationWebchatContext.  # noqa: E501


        :return: The auto_orders of this ConversationWebchatContext.  # noqa: E501
        :rtype: list[AutoOrder]
        """
        return self._auto_orders

    @auto_orders.setter
    def auto_orders(self, auto_orders):
        """Sets the auto_orders of this ConversationWebchatContext.


        :param auto_orders: The auto_orders of this ConversationWebchatContext.  # noqa: E501
        :type: list[AutoOrder]
        """

        self._auto_orders = auto_orders

    @property
    def cart(self):
        """Gets the cart of this ConversationWebchatContext.  # noqa: E501


        :return: The cart of this ConversationWebchatContext.  # noqa: E501
        :rtype: Cart
        """
        return self._cart

    @cart.setter
    def cart(self, cart):
        """Sets the cart of this ConversationWebchatContext.


        :param cart: The cart of this ConversationWebchatContext.  # noqa: E501
        :type: Cart
        """

        self._cart = cart

    @property
    def current_url(self):
        """Gets the current_url of this ConversationWebchatContext.  # noqa: E501


        :return: The current_url of this ConversationWebchatContext.  # noqa: E501
        :rtype: str
        """
        return self._current_url

    @current_url.setter
    def current_url(self, current_url):
        """Sets the current_url of this ConversationWebchatContext.


        :param current_url: The current_url of this ConversationWebchatContext.  # noqa: E501
        :type: str
        """

        self._current_url = current_url

    @property
    def orders(self):
        """Gets the orders of this ConversationWebchatContext.  # noqa: E501


        :return: The orders of this ConversationWebchatContext.  # noqa: E501
        :rtype: list[Order]
        """
        return self._orders

    @orders.setter
    def orders(self, orders):
        """Sets the orders of this ConversationWebchatContext.


        :param orders: The orders of this ConversationWebchatContext.  # noqa: E501
        :type: list[Order]
        """

        self._orders = orders

    @property
    def page_view(self):
        """Gets the page_view of this ConversationWebchatContext.  # noqa: E501


        :return: The page_view of this ConversationWebchatContext.  # noqa: E501
        :rtype: list[HitPageView]
        """
        return self._page_view

    @page_view.setter
    def page_view(self, page_view):
        """Sets the page_view of this ConversationWebchatContext.


        :param page_view: The page_view of this ConversationWebchatContext.  # noqa: E501
        :type: list[HitPageView]
        """

        self._page_view = page_view

    @property
    def session_start(self):
        """Gets the session_start of this ConversationWebchatContext.  # noqa: E501


        :return: The session_start of this ConversationWebchatContext.  # noqa: E501
        :rtype: HitSessionStart
        """
        return self._session_start

    @session_start.setter
    def session_start(self, session_start):
        """Sets the session_start of this ConversationWebchatContext.


        :param session_start: The session_start of this ConversationWebchatContext.  # noqa: E501
        :type: HitSessionStart
        """

        self._session_start = session_start

    @property
    def session_start_dts(self):
        """Gets the session_start_dts of this ConversationWebchatContext.  # noqa: E501

        Date/time that the session was started (if known)  # noqa: E501

        :return: The session_start_dts of this ConversationWebchatContext.  # noqa: E501
        :rtype: str
        """
        return self._session_start_dts

    @session_start_dts.setter
    def session_start_dts(self, session_start_dts):
        """Sets the session_start_dts of this ConversationWebchatContext.

        Date/time that the session was started (if known)  # noqa: E501

        :param session_start_dts: The session_start_dts of this ConversationWebchatContext.  # noqa: E501
        :type: str
        """

        self._session_start_dts = session_start_dts

    @property
    def session_utm(self):
        """Gets the session_utm of this ConversationWebchatContext.  # noqa: E501


        :return: The session_utm of this ConversationWebchatContext.  # noqa: E501
        :rtype: HitSessionUtm
        """
        return self._session_utm

    @session_utm.setter
    def session_utm(self, session_utm):
        """Sets the session_utm of this ConversationWebchatContext.


        :param session_utm: The session_utm of this ConversationWebchatContext.  # noqa: E501
        :type: HitSessionUtm
        """

        self._session_utm = session_utm

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConversationWebchatContext, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConversationWebchatContext):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
