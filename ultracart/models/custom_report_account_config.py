# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CustomReportAccountConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ai_budget': 'float',
        'ai_usage': 'float',
        'merchant_id': 'str',
        'novice_sql_comments': 'bool',
        'opt_in': 'bool',
        'opt_in_by_user': 'str',
        'opt_in_date': 'str',
        'sql_budget': 'float',
        'sql_usage': 'float'
    }

    attribute_map = {
        'ai_budget': 'ai_budget',
        'ai_usage': 'ai_usage',
        'merchant_id': 'merchant_id',
        'novice_sql_comments': 'novice_sql_comments',
        'opt_in': 'opt_in',
        'opt_in_by_user': 'opt_in_by_user',
        'opt_in_date': 'opt_in_date',
        'sql_budget': 'sql_budget',
        'sql_usage': 'sql_usage'
    }

    def __init__(self, ai_budget=None, ai_usage=None, merchant_id=None, novice_sql_comments=None, opt_in=None, opt_in_by_user=None, opt_in_date=None, sql_budget=None, sql_usage=None):  # noqa: E501
        """CustomReportAccountConfig - a model defined in Swagger"""  # noqa: E501

        self._ai_budget = None
        self._ai_usage = None
        self._merchant_id = None
        self._novice_sql_comments = None
        self._opt_in = None
        self._opt_in_by_user = None
        self._opt_in_date = None
        self._sql_budget = None
        self._sql_usage = None
        self.discriminator = None

        if ai_budget is not None:
            self.ai_budget = ai_budget
        if ai_usage is not None:
            self.ai_usage = ai_usage
        if merchant_id is not None:
            self.merchant_id = merchant_id
        if novice_sql_comments is not None:
            self.novice_sql_comments = novice_sql_comments
        if opt_in is not None:
            self.opt_in = opt_in
        if opt_in_by_user is not None:
            self.opt_in_by_user = opt_in_by_user
        if opt_in_date is not None:
            self.opt_in_date = opt_in_date
        if sql_budget is not None:
            self.sql_budget = sql_budget
        if sql_usage is not None:
            self.sql_usage = sql_usage

    @property
    def ai_budget(self):
        """Gets the ai_budget of this CustomReportAccountConfig.  # noqa: E501


        :return: The ai_budget of this CustomReportAccountConfig.  # noqa: E501
        :rtype: float
        """
        return self._ai_budget

    @ai_budget.setter
    def ai_budget(self, ai_budget):
        """Sets the ai_budget of this CustomReportAccountConfig.


        :param ai_budget: The ai_budget of this CustomReportAccountConfig.  # noqa: E501
        :type: float
        """

        self._ai_budget = ai_budget

    @property
    def ai_usage(self):
        """Gets the ai_usage of this CustomReportAccountConfig.  # noqa: E501

        Current AI usage creating reports  # noqa: E501

        :return: The ai_usage of this CustomReportAccountConfig.  # noqa: E501
        :rtype: float
        """
        return self._ai_usage

    @ai_usage.setter
    def ai_usage(self, ai_usage):
        """Sets the ai_usage of this CustomReportAccountConfig.

        Current AI usage creating reports  # noqa: E501

        :param ai_usage: The ai_usage of this CustomReportAccountConfig.  # noqa: E501
        :type: float
        """

        self._ai_usage = ai_usage

    @property
    def merchant_id(self):
        """Gets the merchant_id of this CustomReportAccountConfig.  # noqa: E501

        Current BigQuery SQL usage running reports  # noqa: E501

        :return: The merchant_id of this CustomReportAccountConfig.  # noqa: E501
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this CustomReportAccountConfig.

        Current BigQuery SQL usage running reports  # noqa: E501

        :param merchant_id: The merchant_id of this CustomReportAccountConfig.  # noqa: E501
        :type: str
        """

        self._merchant_id = merchant_id

    @property
    def novice_sql_comments(self):
        """Gets the novice_sql_comments of this CustomReportAccountConfig.  # noqa: E501


        :return: The novice_sql_comments of this CustomReportAccountConfig.  # noqa: E501
        :rtype: bool
        """
        return self._novice_sql_comments

    @novice_sql_comments.setter
    def novice_sql_comments(self, novice_sql_comments):
        """Sets the novice_sql_comments of this CustomReportAccountConfig.


        :param novice_sql_comments: The novice_sql_comments of this CustomReportAccountConfig.  # noqa: E501
        :type: bool
        """

        self._novice_sql_comments = novice_sql_comments

    @property
    def opt_in(self):
        """Gets the opt_in of this CustomReportAccountConfig.  # noqa: E501

        True if they have opted into custom reports  # noqa: E501

        :return: The opt_in of this CustomReportAccountConfig.  # noqa: E501
        :rtype: bool
        """
        return self._opt_in

    @opt_in.setter
    def opt_in(self, opt_in):
        """Sets the opt_in of this CustomReportAccountConfig.

        True if they have opted into custom reports  # noqa: E501

        :param opt_in: The opt_in of this CustomReportAccountConfig.  # noqa: E501
        :type: bool
        """

        self._opt_in = opt_in

    @property
    def opt_in_by_user(self):
        """Gets the opt_in_by_user of this CustomReportAccountConfig.  # noqa: E501

        User that opted into custom reporting  # noqa: E501

        :return: The opt_in_by_user of this CustomReportAccountConfig.  # noqa: E501
        :rtype: str
        """
        return self._opt_in_by_user

    @opt_in_by_user.setter
    def opt_in_by_user(self, opt_in_by_user):
        """Sets the opt_in_by_user of this CustomReportAccountConfig.

        User that opted into custom reporting  # noqa: E501

        :param opt_in_by_user: The opt_in_by_user of this CustomReportAccountConfig.  # noqa: E501
        :type: str
        """

        self._opt_in_by_user = opt_in_by_user

    @property
    def opt_in_date(self):
        """Gets the opt_in_date of this CustomReportAccountConfig.  # noqa: E501

        Date/time that custom reporting was opted in to  # noqa: E501

        :return: The opt_in_date of this CustomReportAccountConfig.  # noqa: E501
        :rtype: str
        """
        return self._opt_in_date

    @opt_in_date.setter
    def opt_in_date(self, opt_in_date):
        """Sets the opt_in_date of this CustomReportAccountConfig.

        Date/time that custom reporting was opted in to  # noqa: E501

        :param opt_in_date: The opt_in_date of this CustomReportAccountConfig.  # noqa: E501
        :type: str
        """

        self._opt_in_date = opt_in_date

    @property
    def sql_budget(self):
        """Gets the sql_budget of this CustomReportAccountConfig.  # noqa: E501


        :return: The sql_budget of this CustomReportAccountConfig.  # noqa: E501
        :rtype: float
        """
        return self._sql_budget

    @sql_budget.setter
    def sql_budget(self, sql_budget):
        """Sets the sql_budget of this CustomReportAccountConfig.


        :param sql_budget: The sql_budget of this CustomReportAccountConfig.  # noqa: E501
        :type: float
        """

        self._sql_budget = sql_budget

    @property
    def sql_usage(self):
        """Gets the sql_usage of this CustomReportAccountConfig.  # noqa: E501


        :return: The sql_usage of this CustomReportAccountConfig.  # noqa: E501
        :rtype: float
        """
        return self._sql_usage

    @sql_usage.setter
    def sql_usage(self, sql_usage):
        """Sets the sql_usage of this CustomReportAccountConfig.


        :param sql_usage: The sql_usage of this CustomReportAccountConfig.  # noqa: E501
        :type: float
        """

        self._sql_usage = sql_usage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomReportAccountConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomReportAccountConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
