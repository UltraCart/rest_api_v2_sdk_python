# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class EmailFlowBackPopulateRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'order_days_old': 'int',
        'relative_to_event': 'bool'
    }

    attribute_map = {
        'order_days_old': 'order_days_old',
        'relative_to_event': 'relative_to_event'
    }

    def __init__(self, order_days_old=None, relative_to_event=None):
        """
        EmailFlowBackPopulateRequest - a model defined in Swagger
        """

        self._order_days_old = None
        self._relative_to_event = None
        self.discriminator = None

        if order_days_old is not None:
          self.order_days_old = order_days_old
        if relative_to_event is not None:
          self.relative_to_event = relative_to_event

    @property
    def order_days_old(self):
        """
        Gets the order_days_old of this EmailFlowBackPopulateRequest.
        The age of the orders that should be considered for order triggers.

        :return: The order_days_old of this EmailFlowBackPopulateRequest.
        :rtype: int
        """
        return self._order_days_old

    @order_days_old.setter
    def order_days_old(self, order_days_old):
        """
        Sets the order_days_old of this EmailFlowBackPopulateRequest.
        The age of the orders that should be considered for order triggers.

        :param order_days_old: The order_days_old of this EmailFlowBackPopulateRequest.
        :type: int
        """

        self._order_days_old = order_days_old

    @property
    def relative_to_event(self):
        """
        Gets the relative_to_event of this EmailFlowBackPopulateRequest.
        True if the age of the event should be considered when reducing the initial flow wait step

        :return: The relative_to_event of this EmailFlowBackPopulateRequest.
        :rtype: bool
        """
        return self._relative_to_event

    @relative_to_event.setter
    def relative_to_event(self, relative_to_event):
        """
        Sets the relative_to_event of this EmailFlowBackPopulateRequest.
        True if the age of the event should be considered when reducing the initial flow wait step

        :param relative_to_event: The relative_to_event of this EmailFlowBackPopulateRequest.
        :type: bool
        """

        self._relative_to_event = relative_to_event

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, EmailFlowBackPopulateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
