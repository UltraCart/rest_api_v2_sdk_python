# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PaymentsConfigurationCreditCard(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'accept_credit_cards': 'bool',
        'billed_by': 'str',
        'charge_during_checkout': 'bool',
        'collect_cvv2': 'bool',
        'configured_gateways_details': 'str',
        'failed_attempts': 'str',
        'hide_connect_single_gateway': 'bool',
        'send_customer_billing_update_on_decline': 'bool'
    }

    attribute_map = {
        'accept_credit_cards': 'acceptCreditCards',
        'billed_by': 'billedBy',
        'charge_during_checkout': 'chargeDuringCheckout',
        'collect_cvv2': 'collectCvv2',
        'configured_gateways_details': 'configuredGatewaysDetails',
        'failed_attempts': 'failedAttempts',
        'hide_connect_single_gateway': 'hideConnectSingleGateway',
        'send_customer_billing_update_on_decline': 'sendCustomerBillingUpdateOnDecline'
    }

    def __init__(self, accept_credit_cards=None, billed_by=None, charge_during_checkout=None, collect_cvv2=None, configured_gateways_details=None, failed_attempts=None, hide_connect_single_gateway=None, send_customer_billing_update_on_decline=None):  # noqa: E501
        """PaymentsConfigurationCreditCard - a model defined in Swagger"""  # noqa: E501

        self._accept_credit_cards = None
        self._billed_by = None
        self._charge_during_checkout = None
        self._collect_cvv2 = None
        self._configured_gateways_details = None
        self._failed_attempts = None
        self._hide_connect_single_gateway = None
        self._send_customer_billing_update_on_decline = None
        self.discriminator = None

        if accept_credit_cards is not None:
            self.accept_credit_cards = accept_credit_cards
        if billed_by is not None:
            self.billed_by = billed_by
        if charge_during_checkout is not None:
            self.charge_during_checkout = charge_during_checkout
        if collect_cvv2 is not None:
            self.collect_cvv2 = collect_cvv2
        if configured_gateways_details is not None:
            self.configured_gateways_details = configured_gateways_details
        if failed_attempts is not None:
            self.failed_attempts = failed_attempts
        if hide_connect_single_gateway is not None:
            self.hide_connect_single_gateway = hide_connect_single_gateway
        if send_customer_billing_update_on_decline is not None:
            self.send_customer_billing_update_on_decline = send_customer_billing_update_on_decline

    @property
    def accept_credit_cards(self):
        """Gets the accept_credit_cards of this PaymentsConfigurationCreditCard.  # noqa: E501


        :return: The accept_credit_cards of this PaymentsConfigurationCreditCard.  # noqa: E501
        :rtype: bool
        """
        return self._accept_credit_cards

    @accept_credit_cards.setter
    def accept_credit_cards(self, accept_credit_cards):
        """Sets the accept_credit_cards of this PaymentsConfigurationCreditCard.


        :param accept_credit_cards: The accept_credit_cards of this PaymentsConfigurationCreditCard.  # noqa: E501
        :type: bool
        """

        self._accept_credit_cards = accept_credit_cards

    @property
    def billed_by(self):
        """Gets the billed_by of this PaymentsConfigurationCreditCard.  # noqa: E501


        :return: The billed_by of this PaymentsConfigurationCreditCard.  # noqa: E501
        :rtype: str
        """
        return self._billed_by

    @billed_by.setter
    def billed_by(self, billed_by):
        """Sets the billed_by of this PaymentsConfigurationCreditCard.


        :param billed_by: The billed_by of this PaymentsConfigurationCreditCard.  # noqa: E501
        :type: str
        """

        self._billed_by = billed_by

    @property
    def charge_during_checkout(self):
        """Gets the charge_during_checkout of this PaymentsConfigurationCreditCard.  # noqa: E501


        :return: The charge_during_checkout of this PaymentsConfigurationCreditCard.  # noqa: E501
        :rtype: bool
        """
        return self._charge_during_checkout

    @charge_during_checkout.setter
    def charge_during_checkout(self, charge_during_checkout):
        """Sets the charge_during_checkout of this PaymentsConfigurationCreditCard.


        :param charge_during_checkout: The charge_during_checkout of this PaymentsConfigurationCreditCard.  # noqa: E501
        :type: bool
        """

        self._charge_during_checkout = charge_during_checkout

    @property
    def collect_cvv2(self):
        """Gets the collect_cvv2 of this PaymentsConfigurationCreditCard.  # noqa: E501


        :return: The collect_cvv2 of this PaymentsConfigurationCreditCard.  # noqa: E501
        :rtype: bool
        """
        return self._collect_cvv2

    @collect_cvv2.setter
    def collect_cvv2(self, collect_cvv2):
        """Sets the collect_cvv2 of this PaymentsConfigurationCreditCard.


        :param collect_cvv2: The collect_cvv2 of this PaymentsConfigurationCreditCard.  # noqa: E501
        :type: bool
        """

        self._collect_cvv2 = collect_cvv2

    @property
    def configured_gateways_details(self):
        """Gets the configured_gateways_details of this PaymentsConfigurationCreditCard.  # noqa: E501


        :return: The configured_gateways_details of this PaymentsConfigurationCreditCard.  # noqa: E501
        :rtype: str
        """
        return self._configured_gateways_details

    @configured_gateways_details.setter
    def configured_gateways_details(self, configured_gateways_details):
        """Sets the configured_gateways_details of this PaymentsConfigurationCreditCard.


        :param configured_gateways_details: The configured_gateways_details of this PaymentsConfigurationCreditCard.  # noqa: E501
        :type: str
        """

        self._configured_gateways_details = configured_gateways_details

    @property
    def failed_attempts(self):
        """Gets the failed_attempts of this PaymentsConfigurationCreditCard.  # noqa: E501


        :return: The failed_attempts of this PaymentsConfigurationCreditCard.  # noqa: E501
        :rtype: str
        """
        return self._failed_attempts

    @failed_attempts.setter
    def failed_attempts(self, failed_attempts):
        """Sets the failed_attempts of this PaymentsConfigurationCreditCard.


        :param failed_attempts: The failed_attempts of this PaymentsConfigurationCreditCard.  # noqa: E501
        :type: str
        """

        self._failed_attempts = failed_attempts

    @property
    def hide_connect_single_gateway(self):
        """Gets the hide_connect_single_gateway of this PaymentsConfigurationCreditCard.  # noqa: E501


        :return: The hide_connect_single_gateway of this PaymentsConfigurationCreditCard.  # noqa: E501
        :rtype: bool
        """
        return self._hide_connect_single_gateway

    @hide_connect_single_gateway.setter
    def hide_connect_single_gateway(self, hide_connect_single_gateway):
        """Sets the hide_connect_single_gateway of this PaymentsConfigurationCreditCard.


        :param hide_connect_single_gateway: The hide_connect_single_gateway of this PaymentsConfigurationCreditCard.  # noqa: E501
        :type: bool
        """

        self._hide_connect_single_gateway = hide_connect_single_gateway

    @property
    def send_customer_billing_update_on_decline(self):
        """Gets the send_customer_billing_update_on_decline of this PaymentsConfigurationCreditCard.  # noqa: E501


        :return: The send_customer_billing_update_on_decline of this PaymentsConfigurationCreditCard.  # noqa: E501
        :rtype: bool
        """
        return self._send_customer_billing_update_on_decline

    @send_customer_billing_update_on_decline.setter
    def send_customer_billing_update_on_decline(self, send_customer_billing_update_on_decline):
        """Sets the send_customer_billing_update_on_decline of this PaymentsConfigurationCreditCard.


        :param send_customer_billing_update_on_decline: The send_customer_billing_update_on_decline of this PaymentsConfigurationCreditCard.  # noqa: E501
        :type: bool
        """

        self._send_customer_billing_update_on_decline = send_customer_billing_update_on_decline

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaymentsConfigurationCreditCard, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentsConfigurationCreditCard):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
