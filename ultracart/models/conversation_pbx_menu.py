# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConversationPbxMenu(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allow_direct_extensions': 'bool',
        'conversation_pbx_menu_uuid': 'str',
        'default_action': 'str',
        'default_action_target': 'str',
        'mappings': 'list[ConversationPbxMenuMapping]',
        'merchant_id': 'str',
        'name': 'str',
        'play_audio_uuid': 'str',
        'say': 'str',
        'say_voice': 'str',
        'timeout': 'int'
    }

    attribute_map = {
        'allow_direct_extensions': 'allow_direct_extensions',
        'conversation_pbx_menu_uuid': 'conversation_pbx_menu_uuid',
        'default_action': 'default_action',
        'default_action_target': 'default_action_target',
        'mappings': 'mappings',
        'merchant_id': 'merchant_id',
        'name': 'name',
        'play_audio_uuid': 'play_audio_uuid',
        'say': 'say',
        'say_voice': 'say_voice',
        'timeout': 'timeout'
    }

    def __init__(self, allow_direct_extensions=None, conversation_pbx_menu_uuid=None, default_action=None, default_action_target=None, mappings=None, merchant_id=None, name=None, play_audio_uuid=None, say=None, say_voice=None, timeout=None):  # noqa: E501
        """ConversationPbxMenu - a model defined in Swagger"""  # noqa: E501

        self._allow_direct_extensions = None
        self._conversation_pbx_menu_uuid = None
        self._default_action = None
        self._default_action_target = None
        self._mappings = None
        self._merchant_id = None
        self._name = None
        self._play_audio_uuid = None
        self._say = None
        self._say_voice = None
        self._timeout = None
        self.discriminator = None

        if allow_direct_extensions is not None:
            self.allow_direct_extensions = allow_direct_extensions
        if conversation_pbx_menu_uuid is not None:
            self.conversation_pbx_menu_uuid = conversation_pbx_menu_uuid
        if default_action is not None:
            self.default_action = default_action
        if default_action_target is not None:
            self.default_action_target = default_action_target
        if mappings is not None:
            self.mappings = mappings
        if merchant_id is not None:
            self.merchant_id = merchant_id
        if name is not None:
            self.name = name
        if play_audio_uuid is not None:
            self.play_audio_uuid = play_audio_uuid
        if say is not None:
            self.say = say
        if say_voice is not None:
            self.say_voice = say_voice
        if timeout is not None:
            self.timeout = timeout

    @property
    def allow_direct_extensions(self):
        """Gets the allow_direct_extensions of this ConversationPbxMenu.  # noqa: E501

        If true, the customer is allowed to input direct extensions within this menu  # noqa: E501

        :return: The allow_direct_extensions of this ConversationPbxMenu.  # noqa: E501
        :rtype: bool
        """
        return self._allow_direct_extensions

    @allow_direct_extensions.setter
    def allow_direct_extensions(self, allow_direct_extensions):
        """Sets the allow_direct_extensions of this ConversationPbxMenu.

        If true, the customer is allowed to input direct extensions within this menu  # noqa: E501

        :param allow_direct_extensions: The allow_direct_extensions of this ConversationPbxMenu.  # noqa: E501
        :type: bool
        """

        self._allow_direct_extensions = allow_direct_extensions

    @property
    def conversation_pbx_menu_uuid(self):
        """Gets the conversation_pbx_menu_uuid of this ConversationPbxMenu.  # noqa: E501

        Conversation Pbx Menu UUID  # noqa: E501

        :return: The conversation_pbx_menu_uuid of this ConversationPbxMenu.  # noqa: E501
        :rtype: str
        """
        return self._conversation_pbx_menu_uuid

    @conversation_pbx_menu_uuid.setter
    def conversation_pbx_menu_uuid(self, conversation_pbx_menu_uuid):
        """Sets the conversation_pbx_menu_uuid of this ConversationPbxMenu.

        Conversation Pbx Menu UUID  # noqa: E501

        :param conversation_pbx_menu_uuid: The conversation_pbx_menu_uuid of this ConversationPbxMenu.  # noqa: E501
        :type: str
        """
        if conversation_pbx_menu_uuid is not None and len(conversation_pbx_menu_uuid) > 50:
            raise ValueError("Invalid value for `conversation_pbx_menu_uuid`, length must be less than or equal to `50`")  # noqa: E501

        self._conversation_pbx_menu_uuid = conversation_pbx_menu_uuid

    @property
    def default_action(self):
        """Gets the default_action of this ConversationPbxMenu.  # noqa: E501

        The default action for this menu  # noqa: E501

        :return: The default_action of this ConversationPbxMenu.  # noqa: E501
        :rtype: str
        """
        return self._default_action

    @default_action.setter
    def default_action(self, default_action):
        """Sets the default_action of this ConversationPbxMenu.

        The default action for this menu  # noqa: E501

        :param default_action: The default_action of this ConversationPbxMenu.  # noqa: E501
        :type: str
        """
        if default_action is not None and len(default_action) > 30:
            raise ValueError("Invalid value for `default_action`, length must be less than or equal to `30`")  # noqa: E501

        self._default_action = default_action

    @property
    def default_action_target(self):
        """Gets the default_action_target of this ConversationPbxMenu.  # noqa: E501

        The default action target for this menu  # noqa: E501

        :return: The default_action_target of this ConversationPbxMenu.  # noqa: E501
        :rtype: str
        """
        return self._default_action_target

    @default_action_target.setter
    def default_action_target(self, default_action_target):
        """Sets the default_action_target of this ConversationPbxMenu.

        The default action target for this menu  # noqa: E501

        :param default_action_target: The default_action_target of this ConversationPbxMenu.  # noqa: E501
        :type: str
        """
        if default_action_target is not None and len(default_action_target) > 50:
            raise ValueError("Invalid value for `default_action_target`, length must be less than or equal to `50`")  # noqa: E501

        self._default_action_target = default_action_target

    @property
    def mappings(self):
        """Gets the mappings of this ConversationPbxMenu.  # noqa: E501

        Action mappings for this menu  # noqa: E501

        :return: The mappings of this ConversationPbxMenu.  # noqa: E501
        :rtype: list[ConversationPbxMenuMapping]
        """
        return self._mappings

    @mappings.setter
    def mappings(self, mappings):
        """Sets the mappings of this ConversationPbxMenu.

        Action mappings for this menu  # noqa: E501

        :param mappings: The mappings of this ConversationPbxMenu.  # noqa: E501
        :type: list[ConversationPbxMenuMapping]
        """

        self._mappings = mappings

    @property
    def merchant_id(self):
        """Gets the merchant_id of this ConversationPbxMenu.  # noqa: E501

        Merchant Id  # noqa: E501

        :return: The merchant_id of this ConversationPbxMenu.  # noqa: E501
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this ConversationPbxMenu.

        Merchant Id  # noqa: E501

        :param merchant_id: The merchant_id of this ConversationPbxMenu.  # noqa: E501
        :type: str
        """
        if merchant_id is not None and len(merchant_id) > 5:
            raise ValueError("Invalid value for `merchant_id`, length must be less than or equal to `5`")  # noqa: E501

        self._merchant_id = merchant_id

    @property
    def name(self):
        """Gets the name of this ConversationPbxMenu.  # noqa: E501

        Menu name  # noqa: E501

        :return: The name of this ConversationPbxMenu.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConversationPbxMenu.

        Menu name  # noqa: E501

        :param name: The name of this ConversationPbxMenu.  # noqa: E501
        :type: str
        """
        if name is not None and len(name) > 50:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `50`")  # noqa: E501

        self._name = name

    @property
    def play_audio_uuid(self):
        """Gets the play_audio_uuid of this ConversationPbxMenu.  # noqa: E501

        An optional audio clip that plays when a customer enters this menu  # noqa: E501

        :return: The play_audio_uuid of this ConversationPbxMenu.  # noqa: E501
        :rtype: str
        """
        return self._play_audio_uuid

    @play_audio_uuid.setter
    def play_audio_uuid(self, play_audio_uuid):
        """Sets the play_audio_uuid of this ConversationPbxMenu.

        An optional audio clip that plays when a customer enters this menu  # noqa: E501

        :param play_audio_uuid: The play_audio_uuid of this ConversationPbxMenu.  # noqa: E501
        :type: str
        """
        if play_audio_uuid is not None and len(play_audio_uuid) > 50:
            raise ValueError("Invalid value for `play_audio_uuid`, length must be less than or equal to `50`")  # noqa: E501

        self._play_audio_uuid = play_audio_uuid

    @property
    def say(self):
        """Gets the say of this ConversationPbxMenu.  # noqa: E501

        An optional saying that plays when a customer enters this menu  # noqa: E501

        :return: The say of this ConversationPbxMenu.  # noqa: E501
        :rtype: str
        """
        return self._say

    @say.setter
    def say(self, say):
        """Sets the say of this ConversationPbxMenu.

        An optional saying that plays when a customer enters this menu  # noqa: E501

        :param say: The say of this ConversationPbxMenu.  # noqa: E501
        :type: str
        """

        self._say = say

    @property
    def say_voice(self):
        """Gets the say_voice of this ConversationPbxMenu.  # noqa: E501

        say voice  # noqa: E501

        :return: The say_voice of this ConversationPbxMenu.  # noqa: E501
        :rtype: str
        """
        return self._say_voice

    @say_voice.setter
    def say_voice(self, say_voice):
        """Sets the say_voice of this ConversationPbxMenu.

        say voice  # noqa: E501

        :param say_voice: The say_voice of this ConversationPbxMenu.  # noqa: E501
        :type: str
        """
        allowed_values = ["man", "woman"]  # noqa: E501
        if say_voice not in allowed_values:
            raise ValueError(
                "Invalid value for `say_voice` ({0}), must be one of {1}"  # noqa: E501
                .format(say_voice, allowed_values)
            )

        self._say_voice = say_voice

    @property
    def timeout(self):
        """Gets the timeout of this ConversationPbxMenu.  # noqa: E501

        The idle seconds before this menu times out  # noqa: E501

        :return: The timeout of this ConversationPbxMenu.  # noqa: E501
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this ConversationPbxMenu.

        The idle seconds before this menu times out  # noqa: E501

        :param timeout: The timeout of this ConversationPbxMenu.  # noqa: E501
        :type: int
        """

        self._timeout = timeout

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConversationPbxMenu, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConversationPbxMenu):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
