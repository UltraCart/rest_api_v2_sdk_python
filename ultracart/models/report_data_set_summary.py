# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ReportDataSetSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data_set_uuid': 'str',
        'error_message': 'str',
        'for_object_id': 'str',
        'for_object_type': 'str',
        'max_results': 'int',
        'schema': 'list[ReportDataSetSchema]',
        'user_data': 'str'
    }

    attribute_map = {
        'data_set_uuid': 'data_set_uuid',
        'error_message': 'error_message',
        'for_object_id': 'for_object_id',
        'for_object_type': 'for_object_type',
        'max_results': 'max_results',
        'schema': 'schema',
        'user_data': 'user_data'
    }

    def __init__(self, data_set_uuid=None, error_message=None, for_object_id=None, for_object_type=None, max_results=None, schema=None, user_data=None):  # noqa: E501
        """ReportDataSetSummary - a model defined in Swagger"""  # noqa: E501

        self._data_set_uuid = None
        self._error_message = None
        self._for_object_id = None
        self._for_object_type = None
        self._max_results = None
        self._schema = None
        self._user_data = None
        self.discriminator = None

        if data_set_uuid is not None:
            self.data_set_uuid = data_set_uuid
        if error_message is not None:
            self.error_message = error_message
        if for_object_id is not None:
            self.for_object_id = for_object_id
        if for_object_type is not None:
            self.for_object_type = for_object_type
        if max_results is not None:
            self.max_results = max_results
        if schema is not None:
            self.schema = schema
        if user_data is not None:
            self.user_data = user_data

    @property
    def data_set_uuid(self):
        """Gets the data_set_uuid of this ReportDataSetSummary.  # noqa: E501

        A unique identifier assigned to the data set that is returned.  # noqa: E501

        :return: The data_set_uuid of this ReportDataSetSummary.  # noqa: E501
        :rtype: str
        """
        return self._data_set_uuid

    @data_set_uuid.setter
    def data_set_uuid(self, data_set_uuid):
        """Sets the data_set_uuid of this ReportDataSetSummary.

        A unique identifier assigned to the data set that is returned.  # noqa: E501

        :param data_set_uuid: The data_set_uuid of this ReportDataSetSummary.  # noqa: E501
        :type: str
        """

        self._data_set_uuid = data_set_uuid

    @property
    def error_message(self):
        """Gets the error_message of this ReportDataSetSummary.  # noqa: E501

        Error message if the query failed.  # noqa: E501

        :return: The error_message of this ReportDataSetSummary.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this ReportDataSetSummary.

        Error message if the query failed.  # noqa: E501

        :param error_message: The error_message of this ReportDataSetSummary.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    @property
    def for_object_id(self):
        """Gets the for_object_id of this ReportDataSetSummary.  # noqa: E501

        An identifier that can be used to help match up the returned data set  # noqa: E501

        :return: The for_object_id of this ReportDataSetSummary.  # noqa: E501
        :rtype: str
        """
        return self._for_object_id

    @for_object_id.setter
    def for_object_id(self, for_object_id):
        """Sets the for_object_id of this ReportDataSetSummary.

        An identifier that can be used to help match up the returned data set  # noqa: E501

        :param for_object_id: The for_object_id of this ReportDataSetSummary.  # noqa: E501
        :type: str
        """

        self._for_object_id = for_object_id

    @property
    def for_object_type(self):
        """Gets the for_object_type of this ReportDataSetSummary.  # noqa: E501

        The type of object this data set is for  # noqa: E501

        :return: The for_object_type of this ReportDataSetSummary.  # noqa: E501
        :rtype: str
        """
        return self._for_object_type

    @for_object_type.setter
    def for_object_type(self, for_object_type):
        """Sets the for_object_type of this ReportDataSetSummary.

        The type of object this data set is for  # noqa: E501

        :param for_object_type: The for_object_type of this ReportDataSetSummary.  # noqa: E501
        :type: str
        """
        allowed_values = ["schema", "filter", "visualization"]  # noqa: E501
        if for_object_type not in allowed_values:
            raise ValueError(
                "Invalid value for `for_object_type` ({0}), must be one of {1}"  # noqa: E501
                .format(for_object_type, allowed_values)
            )

        self._for_object_type = for_object_type

    @property
    def max_results(self):
        """Gets the max_results of this ReportDataSetSummary.  # noqa: E501

        The total number of results  # noqa: E501

        :return: The max_results of this ReportDataSetSummary.  # noqa: E501
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ReportDataSetSummary.

        The total number of results  # noqa: E501

        :param max_results: The max_results of this ReportDataSetSummary.  # noqa: E501
        :type: int
        """

        self._max_results = max_results

    @property
    def schema(self):
        """Gets the schema of this ReportDataSetSummary.  # noqa: E501

        The schema associated with the data set.  # noqa: E501

        :return: The schema of this ReportDataSetSummary.  # noqa: E501
        :rtype: list[ReportDataSetSchema]
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """Sets the schema of this ReportDataSetSummary.

        The schema associated with the data set.  # noqa: E501

        :param schema: The schema of this ReportDataSetSummary.  # noqa: E501
        :type: list[ReportDataSetSchema]
        """

        self._schema = schema

    @property
    def user_data(self):
        """Gets the user_data of this ReportDataSetSummary.  # noqa: E501

        Any other data that needs to be returned with the response to help the UI  # noqa: E501

        :return: The user_data of this ReportDataSetSummary.  # noqa: E501
        :rtype: str
        """
        return self._user_data

    @user_data.setter
    def user_data(self, user_data):
        """Sets the user_data of this ReportDataSetSummary.

        Any other data that needs to be returned with the response to help the UI  # noqa: E501

        :param user_data: The user_data of this ReportDataSetSummary.  # noqa: E501
        :type: str
        """

        self._user_data = user_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReportDataSetSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportDataSetSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
