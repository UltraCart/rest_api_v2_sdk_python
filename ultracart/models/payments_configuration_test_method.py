# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PaymentsConfigurationTestMethod(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bank_account_number': 'str',
        'bank_routing_number': 'str',
        'credit_card_number': 'str',
        'credit_card_number_existing': 'str',
        'description': 'str',
        'payment_action': 'str',
        'payment_method': 'str',
        'payment_method_test_oid': 'int',
        'skip_affiliate_transaction': 'bool',
        'skip_conversion_pixels': 'bool',
        'skip_fraud_filter': 'bool'
    }

    attribute_map = {
        'bank_account_number': 'bank_account_number',
        'bank_routing_number': 'bank_routing_number',
        'credit_card_number': 'credit_card_number',
        'credit_card_number_existing': 'credit_card_number_existing',
        'description': 'description',
        'payment_action': 'payment_action',
        'payment_method': 'payment_method',
        'payment_method_test_oid': 'payment_method_test_oid',
        'skip_affiliate_transaction': 'skip_affiliate_transaction',
        'skip_conversion_pixels': 'skip_conversion_pixels',
        'skip_fraud_filter': 'skip_fraud_filter'
    }

    def __init__(self, bank_account_number=None, bank_routing_number=None, credit_card_number=None, credit_card_number_existing=None, description=None, payment_action=None, payment_method=None, payment_method_test_oid=None, skip_affiliate_transaction=None, skip_conversion_pixels=None, skip_fraud_filter=None):  # noqa: E501
        """PaymentsConfigurationTestMethod - a model defined in Swagger"""  # noqa: E501

        self._bank_account_number = None
        self._bank_routing_number = None
        self._credit_card_number = None
        self._credit_card_number_existing = None
        self._description = None
        self._payment_action = None
        self._payment_method = None
        self._payment_method_test_oid = None
        self._skip_affiliate_transaction = None
        self._skip_conversion_pixels = None
        self._skip_fraud_filter = None
        self.discriminator = None

        if bank_account_number is not None:
            self.bank_account_number = bank_account_number
        if bank_routing_number is not None:
            self.bank_routing_number = bank_routing_number
        if credit_card_number is not None:
            self.credit_card_number = credit_card_number
        if credit_card_number_existing is not None:
            self.credit_card_number_existing = credit_card_number_existing
        if description is not None:
            self.description = description
        if payment_action is not None:
            self.payment_action = payment_action
        if payment_method is not None:
            self.payment_method = payment_method
        if payment_method_test_oid is not None:
            self.payment_method_test_oid = payment_method_test_oid
        if skip_affiliate_transaction is not None:
            self.skip_affiliate_transaction = skip_affiliate_transaction
        if skip_conversion_pixels is not None:
            self.skip_conversion_pixels = skip_conversion_pixels
        if skip_fraud_filter is not None:
            self.skip_fraud_filter = skip_fraud_filter

    @property
    def bank_account_number(self):
        """Gets the bank_account_number of this PaymentsConfigurationTestMethod.  # noqa: E501

        Bank account number  # noqa: E501

        :return: The bank_account_number of this PaymentsConfigurationTestMethod.  # noqa: E501
        :rtype: str
        """
        return self._bank_account_number

    @bank_account_number.setter
    def bank_account_number(self, bank_account_number):
        """Sets the bank_account_number of this PaymentsConfigurationTestMethod.

        Bank account number  # noqa: E501

        :param bank_account_number: The bank_account_number of this PaymentsConfigurationTestMethod.  # noqa: E501
        :type: str
        """

        self._bank_account_number = bank_account_number

    @property
    def bank_routing_number(self):
        """Gets the bank_routing_number of this PaymentsConfigurationTestMethod.  # noqa: E501

        Bank routing number  # noqa: E501

        :return: The bank_routing_number of this PaymentsConfigurationTestMethod.  # noqa: E501
        :rtype: str
        """
        return self._bank_routing_number

    @bank_routing_number.setter
    def bank_routing_number(self, bank_routing_number):
        """Sets the bank_routing_number of this PaymentsConfigurationTestMethod.

        Bank routing number  # noqa: E501

        :param bank_routing_number: The bank_routing_number of this PaymentsConfigurationTestMethod.  # noqa: E501
        :type: str
        """

        self._bank_routing_number = bank_routing_number

    @property
    def credit_card_number(self):
        """Gets the credit_card_number of this PaymentsConfigurationTestMethod.  # noqa: E501

        Credit card number  # noqa: E501

        :return: The credit_card_number of this PaymentsConfigurationTestMethod.  # noqa: E501
        :rtype: str
        """
        return self._credit_card_number

    @credit_card_number.setter
    def credit_card_number(self, credit_card_number):
        """Sets the credit_card_number of this PaymentsConfigurationTestMethod.

        Credit card number  # noqa: E501

        :param credit_card_number: The credit_card_number of this PaymentsConfigurationTestMethod.  # noqa: E501
        :type: str
        """

        self._credit_card_number = credit_card_number

    @property
    def credit_card_number_existing(self):
        """Gets the credit_card_number_existing of this PaymentsConfigurationTestMethod.  # noqa: E501

        The existing credit card number  # noqa: E501

        :return: The credit_card_number_existing of this PaymentsConfigurationTestMethod.  # noqa: E501
        :rtype: str
        """
        return self._credit_card_number_existing

    @credit_card_number_existing.setter
    def credit_card_number_existing(self, credit_card_number_existing):
        """Sets the credit_card_number_existing of this PaymentsConfigurationTestMethod.

        The existing credit card number  # noqa: E501

        :param credit_card_number_existing: The credit_card_number_existing of this PaymentsConfigurationTestMethod.  # noqa: E501
        :type: str
        """

        self._credit_card_number_existing = credit_card_number_existing

    @property
    def description(self):
        """Gets the description of this PaymentsConfigurationTestMethod.  # noqa: E501

        Description  # noqa: E501

        :return: The description of this PaymentsConfigurationTestMethod.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PaymentsConfigurationTestMethod.

        Description  # noqa: E501

        :param description: The description of this PaymentsConfigurationTestMethod.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def payment_action(self):
        """Gets the payment_action of this PaymentsConfigurationTestMethod.  # noqa: E501

        Payment action  # noqa: E501

        :return: The payment_action of this PaymentsConfigurationTestMethod.  # noqa: E501
        :rtype: str
        """
        return self._payment_action

    @payment_action.setter
    def payment_action(self, payment_action):
        """Sets the payment_action of this PaymentsConfigurationTestMethod.

        Payment action  # noqa: E501

        :param payment_action: The payment_action of this PaymentsConfigurationTestMethod.  # noqa: E501
        :type: str
        """
        allowed_values = ["skip payment", "skip pmt rej", "skip pmt co", "hold in ar"]  # noqa: E501
        if payment_action not in allowed_values:
            raise ValueError(
                "Invalid value for `payment_action` ({0}), must be one of {1}"  # noqa: E501
                .format(payment_action, allowed_values)
            )

        self._payment_action = payment_action

    @property
    def payment_method(self):
        """Gets the payment_method of this PaymentsConfigurationTestMethod.  # noqa: E501

        Payment method  # noqa: E501

        :return: The payment_method of this PaymentsConfigurationTestMethod.  # noqa: E501
        :rtype: str
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """Sets the payment_method of this PaymentsConfigurationTestMethod.

        Payment method  # noqa: E501

        :param payment_method: The payment_method of this PaymentsConfigurationTestMethod.  # noqa: E501
        :type: str
        """

        self._payment_method = payment_method

    @property
    def payment_method_test_oid(self):
        """Gets the payment_method_test_oid of this PaymentsConfigurationTestMethod.  # noqa: E501

        Payment method test oid  # noqa: E501

        :return: The payment_method_test_oid of this PaymentsConfigurationTestMethod.  # noqa: E501
        :rtype: int
        """
        return self._payment_method_test_oid

    @payment_method_test_oid.setter
    def payment_method_test_oid(self, payment_method_test_oid):
        """Sets the payment_method_test_oid of this PaymentsConfigurationTestMethod.

        Payment method test oid  # noqa: E501

        :param payment_method_test_oid: The payment_method_test_oid of this PaymentsConfigurationTestMethod.  # noqa: E501
        :type: int
        """

        self._payment_method_test_oid = payment_method_test_oid

    @property
    def skip_affiliate_transaction(self):
        """Gets the skip_affiliate_transaction of this PaymentsConfigurationTestMethod.  # noqa: E501

        Skip affiliate transaction  # noqa: E501

        :return: The skip_affiliate_transaction of this PaymentsConfigurationTestMethod.  # noqa: E501
        :rtype: bool
        """
        return self._skip_affiliate_transaction

    @skip_affiliate_transaction.setter
    def skip_affiliate_transaction(self, skip_affiliate_transaction):
        """Sets the skip_affiliate_transaction of this PaymentsConfigurationTestMethod.

        Skip affiliate transaction  # noqa: E501

        :param skip_affiliate_transaction: The skip_affiliate_transaction of this PaymentsConfigurationTestMethod.  # noqa: E501
        :type: bool
        """

        self._skip_affiliate_transaction = skip_affiliate_transaction

    @property
    def skip_conversion_pixels(self):
        """Gets the skip_conversion_pixels of this PaymentsConfigurationTestMethod.  # noqa: E501

        If true, skips recording any conversion pixels to avoid sending test orders to your analysis sites  # noqa: E501

        :return: The skip_conversion_pixels of this PaymentsConfigurationTestMethod.  # noqa: E501
        :rtype: bool
        """
        return self._skip_conversion_pixels

    @skip_conversion_pixels.setter
    def skip_conversion_pixels(self, skip_conversion_pixels):
        """Sets the skip_conversion_pixels of this PaymentsConfigurationTestMethod.

        If true, skips recording any conversion pixels to avoid sending test orders to your analysis sites  # noqa: E501

        :param skip_conversion_pixels: The skip_conversion_pixels of this PaymentsConfigurationTestMethod.  # noqa: E501
        :type: bool
        """

        self._skip_conversion_pixels = skip_conversion_pixels

    @property
    def skip_fraud_filter(self):
        """Gets the skip_fraud_filter of this PaymentsConfigurationTestMethod.  # noqa: E501

        Skip fraud filter  # noqa: E501

        :return: The skip_fraud_filter of this PaymentsConfigurationTestMethod.  # noqa: E501
        :rtype: bool
        """
        return self._skip_fraud_filter

    @skip_fraud_filter.setter
    def skip_fraud_filter(self, skip_fraud_filter):
        """Sets the skip_fraud_filter of this PaymentsConfigurationTestMethod.

        Skip fraud filter  # noqa: E501

        :param skip_fraud_filter: The skip_fraud_filter of this PaymentsConfigurationTestMethod.  # noqa: E501
        :type: bool
        """

        self._skip_fraud_filter = skip_fraud_filter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaymentsConfigurationTestMethod, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentsConfigurationTestMethod):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
