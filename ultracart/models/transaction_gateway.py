# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TransactionGateway(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'arbitrary_html': 'str',
        'comment': 'str',
        'credit_card_capable': 'bool',
        'echeck_capable': 'bool',
        'echeck_supported': 'str',
        'enabled': 'bool',
        'gateway_cert_pem': 'str',
        'gateway_cert_pem_label': 'str',
        'gateway_email': 'str',
        'gateway_email_label': 'str',
        'gateway_environment': 'str',
        'gateway_environment_label': 'str',
        'gateway_environments': 'list[str]',
        'gateway_header_back_color': 'str',
        'gateway_header_border_color': 'str',
        'gateway_header_image_url': 'str',
        'gateway_key': 'str',
        'gateway_key_label': 'str',
        'gateway_key_pem': 'str',
        'gateway_key_pem_label': 'str',
        'gateway_landing_page': 'str',
        'gateway_merchant_id': 'str',
        'gateway_merchant_id_label': 'str',
        'gateway_mode': 'str',
        'gateway_mode_label': 'str',
        'gateway_modes': 'list[str]',
        'gateway_page_style': 'str',
        'gateway_page_style_label': 'str',
        'gateway_page_styles': 'list[str]',
        'gateway_partner': 'str',
        'gateway_partner_label': 'str',
        'gateway_password': 'str',
        'gateway_password_label': 'str',
        'gateway_payflow_color': 'str',
        'gateway_private_key_password': 'str',
        'gateway_private_key_password_label': 'str',
        'gateway_solution_type': 'str',
        'gateway_solution_type_label': 'str',
        'gateway_solution_types': 'list[str]',
        'gateway_url': 'str',
        'gateway_url_label': 'str',
        'gateway_username': 'str',
        'gateway_username_label': 'str',
        'merchant_account_profile_amex': 'str',
        'merchant_account_profile_diners_club': 'str',
        'merchant_account_profile_discover': 'str',
        'merchant_account_profile_jcb': 'str',
        'merchant_account_profile_mastercard': 'str',
        'merchant_account_profile_visa': 'str',
        'merchant_id': 'str',
        'multi_currency_details': 'bool',
        'name': 'str',
        'refund_supported': 'bool',
        'require_echeck_tax_id_or_drivers_license': 'bool',
        'support_vbv_3ds': 'bool',
        'supports_amex': 'bool',
        'supports_diners_club': 'bool',
        'supports_discover': 'bool',
        'supports_echeck': 'bool',
        'supports_electronic_gift_card': 'bool',
        'supports_jcb': 'bool',
        'supports_mastercard': 'bool',
        'supports_visa': 'bool',
        'third_party': 'bool'
    }

    attribute_map = {
        'arbitrary_html': 'arbitrary_html',
        'comment': 'comment',
        'credit_card_capable': 'credit_card_capable',
        'echeck_capable': 'echeck_capable',
        'echeck_supported': 'echeck_supported',
        'enabled': 'enabled',
        'gateway_cert_pem': 'gateway_cert_pem',
        'gateway_cert_pem_label': 'gateway_cert_pem_label',
        'gateway_email': 'gateway_email',
        'gateway_email_label': 'gateway_email_label',
        'gateway_environment': 'gateway_environment',
        'gateway_environment_label': 'gateway_environment_label',
        'gateway_environments': 'gateway_environments',
        'gateway_header_back_color': 'gateway_header_back_color',
        'gateway_header_border_color': 'gateway_header_border_color',
        'gateway_header_image_url': 'gateway_header_image_url',
        'gateway_key': 'gateway_key',
        'gateway_key_label': 'gateway_key_label',
        'gateway_key_pem': 'gateway_key_pem',
        'gateway_key_pem_label': 'gateway_key_pem_label',
        'gateway_landing_page': 'gateway_landing_page',
        'gateway_merchant_id': 'gateway_merchant_id',
        'gateway_merchant_id_label': 'gateway_merchant_id_label',
        'gateway_mode': 'gateway_mode',
        'gateway_mode_label': 'gateway_mode_label',
        'gateway_modes': 'gateway_modes',
        'gateway_page_style': 'gateway_page_style',
        'gateway_page_style_label': 'gateway_page_style_label',
        'gateway_page_styles': 'gateway_page_styles',
        'gateway_partner': 'gateway_partner',
        'gateway_partner_label': 'gateway_partner_label',
        'gateway_password': 'gateway_password',
        'gateway_password_label': 'gateway_password_label',
        'gateway_payflow_color': 'gateway_payflow_color',
        'gateway_private_key_password': 'gateway_private_key_password',
        'gateway_private_key_password_label': 'gateway_private_key_password_label',
        'gateway_solution_type': 'gateway_solution_type',
        'gateway_solution_type_label': 'gateway_solution_type_label',
        'gateway_solution_types': 'gateway_solution_types',
        'gateway_url': 'gateway_url',
        'gateway_url_label': 'gateway_url_label',
        'gateway_username': 'gateway_username',
        'gateway_username_label': 'gateway_username_label',
        'merchant_account_profile_amex': 'merchant_account_profile_amex',
        'merchant_account_profile_diners_club': 'merchant_account_profile_diners_club',
        'merchant_account_profile_discover': 'merchant_account_profile_discover',
        'merchant_account_profile_jcb': 'merchant_account_profile_jcb',
        'merchant_account_profile_mastercard': 'merchant_account_profile_mastercard',
        'merchant_account_profile_visa': 'merchant_account_profile_visa',
        'merchant_id': 'merchant_id',
        'multi_currency_details': 'multi_currency_details',
        'name': 'name',
        'refund_supported': 'refund_supported',
        'require_echeck_tax_id_or_drivers_license': 'require_echeck_tax_id_or_drivers_license',
        'support_vbv_3ds': 'support_vbv_3ds',
        'supports_amex': 'supports_amex',
        'supports_diners_club': 'supports_diners_club',
        'supports_discover': 'supports_discover',
        'supports_echeck': 'supports_echeck',
        'supports_electronic_gift_card': 'supports_electronic_gift_card',
        'supports_jcb': 'supports_jcb',
        'supports_mastercard': 'supports_mastercard',
        'supports_visa': 'supports_visa',
        'third_party': 'third_party'
    }

    def __init__(self, arbitrary_html=None, comment=None, credit_card_capable=None, echeck_capable=None, echeck_supported=None, enabled=None, gateway_cert_pem=None, gateway_cert_pem_label=None, gateway_email=None, gateway_email_label=None, gateway_environment=None, gateway_environment_label=None, gateway_environments=None, gateway_header_back_color=None, gateway_header_border_color=None, gateway_header_image_url=None, gateway_key=None, gateway_key_label=None, gateway_key_pem=None, gateway_key_pem_label=None, gateway_landing_page=None, gateway_merchant_id=None, gateway_merchant_id_label=None, gateway_mode=None, gateway_mode_label=None, gateway_modes=None, gateway_page_style=None, gateway_page_style_label=None, gateway_page_styles=None, gateway_partner=None, gateway_partner_label=None, gateway_password=None, gateway_password_label=None, gateway_payflow_color=None, gateway_private_key_password=None, gateway_private_key_password_label=None, gateway_solution_type=None, gateway_solution_type_label=None, gateway_solution_types=None, gateway_url=None, gateway_url_label=None, gateway_username=None, gateway_username_label=None, merchant_account_profile_amex=None, merchant_account_profile_diners_club=None, merchant_account_profile_discover=None, merchant_account_profile_jcb=None, merchant_account_profile_mastercard=None, merchant_account_profile_visa=None, merchant_id=None, multi_currency_details=None, name=None, refund_supported=None, require_echeck_tax_id_or_drivers_license=None, support_vbv_3ds=None, supports_amex=None, supports_diners_club=None, supports_discover=None, supports_echeck=None, supports_electronic_gift_card=None, supports_jcb=None, supports_mastercard=None, supports_visa=None, third_party=None):  # noqa: E501
        """TransactionGateway - a model defined in Swagger"""  # noqa: E501

        self._arbitrary_html = None
        self._comment = None
        self._credit_card_capable = None
        self._echeck_capable = None
        self._echeck_supported = None
        self._enabled = None
        self._gateway_cert_pem = None
        self._gateway_cert_pem_label = None
        self._gateway_email = None
        self._gateway_email_label = None
        self._gateway_environment = None
        self._gateway_environment_label = None
        self._gateway_environments = None
        self._gateway_header_back_color = None
        self._gateway_header_border_color = None
        self._gateway_header_image_url = None
        self._gateway_key = None
        self._gateway_key_label = None
        self._gateway_key_pem = None
        self._gateway_key_pem_label = None
        self._gateway_landing_page = None
        self._gateway_merchant_id = None
        self._gateway_merchant_id_label = None
        self._gateway_mode = None
        self._gateway_mode_label = None
        self._gateway_modes = None
        self._gateway_page_style = None
        self._gateway_page_style_label = None
        self._gateway_page_styles = None
        self._gateway_partner = None
        self._gateway_partner_label = None
        self._gateway_password = None
        self._gateway_password_label = None
        self._gateway_payflow_color = None
        self._gateway_private_key_password = None
        self._gateway_private_key_password_label = None
        self._gateway_solution_type = None
        self._gateway_solution_type_label = None
        self._gateway_solution_types = None
        self._gateway_url = None
        self._gateway_url_label = None
        self._gateway_username = None
        self._gateway_username_label = None
        self._merchant_account_profile_amex = None
        self._merchant_account_profile_diners_club = None
        self._merchant_account_profile_discover = None
        self._merchant_account_profile_jcb = None
        self._merchant_account_profile_mastercard = None
        self._merchant_account_profile_visa = None
        self._merchant_id = None
        self._multi_currency_details = None
        self._name = None
        self._refund_supported = None
        self._require_echeck_tax_id_or_drivers_license = None
        self._support_vbv_3ds = None
        self._supports_amex = None
        self._supports_diners_club = None
        self._supports_discover = None
        self._supports_echeck = None
        self._supports_electronic_gift_card = None
        self._supports_jcb = None
        self._supports_mastercard = None
        self._supports_visa = None
        self._third_party = None
        self.discriminator = None

        if arbitrary_html is not None:
            self.arbitrary_html = arbitrary_html
        if comment is not None:
            self.comment = comment
        if credit_card_capable is not None:
            self.credit_card_capable = credit_card_capable
        if echeck_capable is not None:
            self.echeck_capable = echeck_capable
        if echeck_supported is not None:
            self.echeck_supported = echeck_supported
        if enabled is not None:
            self.enabled = enabled
        if gateway_cert_pem is not None:
            self.gateway_cert_pem = gateway_cert_pem
        if gateway_cert_pem_label is not None:
            self.gateway_cert_pem_label = gateway_cert_pem_label
        if gateway_email is not None:
            self.gateway_email = gateway_email
        if gateway_email_label is not None:
            self.gateway_email_label = gateway_email_label
        if gateway_environment is not None:
            self.gateway_environment = gateway_environment
        if gateway_environment_label is not None:
            self.gateway_environment_label = gateway_environment_label
        if gateway_environments is not None:
            self.gateway_environments = gateway_environments
        if gateway_header_back_color is not None:
            self.gateway_header_back_color = gateway_header_back_color
        if gateway_header_border_color is not None:
            self.gateway_header_border_color = gateway_header_border_color
        if gateway_header_image_url is not None:
            self.gateway_header_image_url = gateway_header_image_url
        if gateway_key is not None:
            self.gateway_key = gateway_key
        if gateway_key_label is not None:
            self.gateway_key_label = gateway_key_label
        if gateway_key_pem is not None:
            self.gateway_key_pem = gateway_key_pem
        if gateway_key_pem_label is not None:
            self.gateway_key_pem_label = gateway_key_pem_label
        if gateway_landing_page is not None:
            self.gateway_landing_page = gateway_landing_page
        if gateway_merchant_id is not None:
            self.gateway_merchant_id = gateway_merchant_id
        if gateway_merchant_id_label is not None:
            self.gateway_merchant_id_label = gateway_merchant_id_label
        if gateway_mode is not None:
            self.gateway_mode = gateway_mode
        if gateway_mode_label is not None:
            self.gateway_mode_label = gateway_mode_label
        if gateway_modes is not None:
            self.gateway_modes = gateway_modes
        if gateway_page_style is not None:
            self.gateway_page_style = gateway_page_style
        if gateway_page_style_label is not None:
            self.gateway_page_style_label = gateway_page_style_label
        if gateway_page_styles is not None:
            self.gateway_page_styles = gateway_page_styles
        if gateway_partner is not None:
            self.gateway_partner = gateway_partner
        if gateway_partner_label is not None:
            self.gateway_partner_label = gateway_partner_label
        if gateway_password is not None:
            self.gateway_password = gateway_password
        if gateway_password_label is not None:
            self.gateway_password_label = gateway_password_label
        if gateway_payflow_color is not None:
            self.gateway_payflow_color = gateway_payflow_color
        if gateway_private_key_password is not None:
            self.gateway_private_key_password = gateway_private_key_password
        if gateway_private_key_password_label is not None:
            self.gateway_private_key_password_label = gateway_private_key_password_label
        if gateway_solution_type is not None:
            self.gateway_solution_type = gateway_solution_type
        if gateway_solution_type_label is not None:
            self.gateway_solution_type_label = gateway_solution_type_label
        if gateway_solution_types is not None:
            self.gateway_solution_types = gateway_solution_types
        if gateway_url is not None:
            self.gateway_url = gateway_url
        if gateway_url_label is not None:
            self.gateway_url_label = gateway_url_label
        if gateway_username is not None:
            self.gateway_username = gateway_username
        if gateway_username_label is not None:
            self.gateway_username_label = gateway_username_label
        if merchant_account_profile_amex is not None:
            self.merchant_account_profile_amex = merchant_account_profile_amex
        if merchant_account_profile_diners_club is not None:
            self.merchant_account_profile_diners_club = merchant_account_profile_diners_club
        if merchant_account_profile_discover is not None:
            self.merchant_account_profile_discover = merchant_account_profile_discover
        if merchant_account_profile_jcb is not None:
            self.merchant_account_profile_jcb = merchant_account_profile_jcb
        if merchant_account_profile_mastercard is not None:
            self.merchant_account_profile_mastercard = merchant_account_profile_mastercard
        if merchant_account_profile_visa is not None:
            self.merchant_account_profile_visa = merchant_account_profile_visa
        if merchant_id is not None:
            self.merchant_id = merchant_id
        if multi_currency_details is not None:
            self.multi_currency_details = multi_currency_details
        if name is not None:
            self.name = name
        if refund_supported is not None:
            self.refund_supported = refund_supported
        if require_echeck_tax_id_or_drivers_license is not None:
            self.require_echeck_tax_id_or_drivers_license = require_echeck_tax_id_or_drivers_license
        if support_vbv_3ds is not None:
            self.support_vbv_3ds = support_vbv_3ds
        if supports_amex is not None:
            self.supports_amex = supports_amex
        if supports_diners_club is not None:
            self.supports_diners_club = supports_diners_club
        if supports_discover is not None:
            self.supports_discover = supports_discover
        if supports_echeck is not None:
            self.supports_echeck = supports_echeck
        if supports_electronic_gift_card is not None:
            self.supports_electronic_gift_card = supports_electronic_gift_card
        if supports_jcb is not None:
            self.supports_jcb = supports_jcb
        if supports_mastercard is not None:
            self.supports_mastercard = supports_mastercard
        if supports_visa is not None:
            self.supports_visa = supports_visa
        if third_party is not None:
            self.third_party = third_party

    @property
    def arbitrary_html(self):
        """Gets the arbitrary_html of this TransactionGateway.  # noqa: E501

        Additional html to display for this transaction gateway.  This html will include instructions and connection links  # noqa: E501

        :return: The arbitrary_html of this TransactionGateway.  # noqa: E501
        :rtype: str
        """
        return self._arbitrary_html

    @arbitrary_html.setter
    def arbitrary_html(self, arbitrary_html):
        """Sets the arbitrary_html of this TransactionGateway.

        Additional html to display for this transaction gateway.  This html will include instructions and connection links  # noqa: E501

        :param arbitrary_html: The arbitrary_html of this TransactionGateway.  # noqa: E501
        :type: str
        """

        self._arbitrary_html = arbitrary_html

    @property
    def comment(self):
        """Gets the comment of this TransactionGateway.  # noqa: E501

        Additional comments  # noqa: E501

        :return: The comment of this TransactionGateway.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this TransactionGateway.

        Additional comments  # noqa: E501

        :param comment: The comment of this TransactionGateway.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def credit_card_capable(self):
        """Gets the credit_card_capable of this TransactionGateway.  # noqa: E501

        True if this gateway supports credit cards  # noqa: E501

        :return: The credit_card_capable of this TransactionGateway.  # noqa: E501
        :rtype: bool
        """
        return self._credit_card_capable

    @credit_card_capable.setter
    def credit_card_capable(self, credit_card_capable):
        """Sets the credit_card_capable of this TransactionGateway.

        True if this gateway supports credit cards  # noqa: E501

        :param credit_card_capable: The credit_card_capable of this TransactionGateway.  # noqa: E501
        :type: bool
        """

        self._credit_card_capable = credit_card_capable

    @property
    def echeck_capable(self):
        """Gets the echeck_capable of this TransactionGateway.  # noqa: E501

        True if this gateway supports eChecks  # noqa: E501

        :return: The echeck_capable of this TransactionGateway.  # noqa: E501
        :rtype: bool
        """
        return self._echeck_capable

    @echeck_capable.setter
    def echeck_capable(self, echeck_capable):
        """Sets the echeck_capable of this TransactionGateway.

        True if this gateway supports eChecks  # noqa: E501

        :param echeck_capable: The echeck_capable of this TransactionGateway.  # noqa: E501
        :type: bool
        """

        self._echeck_capable = echeck_capable

    @property
    def echeck_supported(self):
        """Gets the echeck_supported of this TransactionGateway.  # noqa: E501

        True if this gateway supports eChecks  # noqa: E501

        :return: The echeck_supported of this TransactionGateway.  # noqa: E501
        :rtype: str
        """
        return self._echeck_supported

    @echeck_supported.setter
    def echeck_supported(self, echeck_supported):
        """Sets the echeck_supported of this TransactionGateway.

        True if this gateway supports eChecks  # noqa: E501

        :param echeck_supported: The echeck_supported of this TransactionGateway.  # noqa: E501
        :type: str
        """

        self._echeck_supported = echeck_supported

    @property
    def enabled(self):
        """Gets the enabled of this TransactionGateway.  # noqa: E501

        True if this transaction gateway is the currently active gateway.  # noqa: E501

        :return: The enabled of this TransactionGateway.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this TransactionGateway.

        True if this transaction gateway is the currently active gateway.  # noqa: E501

        :param enabled: The enabled of this TransactionGateway.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def gateway_cert_pem(self):
        """Gets the gateway_cert_pem of this TransactionGateway.  # noqa: E501

        Cryptographic public certificate allowing UltraCart to communicate securely with this gateway.  # noqa: E501

        :return: The gateway_cert_pem of this TransactionGateway.  # noqa: E501
        :rtype: str
        """
        return self._gateway_cert_pem

    @gateway_cert_pem.setter
    def gateway_cert_pem(self, gateway_cert_pem):
        """Sets the gateway_cert_pem of this TransactionGateway.

        Cryptographic public certificate allowing UltraCart to communicate securely with this gateway.  # noqa: E501

        :param gateway_cert_pem: The gateway_cert_pem of this TransactionGateway.  # noqa: E501
        :type: str
        """

        self._gateway_cert_pem = gateway_cert_pem

    @property
    def gateway_cert_pem_label(self):
        """Gets the gateway_cert_pem_label of this TransactionGateway.  # noqa: E501

        The label for the gateway certificate pem.   The actual value stored may vary by gateway, so the label will vary too.  # noqa: E501

        :return: The gateway_cert_pem_label of this TransactionGateway.  # noqa: E501
        :rtype: str
        """
        return self._gateway_cert_pem_label

    @gateway_cert_pem_label.setter
    def gateway_cert_pem_label(self, gateway_cert_pem_label):
        """Sets the gateway_cert_pem_label of this TransactionGateway.

        The label for the gateway certificate pem.   The actual value stored may vary by gateway, so the label will vary too.  # noqa: E501

        :param gateway_cert_pem_label: The gateway_cert_pem_label of this TransactionGateway.  # noqa: E501
        :type: str
        """

        self._gateway_cert_pem_label = gateway_cert_pem_label

    @property
    def gateway_email(self):
        """Gets the gateway_email of this TransactionGateway.  # noqa: E501

        Gateway Email  # noqa: E501

        :return: The gateway_email of this TransactionGateway.  # noqa: E501
        :rtype: str
        """
        return self._gateway_email

    @gateway_email.setter
    def gateway_email(self, gateway_email):
        """Sets the gateway_email of this TransactionGateway.

        Gateway Email  # noqa: E501

        :param gateway_email: The gateway_email of this TransactionGateway.  # noqa: E501
        :type: str
        """

        self._gateway_email = gateway_email

    @property
    def gateway_email_label(self):
        """Gets the gateway_email_label of this TransactionGateway.  # noqa: E501

        The label for the gateway email.   The actual value stored may vary by gateway, so the label will vary too.  # noqa: E501

        :return: The gateway_email_label of this TransactionGateway.  # noqa: E501
        :rtype: str
        """
        return self._gateway_email_label

    @gateway_email_label.setter
    def gateway_email_label(self, gateway_email_label):
        """Sets the gateway_email_label of this TransactionGateway.

        The label for the gateway email.   The actual value stored may vary by gateway, so the label will vary too.  # noqa: E501

        :param gateway_email_label: The gateway_email_label of this TransactionGateway.  # noqa: E501
        :type: str
        """

        self._gateway_email_label = gateway_email_label

    @property
    def gateway_environment(self):
        """Gets the gateway_environment of this TransactionGateway.  # noqa: E501

        Gateway Environment to indicate sandbox versus production environments  # noqa: E501

        :return: The gateway_environment of this TransactionGateway.  # noqa: E501
        :rtype: str
        """
        return self._gateway_environment

    @gateway_environment.setter
    def gateway_environment(self, gateway_environment):
        """Sets the gateway_environment of this TransactionGateway.

        Gateway Environment to indicate sandbox versus production environments  # noqa: E501

        :param gateway_environment: The gateway_environment of this TransactionGateway.  # noqa: E501
        :type: str
        """

        self._gateway_environment = gateway_environment

    @property
    def gateway_environment_label(self):
        """Gets the gateway_environment_label of this TransactionGateway.  # noqa: E501

        The label for the gateway environment.  The actual value stored may vary by gateway, so the label will vary too.  # noqa: E501

        :return: The gateway_environment_label of this TransactionGateway.  # noqa: E501
        :rtype: str
        """
        return self._gateway_environment_label

    @gateway_environment_label.setter
    def gateway_environment_label(self, gateway_environment_label):
        """Sets the gateway_environment_label of this TransactionGateway.

        The label for the gateway environment.  The actual value stored may vary by gateway, so the label will vary too.  # noqa: E501

        :param gateway_environment_label: The gateway_environment_label of this TransactionGateway.  # noqa: E501
        :type: str
        """

        self._gateway_environment_label = gateway_environment_label

    @property
    def gateway_environments(self):
        """Gets the gateway_environments of this TransactionGateway.  # noqa: E501

        Used to populate drop down lists for the gateway environment.  Varies by gateway.  # noqa: E501

        :return: The gateway_environments of this TransactionGateway.  # noqa: E501
        :rtype: list[str]
        """
        return self._gateway_environments

    @gateway_environments.setter
    def gateway_environments(self, gateway_environments):
        """Sets the gateway_environments of this TransactionGateway.

        Used to populate drop down lists for the gateway environment.  Varies by gateway.  # noqa: E501

        :param gateway_environments: The gateway_environments of this TransactionGateway.  # noqa: E501
        :type: list[str]
        """

        self._gateway_environments = gateway_environments

    @property
    def gateway_header_back_color(self):
        """Gets the gateway_header_back_color of this TransactionGateway.  # noqa: E501

        Optional Look and feel setting for Verified-by-VISA.  Only needed if you are using 3DS  # noqa: E501

        :return: The gateway_header_back_color of this TransactionGateway.  # noqa: E501
        :rtype: str
        """
        return self._gateway_header_back_color

    @gateway_header_back_color.setter
    def gateway_header_back_color(self, gateway_header_back_color):
        """Sets the gateway_header_back_color of this TransactionGateway.

        Optional Look and feel setting for Verified-by-VISA.  Only needed if you are using 3DS  # noqa: E501

        :param gateway_header_back_color: The gateway_header_back_color of this TransactionGateway.  # noqa: E501
        :type: str
        """

        self._gateway_header_back_color = gateway_header_back_color

    @property
    def gateway_header_border_color(self):
        """Gets the gateway_header_border_color of this TransactionGateway.  # noqa: E501

        Optional Look and feel setting for Verified-by-VISA.  Only needed if you are using 3DS  # noqa: E501

        :return: The gateway_header_border_color of this TransactionGateway.  # noqa: E501
        :rtype: str
        """
        return self._gateway_header_border_color

    @gateway_header_border_color.setter
    def gateway_header_border_color(self, gateway_header_border_color):
        """Sets the gateway_header_border_color of this TransactionGateway.

        Optional Look and feel setting for Verified-by-VISA.  Only needed if you are using 3DS  # noqa: E501

        :param gateway_header_border_color: The gateway_header_border_color of this TransactionGateway.  # noqa: E501
        :type: str
        """

        self._gateway_header_border_color = gateway_header_border_color

    @property
    def gateway_header_image_url(self):
        """Gets the gateway_header_image_url of this TransactionGateway.  # noqa: E501

        Optional Look and feel setting for Verified-by-VISA.  Only needed if you are using 3DS  # noqa: E501

        :return: The gateway_header_image_url of this TransactionGateway.  # noqa: E501
        :rtype: str
        """
        return self._gateway_header_image_url

    @gateway_header_image_url.setter
    def gateway_header_image_url(self, gateway_header_image_url):
        """Sets the gateway_header_image_url of this TransactionGateway.

        Optional Look and feel setting for Verified-by-VISA.  Only needed if you are using 3DS  # noqa: E501

        :param gateway_header_image_url: The gateway_header_image_url of this TransactionGateway.  # noqa: E501
        :type: str
        """

        self._gateway_header_image_url = gateway_header_image_url

    @property
    def gateway_key(self):
        """Gets the gateway_key of this TransactionGateway.  # noqa: E501

        Gateway Key  # noqa: E501

        :return: The gateway_key of this TransactionGateway.  # noqa: E501
        :rtype: str
        """
        return self._gateway_key

    @gateway_key.setter
    def gateway_key(self, gateway_key):
        """Sets the gateway_key of this TransactionGateway.

        Gateway Key  # noqa: E501

        :param gateway_key: The gateway_key of this TransactionGateway.  # noqa: E501
        :type: str
        """

        self._gateway_key = gateway_key

    @property
    def gateway_key_label(self):
        """Gets the gateway_key_label of this TransactionGateway.  # noqa: E501

        The label for the gateway key.   The actual value stored may vary by gateway, so the label will vary too.  # noqa: E501

        :return: The gateway_key_label of this TransactionGateway.  # noqa: E501
        :rtype: str
        """
        return self._gateway_key_label

    @gateway_key_label.setter
    def gateway_key_label(self, gateway_key_label):
        """Sets the gateway_key_label of this TransactionGateway.

        The label for the gateway key.   The actual value stored may vary by gateway, so the label will vary too.  # noqa: E501

        :param gateway_key_label: The gateway_key_label of this TransactionGateway.  # noqa: E501
        :type: str
        """

        self._gateway_key_label = gateway_key_label

    @property
    def gateway_key_pem(self):
        """Gets the gateway_key_pem of this TransactionGateway.  # noqa: E501

        Cryptographic private key allowing UltraCart to communicate securely with this gateway.  # noqa: E501

        :return: The gateway_key_pem of this TransactionGateway.  # noqa: E501
        :rtype: str
        """
        return self._gateway_key_pem

    @gateway_key_pem.setter
    def gateway_key_pem(self, gateway_key_pem):
        """Sets the gateway_key_pem of this TransactionGateway.

        Cryptographic private key allowing UltraCart to communicate securely with this gateway.  # noqa: E501

        :param gateway_key_pem: The gateway_key_pem of this TransactionGateway.  # noqa: E501
        :type: str
        """

        self._gateway_key_pem = gateway_key_pem

    @property
    def gateway_key_pem_label(self):
        """Gets the gateway_key_pem_label of this TransactionGateway.  # noqa: E501

        The label for the gateway key pem.   The actual value stored may vary by gateway, so the label will vary too.  # noqa: E501

        :return: The gateway_key_pem_label of this TransactionGateway.  # noqa: E501
        :rtype: str
        """
        return self._gateway_key_pem_label

    @gateway_key_pem_label.setter
    def gateway_key_pem_label(self, gateway_key_pem_label):
        """Sets the gateway_key_pem_label of this TransactionGateway.

        The label for the gateway key pem.   The actual value stored may vary by gateway, so the label will vary too.  # noqa: E501

        :param gateway_key_pem_label: The gateway_key_pem_label of this TransactionGateway.  # noqa: E501
        :type: str
        """

        self._gateway_key_pem_label = gateway_key_pem_label

    @property
    def gateway_landing_page(self):
        """Gets the gateway_landing_page of this TransactionGateway.  # noqa: E501

        Optional Look and feel setting for Verified-by-VISA.  Only needed if you are using 3DS  # noqa: E501

        :return: The gateway_landing_page of this TransactionGateway.  # noqa: E501
        :rtype: str
        """
        return self._gateway_landing_page

    @gateway_landing_page.setter
    def gateway_landing_page(self, gateway_landing_page):
        """Sets the gateway_landing_page of this TransactionGateway.

        Optional Look and feel setting for Verified-by-VISA.  Only needed if you are using 3DS  # noqa: E501

        :param gateway_landing_page: The gateway_landing_page of this TransactionGateway.  # noqa: E501
        :type: str
        """

        self._gateway_landing_page = gateway_landing_page

    @property
    def gateway_merchant_id(self):
        """Gets the gateway_merchant_id of this TransactionGateway.  # noqa: E501

        Gateway Merchant ID  # noqa: E501

        :return: The gateway_merchant_id of this TransactionGateway.  # noqa: E501
        :rtype: str
        """
        return self._gateway_merchant_id

    @gateway_merchant_id.setter
    def gateway_merchant_id(self, gateway_merchant_id):
        """Sets the gateway_merchant_id of this TransactionGateway.

        Gateway Merchant ID  # noqa: E501

        :param gateway_merchant_id: The gateway_merchant_id of this TransactionGateway.  # noqa: E501
        :type: str
        """

        self._gateway_merchant_id = gateway_merchant_id

    @property
    def gateway_merchant_id_label(self):
        """Gets the gateway_merchant_id_label of this TransactionGateway.  # noqa: E501

        The label for the gateway merchant id.  The actual value stored may vary by gateway, so the label will vary too.  # noqa: E501

        :return: The gateway_merchant_id_label of this TransactionGateway.  # noqa: E501
        :rtype: str
        """
        return self._gateway_merchant_id_label

    @gateway_merchant_id_label.setter
    def gateway_merchant_id_label(self, gateway_merchant_id_label):
        """Sets the gateway_merchant_id_label of this TransactionGateway.

        The label for the gateway merchant id.  The actual value stored may vary by gateway, so the label will vary too.  # noqa: E501

        :param gateway_merchant_id_label: The gateway_merchant_id_label of this TransactionGateway.  # noqa: E501
        :type: str
        """

        self._gateway_merchant_id_label = gateway_merchant_id_label

    @property
    def gateway_mode(self):
        """Gets the gateway_mode of this TransactionGateway.  # noqa: E501

        Gateway Mode  # noqa: E501

        :return: The gateway_mode of this TransactionGateway.  # noqa: E501
        :rtype: str
        """
        return self._gateway_mode

    @gateway_mode.setter
    def gateway_mode(self, gateway_mode):
        """Sets the gateway_mode of this TransactionGateway.

        Gateway Mode  # noqa: E501

        :param gateway_mode: The gateway_mode of this TransactionGateway.  # noqa: E501
        :type: str
        """

        self._gateway_mode = gateway_mode

    @property
    def gateway_mode_label(self):
        """Gets the gateway_mode_label of this TransactionGateway.  # noqa: E501

        The label for the gateway mode.   The actual value stored may vary by gateway, so the label will vary too.  # noqa: E501

        :return: The gateway_mode_label of this TransactionGateway.  # noqa: E501
        :rtype: str
        """
        return self._gateway_mode_label

    @gateway_mode_label.setter
    def gateway_mode_label(self, gateway_mode_label):
        """Sets the gateway_mode_label of this TransactionGateway.

        The label for the gateway mode.   The actual value stored may vary by gateway, so the label will vary too.  # noqa: E501

        :param gateway_mode_label: The gateway_mode_label of this TransactionGateway.  # noqa: E501
        :type: str
        """

        self._gateway_mode_label = gateway_mode_label

    @property
    def gateway_modes(self):
        """Gets the gateway_modes of this TransactionGateway.  # noqa: E501

        Used to populate drop down lists for gateway modes  # noqa: E501

        :return: The gateway_modes of this TransactionGateway.  # noqa: E501
        :rtype: list[str]
        """
        return self._gateway_modes

    @gateway_modes.setter
    def gateway_modes(self, gateway_modes):
        """Sets the gateway_modes of this TransactionGateway.

        Used to populate drop down lists for gateway modes  # noqa: E501

        :param gateway_modes: The gateway_modes of this TransactionGateway.  # noqa: E501
        :type: list[str]
        """

        self._gateway_modes = gateway_modes

    @property
    def gateway_page_style(self):
        """Gets the gateway_page_style of this TransactionGateway.  # noqa: E501

        Gateway Page Style  # noqa: E501

        :return: The gateway_page_style of this TransactionGateway.  # noqa: E501
        :rtype: str
        """
        return self._gateway_page_style

    @gateway_page_style.setter
    def gateway_page_style(self, gateway_page_style):
        """Sets the gateway_page_style of this TransactionGateway.

        Gateway Page Style  # noqa: E501

        :param gateway_page_style: The gateway_page_style of this TransactionGateway.  # noqa: E501
        :type: str
        """

        self._gateway_page_style = gateway_page_style

    @property
    def gateway_page_style_label(self):
        """Gets the gateway_page_style_label of this TransactionGateway.  # noqa: E501

        Gateway page style label  # noqa: E501

        :return: The gateway_page_style_label of this TransactionGateway.  # noqa: E501
        :rtype: str
        """
        return self._gateway_page_style_label

    @gateway_page_style_label.setter
    def gateway_page_style_label(self, gateway_page_style_label):
        """Sets the gateway_page_style_label of this TransactionGateway.

        Gateway page style label  # noqa: E501

        :param gateway_page_style_label: The gateway_page_style_label of this TransactionGateway.  # noqa: E501
        :type: str
        """

        self._gateway_page_style_label = gateway_page_style_label

    @property
    def gateway_page_styles(self):
        """Gets the gateway_page_styles of this TransactionGateway.  # noqa: E501

        Used to populate drop down lists for gateway page style  # noqa: E501

        :return: The gateway_page_styles of this TransactionGateway.  # noqa: E501
        :rtype: list[str]
        """
        return self._gateway_page_styles

    @gateway_page_styles.setter
    def gateway_page_styles(self, gateway_page_styles):
        """Sets the gateway_page_styles of this TransactionGateway.

        Used to populate drop down lists for gateway page style  # noqa: E501

        :param gateway_page_styles: The gateway_page_styles of this TransactionGateway.  # noqa: E501
        :type: list[str]
        """

        self._gateway_page_styles = gateway_page_styles

    @property
    def gateway_partner(self):
        """Gets the gateway_partner of this TransactionGateway.  # noqa: E501

        Gateway Partner  # noqa: E501

        :return: The gateway_partner of this TransactionGateway.  # noqa: E501
        :rtype: str
        """
        return self._gateway_partner

    @gateway_partner.setter
    def gateway_partner(self, gateway_partner):
        """Sets the gateway_partner of this TransactionGateway.

        Gateway Partner  # noqa: E501

        :param gateway_partner: The gateway_partner of this TransactionGateway.  # noqa: E501
        :type: str
        """

        self._gateway_partner = gateway_partner

    @property
    def gateway_partner_label(self):
        """Gets the gateway_partner_label of this TransactionGateway.  # noqa: E501

        The label for the gateway partner.   The actual value stored may vary by gateway, so the label will vary too.  # noqa: E501

        :return: The gateway_partner_label of this TransactionGateway.  # noqa: E501
        :rtype: str
        """
        return self._gateway_partner_label

    @gateway_partner_label.setter
    def gateway_partner_label(self, gateway_partner_label):
        """Sets the gateway_partner_label of this TransactionGateway.

        The label for the gateway partner.   The actual value stored may vary by gateway, so the label will vary too.  # noqa: E501

        :param gateway_partner_label: The gateway_partner_label of this TransactionGateway.  # noqa: E501
        :type: str
        """

        self._gateway_partner_label = gateway_partner_label

    @property
    def gateway_password(self):
        """Gets the gateway_password of this TransactionGateway.  # noqa: E501

        Gateway Password  # noqa: E501

        :return: The gateway_password of this TransactionGateway.  # noqa: E501
        :rtype: str
        """
        return self._gateway_password

    @gateway_password.setter
    def gateway_password(self, gateway_password):
        """Sets the gateway_password of this TransactionGateway.

        Gateway Password  # noqa: E501

        :param gateway_password: The gateway_password of this TransactionGateway.  # noqa: E501
        :type: str
        """

        self._gateway_password = gateway_password

    @property
    def gateway_password_label(self):
        """Gets the gateway_password_label of this TransactionGateway.  # noqa: E501

        The label for the gateway password.   The actual value stored may vary by gateway, so the label will vary too.  # noqa: E501

        :return: The gateway_password_label of this TransactionGateway.  # noqa: E501
        :rtype: str
        """
        return self._gateway_password_label

    @gateway_password_label.setter
    def gateway_password_label(self, gateway_password_label):
        """Sets the gateway_password_label of this TransactionGateway.

        The label for the gateway password.   The actual value stored may vary by gateway, so the label will vary too.  # noqa: E501

        :param gateway_password_label: The gateway_password_label of this TransactionGateway.  # noqa: E501
        :type: str
        """

        self._gateway_password_label = gateway_password_label

    @property
    def gateway_payflow_color(self):
        """Gets the gateway_payflow_color of this TransactionGateway.  # noqa: E501

        Optional Look and feel setting for Verified-by-VISA.  Only needed if you are using 3DS  # noqa: E501

        :return: The gateway_payflow_color of this TransactionGateway.  # noqa: E501
        :rtype: str
        """
        return self._gateway_payflow_color

    @gateway_payflow_color.setter
    def gateway_payflow_color(self, gateway_payflow_color):
        """Sets the gateway_payflow_color of this TransactionGateway.

        Optional Look and feel setting for Verified-by-VISA.  Only needed if you are using 3DS  # noqa: E501

        :param gateway_payflow_color: The gateway_payflow_color of this TransactionGateway.  # noqa: E501
        :type: str
        """

        self._gateway_payflow_color = gateway_payflow_color

    @property
    def gateway_private_key_password(self):
        """Gets the gateway_private_key_password of this TransactionGateway.  # noqa: E501

        Gateway private key password  # noqa: E501

        :return: The gateway_private_key_password of this TransactionGateway.  # noqa: E501
        :rtype: str
        """
        return self._gateway_private_key_password

    @gateway_private_key_password.setter
    def gateway_private_key_password(self, gateway_private_key_password):
        """Sets the gateway_private_key_password of this TransactionGateway.

        Gateway private key password  # noqa: E501

        :param gateway_private_key_password: The gateway_private_key_password of this TransactionGateway.  # noqa: E501
        :type: str
        """

        self._gateway_private_key_password = gateway_private_key_password

    @property
    def gateway_private_key_password_label(self):
        """Gets the gateway_private_key_password_label of this TransactionGateway.  # noqa: E501

        The label for the gateway private key password.  The actual value stored may vary by gateway, so the label will vary too.  # noqa: E501

        :return: The gateway_private_key_password_label of this TransactionGateway.  # noqa: E501
        :rtype: str
        """
        return self._gateway_private_key_password_label

    @gateway_private_key_password_label.setter
    def gateway_private_key_password_label(self, gateway_private_key_password_label):
        """Sets the gateway_private_key_password_label of this TransactionGateway.

        The label for the gateway private key password.  The actual value stored may vary by gateway, so the label will vary too.  # noqa: E501

        :param gateway_private_key_password_label: The gateway_private_key_password_label of this TransactionGateway.  # noqa: E501
        :type: str
        """

        self._gateway_private_key_password_label = gateway_private_key_password_label

    @property
    def gateway_solution_type(self):
        """Gets the gateway_solution_type of this TransactionGateway.  # noqa: E501

        Optional Look and feel setting for Verified-by-VISA.  Only needed if you are using 3DS  # noqa: E501

        :return: The gateway_solution_type of this TransactionGateway.  # noqa: E501
        :rtype: str
        """
        return self._gateway_solution_type

    @gateway_solution_type.setter
    def gateway_solution_type(self, gateway_solution_type):
        """Sets the gateway_solution_type of this TransactionGateway.

        Optional Look and feel setting for Verified-by-VISA.  Only needed if you are using 3DS  # noqa: E501

        :param gateway_solution_type: The gateway_solution_type of this TransactionGateway.  # noqa: E501
        :type: str
        """

        self._gateway_solution_type = gateway_solution_type

    @property
    def gateway_solution_type_label(self):
        """Gets the gateway_solution_type_label of this TransactionGateway.  # noqa: E501

        The label for the gateway solution type.  The actual value stored may vary by gateway, so the label will vary too.  # noqa: E501

        :return: The gateway_solution_type_label of this TransactionGateway.  # noqa: E501
        :rtype: str
        """
        return self._gateway_solution_type_label

    @gateway_solution_type_label.setter
    def gateway_solution_type_label(self, gateway_solution_type_label):
        """Sets the gateway_solution_type_label of this TransactionGateway.

        The label for the gateway solution type.  The actual value stored may vary by gateway, so the label will vary too.  # noqa: E501

        :param gateway_solution_type_label: The gateway_solution_type_label of this TransactionGateway.  # noqa: E501
        :type: str
        """

        self._gateway_solution_type_label = gateway_solution_type_label

    @property
    def gateway_solution_types(self):
        """Gets the gateway_solution_types of this TransactionGateway.  # noqa: E501

        Used to populate drop down lists for gateway solution types  # noqa: E501

        :return: The gateway_solution_types of this TransactionGateway.  # noqa: E501
        :rtype: list[str]
        """
        return self._gateway_solution_types

    @gateway_solution_types.setter
    def gateway_solution_types(self, gateway_solution_types):
        """Sets the gateway_solution_types of this TransactionGateway.

        Used to populate drop down lists for gateway solution types  # noqa: E501

        :param gateway_solution_types: The gateway_solution_types of this TransactionGateway.  # noqa: E501
        :type: list[str]
        """

        self._gateway_solution_types = gateway_solution_types

    @property
    def gateway_url(self):
        """Gets the gateway_url of this TransactionGateway.  # noqa: E501

        Gateway URL  # noqa: E501

        :return: The gateway_url of this TransactionGateway.  # noqa: E501
        :rtype: str
        """
        return self._gateway_url

    @gateway_url.setter
    def gateway_url(self, gateway_url):
        """Sets the gateway_url of this TransactionGateway.

        Gateway URL  # noqa: E501

        :param gateway_url: The gateway_url of this TransactionGateway.  # noqa: E501
        :type: str
        """

        self._gateway_url = gateway_url

    @property
    def gateway_url_label(self):
        """Gets the gateway_url_label of this TransactionGateway.  # noqa: E501

        The label for the gateway url.   The actual value stored may vary by gateway, so the label will vary too.  # noqa: E501

        :return: The gateway_url_label of this TransactionGateway.  # noqa: E501
        :rtype: str
        """
        return self._gateway_url_label

    @gateway_url_label.setter
    def gateway_url_label(self, gateway_url_label):
        """Sets the gateway_url_label of this TransactionGateway.

        The label for the gateway url.   The actual value stored may vary by gateway, so the label will vary too.  # noqa: E501

        :param gateway_url_label: The gateway_url_label of this TransactionGateway.  # noqa: E501
        :type: str
        """

        self._gateway_url_label = gateway_url_label

    @property
    def gateway_username(self):
        """Gets the gateway_username of this TransactionGateway.  # noqa: E501

        Gateway Username  # noqa: E501

        :return: The gateway_username of this TransactionGateway.  # noqa: E501
        :rtype: str
        """
        return self._gateway_username

    @gateway_username.setter
    def gateway_username(self, gateway_username):
        """Sets the gateway_username of this TransactionGateway.

        Gateway Username  # noqa: E501

        :param gateway_username: The gateway_username of this TransactionGateway.  # noqa: E501
        :type: str
        """

        self._gateway_username = gateway_username

    @property
    def gateway_username_label(self):
        """Gets the gateway_username_label of this TransactionGateway.  # noqa: E501

        The label for the gateway username.  The actual value stored may vary by gateway, so the label will vary too.  # noqa: E501

        :return: The gateway_username_label of this TransactionGateway.  # noqa: E501
        :rtype: str
        """
        return self._gateway_username_label

    @gateway_username_label.setter
    def gateway_username_label(self, gateway_username_label):
        """Sets the gateway_username_label of this TransactionGateway.

        The label for the gateway username.  The actual value stored may vary by gateway, so the label will vary too.  # noqa: E501

        :param gateway_username_label: The gateway_username_label of this TransactionGateway.  # noqa: E501
        :type: str
        """

        self._gateway_username_label = gateway_username_label

    @property
    def merchant_account_profile_amex(self):
        """Gets the merchant_account_profile_amex of this TransactionGateway.  # noqa: E501

        If a merchant has multiple card processing accounts, this is the one to use for American Express cards.  # noqa: E501

        :return: The merchant_account_profile_amex of this TransactionGateway.  # noqa: E501
        :rtype: str
        """
        return self._merchant_account_profile_amex

    @merchant_account_profile_amex.setter
    def merchant_account_profile_amex(self, merchant_account_profile_amex):
        """Sets the merchant_account_profile_amex of this TransactionGateway.

        If a merchant has multiple card processing accounts, this is the one to use for American Express cards.  # noqa: E501

        :param merchant_account_profile_amex: The merchant_account_profile_amex of this TransactionGateway.  # noqa: E501
        :type: str
        """

        self._merchant_account_profile_amex = merchant_account_profile_amex

    @property
    def merchant_account_profile_diners_club(self):
        """Gets the merchant_account_profile_diners_club of this TransactionGateway.  # noqa: E501

        If a merchant has multiple card processing accounts, this is the one to use for Diners Club cards.  # noqa: E501

        :return: The merchant_account_profile_diners_club of this TransactionGateway.  # noqa: E501
        :rtype: str
        """
        return self._merchant_account_profile_diners_club

    @merchant_account_profile_diners_club.setter
    def merchant_account_profile_diners_club(self, merchant_account_profile_diners_club):
        """Sets the merchant_account_profile_diners_club of this TransactionGateway.

        If a merchant has multiple card processing accounts, this is the one to use for Diners Club cards.  # noqa: E501

        :param merchant_account_profile_diners_club: The merchant_account_profile_diners_club of this TransactionGateway.  # noqa: E501
        :type: str
        """

        self._merchant_account_profile_diners_club = merchant_account_profile_diners_club

    @property
    def merchant_account_profile_discover(self):
        """Gets the merchant_account_profile_discover of this TransactionGateway.  # noqa: E501

        If a merchant has multiple card processing accounts, this is the one to use for Discover cards.  # noqa: E501

        :return: The merchant_account_profile_discover of this TransactionGateway.  # noqa: E501
        :rtype: str
        """
        return self._merchant_account_profile_discover

    @merchant_account_profile_discover.setter
    def merchant_account_profile_discover(self, merchant_account_profile_discover):
        """Sets the merchant_account_profile_discover of this TransactionGateway.

        If a merchant has multiple card processing accounts, this is the one to use for Discover cards.  # noqa: E501

        :param merchant_account_profile_discover: The merchant_account_profile_discover of this TransactionGateway.  # noqa: E501
        :type: str
        """

        self._merchant_account_profile_discover = merchant_account_profile_discover

    @property
    def merchant_account_profile_jcb(self):
        """Gets the merchant_account_profile_jcb of this TransactionGateway.  # noqa: E501

        If a merchant has multiple card processing accounts, this is the one to use for JCB cards.  # noqa: E501

        :return: The merchant_account_profile_jcb of this TransactionGateway.  # noqa: E501
        :rtype: str
        """
        return self._merchant_account_profile_jcb

    @merchant_account_profile_jcb.setter
    def merchant_account_profile_jcb(self, merchant_account_profile_jcb):
        """Sets the merchant_account_profile_jcb of this TransactionGateway.

        If a merchant has multiple card processing accounts, this is the one to use for JCB cards.  # noqa: E501

        :param merchant_account_profile_jcb: The merchant_account_profile_jcb of this TransactionGateway.  # noqa: E501
        :type: str
        """

        self._merchant_account_profile_jcb = merchant_account_profile_jcb

    @property
    def merchant_account_profile_mastercard(self):
        """Gets the merchant_account_profile_mastercard of this TransactionGateway.  # noqa: E501

        If a merchant has multiple card processing accounts, this is the one to use for MasterCard cards.  # noqa: E501

        :return: The merchant_account_profile_mastercard of this TransactionGateway.  # noqa: E501
        :rtype: str
        """
        return self._merchant_account_profile_mastercard

    @merchant_account_profile_mastercard.setter
    def merchant_account_profile_mastercard(self, merchant_account_profile_mastercard):
        """Sets the merchant_account_profile_mastercard of this TransactionGateway.

        If a merchant has multiple card processing accounts, this is the one to use for MasterCard cards.  # noqa: E501

        :param merchant_account_profile_mastercard: The merchant_account_profile_mastercard of this TransactionGateway.  # noqa: E501
        :type: str
        """

        self._merchant_account_profile_mastercard = merchant_account_profile_mastercard

    @property
    def merchant_account_profile_visa(self):
        """Gets the merchant_account_profile_visa of this TransactionGateway.  # noqa: E501

        If a merchant has multiple card processing accounts, this is the one to use for VISA cards.  # noqa: E501

        :return: The merchant_account_profile_visa of this TransactionGateway.  # noqa: E501
        :rtype: str
        """
        return self._merchant_account_profile_visa

    @merchant_account_profile_visa.setter
    def merchant_account_profile_visa(self, merchant_account_profile_visa):
        """Sets the merchant_account_profile_visa of this TransactionGateway.

        If a merchant has multiple card processing accounts, this is the one to use for VISA cards.  # noqa: E501

        :param merchant_account_profile_visa: The merchant_account_profile_visa of this TransactionGateway.  # noqa: E501
        :type: str
        """

        self._merchant_account_profile_visa = merchant_account_profile_visa

    @property
    def merchant_id(self):
        """Gets the merchant_id of this TransactionGateway.  # noqa: E501

        UltraCart Merchant ID  # noqa: E501

        :return: The merchant_id of this TransactionGateway.  # noqa: E501
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this TransactionGateway.

        UltraCart Merchant ID  # noqa: E501

        :param merchant_id: The merchant_id of this TransactionGateway.  # noqa: E501
        :type: str
        """

        self._merchant_id = merchant_id

    @property
    def multi_currency_details(self):
        """Gets the multi_currency_details of this TransactionGateway.  # noqa: E501

        True if this gateway provides details for multiple currency transactions  # noqa: E501

        :return: The multi_currency_details of this TransactionGateway.  # noqa: E501
        :rtype: bool
        """
        return self._multi_currency_details

    @multi_currency_details.setter
    def multi_currency_details(self, multi_currency_details):
        """Sets the multi_currency_details of this TransactionGateway.

        True if this gateway provides details for multiple currency transactions  # noqa: E501

        :param multi_currency_details: The multi_currency_details of this TransactionGateway.  # noqa: E501
        :type: bool
        """

        self._multi_currency_details = multi_currency_details

    @property
    def name(self):
        """Gets the name of this TransactionGateway.  # noqa: E501

        Name of this transaction gateway  # noqa: E501

        :return: The name of this TransactionGateway.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TransactionGateway.

        Name of this transaction gateway  # noqa: E501

        :param name: The name of this TransactionGateway.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def refund_supported(self):
        """Gets the refund_supported of this TransactionGateway.  # noqa: E501

        True if this gateway supports refunds  # noqa: E501

        :return: The refund_supported of this TransactionGateway.  # noqa: E501
        :rtype: bool
        """
        return self._refund_supported

    @refund_supported.setter
    def refund_supported(self, refund_supported):
        """Sets the refund_supported of this TransactionGateway.

        True if this gateway supports refunds  # noqa: E501

        :param refund_supported: The refund_supported of this TransactionGateway.  # noqa: E501
        :type: bool
        """

        self._refund_supported = refund_supported

    @property
    def require_echeck_tax_id_or_drivers_license(self):
        """Gets the require_echeck_tax_id_or_drivers_license of this TransactionGateway.  # noqa: E501

        If true, e-Check transaction will require either a Tax ID or a Driver License  # noqa: E501

        :return: The require_echeck_tax_id_or_drivers_license of this TransactionGateway.  # noqa: E501
        :rtype: bool
        """
        return self._require_echeck_tax_id_or_drivers_license

    @require_echeck_tax_id_or_drivers_license.setter
    def require_echeck_tax_id_or_drivers_license(self, require_echeck_tax_id_or_drivers_license):
        """Sets the require_echeck_tax_id_or_drivers_license of this TransactionGateway.

        If true, e-Check transaction will require either a Tax ID or a Driver License  # noqa: E501

        :param require_echeck_tax_id_or_drivers_license: The require_echeck_tax_id_or_drivers_license of this TransactionGateway.  # noqa: E501
        :type: bool
        """

        self._require_echeck_tax_id_or_drivers_license = require_echeck_tax_id_or_drivers_license

    @property
    def support_vbv_3ds(self):
        """Gets the support_vbv_3ds of this TransactionGateway.  # noqa: E501

        True if this gateway supported Verified-by-VISA 3D Secure  # noqa: E501

        :return: The support_vbv_3ds of this TransactionGateway.  # noqa: E501
        :rtype: bool
        """
        return self._support_vbv_3ds

    @support_vbv_3ds.setter
    def support_vbv_3ds(self, support_vbv_3ds):
        """Sets the support_vbv_3ds of this TransactionGateway.

        True if this gateway supported Verified-by-VISA 3D Secure  # noqa: E501

        :param support_vbv_3ds: The support_vbv_3ds of this TransactionGateway.  # noqa: E501
        :type: bool
        """

        self._support_vbv_3ds = support_vbv_3ds

    @property
    def supports_amex(self):
        """Gets the supports_amex of this TransactionGateway.  # noqa: E501

        If true, this gateway will attempt to process American Express transactions.  If false, the customer will not be allowed to use this type of Credit Card.  # noqa: E501

        :return: The supports_amex of this TransactionGateway.  # noqa: E501
        :rtype: bool
        """
        return self._supports_amex

    @supports_amex.setter
    def supports_amex(self, supports_amex):
        """Sets the supports_amex of this TransactionGateway.

        If true, this gateway will attempt to process American Express transactions.  If false, the customer will not be allowed to use this type of Credit Card.  # noqa: E501

        :param supports_amex: The supports_amex of this TransactionGateway.  # noqa: E501
        :type: bool
        """

        self._supports_amex = supports_amex

    @property
    def supports_diners_club(self):
        """Gets the supports_diners_club of this TransactionGateway.  # noqa: E501

        If true, this gateway will attempt to process Diners Club transactions.  If false, the customer will not be allowed to use this type of Credit Card.  # noqa: E501

        :return: The supports_diners_club of this TransactionGateway.  # noqa: E501
        :rtype: bool
        """
        return self._supports_diners_club

    @supports_diners_club.setter
    def supports_diners_club(self, supports_diners_club):
        """Sets the supports_diners_club of this TransactionGateway.

        If true, this gateway will attempt to process Diners Club transactions.  If false, the customer will not be allowed to use this type of Credit Card.  # noqa: E501

        :param supports_diners_club: The supports_diners_club of this TransactionGateway.  # noqa: E501
        :type: bool
        """

        self._supports_diners_club = supports_diners_club

    @property
    def supports_discover(self):
        """Gets the supports_discover of this TransactionGateway.  # noqa: E501

        If true, this gateway will attempt to process Discover transactions.  If false, the customer will not be allowed to use this type of Credit Card.  # noqa: E501

        :return: The supports_discover of this TransactionGateway.  # noqa: E501
        :rtype: bool
        """
        return self._supports_discover

    @supports_discover.setter
    def supports_discover(self, supports_discover):
        """Sets the supports_discover of this TransactionGateway.

        If true, this gateway will attempt to process Discover transactions.  If false, the customer will not be allowed to use this type of Credit Card.  # noqa: E501

        :param supports_discover: The supports_discover of this TransactionGateway.  # noqa: E501
        :type: bool
        """

        self._supports_discover = supports_discover

    @property
    def supports_echeck(self):
        """Gets the supports_echeck of this TransactionGateway.  # noqa: E501

        If true, this gateway will attempt to process e-Check transactions.  If false, the customer will not be allowed to use e-Checks.  # noqa: E501

        :return: The supports_echeck of this TransactionGateway.  # noqa: E501
        :rtype: bool
        """
        return self._supports_echeck

    @supports_echeck.setter
    def supports_echeck(self, supports_echeck):
        """Sets the supports_echeck of this TransactionGateway.

        If true, this gateway will attempt to process e-Check transactions.  If false, the customer will not be allowed to use e-Checks.  # noqa: E501

        :param supports_echeck: The supports_echeck of this TransactionGateway.  # noqa: E501
        :type: bool
        """

        self._supports_echeck = supports_echeck

    @property
    def supports_electronic_gift_card(self):
        """Gets the supports_electronic_gift_card of this TransactionGateway.  # noqa: E501

        if true, this gateway will attempt to process electronic gift cards.  # noqa: E501

        :return: The supports_electronic_gift_card of this TransactionGateway.  # noqa: E501
        :rtype: bool
        """
        return self._supports_electronic_gift_card

    @supports_electronic_gift_card.setter
    def supports_electronic_gift_card(self, supports_electronic_gift_card):
        """Sets the supports_electronic_gift_card of this TransactionGateway.

        if true, this gateway will attempt to process electronic gift cards.  # noqa: E501

        :param supports_electronic_gift_card: The supports_electronic_gift_card of this TransactionGateway.  # noqa: E501
        :type: bool
        """

        self._supports_electronic_gift_card = supports_electronic_gift_card

    @property
    def supports_jcb(self):
        """Gets the supports_jcb of this TransactionGateway.  # noqa: E501

        If true, this gateway will attempt to process JCB transactions.  If false, the customer will not be allowed to use this type of Credit Card.  # noqa: E501

        :return: The supports_jcb of this TransactionGateway.  # noqa: E501
        :rtype: bool
        """
        return self._supports_jcb

    @supports_jcb.setter
    def supports_jcb(self, supports_jcb):
        """Sets the supports_jcb of this TransactionGateway.

        If true, this gateway will attempt to process JCB transactions.  If false, the customer will not be allowed to use this type of Credit Card.  # noqa: E501

        :param supports_jcb: The supports_jcb of this TransactionGateway.  # noqa: E501
        :type: bool
        """

        self._supports_jcb = supports_jcb

    @property
    def supports_mastercard(self):
        """Gets the supports_mastercard of this TransactionGateway.  # noqa: E501

        If true, this gateway will attempt to process MasterCard transactions.  If false, the customer will not be allowed to use this type of Credit Card.  # noqa: E501

        :return: The supports_mastercard of this TransactionGateway.  # noqa: E501
        :rtype: bool
        """
        return self._supports_mastercard

    @supports_mastercard.setter
    def supports_mastercard(self, supports_mastercard):
        """Sets the supports_mastercard of this TransactionGateway.

        If true, this gateway will attempt to process MasterCard transactions.  If false, the customer will not be allowed to use this type of Credit Card.  # noqa: E501

        :param supports_mastercard: The supports_mastercard of this TransactionGateway.  # noqa: E501
        :type: bool
        """

        self._supports_mastercard = supports_mastercard

    @property
    def supports_visa(self):
        """Gets the supports_visa of this TransactionGateway.  # noqa: E501

        If true, this gateway will attempt to process VISA transactions.  If false, the customer will not be allowed to use this type of Credit Card.  # noqa: E501

        :return: The supports_visa of this TransactionGateway.  # noqa: E501
        :rtype: bool
        """
        return self._supports_visa

    @supports_visa.setter
    def supports_visa(self, supports_visa):
        """Sets the supports_visa of this TransactionGateway.

        If true, this gateway will attempt to process VISA transactions.  If false, the customer will not be allowed to use this type of Credit Card.  # noqa: E501

        :param supports_visa: The supports_visa of this TransactionGateway.  # noqa: E501
        :type: bool
        """

        self._supports_visa = supports_visa

    @property
    def third_party(self):
        """Gets the third_party of this TransactionGateway.  # noqa: E501

        True if this gateway supports third parties  # noqa: E501

        :return: The third_party of this TransactionGateway.  # noqa: E501
        :rtype: bool
        """
        return self._third_party

    @third_party.setter
    def third_party(self, third_party):
        """Sets the third_party of this TransactionGateway.

        True if this gateway supports third parties  # noqa: E501

        :param third_party: The third_party of this TransactionGateway.  # noqa: E501
        :type: bool
        """

        self._third_party = third_party

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TransactionGateway, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransactionGateway):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
