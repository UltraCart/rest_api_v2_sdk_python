# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RtgDayOfWeekRestriction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'abbreviation': 'str',
        'day_of_week': 'int',
        'selected': 'bool'
    }

    attribute_map = {
        'abbreviation': 'abbreviation',
        'day_of_week': 'day_of_week',
        'selected': 'selected'
    }

    def __init__(self, abbreviation=None, day_of_week=None, selected=None):  # noqa: E501
        """RtgDayOfWeekRestriction - a model defined in Swagger"""  # noqa: E501

        self._abbreviation = None
        self._day_of_week = None
        self._selected = None
        self.discriminator = None

        if abbreviation is not None:
            self.abbreviation = abbreviation
        if day_of_week is not None:
            self.day_of_week = day_of_week
        if selected is not None:
            self.selected = selected

    @property
    def abbreviation(self):
        """Gets the abbreviation of this RtgDayOfWeekRestriction.  # noqa: E501

        Human readable day of week abbreviation  # noqa: E501

        :return: The abbreviation of this RtgDayOfWeekRestriction.  # noqa: E501
        :rtype: str
        """
        return self._abbreviation

    @abbreviation.setter
    def abbreviation(self, abbreviation):
        """Sets the abbreviation of this RtgDayOfWeekRestriction.

        Human readable day of week abbreviation  # noqa: E501

        :param abbreviation: The abbreviation of this RtgDayOfWeekRestriction.  # noqa: E501
        :type: str
        """

        self._abbreviation = abbreviation

    @property
    def day_of_week(self):
        """Gets the day_of_week of this RtgDayOfWeekRestriction.  # noqa: E501

        1=Sun,2=Mon,3=Tue,4=Wed,5=Thu,6=Fri,7=Sat  # noqa: E501

        :return: The day_of_week of this RtgDayOfWeekRestriction.  # noqa: E501
        :rtype: int
        """
        return self._day_of_week

    @day_of_week.setter
    def day_of_week(self, day_of_week):
        """Sets the day_of_week of this RtgDayOfWeekRestriction.

        1=Sun,2=Mon,3=Tue,4=Wed,5=Thu,6=Fri,7=Sat  # noqa: E501

        :param day_of_week: The day_of_week of this RtgDayOfWeekRestriction.  # noqa: E501
        :type: int
        """

        self._day_of_week = day_of_week

    @property
    def selected(self):
        """Gets the selected of this RtgDayOfWeekRestriction.  # noqa: E501

        True if this rotating gateway is allowed to operate on this day of week.  If no days are selected, all days are allowed.  # noqa: E501

        :return: The selected of this RtgDayOfWeekRestriction.  # noqa: E501
        :rtype: bool
        """
        return self._selected

    @selected.setter
    def selected(self, selected):
        """Sets the selected of this RtgDayOfWeekRestriction.

        True if this rotating gateway is allowed to operate on this day of week.  If no days are selected, all days are allowed.  # noqa: E501

        :param selected: The selected of this RtgDayOfWeekRestriction.  # noqa: E501
        :type: bool
        """

        self._selected = selected

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RtgDayOfWeekRestriction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RtgDayOfWeekRestriction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
