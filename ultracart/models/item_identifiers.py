# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ItemIdentifiers(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'barcode': 'str',
        'barcode_gtin12': 'str',
        'barcode_gtin14': 'str',
        'barcode_upc11': 'str',
        'barcode_upc12': 'str',
        'manufacturer_name': 'str',
        'manufacturer_sku': 'str',
        'unspsc': 'str'
    }

    attribute_map = {
        'barcode': 'barcode',
        'barcode_gtin12': 'barcode_gtin12',
        'barcode_gtin14': 'barcode_gtin14',
        'barcode_upc11': 'barcode_upc11',
        'barcode_upc12': 'barcode_upc12',
        'manufacturer_name': 'manufacturer_name',
        'manufacturer_sku': 'manufacturer_sku',
        'unspsc': 'unspsc'
    }

    def __init__(self, barcode=None, barcode_gtin12=None, barcode_gtin14=None, barcode_upc11=None, barcode_upc12=None, manufacturer_name=None, manufacturer_sku=None, unspsc=None):  # noqa: E501
        """ItemIdentifiers - a model defined in Swagger"""  # noqa: E501

        self._barcode = None
        self._barcode_gtin12 = None
        self._barcode_gtin14 = None
        self._barcode_upc11 = None
        self._barcode_upc12 = None
        self._manufacturer_name = None
        self._manufacturer_sku = None
        self._unspsc = None
        self.discriminator = None

        if barcode is not None:
            self.barcode = barcode
        if barcode_gtin12 is not None:
            self.barcode_gtin12 = barcode_gtin12
        if barcode_gtin14 is not None:
            self.barcode_gtin14 = barcode_gtin14
        if barcode_upc11 is not None:
            self.barcode_upc11 = barcode_upc11
        if barcode_upc12 is not None:
            self.barcode_upc12 = barcode_upc12
        if manufacturer_name is not None:
            self.manufacturer_name = manufacturer_name
        if manufacturer_sku is not None:
            self.manufacturer_sku = manufacturer_sku
        if unspsc is not None:
            self.unspsc = unspsc

    @property
    def barcode(self):
        """Gets the barcode of this ItemIdentifiers.  # noqa: E501

        Barcode  # noqa: E501

        :return: The barcode of this ItemIdentifiers.  # noqa: E501
        :rtype: str
        """
        return self._barcode

    @barcode.setter
    def barcode(self, barcode):
        """Sets the barcode of this ItemIdentifiers.

        Barcode  # noqa: E501

        :param barcode: The barcode of this ItemIdentifiers.  # noqa: E501
        :type: str
        """
        if barcode is not None and len(barcode) > 30:
            raise ValueError("Invalid value for `barcode`, length must be less than or equal to `30`")  # noqa: E501

        self._barcode = barcode

    @property
    def barcode_gtin12(self):
        """Gets the barcode_gtin12 of this ItemIdentifiers.  # noqa: E501

        Barcode - GTIN 12  # noqa: E501

        :return: The barcode_gtin12 of this ItemIdentifiers.  # noqa: E501
        :rtype: str
        """
        return self._barcode_gtin12

    @barcode_gtin12.setter
    def barcode_gtin12(self, barcode_gtin12):
        """Sets the barcode_gtin12 of this ItemIdentifiers.

        Barcode - GTIN 12  # noqa: E501

        :param barcode_gtin12: The barcode_gtin12 of this ItemIdentifiers.  # noqa: E501
        :type: str
        """
        if barcode_gtin12 is not None and len(barcode_gtin12) > 12:
            raise ValueError("Invalid value for `barcode_gtin12`, length must be less than or equal to `12`")  # noqa: E501

        self._barcode_gtin12 = barcode_gtin12

    @property
    def barcode_gtin14(self):
        """Gets the barcode_gtin14 of this ItemIdentifiers.  # noqa: E501

        Barcode - GTIN 14  # noqa: E501

        :return: The barcode_gtin14 of this ItemIdentifiers.  # noqa: E501
        :rtype: str
        """
        return self._barcode_gtin14

    @barcode_gtin14.setter
    def barcode_gtin14(self, barcode_gtin14):
        """Sets the barcode_gtin14 of this ItemIdentifiers.

        Barcode - GTIN 14  # noqa: E501

        :param barcode_gtin14: The barcode_gtin14 of this ItemIdentifiers.  # noqa: E501
        :type: str
        """
        if barcode_gtin14 is not None and len(barcode_gtin14) > 14:
            raise ValueError("Invalid value for `barcode_gtin14`, length must be less than or equal to `14`")  # noqa: E501

        self._barcode_gtin14 = barcode_gtin14

    @property
    def barcode_upc11(self):
        """Gets the barcode_upc11 of this ItemIdentifiers.  # noqa: E501

        Barcode - UPC 11  # noqa: E501

        :return: The barcode_upc11 of this ItemIdentifiers.  # noqa: E501
        :rtype: str
        """
        return self._barcode_upc11

    @barcode_upc11.setter
    def barcode_upc11(self, barcode_upc11):
        """Sets the barcode_upc11 of this ItemIdentifiers.

        Barcode - UPC 11  # noqa: E501

        :param barcode_upc11: The barcode_upc11 of this ItemIdentifiers.  # noqa: E501
        :type: str
        """
        if barcode_upc11 is not None and len(barcode_upc11) > 11:
            raise ValueError("Invalid value for `barcode_upc11`, length must be less than or equal to `11`")  # noqa: E501

        self._barcode_upc11 = barcode_upc11

    @property
    def barcode_upc12(self):
        """Gets the barcode_upc12 of this ItemIdentifiers.  # noqa: E501

        Barcode - UPC 12  # noqa: E501

        :return: The barcode_upc12 of this ItemIdentifiers.  # noqa: E501
        :rtype: str
        """
        return self._barcode_upc12

    @barcode_upc12.setter
    def barcode_upc12(self, barcode_upc12):
        """Sets the barcode_upc12 of this ItemIdentifiers.

        Barcode - UPC 12  # noqa: E501

        :param barcode_upc12: The barcode_upc12 of this ItemIdentifiers.  # noqa: E501
        :type: str
        """
        if barcode_upc12 is not None and len(barcode_upc12) > 12:
            raise ValueError("Invalid value for `barcode_upc12`, length must be less than or equal to `12`")  # noqa: E501

        self._barcode_upc12 = barcode_upc12

    @property
    def manufacturer_name(self):
        """Gets the manufacturer_name of this ItemIdentifiers.  # noqa: E501

        Manufacturer Name  # noqa: E501

        :return: The manufacturer_name of this ItemIdentifiers.  # noqa: E501
        :rtype: str
        """
        return self._manufacturer_name

    @manufacturer_name.setter
    def manufacturer_name(self, manufacturer_name):
        """Sets the manufacturer_name of this ItemIdentifiers.

        Manufacturer Name  # noqa: E501

        :param manufacturer_name: The manufacturer_name of this ItemIdentifiers.  # noqa: E501
        :type: str
        """
        if manufacturer_name is not None and len(manufacturer_name) > 50:
            raise ValueError("Invalid value for `manufacturer_name`, length must be less than or equal to `50`")  # noqa: E501

        self._manufacturer_name = manufacturer_name

    @property
    def manufacturer_sku(self):
        """Gets the manufacturer_sku of this ItemIdentifiers.  # noqa: E501

        Manufacturer SKU  # noqa: E501

        :return: The manufacturer_sku of this ItemIdentifiers.  # noqa: E501
        :rtype: str
        """
        return self._manufacturer_sku

    @manufacturer_sku.setter
    def manufacturer_sku(self, manufacturer_sku):
        """Sets the manufacturer_sku of this ItemIdentifiers.

        Manufacturer SKU  # noqa: E501

        :param manufacturer_sku: The manufacturer_sku of this ItemIdentifiers.  # noqa: E501
        :type: str
        """
        if manufacturer_sku is not None and len(manufacturer_sku) > 25:
            raise ValueError("Invalid value for `manufacturer_sku`, length must be less than or equal to `25`")  # noqa: E501

        self._manufacturer_sku = manufacturer_sku

    @property
    def unspsc(self):
        """Gets the unspsc of this ItemIdentifiers.  # noqa: E501

        UNSPSC  # noqa: E501

        :return: The unspsc of this ItemIdentifiers.  # noqa: E501
        :rtype: str
        """
        return self._unspsc

    @unspsc.setter
    def unspsc(self, unspsc):
        """Sets the unspsc of this ItemIdentifiers.

        UNSPSC  # noqa: E501

        :param unspsc: The unspsc of this ItemIdentifiers.  # noqa: E501
        :type: str
        """
        if unspsc is not None and len(unspsc) > 20:
            raise ValueError("Invalid value for `unspsc`, length must be less than or equal to `20`")  # noqa: E501

        self._unspsc = unspsc

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ItemIdentifiers, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ItemIdentifiers):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
