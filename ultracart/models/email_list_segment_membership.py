# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class EmailListSegmentMembership(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email_list_uuid': 'str',
        'email_segment_uuid': 'str',
        'exclude': 'bool',
        'name': 'str'
    }

    attribute_map = {
        'email_list_uuid': 'email_list_uuid',
        'email_segment_uuid': 'email_segment_uuid',
        'exclude': 'exclude',
        'name': 'name'
    }

    def __init__(self, email_list_uuid=None, email_segment_uuid=None, exclude=None, name=None):
        """
        EmailListSegmentMembership - a model defined in Swagger
        """

        self._email_list_uuid = None
        self._email_segment_uuid = None
        self._exclude = None
        self._name = None
        self.discriminator = None

        if email_list_uuid is not None:
          self.email_list_uuid = email_list_uuid
        if email_segment_uuid is not None:
          self.email_segment_uuid = email_segment_uuid
        if exclude is not None:
          self.exclude = exclude
        if name is not None:
          self.name = name

    @property
    def email_list_uuid(self):
        """
        Gets the email_list_uuid of this EmailListSegmentMembership.
        UUID identifying this email list or null if this is a segment

        :return: The email_list_uuid of this EmailListSegmentMembership.
        :rtype: str
        """
        return self._email_list_uuid

    @email_list_uuid.setter
    def email_list_uuid(self, email_list_uuid):
        """
        Sets the email_list_uuid of this EmailListSegmentMembership.
        UUID identifying this email list or null if this is a segment

        :param email_list_uuid: The email_list_uuid of this EmailListSegmentMembership.
        :type: str
        """

        self._email_list_uuid = email_list_uuid

    @property
    def email_segment_uuid(self):
        """
        Gets the email_segment_uuid of this EmailListSegmentMembership.
        UUID identifying this email segment or null if this is a list

        :return: The email_segment_uuid of this EmailListSegmentMembership.
        :rtype: str
        """
        return self._email_segment_uuid

    @email_segment_uuid.setter
    def email_segment_uuid(self, email_segment_uuid):
        """
        Sets the email_segment_uuid of this EmailListSegmentMembership.
        UUID identifying this email segment or null if this is a list

        :param email_segment_uuid: The email_segment_uuid of this EmailListSegmentMembership.
        :type: str
        """

        self._email_segment_uuid = email_segment_uuid

    @property
    def exclude(self):
        """
        Gets the exclude of this EmailListSegmentMembership.
        true if customers from this list/segment is excluded from membership

        :return: The exclude of this EmailListSegmentMembership.
        :rtype: bool
        """
        return self._exclude

    @exclude.setter
    def exclude(self, exclude):
        """
        Sets the exclude of this EmailListSegmentMembership.
        true if customers from this list/segment is excluded from membership

        :param exclude: The exclude of this EmailListSegmentMembership.
        :type: bool
        """

        self._exclude = exclude

    @property
    def name(self):
        """
        Gets the name of this EmailListSegmentMembership.
        Name of this email list or segment

        :return: The name of this EmailListSegmentMembership.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this EmailListSegmentMembership.
        Name of this email list or segment

        :param name: The name of this EmailListSegmentMembership.
        :type: str
        """

        self._name = name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, EmailListSegmentMembership):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
