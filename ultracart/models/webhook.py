# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Webhook(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'api_user_oid': 'int',
        'api_version': 'str',
        'application_profile': 'ApiUserApplicationProfile',
        'authentication_type': 'str',
        'basic_password': 'str',
        'basic_username': 'str',
        'compress_events': 'bool',
        'consecutive_failures': 'int',
        'disabled': 'bool',
        'event_categories': 'list[WebhookEventCategory]',
        'iam_access_key': 'str',
        'iam_secret_key': 'str',
        'maximum_events': 'int',
        'maximum_size': 'int',
        'merchant_id': 'str',
        'next_retry_after': 'str',
        'pending': 'int',
        'webhook_oid': 'int',
        'webhook_url': 'str'
    }

    attribute_map = {
        'api_user_oid': 'api_user_oid',
        'api_version': 'api_version',
        'application_profile': 'application_profile',
        'authentication_type': 'authentication_type',
        'basic_password': 'basic_password',
        'basic_username': 'basic_username',
        'compress_events': 'compress_events',
        'consecutive_failures': 'consecutive_failures',
        'disabled': 'disabled',
        'event_categories': 'event_categories',
        'iam_access_key': 'iam_access_key',
        'iam_secret_key': 'iam_secret_key',
        'maximum_events': 'maximum_events',
        'maximum_size': 'maximum_size',
        'merchant_id': 'merchant_id',
        'next_retry_after': 'next_retry_after',
        'pending': 'pending',
        'webhook_oid': 'webhook_oid',
        'webhook_url': 'webhook_url'
    }

    def __init__(self, api_user_oid=None, api_version=None, application_profile=None, authentication_type=None, basic_password=None, basic_username=None, compress_events=None, consecutive_failures=None, disabled=None, event_categories=None, iam_access_key=None, iam_secret_key=None, maximum_events=None, maximum_size=None, merchant_id=None, next_retry_after=None, pending=None, webhook_oid=None, webhook_url=None):  # noqa: E501
        """Webhook - a model defined in Swagger"""  # noqa: E501

        self._api_user_oid = None
        self._api_version = None
        self._application_profile = None
        self._authentication_type = None
        self._basic_password = None
        self._basic_username = None
        self._compress_events = None
        self._consecutive_failures = None
        self._disabled = None
        self._event_categories = None
        self._iam_access_key = None
        self._iam_secret_key = None
        self._maximum_events = None
        self._maximum_size = None
        self._merchant_id = None
        self._next_retry_after = None
        self._pending = None
        self._webhook_oid = None
        self._webhook_url = None
        self.discriminator = None

        if api_user_oid is not None:
            self.api_user_oid = api_user_oid
        if api_version is not None:
            self.api_version = api_version
        if application_profile is not None:
            self.application_profile = application_profile
        if authentication_type is not None:
            self.authentication_type = authentication_type
        if basic_password is not None:
            self.basic_password = basic_password
        if basic_username is not None:
            self.basic_username = basic_username
        if compress_events is not None:
            self.compress_events = compress_events
        if consecutive_failures is not None:
            self.consecutive_failures = consecutive_failures
        if disabled is not None:
            self.disabled = disabled
        if event_categories is not None:
            self.event_categories = event_categories
        if iam_access_key is not None:
            self.iam_access_key = iam_access_key
        if iam_secret_key is not None:
            self.iam_secret_key = iam_secret_key
        if maximum_events is not None:
            self.maximum_events = maximum_events
        if maximum_size is not None:
            self.maximum_size = maximum_size
        if merchant_id is not None:
            self.merchant_id = merchant_id
        if next_retry_after is not None:
            self.next_retry_after = next_retry_after
        if pending is not None:
            self.pending = pending
        if webhook_oid is not None:
            self.webhook_oid = webhook_oid
        if webhook_url is not None:
            self.webhook_url = webhook_url

    @property
    def api_user_oid(self):
        """Gets the api_user_oid of this Webhook.  # noqa: E501

        Populated if webhook associated with an API user  # noqa: E501

        :return: The api_user_oid of this Webhook.  # noqa: E501
        :rtype: int
        """
        return self._api_user_oid

    @api_user_oid.setter
    def api_user_oid(self, api_user_oid):
        """Sets the api_user_oid of this Webhook.

        Populated if webhook associated with an API user  # noqa: E501

        :param api_user_oid: The api_user_oid of this Webhook.  # noqa: E501
        :type: int
        """

        self._api_user_oid = api_user_oid

    @property
    def api_version(self):
        """Gets the api_version of this Webhook.  # noqa: E501

        Version of the API objects that are sent in notifications  # noqa: E501

        :return: The api_version of this Webhook.  # noqa: E501
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """Sets the api_version of this Webhook.

        Version of the API objects that are sent in notifications  # noqa: E501

        :param api_version: The api_version of this Webhook.  # noqa: E501
        :type: str
        """
        allowed_values = ["2017-03-01"]  # noqa: E501
        if api_version not in allowed_values:
            raise ValueError(
                "Invalid value for `api_version` ({0}), must be one of {1}"  # noqa: E501
                .format(api_version, allowed_values)
            )

        self._api_version = api_version

    @property
    def application_profile(self):
        """Gets the application_profile of this Webhook.  # noqa: E501


        :return: The application_profile of this Webhook.  # noqa: E501
        :rtype: ApiUserApplicationProfile
        """
        return self._application_profile

    @application_profile.setter
    def application_profile(self, application_profile):
        """Sets the application_profile of this Webhook.


        :param application_profile: The application_profile of this Webhook.  # noqa: E501
        :type: ApiUserApplicationProfile
        """

        self._application_profile = application_profile

    @property
    def authentication_type(self):
        """Gets the authentication_type of this Webhook.  # noqa: E501

        The type of authentication this webhook will use when communicating with your server  # noqa: E501

        :return: The authentication_type of this Webhook.  # noqa: E501
        :rtype: str
        """
        return self._authentication_type

    @authentication_type.setter
    def authentication_type(self, authentication_type):
        """Sets the authentication_type of this Webhook.

        The type of authentication this webhook will use when communicating with your server  # noqa: E501

        :param authentication_type: The authentication_type of this Webhook.  # noqa: E501
        :type: str
        """
        allowed_values = ["none", "basic"]  # noqa: E501
        if authentication_type not in allowed_values:
            raise ValueError(
                "Invalid value for `authentication_type` ({0}), must be one of {1}"  # noqa: E501
                .format(authentication_type, allowed_values)
            )

        self._authentication_type = authentication_type

    @property
    def basic_password(self):
        """Gets the basic_password of this Webhook.  # noqa: E501

        Basic authentication password  # noqa: E501

        :return: The basic_password of this Webhook.  # noqa: E501
        :rtype: str
        """
        return self._basic_password

    @basic_password.setter
    def basic_password(self, basic_password):
        """Sets the basic_password of this Webhook.

        Basic authentication password  # noqa: E501

        :param basic_password: The basic_password of this Webhook.  # noqa: E501
        :type: str
        """

        self._basic_password = basic_password

    @property
    def basic_username(self):
        """Gets the basic_username of this Webhook.  # noqa: E501

        Basic authentication user name  # noqa: E501

        :return: The basic_username of this Webhook.  # noqa: E501
        :rtype: str
        """
        return self._basic_username

    @basic_username.setter
    def basic_username(self, basic_username):
        """Sets the basic_username of this Webhook.

        Basic authentication user name  # noqa: E501

        :param basic_username: The basic_username of this Webhook.  # noqa: E501
        :type: str
        """

        self._basic_username = basic_username

    @property
    def compress_events(self):
        """Gets the compress_events of this Webhook.  # noqa: E501

        Compress events with GZIP then base 64 encode them as a string  # noqa: E501

        :return: The compress_events of this Webhook.  # noqa: E501
        :rtype: bool
        """
        return self._compress_events

    @compress_events.setter
    def compress_events(self, compress_events):
        """Sets the compress_events of this Webhook.

        Compress events with GZIP then base 64 encode them as a string  # noqa: E501

        :param compress_events: The compress_events of this Webhook.  # noqa: E501
        :type: bool
        """

        self._compress_events = compress_events

    @property
    def consecutive_failures(self):
        """Gets the consecutive_failures of this Webhook.  # noqa: E501

        The number of consecutive failures that have occurred trying to deliver notifications to the target server  # noqa: E501

        :return: The consecutive_failures of this Webhook.  # noqa: E501
        :rtype: int
        """
        return self._consecutive_failures

    @consecutive_failures.setter
    def consecutive_failures(self, consecutive_failures):
        """Sets the consecutive_failures of this Webhook.

        The number of consecutive failures that have occurred trying to deliver notifications to the target server  # noqa: E501

        :param consecutive_failures: The consecutive_failures of this Webhook.  # noqa: E501
        :type: int
        """

        self._consecutive_failures = consecutive_failures

    @property
    def disabled(self):
        """Gets the disabled of this Webhook.  # noqa: E501

        True if the webhook has been disabled  # noqa: E501

        :return: The disabled of this Webhook.  # noqa: E501
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this Webhook.

        True if the webhook has been disabled  # noqa: E501

        :param disabled: The disabled of this Webhook.  # noqa: E501
        :type: bool
        """

        self._disabled = disabled

    @property
    def event_categories(self):
        """Gets the event_categories of this Webhook.  # noqa: E501

        The categories of events.  Individual events and subscriptions are handled in the child objects.  _placeholders parameter effects the population of this on a retrieval.  # noqa: E501

        :return: The event_categories of this Webhook.  # noqa: E501
        :rtype: list[WebhookEventCategory]
        """
        return self._event_categories

    @event_categories.setter
    def event_categories(self, event_categories):
        """Sets the event_categories of this Webhook.

        The categories of events.  Individual events and subscriptions are handled in the child objects.  _placeholders parameter effects the population of this on a retrieval.  # noqa: E501

        :param event_categories: The event_categories of this Webhook.  # noqa: E501
        :type: list[WebhookEventCategory]
        """

        self._event_categories = event_categories

    @property
    def iam_access_key(self):
        """Gets the iam_access_key of this Webhook.  # noqa: E501

        IAM Access Key for AWS SQS Delivery  # noqa: E501

        :return: The iam_access_key of this Webhook.  # noqa: E501
        :rtype: str
        """
        return self._iam_access_key

    @iam_access_key.setter
    def iam_access_key(self, iam_access_key):
        """Sets the iam_access_key of this Webhook.

        IAM Access Key for AWS SQS Delivery  # noqa: E501

        :param iam_access_key: The iam_access_key of this Webhook.  # noqa: E501
        :type: str
        """

        self._iam_access_key = iam_access_key

    @property
    def iam_secret_key(self):
        """Gets the iam_secret_key of this Webhook.  # noqa: E501

        IAM Secret Key for AWS SQS Delivery  # noqa: E501

        :return: The iam_secret_key of this Webhook.  # noqa: E501
        :rtype: str
        """
        return self._iam_secret_key

    @iam_secret_key.setter
    def iam_secret_key(self, iam_secret_key):
        """Sets the iam_secret_key of this Webhook.

        IAM Secret Key for AWS SQS Delivery  # noqa: E501

        :param iam_secret_key: The iam_secret_key of this Webhook.  # noqa: E501
        :type: str
        """

        self._iam_secret_key = iam_secret_key

    @property
    def maximum_events(self):
        """Gets the maximum_events of this Webhook.  # noqa: E501

        The maximum number of events in the payload that UltraCart will deliver  # noqa: E501

        :return: The maximum_events of this Webhook.  # noqa: E501
        :rtype: int
        """
        return self._maximum_events

    @maximum_events.setter
    def maximum_events(self, maximum_events):
        """Sets the maximum_events of this Webhook.

        The maximum number of events in the payload that UltraCart will deliver  # noqa: E501

        :param maximum_events: The maximum_events of this Webhook.  # noqa: E501
        :type: int
        """

        self._maximum_events = maximum_events

    @property
    def maximum_size(self):
        """Gets the maximum_size of this Webhook.  # noqa: E501

        The maximum size of the payload that UltraCart will deliver  # noqa: E501

        :return: The maximum_size of this Webhook.  # noqa: E501
        :rtype: int
        """
        return self._maximum_size

    @maximum_size.setter
    def maximum_size(self, maximum_size):
        """Sets the maximum_size of this Webhook.

        The maximum size of the payload that UltraCart will deliver  # noqa: E501

        :param maximum_size: The maximum_size of this Webhook.  # noqa: E501
        :type: int
        """

        self._maximum_size = maximum_size

    @property
    def merchant_id(self):
        """Gets the merchant_id of this Webhook.  # noqa: E501

        The UltraCart merchant ID that owns this webhook  # noqa: E501

        :return: The merchant_id of this Webhook.  # noqa: E501
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this Webhook.

        The UltraCart merchant ID that owns this webhook  # noqa: E501

        :param merchant_id: The merchant_id of this Webhook.  # noqa: E501
        :type: str
        """

        self._merchant_id = merchant_id

    @property
    def next_retry_after(self):
        """Gets the next_retry_after of this Webhook.  # noqa: E501

        The next time UltraCart will attempt delivery if failures have been occurring  # noqa: E501

        :return: The next_retry_after of this Webhook.  # noqa: E501
        :rtype: str
        """
        return self._next_retry_after

    @next_retry_after.setter
    def next_retry_after(self, next_retry_after):
        """Sets the next_retry_after of this Webhook.

        The next time UltraCart will attempt delivery if failures have been occurring  # noqa: E501

        :param next_retry_after: The next_retry_after of this Webhook.  # noqa: E501
        :type: str
        """

        self._next_retry_after = next_retry_after

    @property
    def pending(self):
        """Gets the pending of this Webhook.  # noqa: E501

        The number of pending events for this webhook  # noqa: E501

        :return: The pending of this Webhook.  # noqa: E501
        :rtype: int
        """
        return self._pending

    @pending.setter
    def pending(self, pending):
        """Sets the pending of this Webhook.

        The number of pending events for this webhook  # noqa: E501

        :param pending: The pending of this Webhook.  # noqa: E501
        :type: int
        """

        self._pending = pending

    @property
    def webhook_oid(self):
        """Gets the webhook_oid of this Webhook.  # noqa: E501

        The object identifier for this webhook  # noqa: E501

        :return: The webhook_oid of this Webhook.  # noqa: E501
        :rtype: int
        """
        return self._webhook_oid

    @webhook_oid.setter
    def webhook_oid(self, webhook_oid):
        """Sets the webhook_oid of this Webhook.

        The object identifier for this webhook  # noqa: E501

        :param webhook_oid: The webhook_oid of this Webhook.  # noqa: E501
        :type: int
        """

        self._webhook_oid = webhook_oid

    @property
    def webhook_url(self):
        """Gets the webhook_url of this Webhook.  # noqa: E501

        The URL to deliver events to.  Must be HTTPS for customer related information.  # noqa: E501

        :return: The webhook_url of this Webhook.  # noqa: E501
        :rtype: str
        """
        return self._webhook_url

    @webhook_url.setter
    def webhook_url(self, webhook_url):
        """Sets the webhook_url of this Webhook.

        The URL to deliver events to.  Must be HTTPS for customer related information.  # noqa: E501

        :param webhook_url: The webhook_url of this Webhook.  # noqa: E501
        :type: str
        """

        self._webhook_url = webhook_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Webhook, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Webhook):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
