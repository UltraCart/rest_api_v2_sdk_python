# coding: utf-8

"""
    UltraCart Rest API V2

    This is the next generation UltraCart REST API...

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Webhook(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, api_user_oid=None, api_version=None, application_profile=None, authentication_type=None, basic_password=None, basic_username=None, consecutive_failures=None, disabled=None, event_categories=None, maximum_events=None, maximum_size=None, merchant_id=None, next_retry_after=None, pending=None, webhook_oid=None, webhook_url=None):
        """
        Webhook - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'api_user_oid': 'int',
            'api_version': 'str',
            'application_profile': 'ApiUserApplicationProfile',
            'authentication_type': 'str',
            'basic_password': 'str',
            'basic_username': 'str',
            'consecutive_failures': 'int',
            'disabled': 'bool',
            'event_categories': 'list[WebhookEventCategory]',
            'maximum_events': 'int',
            'maximum_size': 'int',
            'merchant_id': 'str',
            'next_retry_after': 'str',
            'pending': 'int',
            'webhook_oid': 'int',
            'webhook_url': 'str'
        }

        self.attribute_map = {
            'api_user_oid': 'api_user_oid',
            'api_version': 'api_version',
            'application_profile': 'application_profile',
            'authentication_type': 'authentication_type',
            'basic_password': 'basic_password',
            'basic_username': 'basic_username',
            'consecutive_failures': 'consecutive_failures',
            'disabled': 'disabled',
            'event_categories': 'event_categories',
            'maximum_events': 'maximum_events',
            'maximum_size': 'maximum_size',
            'merchant_id': 'merchant_id',
            'next_retry_after': 'next_retry_after',
            'pending': 'pending',
            'webhook_oid': 'webhook_oid',
            'webhook_url': 'webhook_url'
        }

        self._api_user_oid = api_user_oid
        self._api_version = api_version
        self._application_profile = application_profile
        self._authentication_type = authentication_type
        self._basic_password = basic_password
        self._basic_username = basic_username
        self._consecutive_failures = consecutive_failures
        self._disabled = disabled
        self._event_categories = event_categories
        self._maximum_events = maximum_events
        self._maximum_size = maximum_size
        self._merchant_id = merchant_id
        self._next_retry_after = next_retry_after
        self._pending = pending
        self._webhook_oid = webhook_oid
        self._webhook_url = webhook_url

    @property
    def api_user_oid(self):
        """
        Gets the api_user_oid of this Webhook.
        Populated if webhook associated with an API user

        :return: The api_user_oid of this Webhook.
        :rtype: int
        """
        return self._api_user_oid

    @api_user_oid.setter
    def api_user_oid(self, api_user_oid):
        """
        Sets the api_user_oid of this Webhook.
        Populated if webhook associated with an API user

        :param api_user_oid: The api_user_oid of this Webhook.
        :type: int
        """

        self._api_user_oid = api_user_oid

    @property
    def api_version(self):
        """
        Gets the api_version of this Webhook.
        Version of the API objects that are sent in notifications

        :return: The api_version of this Webhook.
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """
        Sets the api_version of this Webhook.
        Version of the API objects that are sent in notifications

        :param api_version: The api_version of this Webhook.
        :type: str
        """
        allowed_values = ["2017-03-01"]
        if api_version not in allowed_values:
            raise ValueError(
                "Invalid value for `api_version` ({0}), must be one of {1}"
                .format(api_version, allowed_values)
            )

        self._api_version = api_version

    @property
    def application_profile(self):
        """
        Gets the application_profile of this Webhook.


        :return: The application_profile of this Webhook.
        :rtype: ApiUserApplicationProfile
        """
        return self._application_profile

    @application_profile.setter
    def application_profile(self, application_profile):
        """
        Sets the application_profile of this Webhook.


        :param application_profile: The application_profile of this Webhook.
        :type: ApiUserApplicationProfile
        """

        self._application_profile = application_profile

    @property
    def authentication_type(self):
        """
        Gets the authentication_type of this Webhook.
        The type of authentication this webhook will use when communicating with your server

        :return: The authentication_type of this Webhook.
        :rtype: str
        """
        return self._authentication_type

    @authentication_type.setter
    def authentication_type(self, authentication_type):
        """
        Sets the authentication_type of this Webhook.
        The type of authentication this webhook will use when communicating with your server

        :param authentication_type: The authentication_type of this Webhook.
        :type: str
        """
        allowed_values = ["none", "basic"]
        if authentication_type not in allowed_values:
            raise ValueError(
                "Invalid value for `authentication_type` ({0}), must be one of {1}"
                .format(authentication_type, allowed_values)
            )

        self._authentication_type = authentication_type

    @property
    def basic_password(self):
        """
        Gets the basic_password of this Webhook.
        Basic authentication password

        :return: The basic_password of this Webhook.
        :rtype: str
        """
        return self._basic_password

    @basic_password.setter
    def basic_password(self, basic_password):
        """
        Sets the basic_password of this Webhook.
        Basic authentication password

        :param basic_password: The basic_password of this Webhook.
        :type: str
        """

        self._basic_password = basic_password

    @property
    def basic_username(self):
        """
        Gets the basic_username of this Webhook.
        Basic authentication user name

        :return: The basic_username of this Webhook.
        :rtype: str
        """
        return self._basic_username

    @basic_username.setter
    def basic_username(self, basic_username):
        """
        Sets the basic_username of this Webhook.
        Basic authentication user name

        :param basic_username: The basic_username of this Webhook.
        :type: str
        """

        self._basic_username = basic_username

    @property
    def consecutive_failures(self):
        """
        Gets the consecutive_failures of this Webhook.
        The number of consecutive failures that have occurred trying to deliver notifications to the target server

        :return: The consecutive_failures of this Webhook.
        :rtype: int
        """
        return self._consecutive_failures

    @consecutive_failures.setter
    def consecutive_failures(self, consecutive_failures):
        """
        Sets the consecutive_failures of this Webhook.
        The number of consecutive failures that have occurred trying to deliver notifications to the target server

        :param consecutive_failures: The consecutive_failures of this Webhook.
        :type: int
        """

        self._consecutive_failures = consecutive_failures

    @property
    def disabled(self):
        """
        Gets the disabled of this Webhook.
        True if the webhook has been disabled

        :return: The disabled of this Webhook.
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """
        Sets the disabled of this Webhook.
        True if the webhook has been disabled

        :param disabled: The disabled of this Webhook.
        :type: bool
        """

        self._disabled = disabled

    @property
    def event_categories(self):
        """
        Gets the event_categories of this Webhook.
        The categories of events.  Individual events and subscriptions are handled in the child objects.  _placeholders parameter effects the population of this on a retrieval.

        :return: The event_categories of this Webhook.
        :rtype: list[WebhookEventCategory]
        """
        return self._event_categories

    @event_categories.setter
    def event_categories(self, event_categories):
        """
        Sets the event_categories of this Webhook.
        The categories of events.  Individual events and subscriptions are handled in the child objects.  _placeholders parameter effects the population of this on a retrieval.

        :param event_categories: The event_categories of this Webhook.
        :type: list[WebhookEventCategory]
        """

        self._event_categories = event_categories

    @property
    def maximum_events(self):
        """
        Gets the maximum_events of this Webhook.
        The maximum number of events in the payload that UltraCart will deliver

        :return: The maximum_events of this Webhook.
        :rtype: int
        """
        return self._maximum_events

    @maximum_events.setter
    def maximum_events(self, maximum_events):
        """
        Sets the maximum_events of this Webhook.
        The maximum number of events in the payload that UltraCart will deliver

        :param maximum_events: The maximum_events of this Webhook.
        :type: int
        """

        self._maximum_events = maximum_events

    @property
    def maximum_size(self):
        """
        Gets the maximum_size of this Webhook.
        The maximum size of the payload that UltraCart will deliver

        :return: The maximum_size of this Webhook.
        :rtype: int
        """
        return self._maximum_size

    @maximum_size.setter
    def maximum_size(self, maximum_size):
        """
        Sets the maximum_size of this Webhook.
        The maximum size of the payload that UltraCart will deliver

        :param maximum_size: The maximum_size of this Webhook.
        :type: int
        """

        self._maximum_size = maximum_size

    @property
    def merchant_id(self):
        """
        Gets the merchant_id of this Webhook.
        The UltraCart merchant ID that owns this webhook

        :return: The merchant_id of this Webhook.
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """
        Sets the merchant_id of this Webhook.
        The UltraCart merchant ID that owns this webhook

        :param merchant_id: The merchant_id of this Webhook.
        :type: str
        """

        self._merchant_id = merchant_id

    @property
    def next_retry_after(self):
        """
        Gets the next_retry_after of this Webhook.
        The next time UltraCart will attempt delivery if failures have been occurring

        :return: The next_retry_after of this Webhook.
        :rtype: str
        """
        return self._next_retry_after

    @next_retry_after.setter
    def next_retry_after(self, next_retry_after):
        """
        Sets the next_retry_after of this Webhook.
        The next time UltraCart will attempt delivery if failures have been occurring

        :param next_retry_after: The next_retry_after of this Webhook.
        :type: str
        """

        self._next_retry_after = next_retry_after

    @property
    def pending(self):
        """
        Gets the pending of this Webhook.
        The number of pending events for this webhook

        :return: The pending of this Webhook.
        :rtype: int
        """
        return self._pending

    @pending.setter
    def pending(self, pending):
        """
        Sets the pending of this Webhook.
        The number of pending events for this webhook

        :param pending: The pending of this Webhook.
        :type: int
        """

        self._pending = pending

    @property
    def webhook_oid(self):
        """
        Gets the webhook_oid of this Webhook.
        The object identifier for this webhook

        :return: The webhook_oid of this Webhook.
        :rtype: int
        """
        return self._webhook_oid

    @webhook_oid.setter
    def webhook_oid(self, webhook_oid):
        """
        Sets the webhook_oid of this Webhook.
        The object identifier for this webhook

        :param webhook_oid: The webhook_oid of this Webhook.
        :type: int
        """

        self._webhook_oid = webhook_oid

    @property
    def webhook_url(self):
        """
        Gets the webhook_url of this Webhook.
        The URL to deliver events to.  Must be HTTPS for customer related information.

        :return: The webhook_url of this Webhook.
        :rtype: str
        """
        return self._webhook_url

    @webhook_url.setter
    def webhook_url(self, webhook_url):
        """
        Sets the webhook_url of this Webhook.
        The URL to deliver events to.  Must be HTTPS for customer related information.

        :param webhook_url: The webhook_url of this Webhook.
        :type: str
        """

        self._webhook_url = webhook_url

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
