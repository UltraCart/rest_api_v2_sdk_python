# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AddLibraryItemRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cjson': 'str',
        'content_type': 'str',
        'storefront_oid': 'int',
        'title': 'str',
        'uuid': 'str'
    }

    attribute_map = {
        'cjson': 'cjson',
        'content_type': 'content_type',
        'storefront_oid': 'storefront_oid',
        'title': 'title',
        'uuid': 'uuid'
    }

    def __init__(self, cjson=None, content_type=None, storefront_oid=None, title=None, uuid=None):
        """
        AddLibraryItemRequest - a model defined in Swagger
        """

        self._cjson = None
        self._content_type = None
        self._storefront_oid = None
        self._title = None
        self._uuid = None
        self.discriminator = None

        if cjson is not None:
          self.cjson = cjson
        if content_type is not None:
          self.content_type = content_type
        if storefront_oid is not None:
          self.storefront_oid = storefront_oid
        if title is not None:
          self.title = title
        if uuid is not None:
          self.uuid = uuid

    @property
    def cjson(self):
        """
        Gets the cjson of this AddLibraryItemRequest.
        Cjson to be added to library

        :return: The cjson of this AddLibraryItemRequest.
        :rtype: str
        """
        return self._cjson

    @cjson.setter
    def cjson(self, cjson):
        """
        Sets the cjson of this AddLibraryItemRequest.
        Cjson to be added to library

        :param cjson: The cjson of this AddLibraryItemRequest.
        :type: str
        """

        self._cjson = cjson

    @property
    def content_type(self):
        """
        Gets the content_type of this AddLibraryItemRequest.
        flow, campaign, cjson, or upsell

        :return: The content_type of this AddLibraryItemRequest.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """
        Sets the content_type of this AddLibraryItemRequest.
        flow, campaign, cjson, or upsell

        :param content_type: The content_type of this AddLibraryItemRequest.
        :type: str
        """

        self._content_type = content_type

    @property
    def storefront_oid(self):
        """
        Gets the storefront_oid of this AddLibraryItemRequest.
        StoreFront oid where content originates necessary for tracking down relative assets

        :return: The storefront_oid of this AddLibraryItemRequest.
        :rtype: int
        """
        return self._storefront_oid

    @storefront_oid.setter
    def storefront_oid(self, storefront_oid):
        """
        Sets the storefront_oid of this AddLibraryItemRequest.
        StoreFront oid where content originates necessary for tracking down relative assets

        :param storefront_oid: The storefront_oid of this AddLibraryItemRequest.
        :type: int
        """

        self._storefront_oid = storefront_oid

    @property
    def title(self):
        """
        Gets the title of this AddLibraryItemRequest.
        title of library item, usually the name of the flow or campaign, or description of cjson

        :return: The title of this AddLibraryItemRequest.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this AddLibraryItemRequest.
        title of library item, usually the name of the flow or campaign, or description of cjson

        :param title: The title of this AddLibraryItemRequest.
        :type: str
        """

        self._title = title

    @property
    def uuid(self):
        """
        Gets the uuid of this AddLibraryItemRequest.
        UUID of communication flow or campaign, null if this item is neither

        :return: The uuid of this AddLibraryItemRequest.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """
        Sets the uuid of this AddLibraryItemRequest.
        UUID of communication flow or campaign, null if this item is neither

        :param uuid: The uuid of this AddLibraryItemRequest.
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AddLibraryItemRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
