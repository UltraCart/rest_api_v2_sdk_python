# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AddLibraryItemRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attributes': 'list[LibraryItemAttribute]',
        'cjson': 'str',
        'content_type': 'str',
        'description': 'str',
        'email_name': 'str',
        'email_path': 'str',
        'screenshots': 'list[LibraryItemScreenshot]',
        'storefront_oid': 'int',
        'title': 'str',
        'upsell_offer_oid': 'int',
        'uuid': 'str'
    }

    attribute_map = {
        'attributes': 'attributes',
        'cjson': 'cjson',
        'content_type': 'content_type',
        'description': 'description',
        'email_name': 'email_name',
        'email_path': 'email_path',
        'screenshots': 'screenshots',
        'storefront_oid': 'storefront_oid',
        'title': 'title',
        'upsell_offer_oid': 'upsell_offer_oid',
        'uuid': 'uuid'
    }

    def __init__(self, attributes=None, cjson=None, content_type=None, description=None, email_name=None, email_path=None, screenshots=None, storefront_oid=None, title=None, upsell_offer_oid=None, uuid=None):  # noqa: E501
        """AddLibraryItemRequest - a model defined in Swagger"""  # noqa: E501

        self._attributes = None
        self._cjson = None
        self._content_type = None
        self._description = None
        self._email_name = None
        self._email_path = None
        self._screenshots = None
        self._storefront_oid = None
        self._title = None
        self._upsell_offer_oid = None
        self._uuid = None
        self.discriminator = None

        if attributes is not None:
            self.attributes = attributes
        if cjson is not None:
            self.cjson = cjson
        if content_type is not None:
            self.content_type = content_type
        if description is not None:
            self.description = description
        if email_name is not None:
            self.email_name = email_name
        if email_path is not None:
            self.email_path = email_path
        if screenshots is not None:
            self.screenshots = screenshots
        if storefront_oid is not None:
            self.storefront_oid = storefront_oid
        if title is not None:
            self.title = title
        if upsell_offer_oid is not None:
            self.upsell_offer_oid = upsell_offer_oid
        if uuid is not None:
            self.uuid = uuid

    @property
    def attributes(self):
        """Gets the attributes of this AddLibraryItemRequest.  # noqa: E501

        Attributes associated with the library item to contain additional configuration.  # noqa: E501

        :return: The attributes of this AddLibraryItemRequest.  # noqa: E501
        :rtype: list[LibraryItemAttribute]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this AddLibraryItemRequest.

        Attributes associated with the library item to contain additional configuration.  # noqa: E501

        :param attributes: The attributes of this AddLibraryItemRequest.  # noqa: E501
        :type: list[LibraryItemAttribute]
        """

        self._attributes = attributes

    @property
    def cjson(self):
        """Gets the cjson of this AddLibraryItemRequest.  # noqa: E501

        Cjson to be added to library  # noqa: E501

        :return: The cjson of this AddLibraryItemRequest.  # noqa: E501
        :rtype: str
        """
        return self._cjson

    @cjson.setter
    def cjson(self, cjson):
        """Sets the cjson of this AddLibraryItemRequest.

        Cjson to be added to library  # noqa: E501

        :param cjson: The cjson of this AddLibraryItemRequest.  # noqa: E501
        :type: str
        """

        self._cjson = cjson

    @property
    def content_type(self):
        """Gets the content_type of this AddLibraryItemRequest.  # noqa: E501

        flow, campaign, cjson, email, transactional_email or upsell  # noqa: E501

        :return: The content_type of this AddLibraryItemRequest.  # noqa: E501
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this AddLibraryItemRequest.

        flow, campaign, cjson, email, transactional_email or upsell  # noqa: E501

        :param content_type: The content_type of this AddLibraryItemRequest.  # noqa: E501
        :type: str
        """

        self._content_type = content_type

    @property
    def description(self):
        """Gets the description of this AddLibraryItemRequest.  # noqa: E501

        description of library item  # noqa: E501

        :return: The description of this AddLibraryItemRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AddLibraryItemRequest.

        description of library item  # noqa: E501

        :param description: The description of this AddLibraryItemRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def email_name(self):
        """Gets the email_name of this AddLibraryItemRequest.  # noqa: E501

        Required if content_type is transactional_email. This is the name of the email template (html, not text).  This name should have a .vm file extension.  An example is auto_order_cancel_html.vm  # noqa: E501

        :return: The email_name of this AddLibraryItemRequest.  # noqa: E501
        :rtype: str
        """
        return self._email_name

    @email_name.setter
    def email_name(self, email_name):
        """Sets the email_name of this AddLibraryItemRequest.

        Required if content_type is transactional_email. This is the name of the email template (html, not text).  This name should have a .vm file extension.  An example is auto_order_cancel_html.vm  # noqa: E501

        :param email_name: The email_name of this AddLibraryItemRequest.  # noqa: E501
        :type: str
        """

        self._email_name = email_name

    @property
    def email_path(self):
        """Gets the email_path of this AddLibraryItemRequest.  # noqa: E501

        Required if content_type is transactional_email. This is the full path to the email template stored in the file system.  This defines which StoreFront contains the desired email template.  An example is /themes/Elements/core/emails/auto_order_cancel_html.vm  # noqa: E501

        :return: The email_path of this AddLibraryItemRequest.  # noqa: E501
        :rtype: str
        """
        return self._email_path

    @email_path.setter
    def email_path(self, email_path):
        """Sets the email_path of this AddLibraryItemRequest.

        Required if content_type is transactional_email. This is the full path to the email template stored in the file system.  This defines which StoreFront contains the desired email template.  An example is /themes/Elements/core/emails/auto_order_cancel_html.vm  # noqa: E501

        :param email_path: The email_path of this AddLibraryItemRequest.  # noqa: E501
        :type: str
        """

        self._email_path = email_path

    @property
    def screenshots(self):
        """Gets the screenshots of this AddLibraryItemRequest.  # noqa: E501

        Screenshot urls for display  # noqa: E501

        :return: The screenshots of this AddLibraryItemRequest.  # noqa: E501
        :rtype: list[LibraryItemScreenshot]
        """
        return self._screenshots

    @screenshots.setter
    def screenshots(self, screenshots):
        """Sets the screenshots of this AddLibraryItemRequest.

        Screenshot urls for display  # noqa: E501

        :param screenshots: The screenshots of this AddLibraryItemRequest.  # noqa: E501
        :type: list[LibraryItemScreenshot]
        """

        self._screenshots = screenshots

    @property
    def storefront_oid(self):
        """Gets the storefront_oid of this AddLibraryItemRequest.  # noqa: E501

        StoreFront oid where content originates necessary for tracking down relative assets  # noqa: E501

        :return: The storefront_oid of this AddLibraryItemRequest.  # noqa: E501
        :rtype: int
        """
        return self._storefront_oid

    @storefront_oid.setter
    def storefront_oid(self, storefront_oid):
        """Sets the storefront_oid of this AddLibraryItemRequest.

        StoreFront oid where content originates necessary for tracking down relative assets  # noqa: E501

        :param storefront_oid: The storefront_oid of this AddLibraryItemRequest.  # noqa: E501
        :type: int
        """

        self._storefront_oid = storefront_oid

    @property
    def title(self):
        """Gets the title of this AddLibraryItemRequest.  # noqa: E501

        title of library item, usually the name of the flow or campaign, or description of cjson  # noqa: E501

        :return: The title of this AddLibraryItemRequest.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this AddLibraryItemRequest.

        title of library item, usually the name of the flow or campaign, or description of cjson  # noqa: E501

        :param title: The title of this AddLibraryItemRequest.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def upsell_offer_oid(self):
        """Gets the upsell_offer_oid of this AddLibraryItemRequest.  # noqa: E501

        Required if content_type is upsell. This is object identifier of a StoreFront Upsell Offer.  # noqa: E501

        :return: The upsell_offer_oid of this AddLibraryItemRequest.  # noqa: E501
        :rtype: int
        """
        return self._upsell_offer_oid

    @upsell_offer_oid.setter
    def upsell_offer_oid(self, upsell_offer_oid):
        """Sets the upsell_offer_oid of this AddLibraryItemRequest.

        Required if content_type is upsell. This is object identifier of a StoreFront Upsell Offer.  # noqa: E501

        :param upsell_offer_oid: The upsell_offer_oid of this AddLibraryItemRequest.  # noqa: E501
        :type: int
        """

        self._upsell_offer_oid = upsell_offer_oid

    @property
    def uuid(self):
        """Gets the uuid of this AddLibraryItemRequest.  # noqa: E501

        UUID of communication flow, campaign, email, or null if this item is something else. transactional_email do not have a uuid because they are singleton objects within a storefront and easily identifiable by name  # noqa: E501

        :return: The uuid of this AddLibraryItemRequest.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this AddLibraryItemRequest.

        UUID of communication flow, campaign, email, or null if this item is something else. transactional_email do not have a uuid because they are singleton objects within a storefront and easily identifiable by name  # noqa: E501

        :param uuid: The uuid of this AddLibraryItemRequest.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddLibraryItemRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddLibraryItemRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
