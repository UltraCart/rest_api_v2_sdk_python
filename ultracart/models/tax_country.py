# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TaxCountry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'accounting_code': 'str',
        'country_code': 'str',
        'country_oid': 'int',
        'states': 'list[TaxState]',
        'tax_gift_charge': 'bool',
        'tax_gift_wrap': 'bool',
        'tax_rate': 'float',
        'tax_rate_formatted': 'str',
        'tax_shipping': 'bool'
    }

    attribute_map = {
        'accounting_code': 'accounting_code',
        'country_code': 'country_code',
        'country_oid': 'country_oid',
        'states': 'states',
        'tax_gift_charge': 'tax_gift_charge',
        'tax_gift_wrap': 'tax_gift_wrap',
        'tax_rate': 'tax_rate',
        'tax_rate_formatted': 'tax_rate_formatted',
        'tax_shipping': 'tax_shipping'
    }

    def __init__(self, accounting_code=None, country_code=None, country_oid=None, states=None, tax_gift_charge=None, tax_gift_wrap=None, tax_rate=None, tax_rate_formatted=None, tax_shipping=None):  # noqa: E501
        """TaxCountry - a model defined in Swagger"""  # noqa: E501

        self._accounting_code = None
        self._country_code = None
        self._country_oid = None
        self._states = None
        self._tax_gift_charge = None
        self._tax_gift_wrap = None
        self._tax_rate = None
        self._tax_rate_formatted = None
        self._tax_shipping = None
        self.discriminator = None

        if accounting_code is not None:
            self.accounting_code = accounting_code
        if country_code is not None:
            self.country_code = country_code
        if country_oid is not None:
            self.country_oid = country_oid
        if states is not None:
            self.states = states
        if tax_gift_charge is not None:
            self.tax_gift_charge = tax_gift_charge
        if tax_gift_wrap is not None:
            self.tax_gift_wrap = tax_gift_wrap
        if tax_rate is not None:
            self.tax_rate = tax_rate
        if tax_rate_formatted is not None:
            self.tax_rate_formatted = tax_rate_formatted
        if tax_shipping is not None:
            self.tax_shipping = tax_shipping

    @property
    def accounting_code(self):
        """Gets the accounting_code of this TaxCountry.  # noqa: E501

        Accounting code for programs such as QuickBooks  # noqa: E501

        :return: The accounting_code of this TaxCountry.  # noqa: E501
        :rtype: str
        """
        return self._accounting_code

    @accounting_code.setter
    def accounting_code(self, accounting_code):
        """Sets the accounting_code of this TaxCountry.

        Accounting code for programs such as QuickBooks  # noqa: E501

        :param accounting_code: The accounting_code of this TaxCountry.  # noqa: E501
        :type: str
        """

        self._accounting_code = accounting_code

    @property
    def country_code(self):
        """Gets the country_code of this TaxCountry.  # noqa: E501

        Country code (2 characters  # noqa: E501

        :return: The country_code of this TaxCountry.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this TaxCountry.

        Country code (2 characters  # noqa: E501

        :param country_code: The country_code of this TaxCountry.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    @property
    def country_oid(self):
        """Gets the country_oid of this TaxCountry.  # noqa: E501

        Tax record object identifier used internally by database  # noqa: E501

        :return: The country_oid of this TaxCountry.  # noqa: E501
        :rtype: int
        """
        return self._country_oid

    @country_oid.setter
    def country_oid(self, country_oid):
        """Sets the country_oid of this TaxCountry.

        Tax record object identifier used internally by database  # noqa: E501

        :param country_oid: The country_oid of this TaxCountry.  # noqa: E501
        :type: int
        """

        self._country_oid = country_oid

    @property
    def states(self):
        """Gets the states of this TaxCountry.  # noqa: E501

        States (or regions or territories) within this country  # noqa: E501

        :return: The states of this TaxCountry.  # noqa: E501
        :rtype: list[TaxState]
        """
        return self._states

    @states.setter
    def states(self, states):
        """Sets the states of this TaxCountry.

        States (or regions or territories) within this country  # noqa: E501

        :param states: The states of this TaxCountry.  # noqa: E501
        :type: list[TaxState]
        """

        self._states = states

    @property
    def tax_gift_charge(self):
        """Gets the tax_gift_charge of this TaxCountry.  # noqa: E501

        True if taxation within this jurisdiction should charge tax on gift charge  # noqa: E501

        :return: The tax_gift_charge of this TaxCountry.  # noqa: E501
        :rtype: bool
        """
        return self._tax_gift_charge

    @tax_gift_charge.setter
    def tax_gift_charge(self, tax_gift_charge):
        """Sets the tax_gift_charge of this TaxCountry.

        True if taxation within this jurisdiction should charge tax on gift charge  # noqa: E501

        :param tax_gift_charge: The tax_gift_charge of this TaxCountry.  # noqa: E501
        :type: bool
        """

        self._tax_gift_charge = tax_gift_charge

    @property
    def tax_gift_wrap(self):
        """Gets the tax_gift_wrap of this TaxCountry.  # noqa: E501

        True if taxation within this jurisdiction should charge tax on gift wrap  # noqa: E501

        :return: The tax_gift_wrap of this TaxCountry.  # noqa: E501
        :rtype: bool
        """
        return self._tax_gift_wrap

    @tax_gift_wrap.setter
    def tax_gift_wrap(self, tax_gift_wrap):
        """Sets the tax_gift_wrap of this TaxCountry.

        True if taxation within this jurisdiction should charge tax on gift wrap  # noqa: E501

        :param tax_gift_wrap: The tax_gift_wrap of this TaxCountry.  # noqa: E501
        :type: bool
        """

        self._tax_gift_wrap = tax_gift_wrap

    @property
    def tax_rate(self):
        """Gets the tax_rate of this TaxCountry.  # noqa: E501

        Tax Rate  # noqa: E501

        :return: The tax_rate of this TaxCountry.  # noqa: E501
        :rtype: float
        """
        return self._tax_rate

    @tax_rate.setter
    def tax_rate(self, tax_rate):
        """Sets the tax_rate of this TaxCountry.

        Tax Rate  # noqa: E501

        :param tax_rate: The tax_rate of this TaxCountry.  # noqa: E501
        :type: float
        """

        self._tax_rate = tax_rate

    @property
    def tax_rate_formatted(self):
        """Gets the tax_rate_formatted of this TaxCountry.  # noqa: E501

        Tax rate formatted  # noqa: E501

        :return: The tax_rate_formatted of this TaxCountry.  # noqa: E501
        :rtype: str
        """
        return self._tax_rate_formatted

    @tax_rate_formatted.setter
    def tax_rate_formatted(self, tax_rate_formatted):
        """Sets the tax_rate_formatted of this TaxCountry.

        Tax rate formatted  # noqa: E501

        :param tax_rate_formatted: The tax_rate_formatted of this TaxCountry.  # noqa: E501
        :type: str
        """

        self._tax_rate_formatted = tax_rate_formatted

    @property
    def tax_shipping(self):
        """Gets the tax_shipping of this TaxCountry.  # noqa: E501

        True if taxation within this jurisdiction should charge tax on shipping  # noqa: E501

        :return: The tax_shipping of this TaxCountry.  # noqa: E501
        :rtype: bool
        """
        return self._tax_shipping

    @tax_shipping.setter
    def tax_shipping(self, tax_shipping):
        """Sets the tax_shipping of this TaxCountry.

        True if taxation within this jurisdiction should charge tax on shipping  # noqa: E501

        :param tax_shipping: The tax_shipping of this TaxCountry.  # noqa: E501
        :type: bool
        """

        self._tax_shipping = tax_shipping

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaxCountry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaxCountry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
