# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ChannelPartnerOrder(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'advertising_source': 'str',
        'affiliate_id': 'str',
        'affiliate_sub_id': 'str',
        'arbitrary_shipping_handling_total': 'float',
        'arbitrary_tax': 'float',
        'arbitrary_tax_rate': 'float',
        'arbitrary_taxable_subtotal': 'float',
        'associate_with_customer_profile_if_present': 'bool',
        'auto_approve_purchase_order': 'bool',
        'billto_address1': 'str',
        'billto_address2': 'str',
        'billto_city': 'str',
        'billto_company': 'str',
        'billto_country_code': 'str',
        'billto_day_phone': 'str',
        'billto_evening_phone': 'str',
        'billto_first_name': 'str',
        'billto_last_name': 'str',
        'billto_postal_code': 'str',
        'billto_state_region': 'str',
        'billto_title': 'str',
        'cc_email': 'str',
        'channel_partner_order_id': 'str',
        'consider_recurring': 'bool',
        'coupons': 'list[str]',
        'credit_card_authorization_amount': 'float',
        'credit_card_authorization_dts': 'str',
        'credit_card_authorization_number': 'str',
        'credit_card_expiration_month': 'int',
        'credit_card_expiration_year': 'int',
        'credit_card_type': 'str',
        'custom_field1': 'str',
        'custom_field2': 'str',
        'custom_field3': 'str',
        'custom_field4': 'str',
        'custom_field5': 'str',
        'custom_field6': 'str',
        'custom_field7': 'str',
        'delivery_date': 'str',
        'echeck_bank_aba_code': 'str',
        'echeck_bank_account_name': 'str',
        'echeck_bank_account_number': 'str',
        'echeck_bank_account_type': 'str',
        'echeck_bank_name': 'str',
        'echeck_bank_owner_type': 'str',
        'echeck_customer_tax_id': 'str',
        'echeck_drivers_license_dob': 'str',
        'echeck_drivers_license_number': 'str',
        'echeck_drivers_license_state': 'str',
        'email': 'str',
        'gift': 'bool',
        'gift_email': 'str',
        'gift_message': 'str',
        'hosted_fields_card_token': 'str',
        'hosted_fields_cvv_token': 'str',
        'insurance_application_id': 'str',
        'insurance_claim_id': 'str',
        'ip_address': 'str',
        'items': 'list[ChannelPartnerOrderItem]',
        'least_cost_route': 'bool',
        'least_cost_route_shipping_methods': 'list[str]',
        'mailing_list_opt_in': 'bool',
        'no_realtime_payment_processing': 'bool',
        'payment_method': 'str',
        'purchase_order_number': 'str',
        'rotating_transaction_gateway_code': 'str',
        'sales_rep_code': 'str',
        'screen_branding_theme_code': 'str',
        'ship_on_date': 'str',
        'ship_to_residential': 'bool',
        'shipping_method': 'str',
        'shipto_address1': 'str',
        'shipto_address2': 'str',
        'shipto_city': 'str',
        'shipto_company': 'str',
        'shipto_country_code': 'str',
        'shipto_day_phone': 'str',
        'shipto_evening_phone': 'str',
        'shipto_first_name': 'str',
        'shipto_last_name': 'str',
        'shipto_postal_code': 'str',
        'shipto_state_region': 'str',
        'shipto_title': 'str',
        'skip_payment_processing': 'bool',
        'special_instructions': 'str',
        'store_completed': 'bool',
        'store_if_payment_declines': 'bool',
        'storefront_host_name': 'str',
        'tax_county': 'str',
        'tax_exempt': 'bool',
        'transaction': 'ChannelPartnerOrderTransaction',
        'treat_warnings_as_errors': 'bool'
    }

    attribute_map = {
        'advertising_source': 'advertisingSource',
        'affiliate_id': 'affiliate_id',
        'affiliate_sub_id': 'affiliate_sub_id',
        'arbitrary_shipping_handling_total': 'arbitrary_shipping_handling_total',
        'arbitrary_tax': 'arbitrary_tax',
        'arbitrary_tax_rate': 'arbitrary_tax_rate',
        'arbitrary_taxable_subtotal': 'arbitrary_taxable_subtotal',
        'associate_with_customer_profile_if_present': 'associate_with_customer_profile_if_present',
        'auto_approve_purchase_order': 'auto_approve_purchase_order',
        'billto_address1': 'billto_address1',
        'billto_address2': 'billto_address2',
        'billto_city': 'billto_city',
        'billto_company': 'billto_company',
        'billto_country_code': 'billto_country_code',
        'billto_day_phone': 'billto_day_phone',
        'billto_evening_phone': 'billto_evening_phone',
        'billto_first_name': 'billto_first_name',
        'billto_last_name': 'billto_last_name',
        'billto_postal_code': 'billto_postal_code',
        'billto_state_region': 'billto_state_region',
        'billto_title': 'billto_title',
        'cc_email': 'cc_email',
        'channel_partner_order_id': 'channel_partner_order_id',
        'consider_recurring': 'consider_recurring',
        'coupons': 'coupons',
        'credit_card_authorization_amount': 'credit_card_authorization_amount',
        'credit_card_authorization_dts': 'credit_card_authorization_dts',
        'credit_card_authorization_number': 'credit_card_authorization_number',
        'credit_card_expiration_month': 'credit_card_expiration_month',
        'credit_card_expiration_year': 'credit_card_expiration_year',
        'credit_card_type': 'credit_card_type',
        'custom_field1': 'custom_field1',
        'custom_field2': 'custom_field2',
        'custom_field3': 'custom_field3',
        'custom_field4': 'custom_field4',
        'custom_field5': 'custom_field5',
        'custom_field6': 'custom_field6',
        'custom_field7': 'custom_field7',
        'delivery_date': 'delivery_date',
        'echeck_bank_aba_code': 'echeck_bank_aba_code',
        'echeck_bank_account_name': 'echeck_bank_account_name',
        'echeck_bank_account_number': 'echeck_bank_account_number',
        'echeck_bank_account_type': 'echeck_bank_account_type',
        'echeck_bank_name': 'echeck_bank_name',
        'echeck_bank_owner_type': 'echeck_bank_owner_type',
        'echeck_customer_tax_id': 'echeck_customer_tax_id',
        'echeck_drivers_license_dob': 'echeck_drivers_license_dob',
        'echeck_drivers_license_number': 'echeck_drivers_license_number',
        'echeck_drivers_license_state': 'echeck_drivers_license_state',
        'email': 'email',
        'gift': 'gift',
        'gift_email': 'gift_email',
        'gift_message': 'gift_message',
        'hosted_fields_card_token': 'hosted_fields_card_token',
        'hosted_fields_cvv_token': 'hosted_fields_cvv_token',
        'insurance_application_id': 'insurance_application_id',
        'insurance_claim_id': 'insurance_claim_id',
        'ip_address': 'ip_address',
        'items': 'items',
        'least_cost_route': 'least_cost_route',
        'least_cost_route_shipping_methods': 'least_cost_route_shipping_methods',
        'mailing_list_opt_in': 'mailing_list_opt_in',
        'no_realtime_payment_processing': 'no_realtime_payment_processing',
        'payment_method': 'payment_method',
        'purchase_order_number': 'purchase_order_number',
        'rotating_transaction_gateway_code': 'rotating_transaction_gateway_code',
        'sales_rep_code': 'sales_rep_code',
        'screen_branding_theme_code': 'screen_branding_theme_code',
        'ship_on_date': 'ship_on_date',
        'ship_to_residential': 'ship_to_residential',
        'shipping_method': 'shipping_method',
        'shipto_address1': 'shipto_address1',
        'shipto_address2': 'shipto_address2',
        'shipto_city': 'shipto_city',
        'shipto_company': 'shipto_company',
        'shipto_country_code': 'shipto_country_code',
        'shipto_day_phone': 'shipto_day_phone',
        'shipto_evening_phone': 'shipto_evening_phone',
        'shipto_first_name': 'shipto_first_name',
        'shipto_last_name': 'shipto_last_name',
        'shipto_postal_code': 'shipto_postal_code',
        'shipto_state_region': 'shipto_state_region',
        'shipto_title': 'shipto_title',
        'skip_payment_processing': 'skip_payment_processing',
        'special_instructions': 'special_instructions',
        'store_completed': 'store_completed',
        'store_if_payment_declines': 'store_if_payment_declines',
        'storefront_host_name': 'storefront_host_name',
        'tax_county': 'tax_county',
        'tax_exempt': 'tax_exempt',
        'transaction': 'transaction',
        'treat_warnings_as_errors': 'treat_warnings_as_errors'
    }

    def __init__(self, advertising_source=None, affiliate_id=None, affiliate_sub_id=None, arbitrary_shipping_handling_total=None, arbitrary_tax=None, arbitrary_tax_rate=None, arbitrary_taxable_subtotal=None, associate_with_customer_profile_if_present=None, auto_approve_purchase_order=None, billto_address1=None, billto_address2=None, billto_city=None, billto_company=None, billto_country_code=None, billto_day_phone=None, billto_evening_phone=None, billto_first_name=None, billto_last_name=None, billto_postal_code=None, billto_state_region=None, billto_title=None, cc_email=None, channel_partner_order_id=None, consider_recurring=None, coupons=None, credit_card_authorization_amount=None, credit_card_authorization_dts=None, credit_card_authorization_number=None, credit_card_expiration_month=None, credit_card_expiration_year=None, credit_card_type=None, custom_field1=None, custom_field2=None, custom_field3=None, custom_field4=None, custom_field5=None, custom_field6=None, custom_field7=None, delivery_date=None, echeck_bank_aba_code=None, echeck_bank_account_name=None, echeck_bank_account_number=None, echeck_bank_account_type=None, echeck_bank_name=None, echeck_bank_owner_type=None, echeck_customer_tax_id=None, echeck_drivers_license_dob=None, echeck_drivers_license_number=None, echeck_drivers_license_state=None, email=None, gift=None, gift_email=None, gift_message=None, hosted_fields_card_token=None, hosted_fields_cvv_token=None, insurance_application_id=None, insurance_claim_id=None, ip_address=None, items=None, least_cost_route=None, least_cost_route_shipping_methods=None, mailing_list_opt_in=None, no_realtime_payment_processing=None, payment_method=None, purchase_order_number=None, rotating_transaction_gateway_code=None, sales_rep_code=None, screen_branding_theme_code=None, ship_on_date=None, ship_to_residential=None, shipping_method=None, shipto_address1=None, shipto_address2=None, shipto_city=None, shipto_company=None, shipto_country_code=None, shipto_day_phone=None, shipto_evening_phone=None, shipto_first_name=None, shipto_last_name=None, shipto_postal_code=None, shipto_state_region=None, shipto_title=None, skip_payment_processing=None, special_instructions=None, store_completed=None, store_if_payment_declines=None, storefront_host_name=None, tax_county=None, tax_exempt=None, transaction=None, treat_warnings_as_errors=None):  # noqa: E501
        """ChannelPartnerOrder - a model defined in Swagger"""  # noqa: E501

        self._advertising_source = None
        self._affiliate_id = None
        self._affiliate_sub_id = None
        self._arbitrary_shipping_handling_total = None
        self._arbitrary_tax = None
        self._arbitrary_tax_rate = None
        self._arbitrary_taxable_subtotal = None
        self._associate_with_customer_profile_if_present = None
        self._auto_approve_purchase_order = None
        self._billto_address1 = None
        self._billto_address2 = None
        self._billto_city = None
        self._billto_company = None
        self._billto_country_code = None
        self._billto_day_phone = None
        self._billto_evening_phone = None
        self._billto_first_name = None
        self._billto_last_name = None
        self._billto_postal_code = None
        self._billto_state_region = None
        self._billto_title = None
        self._cc_email = None
        self._channel_partner_order_id = None
        self._consider_recurring = None
        self._coupons = None
        self._credit_card_authorization_amount = None
        self._credit_card_authorization_dts = None
        self._credit_card_authorization_number = None
        self._credit_card_expiration_month = None
        self._credit_card_expiration_year = None
        self._credit_card_type = None
        self._custom_field1 = None
        self._custom_field2 = None
        self._custom_field3 = None
        self._custom_field4 = None
        self._custom_field5 = None
        self._custom_field6 = None
        self._custom_field7 = None
        self._delivery_date = None
        self._echeck_bank_aba_code = None
        self._echeck_bank_account_name = None
        self._echeck_bank_account_number = None
        self._echeck_bank_account_type = None
        self._echeck_bank_name = None
        self._echeck_bank_owner_type = None
        self._echeck_customer_tax_id = None
        self._echeck_drivers_license_dob = None
        self._echeck_drivers_license_number = None
        self._echeck_drivers_license_state = None
        self._email = None
        self._gift = None
        self._gift_email = None
        self._gift_message = None
        self._hosted_fields_card_token = None
        self._hosted_fields_cvv_token = None
        self._insurance_application_id = None
        self._insurance_claim_id = None
        self._ip_address = None
        self._items = None
        self._least_cost_route = None
        self._least_cost_route_shipping_methods = None
        self._mailing_list_opt_in = None
        self._no_realtime_payment_processing = None
        self._payment_method = None
        self._purchase_order_number = None
        self._rotating_transaction_gateway_code = None
        self._sales_rep_code = None
        self._screen_branding_theme_code = None
        self._ship_on_date = None
        self._ship_to_residential = None
        self._shipping_method = None
        self._shipto_address1 = None
        self._shipto_address2 = None
        self._shipto_city = None
        self._shipto_company = None
        self._shipto_country_code = None
        self._shipto_day_phone = None
        self._shipto_evening_phone = None
        self._shipto_first_name = None
        self._shipto_last_name = None
        self._shipto_postal_code = None
        self._shipto_state_region = None
        self._shipto_title = None
        self._skip_payment_processing = None
        self._special_instructions = None
        self._store_completed = None
        self._store_if_payment_declines = None
        self._storefront_host_name = None
        self._tax_county = None
        self._tax_exempt = None
        self._transaction = None
        self._treat_warnings_as_errors = None
        self.discriminator = None

        if advertising_source is not None:
            self.advertising_source = advertising_source
        if affiliate_id is not None:
            self.affiliate_id = affiliate_id
        if affiliate_sub_id is not None:
            self.affiliate_sub_id = affiliate_sub_id
        if arbitrary_shipping_handling_total is not None:
            self.arbitrary_shipping_handling_total = arbitrary_shipping_handling_total
        if arbitrary_tax is not None:
            self.arbitrary_tax = arbitrary_tax
        if arbitrary_tax_rate is not None:
            self.arbitrary_tax_rate = arbitrary_tax_rate
        if arbitrary_taxable_subtotal is not None:
            self.arbitrary_taxable_subtotal = arbitrary_taxable_subtotal
        if associate_with_customer_profile_if_present is not None:
            self.associate_with_customer_profile_if_present = associate_with_customer_profile_if_present
        if auto_approve_purchase_order is not None:
            self.auto_approve_purchase_order = auto_approve_purchase_order
        if billto_address1 is not None:
            self.billto_address1 = billto_address1
        if billto_address2 is not None:
            self.billto_address2 = billto_address2
        if billto_city is not None:
            self.billto_city = billto_city
        if billto_company is not None:
            self.billto_company = billto_company
        if billto_country_code is not None:
            self.billto_country_code = billto_country_code
        if billto_day_phone is not None:
            self.billto_day_phone = billto_day_phone
        if billto_evening_phone is not None:
            self.billto_evening_phone = billto_evening_phone
        if billto_first_name is not None:
            self.billto_first_name = billto_first_name
        if billto_last_name is not None:
            self.billto_last_name = billto_last_name
        if billto_postal_code is not None:
            self.billto_postal_code = billto_postal_code
        if billto_state_region is not None:
            self.billto_state_region = billto_state_region
        if billto_title is not None:
            self.billto_title = billto_title
        if cc_email is not None:
            self.cc_email = cc_email
        if channel_partner_order_id is not None:
            self.channel_partner_order_id = channel_partner_order_id
        if consider_recurring is not None:
            self.consider_recurring = consider_recurring
        if coupons is not None:
            self.coupons = coupons
        if credit_card_authorization_amount is not None:
            self.credit_card_authorization_amount = credit_card_authorization_amount
        if credit_card_authorization_dts is not None:
            self.credit_card_authorization_dts = credit_card_authorization_dts
        if credit_card_authorization_number is not None:
            self.credit_card_authorization_number = credit_card_authorization_number
        if credit_card_expiration_month is not None:
            self.credit_card_expiration_month = credit_card_expiration_month
        if credit_card_expiration_year is not None:
            self.credit_card_expiration_year = credit_card_expiration_year
        if credit_card_type is not None:
            self.credit_card_type = credit_card_type
        if custom_field1 is not None:
            self.custom_field1 = custom_field1
        if custom_field2 is not None:
            self.custom_field2 = custom_field2
        if custom_field3 is not None:
            self.custom_field3 = custom_field3
        if custom_field4 is not None:
            self.custom_field4 = custom_field4
        if custom_field5 is not None:
            self.custom_field5 = custom_field5
        if custom_field6 is not None:
            self.custom_field6 = custom_field6
        if custom_field7 is not None:
            self.custom_field7 = custom_field7
        if delivery_date is not None:
            self.delivery_date = delivery_date
        if echeck_bank_aba_code is not None:
            self.echeck_bank_aba_code = echeck_bank_aba_code
        if echeck_bank_account_name is not None:
            self.echeck_bank_account_name = echeck_bank_account_name
        if echeck_bank_account_number is not None:
            self.echeck_bank_account_number = echeck_bank_account_number
        if echeck_bank_account_type is not None:
            self.echeck_bank_account_type = echeck_bank_account_type
        if echeck_bank_name is not None:
            self.echeck_bank_name = echeck_bank_name
        if echeck_bank_owner_type is not None:
            self.echeck_bank_owner_type = echeck_bank_owner_type
        if echeck_customer_tax_id is not None:
            self.echeck_customer_tax_id = echeck_customer_tax_id
        if echeck_drivers_license_dob is not None:
            self.echeck_drivers_license_dob = echeck_drivers_license_dob
        if echeck_drivers_license_number is not None:
            self.echeck_drivers_license_number = echeck_drivers_license_number
        if echeck_drivers_license_state is not None:
            self.echeck_drivers_license_state = echeck_drivers_license_state
        if email is not None:
            self.email = email
        if gift is not None:
            self.gift = gift
        if gift_email is not None:
            self.gift_email = gift_email
        if gift_message is not None:
            self.gift_message = gift_message
        if hosted_fields_card_token is not None:
            self.hosted_fields_card_token = hosted_fields_card_token
        if hosted_fields_cvv_token is not None:
            self.hosted_fields_cvv_token = hosted_fields_cvv_token
        if insurance_application_id is not None:
            self.insurance_application_id = insurance_application_id
        if insurance_claim_id is not None:
            self.insurance_claim_id = insurance_claim_id
        if ip_address is not None:
            self.ip_address = ip_address
        if items is not None:
            self.items = items
        if least_cost_route is not None:
            self.least_cost_route = least_cost_route
        if least_cost_route_shipping_methods is not None:
            self.least_cost_route_shipping_methods = least_cost_route_shipping_methods
        if mailing_list_opt_in is not None:
            self.mailing_list_opt_in = mailing_list_opt_in
        if no_realtime_payment_processing is not None:
            self.no_realtime_payment_processing = no_realtime_payment_processing
        if payment_method is not None:
            self.payment_method = payment_method
        if purchase_order_number is not None:
            self.purchase_order_number = purchase_order_number
        if rotating_transaction_gateway_code is not None:
            self.rotating_transaction_gateway_code = rotating_transaction_gateway_code
        if sales_rep_code is not None:
            self.sales_rep_code = sales_rep_code
        if screen_branding_theme_code is not None:
            self.screen_branding_theme_code = screen_branding_theme_code
        if ship_on_date is not None:
            self.ship_on_date = ship_on_date
        if ship_to_residential is not None:
            self.ship_to_residential = ship_to_residential
        if shipping_method is not None:
            self.shipping_method = shipping_method
        if shipto_address1 is not None:
            self.shipto_address1 = shipto_address1
        if shipto_address2 is not None:
            self.shipto_address2 = shipto_address2
        if shipto_city is not None:
            self.shipto_city = shipto_city
        if shipto_company is not None:
            self.shipto_company = shipto_company
        if shipto_country_code is not None:
            self.shipto_country_code = shipto_country_code
        if shipto_day_phone is not None:
            self.shipto_day_phone = shipto_day_phone
        if shipto_evening_phone is not None:
            self.shipto_evening_phone = shipto_evening_phone
        if shipto_first_name is not None:
            self.shipto_first_name = shipto_first_name
        if shipto_last_name is not None:
            self.shipto_last_name = shipto_last_name
        if shipto_postal_code is not None:
            self.shipto_postal_code = shipto_postal_code
        if shipto_state_region is not None:
            self.shipto_state_region = shipto_state_region
        if shipto_title is not None:
            self.shipto_title = shipto_title
        if skip_payment_processing is not None:
            self.skip_payment_processing = skip_payment_processing
        if special_instructions is not None:
            self.special_instructions = special_instructions
        if store_completed is not None:
            self.store_completed = store_completed
        if store_if_payment_declines is not None:
            self.store_if_payment_declines = store_if_payment_declines
        if storefront_host_name is not None:
            self.storefront_host_name = storefront_host_name
        if tax_county is not None:
            self.tax_county = tax_county
        if tax_exempt is not None:
            self.tax_exempt = tax_exempt
        if transaction is not None:
            self.transaction = transaction
        if treat_warnings_as_errors is not None:
            self.treat_warnings_as_errors = treat_warnings_as_errors

    @property
    def advertising_source(self):
        """Gets the advertising_source of this ChannelPartnerOrder.  # noqa: E501

        advertising_source  # noqa: E501

        :return: The advertising_source of this ChannelPartnerOrder.  # noqa: E501
        :rtype: str
        """
        return self._advertising_source

    @advertising_source.setter
    def advertising_source(self, advertising_source):
        """Sets the advertising_source of this ChannelPartnerOrder.

        advertising_source  # noqa: E501

        :param advertising_source: The advertising_source of this ChannelPartnerOrder.  # noqa: E501
        :type: str
        """

        self._advertising_source = advertising_source

    @property
    def affiliate_id(self):
        """Gets the affiliate_id of this ChannelPartnerOrder.  # noqa: E501

        Affiliate Id  # noqa: E501

        :return: The affiliate_id of this ChannelPartnerOrder.  # noqa: E501
        :rtype: str
        """
        return self._affiliate_id

    @affiliate_id.setter
    def affiliate_id(self, affiliate_id):
        """Sets the affiliate_id of this ChannelPartnerOrder.

        Affiliate Id  # noqa: E501

        :param affiliate_id: The affiliate_id of this ChannelPartnerOrder.  # noqa: E501
        :type: str
        """

        self._affiliate_id = affiliate_id

    @property
    def affiliate_sub_id(self):
        """Gets the affiliate_sub_id of this ChannelPartnerOrder.  # noqa: E501

        Affiliate Sub Id  # noqa: E501

        :return: The affiliate_sub_id of this ChannelPartnerOrder.  # noqa: E501
        :rtype: str
        """
        return self._affiliate_sub_id

    @affiliate_sub_id.setter
    def affiliate_sub_id(self, affiliate_sub_id):
        """Sets the affiliate_sub_id of this ChannelPartnerOrder.

        Affiliate Sub Id  # noqa: E501

        :param affiliate_sub_id: The affiliate_sub_id of this ChannelPartnerOrder.  # noqa: E501
        :type: str
        """

        self._affiliate_sub_id = affiliate_sub_id

    @property
    def arbitrary_shipping_handling_total(self):
        """Gets the arbitrary_shipping_handling_total of this ChannelPartnerOrder.  # noqa: E501

        Arbitrary shipping handling total  # noqa: E501

        :return: The arbitrary_shipping_handling_total of this ChannelPartnerOrder.  # noqa: E501
        :rtype: float
        """
        return self._arbitrary_shipping_handling_total

    @arbitrary_shipping_handling_total.setter
    def arbitrary_shipping_handling_total(self, arbitrary_shipping_handling_total):
        """Sets the arbitrary_shipping_handling_total of this ChannelPartnerOrder.

        Arbitrary shipping handling total  # noqa: E501

        :param arbitrary_shipping_handling_total: The arbitrary_shipping_handling_total of this ChannelPartnerOrder.  # noqa: E501
        :type: float
        """

        self._arbitrary_shipping_handling_total = arbitrary_shipping_handling_total

    @property
    def arbitrary_tax(self):
        """Gets the arbitrary_tax of this ChannelPartnerOrder.  # noqa: E501

        Arbitrary tax for overriding calculated taxes  # noqa: E501

        :return: The arbitrary_tax of this ChannelPartnerOrder.  # noqa: E501
        :rtype: float
        """
        return self._arbitrary_tax

    @arbitrary_tax.setter
    def arbitrary_tax(self, arbitrary_tax):
        """Sets the arbitrary_tax of this ChannelPartnerOrder.

        Arbitrary tax for overriding calculated taxes  # noqa: E501

        :param arbitrary_tax: The arbitrary_tax of this ChannelPartnerOrder.  # noqa: E501
        :type: float
        """

        self._arbitrary_tax = arbitrary_tax

    @property
    def arbitrary_tax_rate(self):
        """Gets the arbitrary_tax_rate of this ChannelPartnerOrder.  # noqa: E501

        Arbitrary tax rate  # noqa: E501

        :return: The arbitrary_tax_rate of this ChannelPartnerOrder.  # noqa: E501
        :rtype: float
        """
        return self._arbitrary_tax_rate

    @arbitrary_tax_rate.setter
    def arbitrary_tax_rate(self, arbitrary_tax_rate):
        """Sets the arbitrary_tax_rate of this ChannelPartnerOrder.

        Arbitrary tax rate  # noqa: E501

        :param arbitrary_tax_rate: The arbitrary_tax_rate of this ChannelPartnerOrder.  # noqa: E501
        :type: float
        """

        self._arbitrary_tax_rate = arbitrary_tax_rate

    @property
    def arbitrary_taxable_subtotal(self):
        """Gets the arbitrary_taxable_subtotal of this ChannelPartnerOrder.  # noqa: E501

        Arbitrary taxable subtotal  # noqa: E501

        :return: The arbitrary_taxable_subtotal of this ChannelPartnerOrder.  # noqa: E501
        :rtype: float
        """
        return self._arbitrary_taxable_subtotal

    @arbitrary_taxable_subtotal.setter
    def arbitrary_taxable_subtotal(self, arbitrary_taxable_subtotal):
        """Sets the arbitrary_taxable_subtotal of this ChannelPartnerOrder.

        Arbitrary taxable subtotal  # noqa: E501

        :param arbitrary_taxable_subtotal: The arbitrary_taxable_subtotal of this ChannelPartnerOrder.  # noqa: E501
        :type: float
        """

        self._arbitrary_taxable_subtotal = arbitrary_taxable_subtotal

    @property
    def associate_with_customer_profile_if_present(self):
        """Gets the associate_with_customer_profile_if_present of this ChannelPartnerOrder.  # noqa: E501

        If true any matching customer profile based on email is associated with this order  # noqa: E501

        :return: The associate_with_customer_profile_if_present of this ChannelPartnerOrder.  # noqa: E501
        :rtype: bool
        """
        return self._associate_with_customer_profile_if_present

    @associate_with_customer_profile_if_present.setter
    def associate_with_customer_profile_if_present(self, associate_with_customer_profile_if_present):
        """Sets the associate_with_customer_profile_if_present of this ChannelPartnerOrder.

        If true any matching customer profile based on email is associated with this order  # noqa: E501

        :param associate_with_customer_profile_if_present: The associate_with_customer_profile_if_present of this ChannelPartnerOrder.  # noqa: E501
        :type: bool
        """

        self._associate_with_customer_profile_if_present = associate_with_customer_profile_if_present

    @property
    def auto_approve_purchase_order(self):
        """Gets the auto_approve_purchase_order of this ChannelPartnerOrder.  # noqa: E501

        If true any purchase orders are automatically approved  # noqa: E501

        :return: The auto_approve_purchase_order of this ChannelPartnerOrder.  # noqa: E501
        :rtype: bool
        """
        return self._auto_approve_purchase_order

    @auto_approve_purchase_order.setter
    def auto_approve_purchase_order(self, auto_approve_purchase_order):
        """Sets the auto_approve_purchase_order of this ChannelPartnerOrder.

        If true any purchase orders are automatically approved  # noqa: E501

        :param auto_approve_purchase_order: The auto_approve_purchase_order of this ChannelPartnerOrder.  # noqa: E501
        :type: bool
        """

        self._auto_approve_purchase_order = auto_approve_purchase_order

    @property
    def billto_address1(self):
        """Gets the billto_address1 of this ChannelPartnerOrder.  # noqa: E501

        Billing Address line 1  # noqa: E501

        :return: The billto_address1 of this ChannelPartnerOrder.  # noqa: E501
        :rtype: str
        """
        return self._billto_address1

    @billto_address1.setter
    def billto_address1(self, billto_address1):
        """Sets the billto_address1 of this ChannelPartnerOrder.

        Billing Address line 1  # noqa: E501

        :param billto_address1: The billto_address1 of this ChannelPartnerOrder.  # noqa: E501
        :type: str
        """
        if billto_address1 is not None and len(billto_address1) > 50:
            raise ValueError("Invalid value for `billto_address1`, length must be less than or equal to `50`")  # noqa: E501

        self._billto_address1 = billto_address1

    @property
    def billto_address2(self):
        """Gets the billto_address2 of this ChannelPartnerOrder.  # noqa: E501

        Billing Address line 2  # noqa: E501

        :return: The billto_address2 of this ChannelPartnerOrder.  # noqa: E501
        :rtype: str
        """
        return self._billto_address2

    @billto_address2.setter
    def billto_address2(self, billto_address2):
        """Sets the billto_address2 of this ChannelPartnerOrder.

        Billing Address line 2  # noqa: E501

        :param billto_address2: The billto_address2 of this ChannelPartnerOrder.  # noqa: E501
        :type: str
        """
        if billto_address2 is not None and len(billto_address2) > 50:
            raise ValueError("Invalid value for `billto_address2`, length must be less than or equal to `50`")  # noqa: E501

        self._billto_address2 = billto_address2

    @property
    def billto_city(self):
        """Gets the billto_city of this ChannelPartnerOrder.  # noqa: E501

        Billing City  # noqa: E501

        :return: The billto_city of this ChannelPartnerOrder.  # noqa: E501
        :rtype: str
        """
        return self._billto_city

    @billto_city.setter
    def billto_city(self, billto_city):
        """Sets the billto_city of this ChannelPartnerOrder.

        Billing City  # noqa: E501

        :param billto_city: The billto_city of this ChannelPartnerOrder.  # noqa: E501
        :type: str
        """
        if billto_city is not None and len(billto_city) > 32:
            raise ValueError("Invalid value for `billto_city`, length must be less than or equal to `32`")  # noqa: E501

        self._billto_city = billto_city

    @property
    def billto_company(self):
        """Gets the billto_company of this ChannelPartnerOrder.  # noqa: E501

        Billing Company  # noqa: E501

        :return: The billto_company of this ChannelPartnerOrder.  # noqa: E501
        :rtype: str
        """
        return self._billto_company

    @billto_company.setter
    def billto_company(self, billto_company):
        """Sets the billto_company of this ChannelPartnerOrder.

        Billing Company  # noqa: E501

        :param billto_company: The billto_company of this ChannelPartnerOrder.  # noqa: E501
        :type: str
        """
        if billto_company is not None and len(billto_company) > 50:
            raise ValueError("Invalid value for `billto_company`, length must be less than or equal to `50`")  # noqa: E501

        self._billto_company = billto_company

    @property
    def billto_country_code(self):
        """Gets the billto_country_code of this ChannelPartnerOrder.  # noqa: E501

        Billing ISO-3166 two letter country code  # noqa: E501

        :return: The billto_country_code of this ChannelPartnerOrder.  # noqa: E501
        :rtype: str
        """
        return self._billto_country_code

    @billto_country_code.setter
    def billto_country_code(self, billto_country_code):
        """Sets the billto_country_code of this ChannelPartnerOrder.

        Billing ISO-3166 two letter country code  # noqa: E501

        :param billto_country_code: The billto_country_code of this ChannelPartnerOrder.  # noqa: E501
        :type: str
        """
        if billto_country_code is not None and len(billto_country_code) > 2:
            raise ValueError("Invalid value for `billto_country_code`, length must be less than or equal to `2`")  # noqa: E501

        self._billto_country_code = billto_country_code

    @property
    def billto_day_phone(self):
        """Gets the billto_day_phone of this ChannelPartnerOrder.  # noqa: E501

        Billing Day phone  # noqa: E501

        :return: The billto_day_phone of this ChannelPartnerOrder.  # noqa: E501
        :rtype: str
        """
        return self._billto_day_phone

    @billto_day_phone.setter
    def billto_day_phone(self, billto_day_phone):
        """Sets the billto_day_phone of this ChannelPartnerOrder.

        Billing Day phone  # noqa: E501

        :param billto_day_phone: The billto_day_phone of this ChannelPartnerOrder.  # noqa: E501
        :type: str
        """
        if billto_day_phone is not None and len(billto_day_phone) > 25:
            raise ValueError("Invalid value for `billto_day_phone`, length must be less than or equal to `25`")  # noqa: E501

        self._billto_day_phone = billto_day_phone

    @property
    def billto_evening_phone(self):
        """Gets the billto_evening_phone of this ChannelPartnerOrder.  # noqa: E501

        Billing Evening phone  # noqa: E501

        :return: The billto_evening_phone of this ChannelPartnerOrder.  # noqa: E501
        :rtype: str
        """
        return self._billto_evening_phone

    @billto_evening_phone.setter
    def billto_evening_phone(self, billto_evening_phone):
        """Sets the billto_evening_phone of this ChannelPartnerOrder.

        Billing Evening phone  # noqa: E501

        :param billto_evening_phone: The billto_evening_phone of this ChannelPartnerOrder.  # noqa: E501
        :type: str
        """
        if billto_evening_phone is not None and len(billto_evening_phone) > 25:
            raise ValueError("Invalid value for `billto_evening_phone`, length must be less than or equal to `25`")  # noqa: E501

        self._billto_evening_phone = billto_evening_phone

    @property
    def billto_first_name(self):
        """Gets the billto_first_name of this ChannelPartnerOrder.  # noqa: E501

        Billing First name  # noqa: E501

        :return: The billto_first_name of this ChannelPartnerOrder.  # noqa: E501
        :rtype: str
        """
        return self._billto_first_name

    @billto_first_name.setter
    def billto_first_name(self, billto_first_name):
        """Sets the billto_first_name of this ChannelPartnerOrder.

        Billing First name  # noqa: E501

        :param billto_first_name: The billto_first_name of this ChannelPartnerOrder.  # noqa: E501
        :type: str
        """
        if billto_first_name is not None and len(billto_first_name) > 30:
            raise ValueError("Invalid value for `billto_first_name`, length must be less than or equal to `30`")  # noqa: E501

        self._billto_first_name = billto_first_name

    @property
    def billto_last_name(self):
        """Gets the billto_last_name of this ChannelPartnerOrder.  # noqa: E501

        Billing Last name  # noqa: E501

        :return: The billto_last_name of this ChannelPartnerOrder.  # noqa: E501
        :rtype: str
        """
        return self._billto_last_name

    @billto_last_name.setter
    def billto_last_name(self, billto_last_name):
        """Sets the billto_last_name of this ChannelPartnerOrder.

        Billing Last name  # noqa: E501

        :param billto_last_name: The billto_last_name of this ChannelPartnerOrder.  # noqa: E501
        :type: str
        """
        if billto_last_name is not None and len(billto_last_name) > 30:
            raise ValueError("Invalid value for `billto_last_name`, length must be less than or equal to `30`")  # noqa: E501

        self._billto_last_name = billto_last_name

    @property
    def billto_postal_code(self):
        """Gets the billto_postal_code of this ChannelPartnerOrder.  # noqa: E501

        Billing Postal code  # noqa: E501

        :return: The billto_postal_code of this ChannelPartnerOrder.  # noqa: E501
        :rtype: str
        """
        return self._billto_postal_code

    @billto_postal_code.setter
    def billto_postal_code(self, billto_postal_code):
        """Sets the billto_postal_code of this ChannelPartnerOrder.

        Billing Postal code  # noqa: E501

        :param billto_postal_code: The billto_postal_code of this ChannelPartnerOrder.  # noqa: E501
        :type: str
        """
        if billto_postal_code is not None and len(billto_postal_code) > 20:
            raise ValueError("Invalid value for `billto_postal_code`, length must be less than or equal to `20`")  # noqa: E501

        self._billto_postal_code = billto_postal_code

    @property
    def billto_state_region(self):
        """Gets the billto_state_region of this ChannelPartnerOrder.  # noqa: E501

        Billing State for United States otherwise region or province for other countries  # noqa: E501

        :return: The billto_state_region of this ChannelPartnerOrder.  # noqa: E501
        :rtype: str
        """
        return self._billto_state_region

    @billto_state_region.setter
    def billto_state_region(self, billto_state_region):
        """Sets the billto_state_region of this ChannelPartnerOrder.

        Billing State for United States otherwise region or province for other countries  # noqa: E501

        :param billto_state_region: The billto_state_region of this ChannelPartnerOrder.  # noqa: E501
        :type: str
        """
        if billto_state_region is not None and len(billto_state_region) > 32:
            raise ValueError("Invalid value for `billto_state_region`, length must be less than or equal to `32`")  # noqa: E501

        self._billto_state_region = billto_state_region

    @property
    def billto_title(self):
        """Gets the billto_title of this ChannelPartnerOrder.  # noqa: E501

        Billing Title  # noqa: E501

        :return: The billto_title of this ChannelPartnerOrder.  # noqa: E501
        :rtype: str
        """
        return self._billto_title

    @billto_title.setter
    def billto_title(self, billto_title):
        """Sets the billto_title of this ChannelPartnerOrder.

        Billing Title  # noqa: E501

        :param billto_title: The billto_title of this ChannelPartnerOrder.  # noqa: E501
        :type: str
        """
        if billto_title is not None and len(billto_title) > 50:
            raise ValueError("Invalid value for `billto_title`, length must be less than or equal to `50`")  # noqa: E501

        self._billto_title = billto_title

    @property
    def cc_email(self):
        """Gets the cc_email of this ChannelPartnerOrder.  # noqa: E501

        CC email.  # noqa: E501

        :return: The cc_email of this ChannelPartnerOrder.  # noqa: E501
        :rtype: str
        """
        return self._cc_email

    @cc_email.setter
    def cc_email(self, cc_email):
        """Sets the cc_email of this ChannelPartnerOrder.

        CC email.  # noqa: E501

        :param cc_email: The cc_email of this ChannelPartnerOrder.  # noqa: E501
        :type: str
        """
        if cc_email is not None and len(cc_email) > 100:
            raise ValueError("Invalid value for `cc_email`, length must be less than or equal to `100`")  # noqa: E501

        self._cc_email = cc_email

    @property
    def channel_partner_order_id(self):
        """Gets the channel_partner_order_id of this ChannelPartnerOrder.  # noqa: E501

        The id for this order within the channel partner system.  # noqa: E501

        :return: The channel_partner_order_id of this ChannelPartnerOrder.  # noqa: E501
        :rtype: str
        """
        return self._channel_partner_order_id

    @channel_partner_order_id.setter
    def channel_partner_order_id(self, channel_partner_order_id):
        """Sets the channel_partner_order_id of this ChannelPartnerOrder.

        The id for this order within the channel partner system.  # noqa: E501

        :param channel_partner_order_id: The channel_partner_order_id of this ChannelPartnerOrder.  # noqa: E501
        :type: str
        """

        self._channel_partner_order_id = channel_partner_order_id

    @property
    def consider_recurring(self):
        """Gets the consider_recurring of this ChannelPartnerOrder.  # noqa: E501

        If true this order is marked as an auto order (recurring)  # noqa: E501

        :return: The consider_recurring of this ChannelPartnerOrder.  # noqa: E501
        :rtype: bool
        """
        return self._consider_recurring

    @consider_recurring.setter
    def consider_recurring(self, consider_recurring):
        """Sets the consider_recurring of this ChannelPartnerOrder.

        If true this order is marked as an auto order (recurring)  # noqa: E501

        :param consider_recurring: The consider_recurring of this ChannelPartnerOrder.  # noqa: E501
        :type: bool
        """

        self._consider_recurring = consider_recurring

    @property
    def coupons(self):
        """Gets the coupons of this ChannelPartnerOrder.  # noqa: E501

        Array of coupon codes  # noqa: E501

        :return: The coupons of this ChannelPartnerOrder.  # noqa: E501
        :rtype: list[str]
        """
        return self._coupons

    @coupons.setter
    def coupons(self, coupons):
        """Sets the coupons of this ChannelPartnerOrder.

        Array of coupon codes  # noqa: E501

        :param coupons: The coupons of this ChannelPartnerOrder.  # noqa: E501
        :type: list[str]
        """

        self._coupons = coupons

    @property
    def credit_card_authorization_amount(self):
        """Gets the credit_card_authorization_amount of this ChannelPartnerOrder.  # noqa: E501

        The amount authorized externally  # noqa: E501

        :return: The credit_card_authorization_amount of this ChannelPartnerOrder.  # noqa: E501
        :rtype: float
        """
        return self._credit_card_authorization_amount

    @credit_card_authorization_amount.setter
    def credit_card_authorization_amount(self, credit_card_authorization_amount):
        """Sets the credit_card_authorization_amount of this ChannelPartnerOrder.

        The amount authorized externally  # noqa: E501

        :param credit_card_authorization_amount: The credit_card_authorization_amount of this ChannelPartnerOrder.  # noqa: E501
        :type: float
        """

        self._credit_card_authorization_amount = credit_card_authorization_amount

    @property
    def credit_card_authorization_dts(self):
        """Gets the credit_card_authorization_dts of this ChannelPartnerOrder.  # noqa: E501

        Date/Time of credit card authorization in ISO8601 format  # noqa: E501

        :return: The credit_card_authorization_dts of this ChannelPartnerOrder.  # noqa: E501
        :rtype: str
        """
        return self._credit_card_authorization_dts

    @credit_card_authorization_dts.setter
    def credit_card_authorization_dts(self, credit_card_authorization_dts):
        """Sets the credit_card_authorization_dts of this ChannelPartnerOrder.

        Date/Time of credit card authorization in ISO8601 format  # noqa: E501

        :param credit_card_authorization_dts: The credit_card_authorization_dts of this ChannelPartnerOrder.  # noqa: E501
        :type: str
        """

        self._credit_card_authorization_dts = credit_card_authorization_dts

    @property
    def credit_card_authorization_number(self):
        """Gets the credit_card_authorization_number of this ChannelPartnerOrder.  # noqa: E501

        The reference number provided by an externally processed transaction  # noqa: E501

        :return: The credit_card_authorization_number of this ChannelPartnerOrder.  # noqa: E501
        :rtype: str
        """
        return self._credit_card_authorization_number

    @credit_card_authorization_number.setter
    def credit_card_authorization_number(self, credit_card_authorization_number):
        """Sets the credit_card_authorization_number of this ChannelPartnerOrder.

        The reference number provided by an externally processed transaction  # noqa: E501

        :param credit_card_authorization_number: The credit_card_authorization_number of this ChannelPartnerOrder.  # noqa: E501
        :type: str
        """

        self._credit_card_authorization_number = credit_card_authorization_number

    @property
    def credit_card_expiration_month(self):
        """Gets the credit_card_expiration_month of this ChannelPartnerOrder.  # noqa: E501

        Credit card expiration month  # noqa: E501

        :return: The credit_card_expiration_month of this ChannelPartnerOrder.  # noqa: E501
        :rtype: int
        """
        return self._credit_card_expiration_month

    @credit_card_expiration_month.setter
    def credit_card_expiration_month(self, credit_card_expiration_month):
        """Sets the credit_card_expiration_month of this ChannelPartnerOrder.

        Credit card expiration month  # noqa: E501

        :param credit_card_expiration_month: The credit_card_expiration_month of this ChannelPartnerOrder.  # noqa: E501
        :type: int
        """

        self._credit_card_expiration_month = credit_card_expiration_month

    @property
    def credit_card_expiration_year(self):
        """Gets the credit_card_expiration_year of this ChannelPartnerOrder.  # noqa: E501

        Credit card expiration year  # noqa: E501

        :return: The credit_card_expiration_year of this ChannelPartnerOrder.  # noqa: E501
        :rtype: int
        """
        return self._credit_card_expiration_year

    @credit_card_expiration_year.setter
    def credit_card_expiration_year(self, credit_card_expiration_year):
        """Sets the credit_card_expiration_year of this ChannelPartnerOrder.

        Credit card expiration year  # noqa: E501

        :param credit_card_expiration_year: The credit_card_expiration_year of this ChannelPartnerOrder.  # noqa: E501
        :type: int
        """

        self._credit_card_expiration_year = credit_card_expiration_year

    @property
    def credit_card_type(self):
        """Gets the credit_card_type of this ChannelPartnerOrder.  # noqa: E501

        Credit card type  # noqa: E501

        :return: The credit_card_type of this ChannelPartnerOrder.  # noqa: E501
        :rtype: str
        """
        return self._credit_card_type

    @credit_card_type.setter
    def credit_card_type(self, credit_card_type):
        """Sets the credit_card_type of this ChannelPartnerOrder.

        Credit card type  # noqa: E501

        :param credit_card_type: The credit_card_type of this ChannelPartnerOrder.  # noqa: E501
        :type: str
        """

        self._credit_card_type = credit_card_type

    @property
    def custom_field1(self):
        """Gets the custom_field1 of this ChannelPartnerOrder.  # noqa: E501

        Custom field 1  # noqa: E501

        :return: The custom_field1 of this ChannelPartnerOrder.  # noqa: E501
        :rtype: str
        """
        return self._custom_field1

    @custom_field1.setter
    def custom_field1(self, custom_field1):
        """Sets the custom_field1 of this ChannelPartnerOrder.

        Custom field 1  # noqa: E501

        :param custom_field1: The custom_field1 of this ChannelPartnerOrder.  # noqa: E501
        :type: str
        """
        if custom_field1 is not None and len(custom_field1) > 50:
            raise ValueError("Invalid value for `custom_field1`, length must be less than or equal to `50`")  # noqa: E501

        self._custom_field1 = custom_field1

    @property
    def custom_field2(self):
        """Gets the custom_field2 of this ChannelPartnerOrder.  # noqa: E501

        Custom field 2  # noqa: E501

        :return: The custom_field2 of this ChannelPartnerOrder.  # noqa: E501
        :rtype: str
        """
        return self._custom_field2

    @custom_field2.setter
    def custom_field2(self, custom_field2):
        """Sets the custom_field2 of this ChannelPartnerOrder.

        Custom field 2  # noqa: E501

        :param custom_field2: The custom_field2 of this ChannelPartnerOrder.  # noqa: E501
        :type: str
        """
        if custom_field2 is not None and len(custom_field2) > 50:
            raise ValueError("Invalid value for `custom_field2`, length must be less than or equal to `50`")  # noqa: E501

        self._custom_field2 = custom_field2

    @property
    def custom_field3(self):
        """Gets the custom_field3 of this ChannelPartnerOrder.  # noqa: E501

        Custom field 3  # noqa: E501

        :return: The custom_field3 of this ChannelPartnerOrder.  # noqa: E501
        :rtype: str
        """
        return self._custom_field3

    @custom_field3.setter
    def custom_field3(self, custom_field3):
        """Sets the custom_field3 of this ChannelPartnerOrder.

        Custom field 3  # noqa: E501

        :param custom_field3: The custom_field3 of this ChannelPartnerOrder.  # noqa: E501
        :type: str
        """
        if custom_field3 is not None and len(custom_field3) > 50:
            raise ValueError("Invalid value for `custom_field3`, length must be less than or equal to `50`")  # noqa: E501

        self._custom_field3 = custom_field3

    @property
    def custom_field4(self):
        """Gets the custom_field4 of this ChannelPartnerOrder.  # noqa: E501

        Custom field 4  # noqa: E501

        :return: The custom_field4 of this ChannelPartnerOrder.  # noqa: E501
        :rtype: str
        """
        return self._custom_field4

    @custom_field4.setter
    def custom_field4(self, custom_field4):
        """Sets the custom_field4 of this ChannelPartnerOrder.

        Custom field 4  # noqa: E501

        :param custom_field4: The custom_field4 of this ChannelPartnerOrder.  # noqa: E501
        :type: str
        """
        if custom_field4 is not None and len(custom_field4) > 50:
            raise ValueError("Invalid value for `custom_field4`, length must be less than or equal to `50`")  # noqa: E501

        self._custom_field4 = custom_field4

    @property
    def custom_field5(self):
        """Gets the custom_field5 of this ChannelPartnerOrder.  # noqa: E501

        Custom field 5  # noqa: E501

        :return: The custom_field5 of this ChannelPartnerOrder.  # noqa: E501
        :rtype: str
        """
        return self._custom_field5

    @custom_field5.setter
    def custom_field5(self, custom_field5):
        """Sets the custom_field5 of this ChannelPartnerOrder.

        Custom field 5  # noqa: E501

        :param custom_field5: The custom_field5 of this ChannelPartnerOrder.  # noqa: E501
        :type: str
        """
        if custom_field5 is not None and len(custom_field5) > 75:
            raise ValueError("Invalid value for `custom_field5`, length must be less than or equal to `75`")  # noqa: E501

        self._custom_field5 = custom_field5

    @property
    def custom_field6(self):
        """Gets the custom_field6 of this ChannelPartnerOrder.  # noqa: E501

        Custom field 6  # noqa: E501

        :return: The custom_field6 of this ChannelPartnerOrder.  # noqa: E501
        :rtype: str
        """
        return self._custom_field6

    @custom_field6.setter
    def custom_field6(self, custom_field6):
        """Sets the custom_field6 of this ChannelPartnerOrder.

        Custom field 6  # noqa: E501

        :param custom_field6: The custom_field6 of this ChannelPartnerOrder.  # noqa: E501
        :type: str
        """
        if custom_field6 is not None and len(custom_field6) > 50:
            raise ValueError("Invalid value for `custom_field6`, length must be less than or equal to `50`")  # noqa: E501

        self._custom_field6 = custom_field6

    @property
    def custom_field7(self):
        """Gets the custom_field7 of this ChannelPartnerOrder.  # noqa: E501

        Custom field 7  # noqa: E501

        :return: The custom_field7 of this ChannelPartnerOrder.  # noqa: E501
        :rtype: str
        """
        return self._custom_field7

    @custom_field7.setter
    def custom_field7(self, custom_field7):
        """Sets the custom_field7 of this ChannelPartnerOrder.

        Custom field 7  # noqa: E501

        :param custom_field7: The custom_field7 of this ChannelPartnerOrder.  # noqa: E501
        :type: str
        """
        if custom_field7 is not None and len(custom_field7) > 50:
            raise ValueError("Invalid value for `custom_field7`, length must be less than or equal to `50`")  # noqa: E501

        self._custom_field7 = custom_field7

    @property
    def delivery_date(self):
        """Gets the delivery_date of this ChannelPartnerOrder.  # noqa: E501

        Date the customer is requesting delivery on. Typically used for perishable product delivery.  # noqa: E501

        :return: The delivery_date of this ChannelPartnerOrder.  # noqa: E501
        :rtype: str
        """
        return self._delivery_date

    @delivery_date.setter
    def delivery_date(self, delivery_date):
        """Sets the delivery_date of this ChannelPartnerOrder.

        Date the customer is requesting delivery on. Typically used for perishable product delivery.  # noqa: E501

        :param delivery_date: The delivery_date of this ChannelPartnerOrder.  # noqa: E501
        :type: str
        """

        self._delivery_date = delivery_date

    @property
    def echeck_bank_aba_code(self):
        """Gets the echeck_bank_aba_code of this ChannelPartnerOrder.  # noqa: E501

        eCheck bank ABA code  # noqa: E501

        :return: The echeck_bank_aba_code of this ChannelPartnerOrder.  # noqa: E501
        :rtype: str
        """
        return self._echeck_bank_aba_code

    @echeck_bank_aba_code.setter
    def echeck_bank_aba_code(self, echeck_bank_aba_code):
        """Sets the echeck_bank_aba_code of this ChannelPartnerOrder.

        eCheck bank ABA code  # noqa: E501

        :param echeck_bank_aba_code: The echeck_bank_aba_code of this ChannelPartnerOrder.  # noqa: E501
        :type: str
        """

        self._echeck_bank_aba_code = echeck_bank_aba_code

    @property
    def echeck_bank_account_name(self):
        """Gets the echeck_bank_account_name of this ChannelPartnerOrder.  # noqa: E501

        eCheck bank account name  # noqa: E501

        :return: The echeck_bank_account_name of this ChannelPartnerOrder.  # noqa: E501
        :rtype: str
        """
        return self._echeck_bank_account_name

    @echeck_bank_account_name.setter
    def echeck_bank_account_name(self, echeck_bank_account_name):
        """Sets the echeck_bank_account_name of this ChannelPartnerOrder.

        eCheck bank account name  # noqa: E501

        :param echeck_bank_account_name: The echeck_bank_account_name of this ChannelPartnerOrder.  # noqa: E501
        :type: str
        """

        self._echeck_bank_account_name = echeck_bank_account_name

    @property
    def echeck_bank_account_number(self):
        """Gets the echeck_bank_account_number of this ChannelPartnerOrder.  # noqa: E501

        eCheck bank account number  # noqa: E501

        :return: The echeck_bank_account_number of this ChannelPartnerOrder.  # noqa: E501
        :rtype: str
        """
        return self._echeck_bank_account_number

    @echeck_bank_account_number.setter
    def echeck_bank_account_number(self, echeck_bank_account_number):
        """Sets the echeck_bank_account_number of this ChannelPartnerOrder.

        eCheck bank account number  # noqa: E501

        :param echeck_bank_account_number: The echeck_bank_account_number of this ChannelPartnerOrder.  # noqa: E501
        :type: str
        """

        self._echeck_bank_account_number = echeck_bank_account_number

    @property
    def echeck_bank_account_type(self):
        """Gets the echeck_bank_account_type of this ChannelPartnerOrder.  # noqa: E501

        eCheck bank account type  # noqa: E501

        :return: The echeck_bank_account_type of this ChannelPartnerOrder.  # noqa: E501
        :rtype: str
        """
        return self._echeck_bank_account_type

    @echeck_bank_account_type.setter
    def echeck_bank_account_type(self, echeck_bank_account_type):
        """Sets the echeck_bank_account_type of this ChannelPartnerOrder.

        eCheck bank account type  # noqa: E501

        :param echeck_bank_account_type: The echeck_bank_account_type of this ChannelPartnerOrder.  # noqa: E501
        :type: str
        """
        allowed_values = ["Checking", "Savings"]  # noqa: E501
        if echeck_bank_account_type not in allowed_values:
            raise ValueError(
                "Invalid value for `echeck_bank_account_type` ({0}), must be one of {1}"  # noqa: E501
                .format(echeck_bank_account_type, allowed_values)
            )

        self._echeck_bank_account_type = echeck_bank_account_type

    @property
    def echeck_bank_name(self):
        """Gets the echeck_bank_name of this ChannelPartnerOrder.  # noqa: E501

        eCheck bank name  # noqa: E501

        :return: The echeck_bank_name of this ChannelPartnerOrder.  # noqa: E501
        :rtype: str
        """
        return self._echeck_bank_name

    @echeck_bank_name.setter
    def echeck_bank_name(self, echeck_bank_name):
        """Sets the echeck_bank_name of this ChannelPartnerOrder.

        eCheck bank name  # noqa: E501

        :param echeck_bank_name: The echeck_bank_name of this ChannelPartnerOrder.  # noqa: E501
        :type: str
        """

        self._echeck_bank_name = echeck_bank_name

    @property
    def echeck_bank_owner_type(self):
        """Gets the echeck_bank_owner_type of this ChannelPartnerOrder.  # noqa: E501

        eCheck bank owner type  # noqa: E501

        :return: The echeck_bank_owner_type of this ChannelPartnerOrder.  # noqa: E501
        :rtype: str
        """
        return self._echeck_bank_owner_type

    @echeck_bank_owner_type.setter
    def echeck_bank_owner_type(self, echeck_bank_owner_type):
        """Sets the echeck_bank_owner_type of this ChannelPartnerOrder.

        eCheck bank owner type  # noqa: E501

        :param echeck_bank_owner_type: The echeck_bank_owner_type of this ChannelPartnerOrder.  # noqa: E501
        :type: str
        """
        allowed_values = ["Business", "Personal"]  # noqa: E501
        if echeck_bank_owner_type not in allowed_values:
            raise ValueError(
                "Invalid value for `echeck_bank_owner_type` ({0}), must be one of {1}"  # noqa: E501
                .format(echeck_bank_owner_type, allowed_values)
            )

        self._echeck_bank_owner_type = echeck_bank_owner_type

    @property
    def echeck_customer_tax_id(self):
        """Gets the echeck_customer_tax_id of this ChannelPartnerOrder.  # noqa: E501

        eCheck customer tax id  # noqa: E501

        :return: The echeck_customer_tax_id of this ChannelPartnerOrder.  # noqa: E501
        :rtype: str
        """
        return self._echeck_customer_tax_id

    @echeck_customer_tax_id.setter
    def echeck_customer_tax_id(self, echeck_customer_tax_id):
        """Sets the echeck_customer_tax_id of this ChannelPartnerOrder.

        eCheck customer tax id  # noqa: E501

        :param echeck_customer_tax_id: The echeck_customer_tax_id of this ChannelPartnerOrder.  # noqa: E501
        :type: str
        """

        self._echeck_customer_tax_id = echeck_customer_tax_id

    @property
    def echeck_drivers_license_dob(self):
        """Gets the echeck_drivers_license_dob of this ChannelPartnerOrder.  # noqa: E501

        eCheck drivers license dob  # noqa: E501

        :return: The echeck_drivers_license_dob of this ChannelPartnerOrder.  # noqa: E501
        :rtype: str
        """
        return self._echeck_drivers_license_dob

    @echeck_drivers_license_dob.setter
    def echeck_drivers_license_dob(self, echeck_drivers_license_dob):
        """Sets the echeck_drivers_license_dob of this ChannelPartnerOrder.

        eCheck drivers license dob  # noqa: E501

        :param echeck_drivers_license_dob: The echeck_drivers_license_dob of this ChannelPartnerOrder.  # noqa: E501
        :type: str
        """

        self._echeck_drivers_license_dob = echeck_drivers_license_dob

    @property
    def echeck_drivers_license_number(self):
        """Gets the echeck_drivers_license_number of this ChannelPartnerOrder.  # noqa: E501

        eCheck drivers license number  # noqa: E501

        :return: The echeck_drivers_license_number of this ChannelPartnerOrder.  # noqa: E501
        :rtype: str
        """
        return self._echeck_drivers_license_number

    @echeck_drivers_license_number.setter
    def echeck_drivers_license_number(self, echeck_drivers_license_number):
        """Sets the echeck_drivers_license_number of this ChannelPartnerOrder.

        eCheck drivers license number  # noqa: E501

        :param echeck_drivers_license_number: The echeck_drivers_license_number of this ChannelPartnerOrder.  # noqa: E501
        :type: str
        """

        self._echeck_drivers_license_number = echeck_drivers_license_number

    @property
    def echeck_drivers_license_state(self):
        """Gets the echeck_drivers_license_state of this ChannelPartnerOrder.  # noqa: E501

        eCheck drivers license state  # noqa: E501

        :return: The echeck_drivers_license_state of this ChannelPartnerOrder.  # noqa: E501
        :rtype: str
        """
        return self._echeck_drivers_license_state

    @echeck_drivers_license_state.setter
    def echeck_drivers_license_state(self, echeck_drivers_license_state):
        """Sets the echeck_drivers_license_state of this ChannelPartnerOrder.

        eCheck drivers license state  # noqa: E501

        :param echeck_drivers_license_state: The echeck_drivers_license_state of this ChannelPartnerOrder.  # noqa: E501
        :type: str
        """

        self._echeck_drivers_license_state = echeck_drivers_license_state

    @property
    def email(self):
        """Gets the email of this ChannelPartnerOrder.  # noqa: E501

        Email  # noqa: E501

        :return: The email of this ChannelPartnerOrder.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ChannelPartnerOrder.

        Email  # noqa: E501

        :param email: The email of this ChannelPartnerOrder.  # noqa: E501
        :type: str
        """
        if email is not None and len(email) > 100:
            raise ValueError("Invalid value for `email`, length must be less than or equal to `100`")  # noqa: E501

        self._email = email

    @property
    def gift(self):
        """Gets the gift of this ChannelPartnerOrder.  # noqa: E501

        True if this order is a gift  # noqa: E501

        :return: The gift of this ChannelPartnerOrder.  # noqa: E501
        :rtype: bool
        """
        return self._gift

    @gift.setter
    def gift(self, gift):
        """Sets the gift of this ChannelPartnerOrder.

        True if this order is a gift  # noqa: E501

        :param gift: The gift of this ChannelPartnerOrder.  # noqa: E501
        :type: bool
        """

        self._gift = gift

    @property
    def gift_email(self):
        """Gets the gift_email of this ChannelPartnerOrder.  # noqa: E501

        Email address of the gift recipient  # noqa: E501

        :return: The gift_email of this ChannelPartnerOrder.  # noqa: E501
        :rtype: str
        """
        return self._gift_email

    @gift_email.setter
    def gift_email(self, gift_email):
        """Sets the gift_email of this ChannelPartnerOrder.

        Email address of the gift recipient  # noqa: E501

        :param gift_email: The gift_email of this ChannelPartnerOrder.  # noqa: E501
        :type: str
        """
        if gift_email is not None and len(gift_email) > 100:
            raise ValueError("Invalid value for `gift_email`, length must be less than or equal to `100`")  # noqa: E501

        self._gift_email = gift_email

    @property
    def gift_message(self):
        """Gets the gift_message of this ChannelPartnerOrder.  # noqa: E501

        Message to the gift recipient  # noqa: E501

        :return: The gift_message of this ChannelPartnerOrder.  # noqa: E501
        :rtype: str
        """
        return self._gift_message

    @gift_message.setter
    def gift_message(self, gift_message):
        """Sets the gift_message of this ChannelPartnerOrder.

        Message to the gift recipient  # noqa: E501

        :param gift_message: The gift_message of this ChannelPartnerOrder.  # noqa: E501
        :type: str
        """
        if gift_message is not None and len(gift_message) > 10000:
            raise ValueError("Invalid value for `gift_message`, length must be less than or equal to `10000`")  # noqa: E501

        self._gift_message = gift_message

    @property
    def hosted_fields_card_token(self):
        """Gets the hosted_fields_card_token of this ChannelPartnerOrder.  # noqa: E501

        The token provided by UltraCart hosted fields when a credit card number is uploaded into the system.  This is the only way to provide a credit card number.  # noqa: E501

        :return: The hosted_fields_card_token of this ChannelPartnerOrder.  # noqa: E501
        :rtype: str
        """
        return self._hosted_fields_card_token

    @hosted_fields_card_token.setter
    def hosted_fields_card_token(self, hosted_fields_card_token):
        """Sets the hosted_fields_card_token of this ChannelPartnerOrder.

        The token provided by UltraCart hosted fields when a credit card number is uploaded into the system.  This is the only way to provide a credit card number.  # noqa: E501

        :param hosted_fields_card_token: The hosted_fields_card_token of this ChannelPartnerOrder.  # noqa: E501
        :type: str
        """

        self._hosted_fields_card_token = hosted_fields_card_token

    @property
    def hosted_fields_cvv_token(self):
        """Gets the hosted_fields_cvv_token of this ChannelPartnerOrder.  # noqa: E501

        The token provided by UltraCart hosted fields when a credit card cvv is uploaded into the system.  This is the only way to provide a cvv number.  # noqa: E501

        :return: The hosted_fields_cvv_token of this ChannelPartnerOrder.  # noqa: E501
        :rtype: str
        """
        return self._hosted_fields_cvv_token

    @hosted_fields_cvv_token.setter
    def hosted_fields_cvv_token(self, hosted_fields_cvv_token):
        """Sets the hosted_fields_cvv_token of this ChannelPartnerOrder.

        The token provided by UltraCart hosted fields when a credit card cvv is uploaded into the system.  This is the only way to provide a cvv number.  # noqa: E501

        :param hosted_fields_cvv_token: The hosted_fields_cvv_token of this ChannelPartnerOrder.  # noqa: E501
        :type: str
        """

        self._hosted_fields_cvv_token = hosted_fields_cvv_token

    @property
    def insurance_application_id(self):
        """Gets the insurance_application_id of this ChannelPartnerOrder.  # noqa: E501

        Insurance application id  # noqa: E501

        :return: The insurance_application_id of this ChannelPartnerOrder.  # noqa: E501
        :rtype: str
        """
        return self._insurance_application_id

    @insurance_application_id.setter
    def insurance_application_id(self, insurance_application_id):
        """Sets the insurance_application_id of this ChannelPartnerOrder.

        Insurance application id  # noqa: E501

        :param insurance_application_id: The insurance_application_id of this ChannelPartnerOrder.  # noqa: E501
        :type: str
        """

        self._insurance_application_id = insurance_application_id

    @property
    def insurance_claim_id(self):
        """Gets the insurance_claim_id of this ChannelPartnerOrder.  # noqa: E501

        Insurance claim id  # noqa: E501

        :return: The insurance_claim_id of this ChannelPartnerOrder.  # noqa: E501
        :rtype: str
        """
        return self._insurance_claim_id

    @insurance_claim_id.setter
    def insurance_claim_id(self, insurance_claim_id):
        """Sets the insurance_claim_id of this ChannelPartnerOrder.

        Insurance claim id  # noqa: E501

        :param insurance_claim_id: The insurance_claim_id of this ChannelPartnerOrder.  # noqa: E501
        :type: str
        """

        self._insurance_claim_id = insurance_claim_id

    @property
    def ip_address(self):
        """Gets the ip_address of this ChannelPartnerOrder.  # noqa: E501

        IP Address of the customer  # noqa: E501

        :return: The ip_address of this ChannelPartnerOrder.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this ChannelPartnerOrder.

        IP Address of the customer  # noqa: E501

        :param ip_address: The ip_address of this ChannelPartnerOrder.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def items(self):
        """Gets the items of this ChannelPartnerOrder.  # noqa: E501

        Items  # noqa: E501

        :return: The items of this ChannelPartnerOrder.  # noqa: E501
        :rtype: list[ChannelPartnerOrderItem]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this ChannelPartnerOrder.

        Items  # noqa: E501

        :param items: The items of this ChannelPartnerOrder.  # noqa: E501
        :type: list[ChannelPartnerOrderItem]
        """

        self._items = items

    @property
    def least_cost_route(self):
        """Gets the least_cost_route of this ChannelPartnerOrder.  # noqa: E501

        If true the least expensive shipping method is automatically chosen during the order import  # noqa: E501

        :return: The least_cost_route of this ChannelPartnerOrder.  # noqa: E501
        :rtype: bool
        """
        return self._least_cost_route

    @least_cost_route.setter
    def least_cost_route(self, least_cost_route):
        """Sets the least_cost_route of this ChannelPartnerOrder.

        If true the least expensive shipping method is automatically chosen during the order import  # noqa: E501

        :param least_cost_route: The least_cost_route of this ChannelPartnerOrder.  # noqa: E501
        :type: bool
        """

        self._least_cost_route = least_cost_route

    @property
    def least_cost_route_shipping_methods(self):
        """Gets the least_cost_route_shipping_methods of this ChannelPartnerOrder.  # noqa: E501

        An optional array of shipping methods to restict choices if least_cost_route is true  # noqa: E501

        :return: The least_cost_route_shipping_methods of this ChannelPartnerOrder.  # noqa: E501
        :rtype: list[str]
        """
        return self._least_cost_route_shipping_methods

    @least_cost_route_shipping_methods.setter
    def least_cost_route_shipping_methods(self, least_cost_route_shipping_methods):
        """Sets the least_cost_route_shipping_methods of this ChannelPartnerOrder.

        An optional array of shipping methods to restict choices if least_cost_route is true  # noqa: E501

        :param least_cost_route_shipping_methods: The least_cost_route_shipping_methods of this ChannelPartnerOrder.  # noqa: E501
        :type: list[str]
        """

        self._least_cost_route_shipping_methods = least_cost_route_shipping_methods

    @property
    def mailing_list_opt_in(self):
        """Gets the mailing_list_opt_in of this ChannelPartnerOrder.  # noqa: E501

        If true the customer is subscribed to any configured mailing lists  # noqa: E501

        :return: The mailing_list_opt_in of this ChannelPartnerOrder.  # noqa: E501
        :rtype: bool
        """
        return self._mailing_list_opt_in

    @mailing_list_opt_in.setter
    def mailing_list_opt_in(self, mailing_list_opt_in):
        """Sets the mailing_list_opt_in of this ChannelPartnerOrder.

        If true the customer is subscribed to any configured mailing lists  # noqa: E501

        :param mailing_list_opt_in: The mailing_list_opt_in of this ChannelPartnerOrder.  # noqa: E501
        :type: bool
        """

        self._mailing_list_opt_in = mailing_list_opt_in

    @property
    def no_realtime_payment_processing(self):
        """Gets the no_realtime_payment_processing of this ChannelPartnerOrder.  # noqa: E501

        If true no payment processing is done and the order is placed into Accounts Receivable  # noqa: E501

        :return: The no_realtime_payment_processing of this ChannelPartnerOrder.  # noqa: E501
        :rtype: bool
        """
        return self._no_realtime_payment_processing

    @no_realtime_payment_processing.setter
    def no_realtime_payment_processing(self, no_realtime_payment_processing):
        """Sets the no_realtime_payment_processing of this ChannelPartnerOrder.

        If true no payment processing is done and the order is placed into Accounts Receivable  # noqa: E501

        :param no_realtime_payment_processing: The no_realtime_payment_processing of this ChannelPartnerOrder.  # noqa: E501
        :type: bool
        """

        self._no_realtime_payment_processing = no_realtime_payment_processing

    @property
    def payment_method(self):
        """Gets the payment_method of this ChannelPartnerOrder.  # noqa: E501

        Payment method  # noqa: E501

        :return: The payment_method of this ChannelPartnerOrder.  # noqa: E501
        :rtype: str
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """Sets the payment_method of this ChannelPartnerOrder.

        Payment method  # noqa: E501

        :param payment_method: The payment_method of this ChannelPartnerOrder.  # noqa: E501
        :type: str
        """
        allowed_values = ["Affirm", "Amazon", "Check", "COD", "Credit Card", "eCheck", "LoanHero", "Money Order", "PayPal", "Purchase Order", "Quote Request", "Wire Transfer"]  # noqa: E501
        if payment_method not in allowed_values:
            raise ValueError(
                "Invalid value for `payment_method` ({0}), must be one of {1}"  # noqa: E501
                .format(payment_method, allowed_values)
            )

        self._payment_method = payment_method

    @property
    def purchase_order_number(self):
        """Gets the purchase_order_number of this ChannelPartnerOrder.  # noqa: E501

        Purchase order number  # noqa: E501

        :return: The purchase_order_number of this ChannelPartnerOrder.  # noqa: E501
        :rtype: str
        """
        return self._purchase_order_number

    @purchase_order_number.setter
    def purchase_order_number(self, purchase_order_number):
        """Sets the purchase_order_number of this ChannelPartnerOrder.

        Purchase order number  # noqa: E501

        :param purchase_order_number: The purchase_order_number of this ChannelPartnerOrder.  # noqa: E501
        :type: str
        """

        self._purchase_order_number = purchase_order_number

    @property
    def rotating_transaction_gateway_code(self):
        """Gets the rotating_transaction_gateway_code of this ChannelPartnerOrder.  # noqa: E501

        The rotating transaction gateway code for the gateway used to charge this order  # noqa: E501

        :return: The rotating_transaction_gateway_code of this ChannelPartnerOrder.  # noqa: E501
        :rtype: str
        """
        return self._rotating_transaction_gateway_code

    @rotating_transaction_gateway_code.setter
    def rotating_transaction_gateway_code(self, rotating_transaction_gateway_code):
        """Sets the rotating_transaction_gateway_code of this ChannelPartnerOrder.

        The rotating transaction gateway code for the gateway used to charge this order  # noqa: E501

        :param rotating_transaction_gateway_code: The rotating_transaction_gateway_code of this ChannelPartnerOrder.  # noqa: E501
        :type: str
        """

        self._rotating_transaction_gateway_code = rotating_transaction_gateway_code

    @property
    def sales_rep_code(self):
        """Gets the sales_rep_code of this ChannelPartnerOrder.  # noqa: E501

        Sales rep code  # noqa: E501

        :return: The sales_rep_code of this ChannelPartnerOrder.  # noqa: E501
        :rtype: str
        """
        return self._sales_rep_code

    @sales_rep_code.setter
    def sales_rep_code(self, sales_rep_code):
        """Sets the sales_rep_code of this ChannelPartnerOrder.

        Sales rep code  # noqa: E501

        :param sales_rep_code: The sales_rep_code of this ChannelPartnerOrder.  # noqa: E501
        :type: str
        """

        self._sales_rep_code = sales_rep_code

    @property
    def screen_branding_theme_code(self):
        """Gets the screen_branding_theme_code of this ChannelPartnerOrder.  # noqa: E501

        Screen branding theme code  # noqa: E501

        :return: The screen_branding_theme_code of this ChannelPartnerOrder.  # noqa: E501
        :rtype: str
        """
        return self._screen_branding_theme_code

    @screen_branding_theme_code.setter
    def screen_branding_theme_code(self, screen_branding_theme_code):
        """Sets the screen_branding_theme_code of this ChannelPartnerOrder.

        Screen branding theme code  # noqa: E501

        :param screen_branding_theme_code: The screen_branding_theme_code of this ChannelPartnerOrder.  # noqa: E501
        :type: str
        """
        if screen_branding_theme_code is not None and len(screen_branding_theme_code) > 10:
            raise ValueError("Invalid value for `screen_branding_theme_code`, length must be less than or equal to `10`")  # noqa: E501

        self._screen_branding_theme_code = screen_branding_theme_code

    @property
    def ship_on_date(self):
        """Gets the ship_on_date of this ChannelPartnerOrder.  # noqa: E501

        Date the customer is requesting that the order ship on.  Typically used for perishable product delivery.  # noqa: E501

        :return: The ship_on_date of this ChannelPartnerOrder.  # noqa: E501
        :rtype: str
        """
        return self._ship_on_date

    @ship_on_date.setter
    def ship_on_date(self, ship_on_date):
        """Sets the ship_on_date of this ChannelPartnerOrder.

        Date the customer is requesting that the order ship on.  Typically used for perishable product delivery.  # noqa: E501

        :param ship_on_date: The ship_on_date of this ChannelPartnerOrder.  # noqa: E501
        :type: str
        """

        self._ship_on_date = ship_on_date

    @property
    def ship_to_residential(self):
        """Gets the ship_to_residential of this ChannelPartnerOrder.  # noqa: E501

        True if the shipping adress is residential.  Effects the methods that are available to the customer as well as the price of the shipping method.  # noqa: E501

        :return: The ship_to_residential of this ChannelPartnerOrder.  # noqa: E501
        :rtype: bool
        """
        return self._ship_to_residential

    @ship_to_residential.setter
    def ship_to_residential(self, ship_to_residential):
        """Sets the ship_to_residential of this ChannelPartnerOrder.

        True if the shipping adress is residential.  Effects the methods that are available to the customer as well as the price of the shipping method.  # noqa: E501

        :param ship_to_residential: The ship_to_residential of this ChannelPartnerOrder.  # noqa: E501
        :type: bool
        """

        self._ship_to_residential = ship_to_residential

    @property
    def shipping_method(self):
        """Gets the shipping_method of this ChannelPartnerOrder.  # noqa: E501

        Shipping method  # noqa: E501

        :return: The shipping_method of this ChannelPartnerOrder.  # noqa: E501
        :rtype: str
        """
        return self._shipping_method

    @shipping_method.setter
    def shipping_method(self, shipping_method):
        """Sets the shipping_method of this ChannelPartnerOrder.

        Shipping method  # noqa: E501

        :param shipping_method: The shipping_method of this ChannelPartnerOrder.  # noqa: E501
        :type: str
        """

        self._shipping_method = shipping_method

    @property
    def shipto_address1(self):
        """Gets the shipto_address1 of this ChannelPartnerOrder.  # noqa: E501

        Shipping Address line 1  # noqa: E501

        :return: The shipto_address1 of this ChannelPartnerOrder.  # noqa: E501
        :rtype: str
        """
        return self._shipto_address1

    @shipto_address1.setter
    def shipto_address1(self, shipto_address1):
        """Sets the shipto_address1 of this ChannelPartnerOrder.

        Shipping Address line 1  # noqa: E501

        :param shipto_address1: The shipto_address1 of this ChannelPartnerOrder.  # noqa: E501
        :type: str
        """
        if shipto_address1 is not None and len(shipto_address1) > 50:
            raise ValueError("Invalid value for `shipto_address1`, length must be less than or equal to `50`")  # noqa: E501

        self._shipto_address1 = shipto_address1

    @property
    def shipto_address2(self):
        """Gets the shipto_address2 of this ChannelPartnerOrder.  # noqa: E501

        Shipping Address line 2  # noqa: E501

        :return: The shipto_address2 of this ChannelPartnerOrder.  # noqa: E501
        :rtype: str
        """
        return self._shipto_address2

    @shipto_address2.setter
    def shipto_address2(self, shipto_address2):
        """Sets the shipto_address2 of this ChannelPartnerOrder.

        Shipping Address line 2  # noqa: E501

        :param shipto_address2: The shipto_address2 of this ChannelPartnerOrder.  # noqa: E501
        :type: str
        """
        if shipto_address2 is not None and len(shipto_address2) > 50:
            raise ValueError("Invalid value for `shipto_address2`, length must be less than or equal to `50`")  # noqa: E501

        self._shipto_address2 = shipto_address2

    @property
    def shipto_city(self):
        """Gets the shipto_city of this ChannelPartnerOrder.  # noqa: E501

        Shipping City  # noqa: E501

        :return: The shipto_city of this ChannelPartnerOrder.  # noqa: E501
        :rtype: str
        """
        return self._shipto_city

    @shipto_city.setter
    def shipto_city(self, shipto_city):
        """Sets the shipto_city of this ChannelPartnerOrder.

        Shipping City  # noqa: E501

        :param shipto_city: The shipto_city of this ChannelPartnerOrder.  # noqa: E501
        :type: str
        """
        if shipto_city is not None and len(shipto_city) > 32:
            raise ValueError("Invalid value for `shipto_city`, length must be less than or equal to `32`")  # noqa: E501

        self._shipto_city = shipto_city

    @property
    def shipto_company(self):
        """Gets the shipto_company of this ChannelPartnerOrder.  # noqa: E501

        Shipping Company  # noqa: E501

        :return: The shipto_company of this ChannelPartnerOrder.  # noqa: E501
        :rtype: str
        """
        return self._shipto_company

    @shipto_company.setter
    def shipto_company(self, shipto_company):
        """Sets the shipto_company of this ChannelPartnerOrder.

        Shipping Company  # noqa: E501

        :param shipto_company: The shipto_company of this ChannelPartnerOrder.  # noqa: E501
        :type: str
        """
        if shipto_company is not None and len(shipto_company) > 50:
            raise ValueError("Invalid value for `shipto_company`, length must be less than or equal to `50`")  # noqa: E501

        self._shipto_company = shipto_company

    @property
    def shipto_country_code(self):
        """Gets the shipto_country_code of this ChannelPartnerOrder.  # noqa: E501

        Shipping ISO-3166 two letter country code  # noqa: E501

        :return: The shipto_country_code of this ChannelPartnerOrder.  # noqa: E501
        :rtype: str
        """
        return self._shipto_country_code

    @shipto_country_code.setter
    def shipto_country_code(self, shipto_country_code):
        """Sets the shipto_country_code of this ChannelPartnerOrder.

        Shipping ISO-3166 two letter country code  # noqa: E501

        :param shipto_country_code: The shipto_country_code of this ChannelPartnerOrder.  # noqa: E501
        :type: str
        """
        if shipto_country_code is not None and len(shipto_country_code) > 2:
            raise ValueError("Invalid value for `shipto_country_code`, length must be less than or equal to `2`")  # noqa: E501

        self._shipto_country_code = shipto_country_code

    @property
    def shipto_day_phone(self):
        """Gets the shipto_day_phone of this ChannelPartnerOrder.  # noqa: E501

        Shipping Day phone  # noqa: E501

        :return: The shipto_day_phone of this ChannelPartnerOrder.  # noqa: E501
        :rtype: str
        """
        return self._shipto_day_phone

    @shipto_day_phone.setter
    def shipto_day_phone(self, shipto_day_phone):
        """Sets the shipto_day_phone of this ChannelPartnerOrder.

        Shipping Day phone  # noqa: E501

        :param shipto_day_phone: The shipto_day_phone of this ChannelPartnerOrder.  # noqa: E501
        :type: str
        """
        if shipto_day_phone is not None and len(shipto_day_phone) > 25:
            raise ValueError("Invalid value for `shipto_day_phone`, length must be less than or equal to `25`")  # noqa: E501

        self._shipto_day_phone = shipto_day_phone

    @property
    def shipto_evening_phone(self):
        """Gets the shipto_evening_phone of this ChannelPartnerOrder.  # noqa: E501

        Shipping Evening phone  # noqa: E501

        :return: The shipto_evening_phone of this ChannelPartnerOrder.  # noqa: E501
        :rtype: str
        """
        return self._shipto_evening_phone

    @shipto_evening_phone.setter
    def shipto_evening_phone(self, shipto_evening_phone):
        """Sets the shipto_evening_phone of this ChannelPartnerOrder.

        Shipping Evening phone  # noqa: E501

        :param shipto_evening_phone: The shipto_evening_phone of this ChannelPartnerOrder.  # noqa: E501
        :type: str
        """
        if shipto_evening_phone is not None and len(shipto_evening_phone) > 25:
            raise ValueError("Invalid value for `shipto_evening_phone`, length must be less than or equal to `25`")  # noqa: E501

        self._shipto_evening_phone = shipto_evening_phone

    @property
    def shipto_first_name(self):
        """Gets the shipto_first_name of this ChannelPartnerOrder.  # noqa: E501

        Shipping First name  # noqa: E501

        :return: The shipto_first_name of this ChannelPartnerOrder.  # noqa: E501
        :rtype: str
        """
        return self._shipto_first_name

    @shipto_first_name.setter
    def shipto_first_name(self, shipto_first_name):
        """Sets the shipto_first_name of this ChannelPartnerOrder.

        Shipping First name  # noqa: E501

        :param shipto_first_name: The shipto_first_name of this ChannelPartnerOrder.  # noqa: E501
        :type: str
        """
        if shipto_first_name is not None and len(shipto_first_name) > 30:
            raise ValueError("Invalid value for `shipto_first_name`, length must be less than or equal to `30`")  # noqa: E501

        self._shipto_first_name = shipto_first_name

    @property
    def shipto_last_name(self):
        """Gets the shipto_last_name of this ChannelPartnerOrder.  # noqa: E501

        Shipping Last name  # noqa: E501

        :return: The shipto_last_name of this ChannelPartnerOrder.  # noqa: E501
        :rtype: str
        """
        return self._shipto_last_name

    @shipto_last_name.setter
    def shipto_last_name(self, shipto_last_name):
        """Sets the shipto_last_name of this ChannelPartnerOrder.

        Shipping Last name  # noqa: E501

        :param shipto_last_name: The shipto_last_name of this ChannelPartnerOrder.  # noqa: E501
        :type: str
        """
        if shipto_last_name is not None and len(shipto_last_name) > 30:
            raise ValueError("Invalid value for `shipto_last_name`, length must be less than or equal to `30`")  # noqa: E501

        self._shipto_last_name = shipto_last_name

    @property
    def shipto_postal_code(self):
        """Gets the shipto_postal_code of this ChannelPartnerOrder.  # noqa: E501

        Shipping Postal code  # noqa: E501

        :return: The shipto_postal_code of this ChannelPartnerOrder.  # noqa: E501
        :rtype: str
        """
        return self._shipto_postal_code

    @shipto_postal_code.setter
    def shipto_postal_code(self, shipto_postal_code):
        """Sets the shipto_postal_code of this ChannelPartnerOrder.

        Shipping Postal code  # noqa: E501

        :param shipto_postal_code: The shipto_postal_code of this ChannelPartnerOrder.  # noqa: E501
        :type: str
        """
        if shipto_postal_code is not None and len(shipto_postal_code) > 20:
            raise ValueError("Invalid value for `shipto_postal_code`, length must be less than or equal to `20`")  # noqa: E501

        self._shipto_postal_code = shipto_postal_code

    @property
    def shipto_state_region(self):
        """Gets the shipto_state_region of this ChannelPartnerOrder.  # noqa: E501

        Shipping State for United States otherwise region or province for other countries  # noqa: E501

        :return: The shipto_state_region of this ChannelPartnerOrder.  # noqa: E501
        :rtype: str
        """
        return self._shipto_state_region

    @shipto_state_region.setter
    def shipto_state_region(self, shipto_state_region):
        """Sets the shipto_state_region of this ChannelPartnerOrder.

        Shipping State for United States otherwise region or province for other countries  # noqa: E501

        :param shipto_state_region: The shipto_state_region of this ChannelPartnerOrder.  # noqa: E501
        :type: str
        """
        if shipto_state_region is not None and len(shipto_state_region) > 32:
            raise ValueError("Invalid value for `shipto_state_region`, length must be less than or equal to `32`")  # noqa: E501

        self._shipto_state_region = shipto_state_region

    @property
    def shipto_title(self):
        """Gets the shipto_title of this ChannelPartnerOrder.  # noqa: E501

        Shipping Title  # noqa: E501

        :return: The shipto_title of this ChannelPartnerOrder.  # noqa: E501
        :rtype: str
        """
        return self._shipto_title

    @shipto_title.setter
    def shipto_title(self, shipto_title):
        """Sets the shipto_title of this ChannelPartnerOrder.

        Shipping Title  # noqa: E501

        :param shipto_title: The shipto_title of this ChannelPartnerOrder.  # noqa: E501
        :type: str
        """
        if shipto_title is not None and len(shipto_title) > 50:
            raise ValueError("Invalid value for `shipto_title`, length must be less than or equal to `50`")  # noqa: E501

        self._shipto_title = shipto_title

    @property
    def skip_payment_processing(self):
        """Gets the skip_payment_processing of this ChannelPartnerOrder.  # noqa: E501

        If true the order is placed directly into the shipping department  # noqa: E501

        :return: The skip_payment_processing of this ChannelPartnerOrder.  # noqa: E501
        :rtype: bool
        """
        return self._skip_payment_processing

    @skip_payment_processing.setter
    def skip_payment_processing(self, skip_payment_processing):
        """Sets the skip_payment_processing of this ChannelPartnerOrder.

        If true the order is placed directly into the shipping department  # noqa: E501

        :param skip_payment_processing: The skip_payment_processing of this ChannelPartnerOrder.  # noqa: E501
        :type: bool
        """

        self._skip_payment_processing = skip_payment_processing

    @property
    def special_instructions(self):
        """Gets the special_instructions of this ChannelPartnerOrder.  # noqa: E501

        Special instructions from the customer regarding shipping  # noqa: E501

        :return: The special_instructions of this ChannelPartnerOrder.  # noqa: E501
        :rtype: str
        """
        return self._special_instructions

    @special_instructions.setter
    def special_instructions(self, special_instructions):
        """Sets the special_instructions of this ChannelPartnerOrder.

        Special instructions from the customer regarding shipping  # noqa: E501

        :param special_instructions: The special_instructions of this ChannelPartnerOrder.  # noqa: E501
        :type: str
        """
        if special_instructions is not None and len(special_instructions) > 10000:
            raise ValueError("Invalid value for `special_instructions`, length must be less than or equal to `10000`")  # noqa: E501

        self._special_instructions = special_instructions

    @property
    def store_completed(self):
        """Gets the store_completed of this ChannelPartnerOrder.  # noqa: E501

        If true the order bypasses shipping and is marked completed  # noqa: E501

        :return: The store_completed of this ChannelPartnerOrder.  # noqa: E501
        :rtype: bool
        """
        return self._store_completed

    @store_completed.setter
    def store_completed(self, store_completed):
        """Sets the store_completed of this ChannelPartnerOrder.

        If true the order bypasses shipping and is marked completed  # noqa: E501

        :param store_completed: The store_completed of this ChannelPartnerOrder.  # noqa: E501
        :type: bool
        """

        self._store_completed = store_completed

    @property
    def store_if_payment_declines(self):
        """Gets the store_if_payment_declines of this ChannelPartnerOrder.  # noqa: E501

        If true any failed payments are placed into Accounts Receivable.  If false any failed payments result in a rejected order resulting in errors thrown during the insert routine  # noqa: E501

        :return: The store_if_payment_declines of this ChannelPartnerOrder.  # noqa: E501
        :rtype: bool
        """
        return self._store_if_payment_declines

    @store_if_payment_declines.setter
    def store_if_payment_declines(self, store_if_payment_declines):
        """Sets the store_if_payment_declines of this ChannelPartnerOrder.

        If true any failed payments are placed into Accounts Receivable.  If false any failed payments result in a rejected order resulting in errors thrown during the insert routine  # noqa: E501

        :param store_if_payment_declines: The store_if_payment_declines of this ChannelPartnerOrder.  # noqa: E501
        :type: bool
        """

        self._store_if_payment_declines = store_if_payment_declines

    @property
    def storefront_host_name(self):
        """Gets the storefront_host_name of this ChannelPartnerOrder.  # noqa: E501

        StoreFront host name associated with the order  # noqa: E501

        :return: The storefront_host_name of this ChannelPartnerOrder.  # noqa: E501
        :rtype: str
        """
        return self._storefront_host_name

    @storefront_host_name.setter
    def storefront_host_name(self, storefront_host_name):
        """Sets the storefront_host_name of this ChannelPartnerOrder.

        StoreFront host name associated with the order  # noqa: E501

        :param storefront_host_name: The storefront_host_name of this ChannelPartnerOrder.  # noqa: E501
        :type: str
        """

        self._storefront_host_name = storefront_host_name

    @property
    def tax_county(self):
        """Gets the tax_county of this ChannelPartnerOrder.  # noqa: E501

        The optional shipping county used to determine exact taxes  # noqa: E501

        :return: The tax_county of this ChannelPartnerOrder.  # noqa: E501
        :rtype: str
        """
        return self._tax_county

    @tax_county.setter
    def tax_county(self, tax_county):
        """Sets the tax_county of this ChannelPartnerOrder.

        The optional shipping county used to determine exact taxes  # noqa: E501

        :param tax_county: The tax_county of this ChannelPartnerOrder.  # noqa: E501
        :type: str
        """

        self._tax_county = tax_county

    @property
    def tax_exempt(self):
        """Gets the tax_exempt of this ChannelPartnerOrder.  # noqa: E501

        If true this order is marked as being tax exempt  # noqa: E501

        :return: The tax_exempt of this ChannelPartnerOrder.  # noqa: E501
        :rtype: bool
        """
        return self._tax_exempt

    @tax_exempt.setter
    def tax_exempt(self, tax_exempt):
        """Sets the tax_exempt of this ChannelPartnerOrder.

        If true this order is marked as being tax exempt  # noqa: E501

        :param tax_exempt: The tax_exempt of this ChannelPartnerOrder.  # noqa: E501
        :type: bool
        """

        self._tax_exempt = tax_exempt

    @property
    def transaction(self):
        """Gets the transaction of this ChannelPartnerOrder.  # noqa: E501


        :return: The transaction of this ChannelPartnerOrder.  # noqa: E501
        :rtype: ChannelPartnerOrderTransaction
        """
        return self._transaction

    @transaction.setter
    def transaction(self, transaction):
        """Sets the transaction of this ChannelPartnerOrder.


        :param transaction: The transaction of this ChannelPartnerOrder.  # noqa: E501
        :type: ChannelPartnerOrderTransaction
        """

        self._transaction = transaction

    @property
    def treat_warnings_as_errors(self):
        """Gets the treat_warnings_as_errors of this ChannelPartnerOrder.  # noqa: E501

        If true all warnings are considered errors, this is true by default  # noqa: E501

        :return: The treat_warnings_as_errors of this ChannelPartnerOrder.  # noqa: E501
        :rtype: bool
        """
        return self._treat_warnings_as_errors

    @treat_warnings_as_errors.setter
    def treat_warnings_as_errors(self, treat_warnings_as_errors):
        """Sets the treat_warnings_as_errors of this ChannelPartnerOrder.

        If true all warnings are considered errors, this is true by default  # noqa: E501

        :param treat_warnings_as_errors: The treat_warnings_as_errors of this ChannelPartnerOrder.  # noqa: E501
        :type: bool
        """

        self._treat_warnings_as_errors = treat_warnings_as_errors

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChannelPartnerOrder, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChannelPartnerOrder):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
