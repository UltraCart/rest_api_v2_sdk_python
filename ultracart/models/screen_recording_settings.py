# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ScreenRecordingSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cost_per_thousand': 'float',
        'enabled': 'bool',
        'retention_interval': 'str',
        'sessions_current_billing_period': 'int',
        'sessions_last_billing_period': 'int',
        'sessions_trial_billing_period': 'int',
        'trial_expiration': 'str',
        'trial_expired': 'bool'
    }

    attribute_map = {
        'cost_per_thousand': 'cost_per_thousand',
        'enabled': 'enabled',
        'retention_interval': 'retention_interval',
        'sessions_current_billing_period': 'sessions_current_billing_period',
        'sessions_last_billing_period': 'sessions_last_billing_period',
        'sessions_trial_billing_period': 'sessions_trial_billing_period',
        'trial_expiration': 'trial_expiration',
        'trial_expired': 'trial_expired'
    }

    def __init__(self, cost_per_thousand=None, enabled=None, retention_interval=None, sessions_current_billing_period=None, sessions_last_billing_period=None, sessions_trial_billing_period=None, trial_expiration=None, trial_expired=None):  # noqa: E501
        """ScreenRecordingSettings - a model defined in Swagger"""  # noqa: E501

        self._cost_per_thousand = None
        self._enabled = None
        self._retention_interval = None
        self._sessions_current_billing_period = None
        self._sessions_last_billing_period = None
        self._sessions_trial_billing_period = None
        self._trial_expiration = None
        self._trial_expired = None
        self.discriminator = None

        if cost_per_thousand is not None:
            self.cost_per_thousand = cost_per_thousand
        if enabled is not None:
            self.enabled = enabled
        if retention_interval is not None:
            self.retention_interval = retention_interval
        if sessions_current_billing_period is not None:
            self.sessions_current_billing_period = sessions_current_billing_period
        if sessions_last_billing_period is not None:
            self.sessions_last_billing_period = sessions_last_billing_period
        if sessions_trial_billing_period is not None:
            self.sessions_trial_billing_period = sessions_trial_billing_period
        if trial_expiration is not None:
            self.trial_expiration = trial_expiration
        if trial_expired is not None:
            self.trial_expired = trial_expired

    @property
    def cost_per_thousand(self):
        """Gets the cost_per_thousand of this ScreenRecordingSettings.  # noqa: E501

        Cost per one thousand sessions  # noqa: E501

        :return: The cost_per_thousand of this ScreenRecordingSettings.  # noqa: E501
        :rtype: float
        """
        return self._cost_per_thousand

    @cost_per_thousand.setter
    def cost_per_thousand(self, cost_per_thousand):
        """Sets the cost_per_thousand of this ScreenRecordingSettings.

        Cost per one thousand sessions  # noqa: E501

        :param cost_per_thousand: The cost_per_thousand of this ScreenRecordingSettings.  # noqa: E501
        :type: float
        """

        self._cost_per_thousand = cost_per_thousand

    @property
    def enabled(self):
        """Gets the enabled of this ScreenRecordingSettings.  # noqa: E501


        :return: The enabled of this ScreenRecordingSettings.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ScreenRecordingSettings.


        :param enabled: The enabled of this ScreenRecordingSettings.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def retention_interval(self):
        """Gets the retention_interval of this ScreenRecordingSettings.  # noqa: E501

        How long screen recording data is retained  # noqa: E501

        :return: The retention_interval of this ScreenRecordingSettings.  # noqa: E501
        :rtype: str
        """
        return self._retention_interval

    @retention_interval.setter
    def retention_interval(self, retention_interval):
        """Sets the retention_interval of this ScreenRecordingSettings.

        How long screen recording data is retained  # noqa: E501

        :param retention_interval: The retention_interval of this ScreenRecordingSettings.  # noqa: E501
        :type: str
        """

        self._retention_interval = retention_interval

    @property
    def sessions_current_billing_period(self):
        """Gets the sessions_current_billing_period of this ScreenRecordingSettings.  # noqa: E501


        :return: The sessions_current_billing_period of this ScreenRecordingSettings.  # noqa: E501
        :rtype: int
        """
        return self._sessions_current_billing_period

    @sessions_current_billing_period.setter
    def sessions_current_billing_period(self, sessions_current_billing_period):
        """Sets the sessions_current_billing_period of this ScreenRecordingSettings.


        :param sessions_current_billing_period: The sessions_current_billing_period of this ScreenRecordingSettings.  # noqa: E501
        :type: int
        """

        self._sessions_current_billing_period = sessions_current_billing_period

    @property
    def sessions_last_billing_period(self):
        """Gets the sessions_last_billing_period of this ScreenRecordingSettings.  # noqa: E501


        :return: The sessions_last_billing_period of this ScreenRecordingSettings.  # noqa: E501
        :rtype: int
        """
        return self._sessions_last_billing_period

    @sessions_last_billing_period.setter
    def sessions_last_billing_period(self, sessions_last_billing_period):
        """Sets the sessions_last_billing_period of this ScreenRecordingSettings.


        :param sessions_last_billing_period: The sessions_last_billing_period of this ScreenRecordingSettings.  # noqa: E501
        :type: int
        """

        self._sessions_last_billing_period = sessions_last_billing_period

    @property
    def sessions_trial_billing_period(self):
        """Gets the sessions_trial_billing_period of this ScreenRecordingSettings.  # noqa: E501


        :return: The sessions_trial_billing_period of this ScreenRecordingSettings.  # noqa: E501
        :rtype: int
        """
        return self._sessions_trial_billing_period

    @sessions_trial_billing_period.setter
    def sessions_trial_billing_period(self, sessions_trial_billing_period):
        """Sets the sessions_trial_billing_period of this ScreenRecordingSettings.


        :param sessions_trial_billing_period: The sessions_trial_billing_period of this ScreenRecordingSettings.  # noqa: E501
        :type: int
        """

        self._sessions_trial_billing_period = sessions_trial_billing_period

    @property
    def trial_expiration(self):
        """Gets the trial_expiration of this ScreenRecordingSettings.  # noqa: E501


        :return: The trial_expiration of this ScreenRecordingSettings.  # noqa: E501
        :rtype: str
        """
        return self._trial_expiration

    @trial_expiration.setter
    def trial_expiration(self, trial_expiration):
        """Sets the trial_expiration of this ScreenRecordingSettings.


        :param trial_expiration: The trial_expiration of this ScreenRecordingSettings.  # noqa: E501
        :type: str
        """

        self._trial_expiration = trial_expiration

    @property
    def trial_expired(self):
        """Gets the trial_expired of this ScreenRecordingSettings.  # noqa: E501


        :return: The trial_expired of this ScreenRecordingSettings.  # noqa: E501
        :rtype: bool
        """
        return self._trial_expired

    @trial_expired.setter
    def trial_expired(self, trial_expired):
        """Sets the trial_expired of this ScreenRecordingSettings.


        :param trial_expired: The trial_expired of this ScreenRecordingSettings.  # noqa: E501
        :type: bool
        """

        self._trial_expired = trial_expired

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScreenRecordingSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScreenRecordingSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
