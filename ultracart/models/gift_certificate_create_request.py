# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GiftCertificateCreateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'float',
        'expiration_dts': 'str',
        'initial_ledger_description': 'str',
        'merchant_note': 'str'
    }

    attribute_map = {
        'amount': 'amount',
        'expiration_dts': 'expiration_dts',
        'initial_ledger_description': 'initial_ledger_description',
        'merchant_note': 'merchant_note'
    }

    def __init__(self, amount=None, expiration_dts=None, initial_ledger_description=None, merchant_note=None):  # noqa: E501
        """GiftCertificateCreateRequest - a model defined in Swagger"""  # noqa: E501

        self._amount = None
        self._expiration_dts = None
        self._initial_ledger_description = None
        self._merchant_note = None
        self.discriminator = None

        if amount is not None:
            self.amount = amount
        if expiration_dts is not None:
            self.expiration_dts = expiration_dts
        if initial_ledger_description is not None:
            self.initial_ledger_description = initial_ledger_description
        if merchant_note is not None:
            self.merchant_note = merchant_note

    @property
    def amount(self):
        """Gets the amount of this GiftCertificateCreateRequest.  # noqa: E501

        Initial amount of this gift certificate.  # noqa: E501

        :return: The amount of this GiftCertificateCreateRequest.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this GiftCertificateCreateRequest.

        Initial amount of this gift certificate.  # noqa: E501

        :param amount: The amount of this GiftCertificateCreateRequest.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def expiration_dts(self):
        """Gets the expiration_dts of this GiftCertificateCreateRequest.  # noqa: E501

        Expiration date time.  # noqa: E501

        :return: The expiration_dts of this GiftCertificateCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._expiration_dts

    @expiration_dts.setter
    def expiration_dts(self, expiration_dts):
        """Sets the expiration_dts of this GiftCertificateCreateRequest.

        Expiration date time.  # noqa: E501

        :param expiration_dts: The expiration_dts of this GiftCertificateCreateRequest.  # noqa: E501
        :type: str
        """

        self._expiration_dts = expiration_dts

    @property
    def initial_ledger_description(self):
        """Gets the initial_ledger_description of this GiftCertificateCreateRequest.  # noqa: E501

        A brief description of how and/or why this gift certificate was created.  # noqa: E501

        :return: The initial_ledger_description of this GiftCertificateCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._initial_ledger_description

    @initial_ledger_description.setter
    def initial_ledger_description(self, initial_ledger_description):
        """Sets the initial_ledger_description of this GiftCertificateCreateRequest.

        A brief description of how and/or why this gift certificate was created.  # noqa: E501

        :param initial_ledger_description: The initial_ledger_description of this GiftCertificateCreateRequest.  # noqa: E501
        :type: str
        """

        self._initial_ledger_description = initial_ledger_description

    @property
    def merchant_note(self):
        """Gets the merchant_note of this GiftCertificateCreateRequest.  # noqa: E501

        Any internal details you wish to record about this gift certificate.  # noqa: E501

        :return: The merchant_note of this GiftCertificateCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._merchant_note

    @merchant_note.setter
    def merchant_note(self, merchant_note):
        """Sets the merchant_note of this GiftCertificateCreateRequest.

        Any internal details you wish to record about this gift certificate.  # noqa: E501

        :param merchant_note: The merchant_note of this GiftCertificateCreateRequest.  # noqa: E501
        :type: str
        """

        self._merchant_note = merchant_note

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GiftCertificateCreateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GiftCertificateCreateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
