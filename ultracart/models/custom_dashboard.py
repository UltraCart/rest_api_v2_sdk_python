# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CustomDashboard(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data_warehouse_custom_dashboard_oid': 'int',
        'merchant_id': 'str',
        'name': 'str',
        'pages': 'list[CustomDashboardPage]'
    }

    attribute_map = {
        'data_warehouse_custom_dashboard_oid': 'data_warehouse_custom_dashboard_oid',
        'merchant_id': 'merchant_id',
        'name': 'name',
        'pages': 'pages'
    }

    def __init__(self, data_warehouse_custom_dashboard_oid=None, merchant_id=None, name=None, pages=None):  # noqa: E501
        """CustomDashboard - a model defined in Swagger"""  # noqa: E501

        self._data_warehouse_custom_dashboard_oid = None
        self._merchant_id = None
        self._name = None
        self._pages = None
        self.discriminator = None

        if data_warehouse_custom_dashboard_oid is not None:
            self.data_warehouse_custom_dashboard_oid = data_warehouse_custom_dashboard_oid
        if merchant_id is not None:
            self.merchant_id = merchant_id
        if name is not None:
            self.name = name
        if pages is not None:
            self.pages = pages

    @property
    def data_warehouse_custom_dashboard_oid(self):
        """Gets the data_warehouse_custom_dashboard_oid of this CustomDashboard.  # noqa: E501


        :return: The data_warehouse_custom_dashboard_oid of this CustomDashboard.  # noqa: E501
        :rtype: int
        """
        return self._data_warehouse_custom_dashboard_oid

    @data_warehouse_custom_dashboard_oid.setter
    def data_warehouse_custom_dashboard_oid(self, data_warehouse_custom_dashboard_oid):
        """Sets the data_warehouse_custom_dashboard_oid of this CustomDashboard.


        :param data_warehouse_custom_dashboard_oid: The data_warehouse_custom_dashboard_oid of this CustomDashboard.  # noqa: E501
        :type: int
        """

        self._data_warehouse_custom_dashboard_oid = data_warehouse_custom_dashboard_oid

    @property
    def merchant_id(self):
        """Gets the merchant_id of this CustomDashboard.  # noqa: E501


        :return: The merchant_id of this CustomDashboard.  # noqa: E501
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this CustomDashboard.


        :param merchant_id: The merchant_id of this CustomDashboard.  # noqa: E501
        :type: str
        """

        self._merchant_id = merchant_id

    @property
    def name(self):
        """Gets the name of this CustomDashboard.  # noqa: E501


        :return: The name of this CustomDashboard.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CustomDashboard.


        :param name: The name of this CustomDashboard.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def pages(self):
        """Gets the pages of this CustomDashboard.  # noqa: E501


        :return: The pages of this CustomDashboard.  # noqa: E501
        :rtype: list[CustomDashboardPage]
        """
        return self._pages

    @pages.setter
    def pages(self, pages):
        """Sets the pages of this CustomDashboard.


        :param pages: The pages of this CustomDashboard.  # noqa: E501
        :type: list[CustomDashboardPage]
        """

        self._pages = pages

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomDashboard, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomDashboard):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
