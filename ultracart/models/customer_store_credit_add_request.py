# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CustomerStoreCreditAddRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'float',
        'description': 'str',
        'expiration_days': 'int',
        'vesting_days': 'int'
    }

    attribute_map = {
        'amount': 'amount',
        'description': 'description',
        'expiration_days': 'expiration_days',
        'vesting_days': 'vesting_days'
    }

    def __init__(self, amount=None, description=None, expiration_days=None, vesting_days=None):  # noqa: E501
        """CustomerStoreCreditAddRequest - a model defined in Swagger"""  # noqa: E501

        self._amount = None
        self._description = None
        self._expiration_days = None
        self._vesting_days = None
        self.discriminator = None

        if amount is not None:
            self.amount = amount
        if description is not None:
            self.description = description
        if expiration_days is not None:
            self.expiration_days = expiration_days
        if vesting_days is not None:
            self.vesting_days = vesting_days

    @property
    def amount(self):
        """Gets the amount of this CustomerStoreCreditAddRequest.  # noqa: E501

        Amount of store credit  # noqa: E501

        :return: The amount of this CustomerStoreCreditAddRequest.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CustomerStoreCreditAddRequest.

        Amount of store credit  # noqa: E501

        :param amount: The amount of this CustomerStoreCreditAddRequest.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def description(self):
        """Gets the description of this CustomerStoreCreditAddRequest.  # noqa: E501

        Description or reason for the store credit  # noqa: E501

        :return: The description of this CustomerStoreCreditAddRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CustomerStoreCreditAddRequest.

        Description or reason for the store credit  # noqa: E501

        :param description: The description of this CustomerStoreCreditAddRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def expiration_days(self):
        """Gets the expiration_days of this CustomerStoreCreditAddRequest.  # noqa: E501

        Optional days for store credit to expire or zero for no expiration  # noqa: E501

        :return: The expiration_days of this CustomerStoreCreditAddRequest.  # noqa: E501
        :rtype: int
        """
        return self._expiration_days

    @expiration_days.setter
    def expiration_days(self, expiration_days):
        """Sets the expiration_days of this CustomerStoreCreditAddRequest.

        Optional days for store credit to expire or zero for no expiration  # noqa: E501

        :param expiration_days: The expiration_days of this CustomerStoreCreditAddRequest.  # noqa: E501
        :type: int
        """

        self._expiration_days = expiration_days

    @property
    def vesting_days(self):
        """Gets the vesting_days of this CustomerStoreCreditAddRequest.  # noqa: E501

        Optional days for store credit to vesting or zero for immediately available  # noqa: E501

        :return: The vesting_days of this CustomerStoreCreditAddRequest.  # noqa: E501
        :rtype: int
        """
        return self._vesting_days

    @vesting_days.setter
    def vesting_days(self, vesting_days):
        """Sets the vesting_days of this CustomerStoreCreditAddRequest.

        Optional days for store credit to vesting or zero for immediately available  # noqa: E501

        :param vesting_days: The vesting_days of this CustomerStoreCreditAddRequest.  # noqa: E501
        :type: int
        """

        self._vesting_days = vesting_days

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomerStoreCreditAddRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomerStoreCreditAddRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
