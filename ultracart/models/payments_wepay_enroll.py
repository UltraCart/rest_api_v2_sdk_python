# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PaymentsWepayEnroll(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address1': 'str',
        'address2': 'str',
        'canada_accept_debit_cards': 'bool',
        'city': 'str',
        'company': 'str',
        'company_description': 'str',
        'country': 'str',
        'expected_revenue': 'str',
        'industry': 'str',
        'owner_email': 'str',
        'owner_name': 'str',
        'owner_phone': 'str',
        'state': 'str',
        'webiste_url': 'str',
        'zip': 'str'
    }

    attribute_map = {
        'address1': 'address1',
        'address2': 'address2',
        'canada_accept_debit_cards': 'canada_accept_debit_cards',
        'city': 'city',
        'company': 'company',
        'company_description': 'company_description',
        'country': 'country',
        'expected_revenue': 'expected_revenue',
        'industry': 'industry',
        'owner_email': 'owner_email',
        'owner_name': 'owner_name',
        'owner_phone': 'owner_phone',
        'state': 'state',
        'webiste_url': 'webiste_url',
        'zip': 'zip'
    }

    def __init__(self, address1=None, address2=None, canada_accept_debit_cards=None, city=None, company=None, company_description=None, country=None, expected_revenue=None, industry=None, owner_email=None, owner_name=None, owner_phone=None, state=None, webiste_url=None, zip=None):  # noqa: E501
        """PaymentsWepayEnroll - a model defined in Swagger"""  # noqa: E501

        self._address1 = None
        self._address2 = None
        self._canada_accept_debit_cards = None
        self._city = None
        self._company = None
        self._company_description = None
        self._country = None
        self._expected_revenue = None
        self._industry = None
        self._owner_email = None
        self._owner_name = None
        self._owner_phone = None
        self._state = None
        self._webiste_url = None
        self._zip = None
        self.discriminator = None

        if address1 is not None:
            self.address1 = address1
        if address2 is not None:
            self.address2 = address2
        if canada_accept_debit_cards is not None:
            self.canada_accept_debit_cards = canada_accept_debit_cards
        if city is not None:
            self.city = city
        if company is not None:
            self.company = company
        if company_description is not None:
            self.company_description = company_description
        if country is not None:
            self.country = country
        if expected_revenue is not None:
            self.expected_revenue = expected_revenue
        if industry is not None:
            self.industry = industry
        if owner_email is not None:
            self.owner_email = owner_email
        if owner_name is not None:
            self.owner_name = owner_name
        if owner_phone is not None:
            self.owner_phone = owner_phone
        if state is not None:
            self.state = state
        if webiste_url is not None:
            self.webiste_url = webiste_url
        if zip is not None:
            self.zip = zip

    @property
    def address1(self):
        """Gets the address1 of this PaymentsWepayEnroll.  # noqa: E501


        :return: The address1 of this PaymentsWepayEnroll.  # noqa: E501
        :rtype: str
        """
        return self._address1

    @address1.setter
    def address1(self, address1):
        """Sets the address1 of this PaymentsWepayEnroll.


        :param address1: The address1 of this PaymentsWepayEnroll.  # noqa: E501
        :type: str
        """

        self._address1 = address1

    @property
    def address2(self):
        """Gets the address2 of this PaymentsWepayEnroll.  # noqa: E501


        :return: The address2 of this PaymentsWepayEnroll.  # noqa: E501
        :rtype: str
        """
        return self._address2

    @address2.setter
    def address2(self, address2):
        """Sets the address2 of this PaymentsWepayEnroll.


        :param address2: The address2 of this PaymentsWepayEnroll.  # noqa: E501
        :type: str
        """

        self._address2 = address2

    @property
    def canada_accept_debit_cards(self):
        """Gets the canada_accept_debit_cards of this PaymentsWepayEnroll.  # noqa: E501


        :return: The canada_accept_debit_cards of this PaymentsWepayEnroll.  # noqa: E501
        :rtype: bool
        """
        return self._canada_accept_debit_cards

    @canada_accept_debit_cards.setter
    def canada_accept_debit_cards(self, canada_accept_debit_cards):
        """Sets the canada_accept_debit_cards of this PaymentsWepayEnroll.


        :param canada_accept_debit_cards: The canada_accept_debit_cards of this PaymentsWepayEnroll.  # noqa: E501
        :type: bool
        """

        self._canada_accept_debit_cards = canada_accept_debit_cards

    @property
    def city(self):
        """Gets the city of this PaymentsWepayEnroll.  # noqa: E501


        :return: The city of this PaymentsWepayEnroll.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this PaymentsWepayEnroll.


        :param city: The city of this PaymentsWepayEnroll.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def company(self):
        """Gets the company of this PaymentsWepayEnroll.  # noqa: E501


        :return: The company of this PaymentsWepayEnroll.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this PaymentsWepayEnroll.


        :param company: The company of this PaymentsWepayEnroll.  # noqa: E501
        :type: str
        """

        self._company = company

    @property
    def company_description(self):
        """Gets the company_description of this PaymentsWepayEnroll.  # noqa: E501


        :return: The company_description of this PaymentsWepayEnroll.  # noqa: E501
        :rtype: str
        """
        return self._company_description

    @company_description.setter
    def company_description(self, company_description):
        """Sets the company_description of this PaymentsWepayEnroll.


        :param company_description: The company_description of this PaymentsWepayEnroll.  # noqa: E501
        :type: str
        """

        self._company_description = company_description

    @property
    def country(self):
        """Gets the country of this PaymentsWepayEnroll.  # noqa: E501


        :return: The country of this PaymentsWepayEnroll.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this PaymentsWepayEnroll.


        :param country: The country of this PaymentsWepayEnroll.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def expected_revenue(self):
        """Gets the expected_revenue of this PaymentsWepayEnroll.  # noqa: E501


        :return: The expected_revenue of this PaymentsWepayEnroll.  # noqa: E501
        :rtype: str
        """
        return self._expected_revenue

    @expected_revenue.setter
    def expected_revenue(self, expected_revenue):
        """Sets the expected_revenue of this PaymentsWepayEnroll.


        :param expected_revenue: The expected_revenue of this PaymentsWepayEnroll.  # noqa: E501
        :type: str
        """

        self._expected_revenue = expected_revenue

    @property
    def industry(self):
        """Gets the industry of this PaymentsWepayEnroll.  # noqa: E501


        :return: The industry of this PaymentsWepayEnroll.  # noqa: E501
        :rtype: str
        """
        return self._industry

    @industry.setter
    def industry(self, industry):
        """Sets the industry of this PaymentsWepayEnroll.


        :param industry: The industry of this PaymentsWepayEnroll.  # noqa: E501
        :type: str
        """

        self._industry = industry

    @property
    def owner_email(self):
        """Gets the owner_email of this PaymentsWepayEnroll.  # noqa: E501


        :return: The owner_email of this PaymentsWepayEnroll.  # noqa: E501
        :rtype: str
        """
        return self._owner_email

    @owner_email.setter
    def owner_email(self, owner_email):
        """Sets the owner_email of this PaymentsWepayEnroll.


        :param owner_email: The owner_email of this PaymentsWepayEnroll.  # noqa: E501
        :type: str
        """

        self._owner_email = owner_email

    @property
    def owner_name(self):
        """Gets the owner_name of this PaymentsWepayEnroll.  # noqa: E501


        :return: The owner_name of this PaymentsWepayEnroll.  # noqa: E501
        :rtype: str
        """
        return self._owner_name

    @owner_name.setter
    def owner_name(self, owner_name):
        """Sets the owner_name of this PaymentsWepayEnroll.


        :param owner_name: The owner_name of this PaymentsWepayEnroll.  # noqa: E501
        :type: str
        """

        self._owner_name = owner_name

    @property
    def owner_phone(self):
        """Gets the owner_phone of this PaymentsWepayEnroll.  # noqa: E501


        :return: The owner_phone of this PaymentsWepayEnroll.  # noqa: E501
        :rtype: str
        """
        return self._owner_phone

    @owner_phone.setter
    def owner_phone(self, owner_phone):
        """Sets the owner_phone of this PaymentsWepayEnroll.


        :param owner_phone: The owner_phone of this PaymentsWepayEnroll.  # noqa: E501
        :type: str
        """

        self._owner_phone = owner_phone

    @property
    def state(self):
        """Gets the state of this PaymentsWepayEnroll.  # noqa: E501


        :return: The state of this PaymentsWepayEnroll.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this PaymentsWepayEnroll.


        :param state: The state of this PaymentsWepayEnroll.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def webiste_url(self):
        """Gets the webiste_url of this PaymentsWepayEnroll.  # noqa: E501


        :return: The webiste_url of this PaymentsWepayEnroll.  # noqa: E501
        :rtype: str
        """
        return self._webiste_url

    @webiste_url.setter
    def webiste_url(self, webiste_url):
        """Sets the webiste_url of this PaymentsWepayEnroll.


        :param webiste_url: The webiste_url of this PaymentsWepayEnroll.  # noqa: E501
        :type: str
        """

        self._webiste_url = webiste_url

    @property
    def zip(self):
        """Gets the zip of this PaymentsWepayEnroll.  # noqa: E501


        :return: The zip of this PaymentsWepayEnroll.  # noqa: E501
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """Sets the zip of this PaymentsWepayEnroll.


        :param zip: The zip of this PaymentsWepayEnroll.  # noqa: E501
        :type: str
        """

        self._zip = zip

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaymentsWepayEnroll, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentsWepayEnroll):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
