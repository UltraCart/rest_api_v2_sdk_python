# coding: utf-8

"""
    UltraCart Rest API V2

    This is the next generation UltraCart REST API...

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class CartCheckout(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, comments=None, custom_field1=None, custom_field2=None, custom_field3=None, custom_field4=None, custom_field5=None, custom_field6=None, custom_field7=None, ip_address=None, screen_branding_theme_code=None):
        """
        CartCheckout - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'comments': 'str',
            'custom_field1': 'str',
            'custom_field2': 'str',
            'custom_field3': 'str',
            'custom_field4': 'str',
            'custom_field5': 'str',
            'custom_field6': 'str',
            'custom_field7': 'str',
            'ip_address': 'str',
            'screen_branding_theme_code': 'str'
        }

        self.attribute_map = {
            'comments': 'comments',
            'custom_field1': 'custom_field1',
            'custom_field2': 'custom_field2',
            'custom_field3': 'custom_field3',
            'custom_field4': 'custom_field4',
            'custom_field5': 'custom_field5',
            'custom_field6': 'custom_field6',
            'custom_field7': 'custom_field7',
            'ip_address': 'ip_address',
            'screen_branding_theme_code': 'screen_branding_theme_code'
        }

        self._comments = comments
        self._custom_field1 = custom_field1
        self._custom_field2 = custom_field2
        self._custom_field3 = custom_field3
        self._custom_field4 = custom_field4
        self._custom_field5 = custom_field5
        self._custom_field6 = custom_field6
        self._custom_field7 = custom_field7
        self._ip_address = ip_address
        self._screen_branding_theme_code = screen_branding_theme_code

    @property
    def comments(self):
        """
        Gets the comments of this CartCheckout.
        Comments from the customer.  Rarely used on the single page checkout.

        :return: The comments of this CartCheckout.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """
        Sets the comments of this CartCheckout.
        Comments from the customer.  Rarely used on the single page checkout.

        :param comments: The comments of this CartCheckout.
        :type: str
        """

        if not comments:
            raise ValueError("Invalid value for `comments`, must not be `None`")
        if len(comments) > 2000:
            raise ValueError("Invalid value for `comments`, length must be less than `2000`")

        self._comments = comments

    @property
    def custom_field1(self):
        """
        Gets the custom_field1 of this CartCheckout.
        Custom field 1

        :return: The custom_field1 of this CartCheckout.
        :rtype: str
        """
        return self._custom_field1

    @custom_field1.setter
    def custom_field1(self, custom_field1):
        """
        Sets the custom_field1 of this CartCheckout.
        Custom field 1

        :param custom_field1: The custom_field1 of this CartCheckout.
        :type: str
        """

        if not custom_field1:
            raise ValueError("Invalid value for `custom_field1`, must not be `None`")
        if len(custom_field1) > 50:
            raise ValueError("Invalid value for `custom_field1`, length must be less than `50`")

        self._custom_field1 = custom_field1

    @property
    def custom_field2(self):
        """
        Gets the custom_field2 of this CartCheckout.
        Custom field 2

        :return: The custom_field2 of this CartCheckout.
        :rtype: str
        """
        return self._custom_field2

    @custom_field2.setter
    def custom_field2(self, custom_field2):
        """
        Sets the custom_field2 of this CartCheckout.
        Custom field 2

        :param custom_field2: The custom_field2 of this CartCheckout.
        :type: str
        """

        if not custom_field2:
            raise ValueError("Invalid value for `custom_field2`, must not be `None`")
        if len(custom_field2) > 50:
            raise ValueError("Invalid value for `custom_field2`, length must be less than `50`")

        self._custom_field2 = custom_field2

    @property
    def custom_field3(self):
        """
        Gets the custom_field3 of this CartCheckout.
        Custom field 3

        :return: The custom_field3 of this CartCheckout.
        :rtype: str
        """
        return self._custom_field3

    @custom_field3.setter
    def custom_field3(self, custom_field3):
        """
        Sets the custom_field3 of this CartCheckout.
        Custom field 3

        :param custom_field3: The custom_field3 of this CartCheckout.
        :type: str
        """

        if not custom_field3:
            raise ValueError("Invalid value for `custom_field3`, must not be `None`")
        if len(custom_field3) > 50:
            raise ValueError("Invalid value for `custom_field3`, length must be less than `50`")

        self._custom_field3 = custom_field3

    @property
    def custom_field4(self):
        """
        Gets the custom_field4 of this CartCheckout.
        Custom field 4

        :return: The custom_field4 of this CartCheckout.
        :rtype: str
        """
        return self._custom_field4

    @custom_field4.setter
    def custom_field4(self, custom_field4):
        """
        Sets the custom_field4 of this CartCheckout.
        Custom field 4

        :param custom_field4: The custom_field4 of this CartCheckout.
        :type: str
        """

        if not custom_field4:
            raise ValueError("Invalid value for `custom_field4`, must not be `None`")
        if len(custom_field4) > 50:
            raise ValueError("Invalid value for `custom_field4`, length must be less than `50`")

        self._custom_field4 = custom_field4

    @property
    def custom_field5(self):
        """
        Gets the custom_field5 of this CartCheckout.
        Custom field 5

        :return: The custom_field5 of this CartCheckout.
        :rtype: str
        """
        return self._custom_field5

    @custom_field5.setter
    def custom_field5(self, custom_field5):
        """
        Sets the custom_field5 of this CartCheckout.
        Custom field 5

        :param custom_field5: The custom_field5 of this CartCheckout.
        :type: str
        """

        if not custom_field5:
            raise ValueError("Invalid value for `custom_field5`, must not be `None`")
        if len(custom_field5) > 75:
            raise ValueError("Invalid value for `custom_field5`, length must be less than `75`")

        self._custom_field5 = custom_field5

    @property
    def custom_field6(self):
        """
        Gets the custom_field6 of this CartCheckout.
        Custom field 6

        :return: The custom_field6 of this CartCheckout.
        :rtype: str
        """
        return self._custom_field6

    @custom_field6.setter
    def custom_field6(self, custom_field6):
        """
        Sets the custom_field6 of this CartCheckout.
        Custom field 6

        :param custom_field6: The custom_field6 of this CartCheckout.
        :type: str
        """

        if not custom_field6:
            raise ValueError("Invalid value for `custom_field6`, must not be `None`")
        if len(custom_field6) > 50:
            raise ValueError("Invalid value for `custom_field6`, length must be less than `50`")

        self._custom_field6 = custom_field6

    @property
    def custom_field7(self):
        """
        Gets the custom_field7 of this CartCheckout.
        Custom field 7

        :return: The custom_field7 of this CartCheckout.
        :rtype: str
        """
        return self._custom_field7

    @custom_field7.setter
    def custom_field7(self, custom_field7):
        """
        Sets the custom_field7 of this CartCheckout.
        Custom field 7

        :param custom_field7: The custom_field7 of this CartCheckout.
        :type: str
        """

        if not custom_field7:
            raise ValueError("Invalid value for `custom_field7`, must not be `None`")
        if len(custom_field7) > 50:
            raise ValueError("Invalid value for `custom_field7`, length must be less than `50`")

        self._custom_field7 = custom_field7

    @property
    def ip_address(self):
        """
        Gets the ip_address of this CartCheckout.
        IP Address

        :return: The ip_address of this CartCheckout.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """
        Sets the ip_address of this CartCheckout.
        IP Address

        :param ip_address: The ip_address of this CartCheckout.
        :type: str
        """

        self._ip_address = ip_address

    @property
    def screen_branding_theme_code(self):
        """
        Gets the screen_branding_theme_code of this CartCheckout.
        Screen branding theme code

        :return: The screen_branding_theme_code of this CartCheckout.
        :rtype: str
        """
        return self._screen_branding_theme_code

    @screen_branding_theme_code.setter
    def screen_branding_theme_code(self, screen_branding_theme_code):
        """
        Sets the screen_branding_theme_code of this CartCheckout.
        Screen branding theme code

        :param screen_branding_theme_code: The screen_branding_theme_code of this CartCheckout.
        :type: str
        """

        if not screen_branding_theme_code:
            raise ValueError("Invalid value for `screen_branding_theme_code`, must not be `None`")
        if len(screen_branding_theme_code) > 10:
            raise ValueError("Invalid value for `screen_branding_theme_code`, length must be less than `10`")

        self._screen_branding_theme_code = screen_branding_theme_code

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
