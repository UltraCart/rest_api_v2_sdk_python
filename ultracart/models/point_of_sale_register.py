# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PointOfSaleRegister(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'merchant_id': 'str',
        'name': 'str',
        'pos_location_oid': 'int',
        'pos_register_oid': 'int'
    }

    attribute_map = {
        'merchant_id': 'merchant_id',
        'name': 'name',
        'pos_location_oid': 'pos_location_oid',
        'pos_register_oid': 'pos_register_oid'
    }

    def __init__(self, merchant_id=None, name=None, pos_location_oid=None, pos_register_oid=None):  # noqa: E501
        """PointOfSaleRegister - a model defined in Swagger"""  # noqa: E501

        self._merchant_id = None
        self._name = None
        self._pos_location_oid = None
        self._pos_register_oid = None
        self.discriminator = None

        if merchant_id is not None:
            self.merchant_id = merchant_id
        if name is not None:
            self.name = name
        if pos_location_oid is not None:
            self.pos_location_oid = pos_location_oid
        if pos_register_oid is not None:
            self.pos_register_oid = pos_register_oid

    @property
    def merchant_id(self):
        """Gets the merchant_id of this PointOfSaleRegister.  # noqa: E501

        The merchant id that owns this point of sale register.  # noqa: E501

        :return: The merchant_id of this PointOfSaleRegister.  # noqa: E501
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this PointOfSaleRegister.

        The merchant id that owns this point of sale register.  # noqa: E501

        :param merchant_id: The merchant_id of this PointOfSaleRegister.  # noqa: E501
        :type: str
        """

        self._merchant_id = merchant_id

    @property
    def name(self):
        """Gets the name of this PointOfSaleRegister.  # noqa: E501

        Name of the register.  # noqa: E501

        :return: The name of this PointOfSaleRegister.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PointOfSaleRegister.

        Name of the register.  # noqa: E501

        :param name: The name of this PointOfSaleRegister.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def pos_location_oid(self):
        """Gets the pos_location_oid of this PointOfSaleRegister.  # noqa: E501

        Object identifier of the point of sale location where this register is located.  # noqa: E501

        :return: The pos_location_oid of this PointOfSaleRegister.  # noqa: E501
        :rtype: int
        """
        return self._pos_location_oid

    @pos_location_oid.setter
    def pos_location_oid(self, pos_location_oid):
        """Sets the pos_location_oid of this PointOfSaleRegister.

        Object identifier of the point of sale location where this register is located.  # noqa: E501

        :param pos_location_oid: The pos_location_oid of this PointOfSaleRegister.  # noqa: E501
        :type: int
        """

        self._pos_location_oid = pos_location_oid

    @property
    def pos_register_oid(self):
        """Gets the pos_register_oid of this PointOfSaleRegister.  # noqa: E501

        Object identifier of the point of sale register.  # noqa: E501

        :return: The pos_register_oid of this PointOfSaleRegister.  # noqa: E501
        :rtype: int
        """
        return self._pos_register_oid

    @pos_register_oid.setter
    def pos_register_oid(self, pos_register_oid):
        """Sets the pos_register_oid of this PointOfSaleRegister.

        Object identifier of the point of sale register.  # noqa: E501

        :param pos_register_oid: The pos_register_oid of this PointOfSaleRegister.  # noqa: E501
        :type: int
        """

        self._pos_register_oid = pos_register_oid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PointOfSaleRegister, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PointOfSaleRegister):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
