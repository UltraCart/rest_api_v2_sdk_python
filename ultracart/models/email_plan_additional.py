# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class EmailPlanAdditional(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'can_downgrade': 'bool',
        'can_upgrade': 'bool',
        'cost': 'float',
        'cost_change': 'float',
        'cost_change_formatted': 'str',
        'cost_formatted': 'str',
        'customers': 'int',
        'emails': 'int'
    }

    attribute_map = {
        'can_downgrade': 'can_downgrade',
        'can_upgrade': 'can_upgrade',
        'cost': 'cost',
        'cost_change': 'cost_change',
        'cost_change_formatted': 'cost_change_formatted',
        'cost_formatted': 'cost_formatted',
        'customers': 'customers',
        'emails': 'emails'
    }

    def __init__(self, can_downgrade=None, can_upgrade=None, cost=None, cost_change=None, cost_change_formatted=None, cost_formatted=None, customers=None, emails=None):  # noqa: E501
        """EmailPlanAdditional - a model defined in Swagger"""  # noqa: E501

        self._can_downgrade = None
        self._can_upgrade = None
        self._cost = None
        self._cost_change = None
        self._cost_change_formatted = None
        self._cost_formatted = None
        self._customers = None
        self._emails = None
        self.discriminator = None

        if can_downgrade is not None:
            self.can_downgrade = can_downgrade
        if can_upgrade is not None:
            self.can_upgrade = can_upgrade
        if cost is not None:
            self.cost = cost
        if cost_change is not None:
            self.cost_change = cost_change
        if cost_change_formatted is not None:
            self.cost_change_formatted = cost_change_formatted
        if cost_formatted is not None:
            self.cost_formatted = cost_formatted
        if customers is not None:
            self.customers = customers
        if emails is not None:
            self.emails = emails

    @property
    def can_downgrade(self):
        """Gets the can_downgrade of this EmailPlanAdditional.  # noqa: E501


        :return: The can_downgrade of this EmailPlanAdditional.  # noqa: E501
        :rtype: bool
        """
        return self._can_downgrade

    @can_downgrade.setter
    def can_downgrade(self, can_downgrade):
        """Sets the can_downgrade of this EmailPlanAdditional.


        :param can_downgrade: The can_downgrade of this EmailPlanAdditional.  # noqa: E501
        :type: bool
        """

        self._can_downgrade = can_downgrade

    @property
    def can_upgrade(self):
        """Gets the can_upgrade of this EmailPlanAdditional.  # noqa: E501


        :return: The can_upgrade of this EmailPlanAdditional.  # noqa: E501
        :rtype: bool
        """
        return self._can_upgrade

    @can_upgrade.setter
    def can_upgrade(self, can_upgrade):
        """Sets the can_upgrade of this EmailPlanAdditional.


        :param can_upgrade: The can_upgrade of this EmailPlanAdditional.  # noqa: E501
        :type: bool
        """

        self._can_upgrade = can_upgrade

    @property
    def cost(self):
        """Gets the cost of this EmailPlanAdditional.  # noqa: E501


        :return: The cost of this EmailPlanAdditional.  # noqa: E501
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this EmailPlanAdditional.


        :param cost: The cost of this EmailPlanAdditional.  # noqa: E501
        :type: float
        """

        self._cost = cost

    @property
    def cost_change(self):
        """Gets the cost_change of this EmailPlanAdditional.  # noqa: E501


        :return: The cost_change of this EmailPlanAdditional.  # noqa: E501
        :rtype: float
        """
        return self._cost_change

    @cost_change.setter
    def cost_change(self, cost_change):
        """Sets the cost_change of this EmailPlanAdditional.


        :param cost_change: The cost_change of this EmailPlanAdditional.  # noqa: E501
        :type: float
        """

        self._cost_change = cost_change

    @property
    def cost_change_formatted(self):
        """Gets the cost_change_formatted of this EmailPlanAdditional.  # noqa: E501


        :return: The cost_change_formatted of this EmailPlanAdditional.  # noqa: E501
        :rtype: str
        """
        return self._cost_change_formatted

    @cost_change_formatted.setter
    def cost_change_formatted(self, cost_change_formatted):
        """Sets the cost_change_formatted of this EmailPlanAdditional.


        :param cost_change_formatted: The cost_change_formatted of this EmailPlanAdditional.  # noqa: E501
        :type: str
        """

        self._cost_change_formatted = cost_change_formatted

    @property
    def cost_formatted(self):
        """Gets the cost_formatted of this EmailPlanAdditional.  # noqa: E501


        :return: The cost_formatted of this EmailPlanAdditional.  # noqa: E501
        :rtype: str
        """
        return self._cost_formatted

    @cost_formatted.setter
    def cost_formatted(self, cost_formatted):
        """Sets the cost_formatted of this EmailPlanAdditional.


        :param cost_formatted: The cost_formatted of this EmailPlanAdditional.  # noqa: E501
        :type: str
        """

        self._cost_formatted = cost_formatted

    @property
    def customers(self):
        """Gets the customers of this EmailPlanAdditional.  # noqa: E501


        :return: The customers of this EmailPlanAdditional.  # noqa: E501
        :rtype: int
        """
        return self._customers

    @customers.setter
    def customers(self, customers):
        """Sets the customers of this EmailPlanAdditional.


        :param customers: The customers of this EmailPlanAdditional.  # noqa: E501
        :type: int
        """

        self._customers = customers

    @property
    def emails(self):
        """Gets the emails of this EmailPlanAdditional.  # noqa: E501


        :return: The emails of this EmailPlanAdditional.  # noqa: E501
        :rtype: int
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this EmailPlanAdditional.


        :param emails: The emails of this EmailPlanAdditional.  # noqa: E501
        :type: int
        """

        self._emails = emails

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EmailPlanAdditional, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmailPlanAdditional):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
