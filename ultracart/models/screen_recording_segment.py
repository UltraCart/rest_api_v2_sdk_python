# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ScreenRecordingSegment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'create_dts': 'str',
        'description': 'str',
        'filter': 'ScreenRecordingFilter',
        'histogram_data': 'list[int]',
        'histogram_interval': 'str',
        'histogram_start_dts': 'str',
        'name': 'str',
        'screen_recording_segment_oid': 'int',
        'session_count': 'int',
        'session_count_last_update_dts': 'str'
    }

    attribute_map = {
        'create_dts': 'create_dts',
        'description': 'description',
        'filter': 'filter',
        'histogram_data': 'histogram_data',
        'histogram_interval': 'histogram_interval',
        'histogram_start_dts': 'histogram_start_dts',
        'name': 'name',
        'screen_recording_segment_oid': 'screen_recording_segment_oid',
        'session_count': 'session_count',
        'session_count_last_update_dts': 'session_count_last_update_dts'
    }

    def __init__(self, create_dts=None, description=None, filter=None, histogram_data=None, histogram_interval=None, histogram_start_dts=None, name=None, screen_recording_segment_oid=None, session_count=None, session_count_last_update_dts=None):  # noqa: E501
        """ScreenRecordingSegment - a model defined in Swagger"""  # noqa: E501

        self._create_dts = None
        self._description = None
        self._filter = None
        self._histogram_data = None
        self._histogram_interval = None
        self._histogram_start_dts = None
        self._name = None
        self._screen_recording_segment_oid = None
        self._session_count = None
        self._session_count_last_update_dts = None
        self.discriminator = None

        if create_dts is not None:
            self.create_dts = create_dts
        if description is not None:
            self.description = description
        if filter is not None:
            self.filter = filter
        if histogram_data is not None:
            self.histogram_data = histogram_data
        if histogram_interval is not None:
            self.histogram_interval = histogram_interval
        if histogram_start_dts is not None:
            self.histogram_start_dts = histogram_start_dts
        if name is not None:
            self.name = name
        if screen_recording_segment_oid is not None:
            self.screen_recording_segment_oid = screen_recording_segment_oid
        if session_count is not None:
            self.session_count = session_count
        if session_count_last_update_dts is not None:
            self.session_count_last_update_dts = session_count_last_update_dts

    @property
    def create_dts(self):
        """Gets the create_dts of this ScreenRecordingSegment.  # noqa: E501


        :return: The create_dts of this ScreenRecordingSegment.  # noqa: E501
        :rtype: str
        """
        return self._create_dts

    @create_dts.setter
    def create_dts(self, create_dts):
        """Sets the create_dts of this ScreenRecordingSegment.


        :param create_dts: The create_dts of this ScreenRecordingSegment.  # noqa: E501
        :type: str
        """

        self._create_dts = create_dts

    @property
    def description(self):
        """Gets the description of this ScreenRecordingSegment.  # noqa: E501


        :return: The description of this ScreenRecordingSegment.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ScreenRecordingSegment.


        :param description: The description of this ScreenRecordingSegment.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def filter(self):
        """Gets the filter of this ScreenRecordingSegment.  # noqa: E501


        :return: The filter of this ScreenRecordingSegment.  # noqa: E501
        :rtype: ScreenRecordingFilter
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this ScreenRecordingSegment.


        :param filter: The filter of this ScreenRecordingSegment.  # noqa: E501
        :type: ScreenRecordingFilter
        """

        self._filter = filter

    @property
    def histogram_data(self):
        """Gets the histogram_data of this ScreenRecordingSegment.  # noqa: E501


        :return: The histogram_data of this ScreenRecordingSegment.  # noqa: E501
        :rtype: list[int]
        """
        return self._histogram_data

    @histogram_data.setter
    def histogram_data(self, histogram_data):
        """Sets the histogram_data of this ScreenRecordingSegment.


        :param histogram_data: The histogram_data of this ScreenRecordingSegment.  # noqa: E501
        :type: list[int]
        """

        self._histogram_data = histogram_data

    @property
    def histogram_interval(self):
        """Gets the histogram_interval of this ScreenRecordingSegment.  # noqa: E501


        :return: The histogram_interval of this ScreenRecordingSegment.  # noqa: E501
        :rtype: str
        """
        return self._histogram_interval

    @histogram_interval.setter
    def histogram_interval(self, histogram_interval):
        """Sets the histogram_interval of this ScreenRecordingSegment.


        :param histogram_interval: The histogram_interval of this ScreenRecordingSegment.  # noqa: E501
        :type: str
        """

        self._histogram_interval = histogram_interval

    @property
    def histogram_start_dts(self):
        """Gets the histogram_start_dts of this ScreenRecordingSegment.  # noqa: E501


        :return: The histogram_start_dts of this ScreenRecordingSegment.  # noqa: E501
        :rtype: str
        """
        return self._histogram_start_dts

    @histogram_start_dts.setter
    def histogram_start_dts(self, histogram_start_dts):
        """Sets the histogram_start_dts of this ScreenRecordingSegment.


        :param histogram_start_dts: The histogram_start_dts of this ScreenRecordingSegment.  # noqa: E501
        :type: str
        """

        self._histogram_start_dts = histogram_start_dts

    @property
    def name(self):
        """Gets the name of this ScreenRecordingSegment.  # noqa: E501


        :return: The name of this ScreenRecordingSegment.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ScreenRecordingSegment.


        :param name: The name of this ScreenRecordingSegment.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def screen_recording_segment_oid(self):
        """Gets the screen_recording_segment_oid of this ScreenRecordingSegment.  # noqa: E501


        :return: The screen_recording_segment_oid of this ScreenRecordingSegment.  # noqa: E501
        :rtype: int
        """
        return self._screen_recording_segment_oid

    @screen_recording_segment_oid.setter
    def screen_recording_segment_oid(self, screen_recording_segment_oid):
        """Sets the screen_recording_segment_oid of this ScreenRecordingSegment.


        :param screen_recording_segment_oid: The screen_recording_segment_oid of this ScreenRecordingSegment.  # noqa: E501
        :type: int
        """

        self._screen_recording_segment_oid = screen_recording_segment_oid

    @property
    def session_count(self):
        """Gets the session_count of this ScreenRecordingSegment.  # noqa: E501


        :return: The session_count of this ScreenRecordingSegment.  # noqa: E501
        :rtype: int
        """
        return self._session_count

    @session_count.setter
    def session_count(self, session_count):
        """Sets the session_count of this ScreenRecordingSegment.


        :param session_count: The session_count of this ScreenRecordingSegment.  # noqa: E501
        :type: int
        """

        self._session_count = session_count

    @property
    def session_count_last_update_dts(self):
        """Gets the session_count_last_update_dts of this ScreenRecordingSegment.  # noqa: E501


        :return: The session_count_last_update_dts of this ScreenRecordingSegment.  # noqa: E501
        :rtype: str
        """
        return self._session_count_last_update_dts

    @session_count_last_update_dts.setter
    def session_count_last_update_dts(self, session_count_last_update_dts):
        """Sets the session_count_last_update_dts of this ScreenRecordingSegment.


        :param session_count_last_update_dts: The session_count_last_update_dts of this ScreenRecordingSegment.  # noqa: E501
        :type: str
        """

        self._session_count_last_update_dts = session_count_last_update_dts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScreenRecordingSegment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScreenRecordingSegment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
