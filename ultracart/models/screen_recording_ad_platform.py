# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ScreenRecordingAdPlatform(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fbc': 'str',
        'fbclid': 'str',
        'fbp': 'str',
        'gacid': 'str',
        'glcid': 'str',
        'msclkid': 'str',
        'ttclid': 'str'
    }

    attribute_map = {
        'fbc': 'fbc',
        'fbclid': 'fbclid',
        'fbp': 'fbp',
        'gacid': 'gacid',
        'glcid': 'glcid',
        'msclkid': 'msclkid',
        'ttclid': 'ttclid'
    }

    def __init__(self, fbc=None, fbclid=None, fbp=None, gacid=None, glcid=None, msclkid=None, ttclid=None):  # noqa: E501
        """ScreenRecordingAdPlatform - a model defined in Swagger"""  # noqa: E501

        self._fbc = None
        self._fbclid = None
        self._fbp = None
        self._gacid = None
        self._glcid = None
        self._msclkid = None
        self._ttclid = None
        self.discriminator = None

        if fbc is not None:
            self.fbc = fbc
        if fbclid is not None:
            self.fbclid = fbclid
        if fbp is not None:
            self.fbp = fbp
        if gacid is not None:
            self.gacid = gacid
        if glcid is not None:
            self.glcid = glcid
        if msclkid is not None:
            self.msclkid = msclkid
        if ttclid is not None:
            self.ttclid = ttclid

    @property
    def fbc(self):
        """Gets the fbc of this ScreenRecordingAdPlatform.  # noqa: E501

        Facebook Click Id (Cookie)  # noqa: E501

        :return: The fbc of this ScreenRecordingAdPlatform.  # noqa: E501
        :rtype: str
        """
        return self._fbc

    @fbc.setter
    def fbc(self, fbc):
        """Sets the fbc of this ScreenRecordingAdPlatform.

        Facebook Click Id (Cookie)  # noqa: E501

        :param fbc: The fbc of this ScreenRecordingAdPlatform.  # noqa: E501
        :type: str
        """

        self._fbc = fbc

    @property
    def fbclid(self):
        """Gets the fbclid of this ScreenRecordingAdPlatform.  # noqa: E501

        Facebook Click Id Parameter (Parameter)  # noqa: E501

        :return: The fbclid of this ScreenRecordingAdPlatform.  # noqa: E501
        :rtype: str
        """
        return self._fbclid

    @fbclid.setter
    def fbclid(self, fbclid):
        """Sets the fbclid of this ScreenRecordingAdPlatform.

        Facebook Click Id Parameter (Parameter)  # noqa: E501

        :param fbclid: The fbclid of this ScreenRecordingAdPlatform.  # noqa: E501
        :type: str
        """

        self._fbclid = fbclid

    @property
    def fbp(self):
        """Gets the fbp of this ScreenRecordingAdPlatform.  # noqa: E501

        Facebook Browser Id (Cookie)  # noqa: E501

        :return: The fbp of this ScreenRecordingAdPlatform.  # noqa: E501
        :rtype: str
        """
        return self._fbp

    @fbp.setter
    def fbp(self, fbp):
        """Sets the fbp of this ScreenRecordingAdPlatform.

        Facebook Browser Id (Cookie)  # noqa: E501

        :param fbp: The fbp of this ScreenRecordingAdPlatform.  # noqa: E501
        :type: str
        """

        self._fbp = fbp

    @property
    def gacid(self):
        """Gets the gacid of this ScreenRecordingAdPlatform.  # noqa: E501

        Google Analytics CID (Cookie)  # noqa: E501

        :return: The gacid of this ScreenRecordingAdPlatform.  # noqa: E501
        :rtype: str
        """
        return self._gacid

    @gacid.setter
    def gacid(self, gacid):
        """Sets the gacid of this ScreenRecordingAdPlatform.

        Google Analytics CID (Cookie)  # noqa: E501

        :param gacid: The gacid of this ScreenRecordingAdPlatform.  # noqa: E501
        :type: str
        """

        self._gacid = gacid

    @property
    def glcid(self):
        """Gets the glcid of this ScreenRecordingAdPlatform.  # noqa: E501

        Google Adwords Click Id (Parameter)  # noqa: E501

        :return: The glcid of this ScreenRecordingAdPlatform.  # noqa: E501
        :rtype: str
        """
        return self._glcid

    @glcid.setter
    def glcid(self, glcid):
        """Sets the glcid of this ScreenRecordingAdPlatform.

        Google Adwords Click Id (Parameter)  # noqa: E501

        :param glcid: The glcid of this ScreenRecordingAdPlatform.  # noqa: E501
        :type: str
        """

        self._glcid = glcid

    @property
    def msclkid(self):
        """Gets the msclkid of this ScreenRecordingAdPlatform.  # noqa: E501

        Bing Click Id (Parameter  # noqa: E501

        :return: The msclkid of this ScreenRecordingAdPlatform.  # noqa: E501
        :rtype: str
        """
        return self._msclkid

    @msclkid.setter
    def msclkid(self, msclkid):
        """Sets the msclkid of this ScreenRecordingAdPlatform.

        Bing Click Id (Parameter  # noqa: E501

        :param msclkid: The msclkid of this ScreenRecordingAdPlatform.  # noqa: E501
        :type: str
        """

        self._msclkid = msclkid

    @property
    def ttclid(self):
        """Gets the ttclid of this ScreenRecordingAdPlatform.  # noqa: E501

        TikTok Click Id (Parameter  # noqa: E501

        :return: The ttclid of this ScreenRecordingAdPlatform.  # noqa: E501
        :rtype: str
        """
        return self._ttclid

    @ttclid.setter
    def ttclid(self, ttclid):
        """Sets the ttclid of this ScreenRecordingAdPlatform.

        TikTok Click Id (Parameter  # noqa: E501

        :param ttclid: The ttclid of this ScreenRecordingAdPlatform.  # noqa: E501
        :type: str
        """

        self._ttclid = ttclid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScreenRecordingAdPlatform, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScreenRecordingAdPlatform):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
