# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class HitSessionStart(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bot': 'bool',
        'bounce': 'bool',
        'channel': 'str',
        'device_switch_detected': 'bool',
        'fake_bot': 'bool',
        'geolocation_country': 'str',
        'geolocation_latitude': 'float',
        'geolocation_longitude': 'float',
        'geolocation_province': 'str',
        'no_cookie_support': 'bool',
        'prefetch': 'bool',
        'referrer': 'str',
        'screen_height': 'int',
        'screen_width': 'int',
        'time_on_site': 'float',
        'user_agent': 'str',
        'user_ip': 'str'
    }

    attribute_map = {
        'bot': 'bot',
        'bounce': 'bounce',
        'channel': 'channel',
        'device_switch_detected': 'device_switch_detected',
        'fake_bot': 'fake_bot',
        'geolocation_country': 'geolocation_country',
        'geolocation_latitude': 'geolocation_latitude',
        'geolocation_longitude': 'geolocation_longitude',
        'geolocation_province': 'geolocation_province',
        'no_cookie_support': 'no_cookie_support',
        'prefetch': 'prefetch',
        'referrer': 'referrer',
        'screen_height': 'screen_height',
        'screen_width': 'screen_width',
        'time_on_site': 'time_on_Site',
        'user_agent': 'user_agent',
        'user_ip': 'user_ip'
    }

    def __init__(self, bot=None, bounce=None, channel=None, device_switch_detected=None, fake_bot=None, geolocation_country=None, geolocation_latitude=None, geolocation_longitude=None, geolocation_province=None, no_cookie_support=None, prefetch=None, referrer=None, screen_height=None, screen_width=None, time_on_site=None, user_agent=None, user_ip=None):  # noqa: E501
        """HitSessionStart - a model defined in Swagger"""  # noqa: E501

        self._bot = None
        self._bounce = None
        self._channel = None
        self._device_switch_detected = None
        self._fake_bot = None
        self._geolocation_country = None
        self._geolocation_latitude = None
        self._geolocation_longitude = None
        self._geolocation_province = None
        self._no_cookie_support = None
        self._prefetch = None
        self._referrer = None
        self._screen_height = None
        self._screen_width = None
        self._time_on_site = None
        self._user_agent = None
        self._user_ip = None
        self.discriminator = None

        if bot is not None:
            self.bot = bot
        if bounce is not None:
            self.bounce = bounce
        if channel is not None:
            self.channel = channel
        if device_switch_detected is not None:
            self.device_switch_detected = device_switch_detected
        if fake_bot is not None:
            self.fake_bot = fake_bot
        if geolocation_country is not None:
            self.geolocation_country = geolocation_country
        if geolocation_latitude is not None:
            self.geolocation_latitude = geolocation_latitude
        if geolocation_longitude is not None:
            self.geolocation_longitude = geolocation_longitude
        if geolocation_province is not None:
            self.geolocation_province = geolocation_province
        if no_cookie_support is not None:
            self.no_cookie_support = no_cookie_support
        if prefetch is not None:
            self.prefetch = prefetch
        if referrer is not None:
            self.referrer = referrer
        if screen_height is not None:
            self.screen_height = screen_height
        if screen_width is not None:
            self.screen_width = screen_width
        if time_on_site is not None:
            self.time_on_site = time_on_site
        if user_agent is not None:
            self.user_agent = user_agent
        if user_ip is not None:
            self.user_ip = user_ip

    @property
    def bot(self):
        """Gets the bot of this HitSessionStart.  # noqa: E501


        :return: The bot of this HitSessionStart.  # noqa: E501
        :rtype: bool
        """
        return self._bot

    @bot.setter
    def bot(self, bot):
        """Sets the bot of this HitSessionStart.


        :param bot: The bot of this HitSessionStart.  # noqa: E501
        :type: bool
        """

        self._bot = bot

    @property
    def bounce(self):
        """Gets the bounce of this HitSessionStart.  # noqa: E501


        :return: The bounce of this HitSessionStart.  # noqa: E501
        :rtype: bool
        """
        return self._bounce

    @bounce.setter
    def bounce(self, bounce):
        """Sets the bounce of this HitSessionStart.


        :param bounce: The bounce of this HitSessionStart.  # noqa: E501
        :type: bool
        """

        self._bounce = bounce

    @property
    def channel(self):
        """Gets the channel of this HitSessionStart.  # noqa: E501


        :return: The channel of this HitSessionStart.  # noqa: E501
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this HitSessionStart.


        :param channel: The channel of this HitSessionStart.  # noqa: E501
        :type: str
        """

        self._channel = channel

    @property
    def device_switch_detected(self):
        """Gets the device_switch_detected of this HitSessionStart.  # noqa: E501


        :return: The device_switch_detected of this HitSessionStart.  # noqa: E501
        :rtype: bool
        """
        return self._device_switch_detected

    @device_switch_detected.setter
    def device_switch_detected(self, device_switch_detected):
        """Sets the device_switch_detected of this HitSessionStart.


        :param device_switch_detected: The device_switch_detected of this HitSessionStart.  # noqa: E501
        :type: bool
        """

        self._device_switch_detected = device_switch_detected

    @property
    def fake_bot(self):
        """Gets the fake_bot of this HitSessionStart.  # noqa: E501


        :return: The fake_bot of this HitSessionStart.  # noqa: E501
        :rtype: bool
        """
        return self._fake_bot

    @fake_bot.setter
    def fake_bot(self, fake_bot):
        """Sets the fake_bot of this HitSessionStart.


        :param fake_bot: The fake_bot of this HitSessionStart.  # noqa: E501
        :type: bool
        """

        self._fake_bot = fake_bot

    @property
    def geolocation_country(self):
        """Gets the geolocation_country of this HitSessionStart.  # noqa: E501


        :return: The geolocation_country of this HitSessionStart.  # noqa: E501
        :rtype: str
        """
        return self._geolocation_country

    @geolocation_country.setter
    def geolocation_country(self, geolocation_country):
        """Sets the geolocation_country of this HitSessionStart.


        :param geolocation_country: The geolocation_country of this HitSessionStart.  # noqa: E501
        :type: str
        """

        self._geolocation_country = geolocation_country

    @property
    def geolocation_latitude(self):
        """Gets the geolocation_latitude of this HitSessionStart.  # noqa: E501


        :return: The geolocation_latitude of this HitSessionStart.  # noqa: E501
        :rtype: float
        """
        return self._geolocation_latitude

    @geolocation_latitude.setter
    def geolocation_latitude(self, geolocation_latitude):
        """Sets the geolocation_latitude of this HitSessionStart.


        :param geolocation_latitude: The geolocation_latitude of this HitSessionStart.  # noqa: E501
        :type: float
        """

        self._geolocation_latitude = geolocation_latitude

    @property
    def geolocation_longitude(self):
        """Gets the geolocation_longitude of this HitSessionStart.  # noqa: E501


        :return: The geolocation_longitude of this HitSessionStart.  # noqa: E501
        :rtype: float
        """
        return self._geolocation_longitude

    @geolocation_longitude.setter
    def geolocation_longitude(self, geolocation_longitude):
        """Sets the geolocation_longitude of this HitSessionStart.


        :param geolocation_longitude: The geolocation_longitude of this HitSessionStart.  # noqa: E501
        :type: float
        """

        self._geolocation_longitude = geolocation_longitude

    @property
    def geolocation_province(self):
        """Gets the geolocation_province of this HitSessionStart.  # noqa: E501


        :return: The geolocation_province of this HitSessionStart.  # noqa: E501
        :rtype: str
        """
        return self._geolocation_province

    @geolocation_province.setter
    def geolocation_province(self, geolocation_province):
        """Sets the geolocation_province of this HitSessionStart.


        :param geolocation_province: The geolocation_province of this HitSessionStart.  # noqa: E501
        :type: str
        """

        self._geolocation_province = geolocation_province

    @property
    def no_cookie_support(self):
        """Gets the no_cookie_support of this HitSessionStart.  # noqa: E501


        :return: The no_cookie_support of this HitSessionStart.  # noqa: E501
        :rtype: bool
        """
        return self._no_cookie_support

    @no_cookie_support.setter
    def no_cookie_support(self, no_cookie_support):
        """Sets the no_cookie_support of this HitSessionStart.


        :param no_cookie_support: The no_cookie_support of this HitSessionStart.  # noqa: E501
        :type: bool
        """

        self._no_cookie_support = no_cookie_support

    @property
    def prefetch(self):
        """Gets the prefetch of this HitSessionStart.  # noqa: E501


        :return: The prefetch of this HitSessionStart.  # noqa: E501
        :rtype: bool
        """
        return self._prefetch

    @prefetch.setter
    def prefetch(self, prefetch):
        """Sets the prefetch of this HitSessionStart.


        :param prefetch: The prefetch of this HitSessionStart.  # noqa: E501
        :type: bool
        """

        self._prefetch = prefetch

    @property
    def referrer(self):
        """Gets the referrer of this HitSessionStart.  # noqa: E501


        :return: The referrer of this HitSessionStart.  # noqa: E501
        :rtype: str
        """
        return self._referrer

    @referrer.setter
    def referrer(self, referrer):
        """Sets the referrer of this HitSessionStart.


        :param referrer: The referrer of this HitSessionStart.  # noqa: E501
        :type: str
        """

        self._referrer = referrer

    @property
    def screen_height(self):
        """Gets the screen_height of this HitSessionStart.  # noqa: E501


        :return: The screen_height of this HitSessionStart.  # noqa: E501
        :rtype: int
        """
        return self._screen_height

    @screen_height.setter
    def screen_height(self, screen_height):
        """Sets the screen_height of this HitSessionStart.


        :param screen_height: The screen_height of this HitSessionStart.  # noqa: E501
        :type: int
        """

        self._screen_height = screen_height

    @property
    def screen_width(self):
        """Gets the screen_width of this HitSessionStart.  # noqa: E501


        :return: The screen_width of this HitSessionStart.  # noqa: E501
        :rtype: int
        """
        return self._screen_width

    @screen_width.setter
    def screen_width(self, screen_width):
        """Sets the screen_width of this HitSessionStart.


        :param screen_width: The screen_width of this HitSessionStart.  # noqa: E501
        :type: int
        """

        self._screen_width = screen_width

    @property
    def time_on_site(self):
        """Gets the time_on_site of this HitSessionStart.  # noqa: E501


        :return: The time_on_site of this HitSessionStart.  # noqa: E501
        :rtype: float
        """
        return self._time_on_site

    @time_on_site.setter
    def time_on_site(self, time_on_site):
        """Sets the time_on_site of this HitSessionStart.


        :param time_on_site: The time_on_site of this HitSessionStart.  # noqa: E501
        :type: float
        """

        self._time_on_site = time_on_site

    @property
    def user_agent(self):
        """Gets the user_agent of this HitSessionStart.  # noqa: E501


        :return: The user_agent of this HitSessionStart.  # noqa: E501
        :rtype: str
        """
        return self._user_agent

    @user_agent.setter
    def user_agent(self, user_agent):
        """Sets the user_agent of this HitSessionStart.


        :param user_agent: The user_agent of this HitSessionStart.  # noqa: E501
        :type: str
        """

        self._user_agent = user_agent

    @property
    def user_ip(self):
        """Gets the user_ip of this HitSessionStart.  # noqa: E501


        :return: The user_ip of this HitSessionStart.  # noqa: E501
        :rtype: str
        """
        return self._user_ip

    @user_ip.setter
    def user_ip(self, user_ip):
        """Sets the user_ip of this HitSessionStart.


        :param user_ip: The user_ip of this HitSessionStart.  # noqa: E501
        :type: str
        """

        self._user_ip = user_ip

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HitSessionStart, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HitSessionStart):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
