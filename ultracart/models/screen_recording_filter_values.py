# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ScreenRecordingFilterValues(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'geolocation_countries': 'list[str]',
        'geolocation_states': 'list[str]',
        'max_values': 'int',
        'page_views': 'list[ScreenRecordingFilterValuesPageView]',
        'time_on_site_max': 'int',
        'time_on_site_min': 'int',
        'urls': 'list[str]',
        'user_agent_device_names': 'list[str]',
        'user_agent_device_os_names': 'list[str]',
        'user_agent_device_os_versions': 'list[str]',
        'user_agent_names': 'list[str]',
        'user_agent_originals': 'list[str]'
    }

    attribute_map = {
        'geolocation_countries': 'geolocation_countries',
        'geolocation_states': 'geolocation_states',
        'max_values': 'max_values',
        'page_views': 'page_views',
        'time_on_site_max': 'time_on_site_max',
        'time_on_site_min': 'time_on_site_min',
        'urls': 'urls',
        'user_agent_device_names': 'user_agent_device_names',
        'user_agent_device_os_names': 'user_agent_device_os_names',
        'user_agent_device_os_versions': 'user_agent_device_os_versions',
        'user_agent_names': 'user_agent_names',
        'user_agent_originals': 'user_agent_originals'
    }

    def __init__(self, geolocation_countries=None, geolocation_states=None, max_values=None, page_views=None, time_on_site_max=None, time_on_site_min=None, urls=None, user_agent_device_names=None, user_agent_device_os_names=None, user_agent_device_os_versions=None, user_agent_names=None, user_agent_originals=None):  # noqa: E501
        """ScreenRecordingFilterValues - a model defined in Swagger"""  # noqa: E501

        self._geolocation_countries = None
        self._geolocation_states = None
        self._max_values = None
        self._page_views = None
        self._time_on_site_max = None
        self._time_on_site_min = None
        self._urls = None
        self._user_agent_device_names = None
        self._user_agent_device_os_names = None
        self._user_agent_device_os_versions = None
        self._user_agent_names = None
        self._user_agent_originals = None
        self.discriminator = None

        if geolocation_countries is not None:
            self.geolocation_countries = geolocation_countries
        if geolocation_states is not None:
            self.geolocation_states = geolocation_states
        if max_values is not None:
            self.max_values = max_values
        if page_views is not None:
            self.page_views = page_views
        if time_on_site_max is not None:
            self.time_on_site_max = time_on_site_max
        if time_on_site_min is not None:
            self.time_on_site_min = time_on_site_min
        if urls is not None:
            self.urls = urls
        if user_agent_device_names is not None:
            self.user_agent_device_names = user_agent_device_names
        if user_agent_device_os_names is not None:
            self.user_agent_device_os_names = user_agent_device_os_names
        if user_agent_device_os_versions is not None:
            self.user_agent_device_os_versions = user_agent_device_os_versions
        if user_agent_names is not None:
            self.user_agent_names = user_agent_names
        if user_agent_originals is not None:
            self.user_agent_originals = user_agent_originals

    @property
    def geolocation_countries(self):
        """Gets the geolocation_countries of this ScreenRecordingFilterValues.  # noqa: E501


        :return: The geolocation_countries of this ScreenRecordingFilterValues.  # noqa: E501
        :rtype: list[str]
        """
        return self._geolocation_countries

    @geolocation_countries.setter
    def geolocation_countries(self, geolocation_countries):
        """Sets the geolocation_countries of this ScreenRecordingFilterValues.


        :param geolocation_countries: The geolocation_countries of this ScreenRecordingFilterValues.  # noqa: E501
        :type: list[str]
        """

        self._geolocation_countries = geolocation_countries

    @property
    def geolocation_states(self):
        """Gets the geolocation_states of this ScreenRecordingFilterValues.  # noqa: E501


        :return: The geolocation_states of this ScreenRecordingFilterValues.  # noqa: E501
        :rtype: list[str]
        """
        return self._geolocation_states

    @geolocation_states.setter
    def geolocation_states(self, geolocation_states):
        """Sets the geolocation_states of this ScreenRecordingFilterValues.


        :param geolocation_states: The geolocation_states of this ScreenRecordingFilterValues.  # noqa: E501
        :type: list[str]
        """

        self._geolocation_states = geolocation_states

    @property
    def max_values(self):
        """Gets the max_values of this ScreenRecordingFilterValues.  # noqa: E501


        :return: The max_values of this ScreenRecordingFilterValues.  # noqa: E501
        :rtype: int
        """
        return self._max_values

    @max_values.setter
    def max_values(self, max_values):
        """Sets the max_values of this ScreenRecordingFilterValues.


        :param max_values: The max_values of this ScreenRecordingFilterValues.  # noqa: E501
        :type: int
        """

        self._max_values = max_values

    @property
    def page_views(self):
        """Gets the page_views of this ScreenRecordingFilterValues.  # noqa: E501


        :return: The page_views of this ScreenRecordingFilterValues.  # noqa: E501
        :rtype: list[ScreenRecordingFilterValuesPageView]
        """
        return self._page_views

    @page_views.setter
    def page_views(self, page_views):
        """Sets the page_views of this ScreenRecordingFilterValues.


        :param page_views: The page_views of this ScreenRecordingFilterValues.  # noqa: E501
        :type: list[ScreenRecordingFilterValuesPageView]
        """

        self._page_views = page_views

    @property
    def time_on_site_max(self):
        """Gets the time_on_site_max of this ScreenRecordingFilterValues.  # noqa: E501


        :return: The time_on_site_max of this ScreenRecordingFilterValues.  # noqa: E501
        :rtype: int
        """
        return self._time_on_site_max

    @time_on_site_max.setter
    def time_on_site_max(self, time_on_site_max):
        """Sets the time_on_site_max of this ScreenRecordingFilterValues.


        :param time_on_site_max: The time_on_site_max of this ScreenRecordingFilterValues.  # noqa: E501
        :type: int
        """

        self._time_on_site_max = time_on_site_max

    @property
    def time_on_site_min(self):
        """Gets the time_on_site_min of this ScreenRecordingFilterValues.  # noqa: E501


        :return: The time_on_site_min of this ScreenRecordingFilterValues.  # noqa: E501
        :rtype: int
        """
        return self._time_on_site_min

    @time_on_site_min.setter
    def time_on_site_min(self, time_on_site_min):
        """Sets the time_on_site_min of this ScreenRecordingFilterValues.


        :param time_on_site_min: The time_on_site_min of this ScreenRecordingFilterValues.  # noqa: E501
        :type: int
        """

        self._time_on_site_min = time_on_site_min

    @property
    def urls(self):
        """Gets the urls of this ScreenRecordingFilterValues.  # noqa: E501


        :return: The urls of this ScreenRecordingFilterValues.  # noqa: E501
        :rtype: list[str]
        """
        return self._urls

    @urls.setter
    def urls(self, urls):
        """Sets the urls of this ScreenRecordingFilterValues.


        :param urls: The urls of this ScreenRecordingFilterValues.  # noqa: E501
        :type: list[str]
        """

        self._urls = urls

    @property
    def user_agent_device_names(self):
        """Gets the user_agent_device_names of this ScreenRecordingFilterValues.  # noqa: E501


        :return: The user_agent_device_names of this ScreenRecordingFilterValues.  # noqa: E501
        :rtype: list[str]
        """
        return self._user_agent_device_names

    @user_agent_device_names.setter
    def user_agent_device_names(self, user_agent_device_names):
        """Sets the user_agent_device_names of this ScreenRecordingFilterValues.


        :param user_agent_device_names: The user_agent_device_names of this ScreenRecordingFilterValues.  # noqa: E501
        :type: list[str]
        """

        self._user_agent_device_names = user_agent_device_names

    @property
    def user_agent_device_os_names(self):
        """Gets the user_agent_device_os_names of this ScreenRecordingFilterValues.  # noqa: E501


        :return: The user_agent_device_os_names of this ScreenRecordingFilterValues.  # noqa: E501
        :rtype: list[str]
        """
        return self._user_agent_device_os_names

    @user_agent_device_os_names.setter
    def user_agent_device_os_names(self, user_agent_device_os_names):
        """Sets the user_agent_device_os_names of this ScreenRecordingFilterValues.


        :param user_agent_device_os_names: The user_agent_device_os_names of this ScreenRecordingFilterValues.  # noqa: E501
        :type: list[str]
        """

        self._user_agent_device_os_names = user_agent_device_os_names

    @property
    def user_agent_device_os_versions(self):
        """Gets the user_agent_device_os_versions of this ScreenRecordingFilterValues.  # noqa: E501


        :return: The user_agent_device_os_versions of this ScreenRecordingFilterValues.  # noqa: E501
        :rtype: list[str]
        """
        return self._user_agent_device_os_versions

    @user_agent_device_os_versions.setter
    def user_agent_device_os_versions(self, user_agent_device_os_versions):
        """Sets the user_agent_device_os_versions of this ScreenRecordingFilterValues.


        :param user_agent_device_os_versions: The user_agent_device_os_versions of this ScreenRecordingFilterValues.  # noqa: E501
        :type: list[str]
        """

        self._user_agent_device_os_versions = user_agent_device_os_versions

    @property
    def user_agent_names(self):
        """Gets the user_agent_names of this ScreenRecordingFilterValues.  # noqa: E501


        :return: The user_agent_names of this ScreenRecordingFilterValues.  # noqa: E501
        :rtype: list[str]
        """
        return self._user_agent_names

    @user_agent_names.setter
    def user_agent_names(self, user_agent_names):
        """Sets the user_agent_names of this ScreenRecordingFilterValues.


        :param user_agent_names: The user_agent_names of this ScreenRecordingFilterValues.  # noqa: E501
        :type: list[str]
        """

        self._user_agent_names = user_agent_names

    @property
    def user_agent_originals(self):
        """Gets the user_agent_originals of this ScreenRecordingFilterValues.  # noqa: E501


        :return: The user_agent_originals of this ScreenRecordingFilterValues.  # noqa: E501
        :rtype: list[str]
        """
        return self._user_agent_originals

    @user_agent_originals.setter
    def user_agent_originals(self, user_agent_originals):
        """Sets the user_agent_originals of this ScreenRecordingFilterValues.


        :param user_agent_originals: The user_agent_originals of this ScreenRecordingFilterValues.  # noqa: E501
        :type: list[str]
        """

        self._user_agent_originals = user_agent_originals

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScreenRecordingFilterValues, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScreenRecordingFilterValues):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
