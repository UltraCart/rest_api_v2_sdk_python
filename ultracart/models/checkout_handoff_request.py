# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CheckoutHandoffRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cart': 'Cart',
        'error_parameter_name': 'str',
        'error_return_url': 'str',
        'operation': 'str',
        'paypal_maximum_upsell_revenue': 'float',
        'paypal_return_url': 'str',
        'secure_host_name': 'str',
        'ucacid': 'str'
    }

    attribute_map = {
        'cart': 'cart',
        'error_parameter_name': 'error_parameter_name',
        'error_return_url': 'error_return_url',
        'operation': 'operation',
        'paypal_maximum_upsell_revenue': 'paypal_maximum_upsell_revenue',
        'paypal_return_url': 'paypal_return_url',
        'secure_host_name': 'secure_host_name',
        'ucacid': 'ucacid'
    }

    def __init__(self, cart=None, error_parameter_name=None, error_return_url=None, operation=None, paypal_maximum_upsell_revenue=None, paypal_return_url=None, secure_host_name=None, ucacid=None):
        """
        CheckoutHandoffRequest - a model defined in Swagger
        """

        self._cart = None
        self._error_parameter_name = None
        self._error_return_url = None
        self._operation = None
        self._paypal_maximum_upsell_revenue = None
        self._paypal_return_url = None
        self._secure_host_name = None
        self._ucacid = None
        self.discriminator = None

        if cart is not None:
          self.cart = cart
        if error_parameter_name is not None:
          self.error_parameter_name = error_parameter_name
        if error_return_url is not None:
          self.error_return_url = error_return_url
        if operation is not None:
          self.operation = operation
        if paypal_maximum_upsell_revenue is not None:
          self.paypal_maximum_upsell_revenue = paypal_maximum_upsell_revenue
        if paypal_return_url is not None:
          self.paypal_return_url = paypal_return_url
        if secure_host_name is not None:
          self.secure_host_name = secure_host_name
        if ucacid is not None:
          self.ucacid = ucacid

    @property
    def cart(self):
        """
        Gets the cart of this CheckoutHandoffRequest.

        :return: The cart of this CheckoutHandoffRequest.
        :rtype: Cart
        """
        return self._cart

    @cart.setter
    def cart(self, cart):
        """
        Sets the cart of this CheckoutHandoffRequest.

        :param cart: The cart of this CheckoutHandoffRequest.
        :type: Cart
        """

        self._cart = cart

    @property
    def error_parameter_name(self):
        """
        Gets the error_parameter_name of this CheckoutHandoffRequest.
        If any error happen during the processing on the UltraCart side, the browser will be redirected to your error_return_url with the error passed in this parameter name.

        :return: The error_parameter_name of this CheckoutHandoffRequest.
        :rtype: str
        """
        return self._error_parameter_name

    @error_parameter_name.setter
    def error_parameter_name(self, error_parameter_name):
        """
        Sets the error_parameter_name of this CheckoutHandoffRequest.
        If any error happen during the processing on the UltraCart side, the browser will be redirected to your error_return_url with the error passed in this parameter name.

        :param error_parameter_name: The error_parameter_name of this CheckoutHandoffRequest.
        :type: str
        """

        self._error_parameter_name = error_parameter_name

    @property
    def error_return_url(self):
        """
        Gets the error_return_url of this CheckoutHandoffRequest.
        The URL to return the browser to if there are processing errors on the UltraCart side.

        :return: The error_return_url of this CheckoutHandoffRequest.
        :rtype: str
        """
        return self._error_return_url

    @error_return_url.setter
    def error_return_url(self, error_return_url):
        """
        Sets the error_return_url of this CheckoutHandoffRequest.
        The URL to return the browser to if there are processing errors on the UltraCart side.

        :param error_return_url: The error_return_url of this CheckoutHandoffRequest.
        :type: str
        """

        self._error_return_url = error_return_url

    @property
    def operation(self):
        """
        Gets the operation of this CheckoutHandoffRequest.
        The type of handoff operation to perform

        :return: The operation of this CheckoutHandoffRequest.
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """
        Sets the operation of this CheckoutHandoffRequest.
        The type of handoff operation to perform

        :param operation: The operation of this CheckoutHandoffRequest.
        :type: str
        """
        allowed_values = ["checkout", "payPal", "payPalCredit", "view", "affirm"]
        if operation not in allowed_values:
            raise ValueError(
                "Invalid value for `operation` ({0}), must be one of {1}"
                .format(operation, allowed_values)
            )

        self._operation = operation

    @property
    def paypal_maximum_upsell_revenue(self):
        """
        Gets the paypal_maximum_upsell_revenue of this CheckoutHandoffRequest.
        The maximum amount of revenue that you think the customer could add during a custom upsell after sequence on your checkout.

        :return: The paypal_maximum_upsell_revenue of this CheckoutHandoffRequest.
        :rtype: float
        """
        return self._paypal_maximum_upsell_revenue

    @paypal_maximum_upsell_revenue.setter
    def paypal_maximum_upsell_revenue(self, paypal_maximum_upsell_revenue):
        """
        Sets the paypal_maximum_upsell_revenue of this CheckoutHandoffRequest.
        The maximum amount of revenue that you think the customer could add during a custom upsell after sequence on your checkout.

        :param paypal_maximum_upsell_revenue: The paypal_maximum_upsell_revenue of this CheckoutHandoffRequest.
        :type: float
        """

        self._paypal_maximum_upsell_revenue = paypal_maximum_upsell_revenue

    @property
    def paypal_return_url(self):
        """
        Gets the paypal_return_url of this CheckoutHandoffRequest.
        The URl to return the customers browser to after they have completed the PayPal process.

        :return: The paypal_return_url of this CheckoutHandoffRequest.
        :rtype: str
        """
        return self._paypal_return_url

    @paypal_return_url.setter
    def paypal_return_url(self, paypal_return_url):
        """
        Sets the paypal_return_url of this CheckoutHandoffRequest.
        The URl to return the customers browser to after they have completed the PayPal process.

        :param paypal_return_url: The paypal_return_url of this CheckoutHandoffRequest.
        :type: str
        """

        self._paypal_return_url = paypal_return_url

    @property
    def secure_host_name(self):
        """
        Gets the secure_host_name of this CheckoutHandoffRequest.
        The desired secure host name to perform the handoff on.  This should match the desired StoreFront.

        :return: The secure_host_name of this CheckoutHandoffRequest.
        :rtype: str
        """
        return self._secure_host_name

    @secure_host_name.setter
    def secure_host_name(self, secure_host_name):
        """
        Sets the secure_host_name of this CheckoutHandoffRequest.
        The desired secure host name to perform the handoff on.  This should match the desired StoreFront.

        :param secure_host_name: The secure_host_name of this CheckoutHandoffRequest.
        :type: str
        """

        self._secure_host_name = secure_host_name

    @property
    def ucacid(self):
        """
        Gets the ucacid of this CheckoutHandoffRequest.
        The UltraCart Analytics cookie value.  Populate this if you're handing off from a different domain than the checkout.

        :return: The ucacid of this CheckoutHandoffRequest.
        :rtype: str
        """
        return self._ucacid

    @ucacid.setter
    def ucacid(self, ucacid):
        """
        Sets the ucacid of this CheckoutHandoffRequest.
        The UltraCart Analytics cookie value.  Populate this if you're handing off from a different domain than the checkout.

        :param ucacid: The ucacid of this CheckoutHandoffRequest.
        :type: str
        """

        self._ucacid = ucacid

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CheckoutHandoffRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
