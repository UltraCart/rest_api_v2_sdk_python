# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ScreenRecordingPageViewEvent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'params': 'list[ScreenRecordingPageViewEventParameter]',
        'prior_page_view': 'bool',
        'timestamp': 'str',
        'ts': 'int'
    }

    attribute_map = {
        'name': 'name',
        'params': 'params',
        'prior_page_view': 'prior_page_view',
        'timestamp': 'timestamp',
        'ts': 'ts'
    }

    def __init__(self, name=None, params=None, prior_page_view=None, timestamp=None, ts=None):  # noqa: E501
        """ScreenRecordingPageViewEvent - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._params = None
        self._prior_page_view = None
        self._timestamp = None
        self._ts = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if params is not None:
            self.params = params
        if prior_page_view is not None:
            self.prior_page_view = prior_page_view
        if timestamp is not None:
            self.timestamp = timestamp
        if ts is not None:
            self.ts = ts

    @property
    def name(self):
        """Gets the name of this ScreenRecordingPageViewEvent.  # noqa: E501


        :return: The name of this ScreenRecordingPageViewEvent.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ScreenRecordingPageViewEvent.


        :param name: The name of this ScreenRecordingPageViewEvent.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def params(self):
        """Gets the params of this ScreenRecordingPageViewEvent.  # noqa: E501


        :return: The params of this ScreenRecordingPageViewEvent.  # noqa: E501
        :rtype: list[ScreenRecordingPageViewEventParameter]
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this ScreenRecordingPageViewEvent.


        :param params: The params of this ScreenRecordingPageViewEvent.  # noqa: E501
        :type: list[ScreenRecordingPageViewEventParameter]
        """

        self._params = params

    @property
    def prior_page_view(self):
        """Gets the prior_page_view of this ScreenRecordingPageViewEvent.  # noqa: E501


        :return: The prior_page_view of this ScreenRecordingPageViewEvent.  # noqa: E501
        :rtype: bool
        """
        return self._prior_page_view

    @prior_page_view.setter
    def prior_page_view(self, prior_page_view):
        """Sets the prior_page_view of this ScreenRecordingPageViewEvent.


        :param prior_page_view: The prior_page_view of this ScreenRecordingPageViewEvent.  # noqa: E501
        :type: bool
        """

        self._prior_page_view = prior_page_view

    @property
    def timestamp(self):
        """Gets the timestamp of this ScreenRecordingPageViewEvent.  # noqa: E501

        Timestamp of the event  # noqa: E501

        :return: The timestamp of this ScreenRecordingPageViewEvent.  # noqa: E501
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this ScreenRecordingPageViewEvent.

        Timestamp of the event  # noqa: E501

        :param timestamp: The timestamp of this ScreenRecordingPageViewEvent.  # noqa: E501
        :type: str
        """

        self._timestamp = timestamp

    @property
    def ts(self):
        """Gets the ts of this ScreenRecordingPageViewEvent.  # noqa: E501


        :return: The ts of this ScreenRecordingPageViewEvent.  # noqa: E501
        :rtype: int
        """
        return self._ts

    @ts.setter
    def ts(self, ts):
        """Sets the ts of this ScreenRecordingPageViewEvent.


        :param ts: The ts of this ScreenRecordingPageViewEvent.  # noqa: E501
        :type: int
        """

        self._ts = ts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScreenRecordingPageViewEvent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScreenRecordingPageViewEvent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
