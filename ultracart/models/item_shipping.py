# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ItemShipping(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allow_back_order': 'bool',
        'amazon_fba': 'bool',
        'case_inner_packs': 'int',
        'case_units': 'int',
        'cases': 'list[ItemShippingCase]',
        'collect_serial_numbers': 'bool',
        'country_code_of_origin': 'str',
        'customs_description': 'str',
        'customs_value': 'float',
        'delivery_on_friday': 'bool',
        'delivery_on_monday': 'bool',
        'delivery_on_saturday': 'bool',
        'delivery_on_sunday': 'bool',
        'delivery_on_thursday': 'bool',
        'delivery_on_tuesday': 'bool',
        'delivery_on_wednesday': 'bool',
        'destination_markups': 'list[ItemShippingDestinationMarkup]',
        'destination_restrictions': 'list[ItemShippingDestinationRestriction]',
        'distribution_centers': 'list[ItemShippingDistributionCenter]',
        'eta': 'str',
        'free_shipping': 'bool',
        'freight_class': 'str',
        'hazmat': 'bool',
        'made_to_order': 'bool',
        'made_to_order_lead_time': 'int',
        'max_days_time_in_transit': 'int',
        'methods': 'list[ItemShippingMethod]',
        'no_shipping_discount': 'bool',
        'package_requirements': 'list[ItemShippingPackageRequirement]',
        'perishable_class_name': 'str',
        'perishable_class_oid': 'int',
        'preorder': 'bool',
        'require_delivery_date': 'bool',
        'restrict_shipment_on_friday': 'bool',
        'restrict_shipment_on_monday': 'bool',
        'restrict_shipment_on_saturday': 'bool',
        'restrict_shipment_on_sunday': 'bool',
        'restrict_shipment_on_thursday': 'bool',
        'restrict_shipment_on_tuesday': 'bool',
        'restrict_shipment_on_wednesday': 'bool',
        'ship_separately': 'bool',
        'ship_separately_additional_weight': 'Weight',
        'ship_separately_height': 'Distance',
        'ship_separately_length': 'Distance',
        'ship_separately_package_special_type': 'str',
        'ship_separately_width': 'Distance',
        'special_product_type': 'str',
        'track_inventory': 'bool'
    }

    attribute_map = {
        'allow_back_order': 'allow_back_order',
        'amazon_fba': 'amazon_fba',
        'case_inner_packs': 'case_inner_packs',
        'case_units': 'case_units',
        'cases': 'cases',
        'collect_serial_numbers': 'collect_serial_numbers',
        'country_code_of_origin': 'country_code_of_origin',
        'customs_description': 'customs_description',
        'customs_value': 'customs_value',
        'delivery_on_friday': 'delivery_on_friday',
        'delivery_on_monday': 'delivery_on_monday',
        'delivery_on_saturday': 'delivery_on_saturday',
        'delivery_on_sunday': 'delivery_on_sunday',
        'delivery_on_thursday': 'delivery_on_thursday',
        'delivery_on_tuesday': 'delivery_on_tuesday',
        'delivery_on_wednesday': 'delivery_on_wednesday',
        'destination_markups': 'destination_markups',
        'destination_restrictions': 'destination_restrictions',
        'distribution_centers': 'distribution_centers',
        'eta': 'eta',
        'free_shipping': 'free_shipping',
        'freight_class': 'freight_class',
        'hazmat': 'hazmat',
        'made_to_order': 'made_to_order',
        'made_to_order_lead_time': 'made_to_order_lead_time',
        'max_days_time_in_transit': 'max_days_time_in_transit',
        'methods': 'methods',
        'no_shipping_discount': 'no_shipping_discount',
        'package_requirements': 'package_requirements',
        'perishable_class_name': 'perishable_class_name',
        'perishable_class_oid': 'perishable_class_oid',
        'preorder': 'preorder',
        'require_delivery_date': 'require_delivery_date',
        'restrict_shipment_on_friday': 'restrict_shipment_on_friday',
        'restrict_shipment_on_monday': 'restrict_shipment_on_monday',
        'restrict_shipment_on_saturday': 'restrict_shipment_on_saturday',
        'restrict_shipment_on_sunday': 'restrict_shipment_on_sunday',
        'restrict_shipment_on_thursday': 'restrict_shipment_on_thursday',
        'restrict_shipment_on_tuesday': 'restrict_shipment_on_tuesday',
        'restrict_shipment_on_wednesday': 'restrict_shipment_on_wednesday',
        'ship_separately': 'ship_separately',
        'ship_separately_additional_weight': 'ship_separately_additional_weight',
        'ship_separately_height': 'ship_separately_height',
        'ship_separately_length': 'ship_separately_length',
        'ship_separately_package_special_type': 'ship_separately_package_special_type',
        'ship_separately_width': 'ship_separately_width',
        'special_product_type': 'special_product_type',
        'track_inventory': 'track_inventory'
    }

    def __init__(self, allow_back_order=None, amazon_fba=None, case_inner_packs=None, case_units=None, cases=None, collect_serial_numbers=None, country_code_of_origin=None, customs_description=None, customs_value=None, delivery_on_friday=None, delivery_on_monday=None, delivery_on_saturday=None, delivery_on_sunday=None, delivery_on_thursday=None, delivery_on_tuesday=None, delivery_on_wednesday=None, destination_markups=None, destination_restrictions=None, distribution_centers=None, eta=None, free_shipping=None, freight_class=None, hazmat=None, made_to_order=None, made_to_order_lead_time=None, max_days_time_in_transit=None, methods=None, no_shipping_discount=None, package_requirements=None, perishable_class_name=None, perishable_class_oid=None, preorder=None, require_delivery_date=None, restrict_shipment_on_friday=None, restrict_shipment_on_monday=None, restrict_shipment_on_saturday=None, restrict_shipment_on_sunday=None, restrict_shipment_on_thursday=None, restrict_shipment_on_tuesday=None, restrict_shipment_on_wednesday=None, ship_separately=None, ship_separately_additional_weight=None, ship_separately_height=None, ship_separately_length=None, ship_separately_package_special_type=None, ship_separately_width=None, special_product_type=None, track_inventory=None):
        """
        ItemShipping - a model defined in Swagger
        """

        self._allow_back_order = None
        self._amazon_fba = None
        self._case_inner_packs = None
        self._case_units = None
        self._cases = None
        self._collect_serial_numbers = None
        self._country_code_of_origin = None
        self._customs_description = None
        self._customs_value = None
        self._delivery_on_friday = None
        self._delivery_on_monday = None
        self._delivery_on_saturday = None
        self._delivery_on_sunday = None
        self._delivery_on_thursday = None
        self._delivery_on_tuesday = None
        self._delivery_on_wednesday = None
        self._destination_markups = None
        self._destination_restrictions = None
        self._distribution_centers = None
        self._eta = None
        self._free_shipping = None
        self._freight_class = None
        self._hazmat = None
        self._made_to_order = None
        self._made_to_order_lead_time = None
        self._max_days_time_in_transit = None
        self._methods = None
        self._no_shipping_discount = None
        self._package_requirements = None
        self._perishable_class_name = None
        self._perishable_class_oid = None
        self._preorder = None
        self._require_delivery_date = None
        self._restrict_shipment_on_friday = None
        self._restrict_shipment_on_monday = None
        self._restrict_shipment_on_saturday = None
        self._restrict_shipment_on_sunday = None
        self._restrict_shipment_on_thursday = None
        self._restrict_shipment_on_tuesday = None
        self._restrict_shipment_on_wednesday = None
        self._ship_separately = None
        self._ship_separately_additional_weight = None
        self._ship_separately_height = None
        self._ship_separately_length = None
        self._ship_separately_package_special_type = None
        self._ship_separately_width = None
        self._special_product_type = None
        self._track_inventory = None
        self.discriminator = None

        if allow_back_order is not None:
          self.allow_back_order = allow_back_order
        if amazon_fba is not None:
          self.amazon_fba = amazon_fba
        if case_inner_packs is not None:
          self.case_inner_packs = case_inner_packs
        if case_units is not None:
          self.case_units = case_units
        if cases is not None:
          self.cases = cases
        if collect_serial_numbers is not None:
          self.collect_serial_numbers = collect_serial_numbers
        if country_code_of_origin is not None:
          self.country_code_of_origin = country_code_of_origin
        if customs_description is not None:
          self.customs_description = customs_description
        if customs_value is not None:
          self.customs_value = customs_value
        if delivery_on_friday is not None:
          self.delivery_on_friday = delivery_on_friday
        if delivery_on_monday is not None:
          self.delivery_on_monday = delivery_on_monday
        if delivery_on_saturday is not None:
          self.delivery_on_saturday = delivery_on_saturday
        if delivery_on_sunday is not None:
          self.delivery_on_sunday = delivery_on_sunday
        if delivery_on_thursday is not None:
          self.delivery_on_thursday = delivery_on_thursday
        if delivery_on_tuesday is not None:
          self.delivery_on_tuesday = delivery_on_tuesday
        if delivery_on_wednesday is not None:
          self.delivery_on_wednesday = delivery_on_wednesday
        if destination_markups is not None:
          self.destination_markups = destination_markups
        if destination_restrictions is not None:
          self.destination_restrictions = destination_restrictions
        if distribution_centers is not None:
          self.distribution_centers = distribution_centers
        if eta is not None:
          self.eta = eta
        if free_shipping is not None:
          self.free_shipping = free_shipping
        if freight_class is not None:
          self.freight_class = freight_class
        if hazmat is not None:
          self.hazmat = hazmat
        if made_to_order is not None:
          self.made_to_order = made_to_order
        if made_to_order_lead_time is not None:
          self.made_to_order_lead_time = made_to_order_lead_time
        if max_days_time_in_transit is not None:
          self.max_days_time_in_transit = max_days_time_in_transit
        if methods is not None:
          self.methods = methods
        if no_shipping_discount is not None:
          self.no_shipping_discount = no_shipping_discount
        if package_requirements is not None:
          self.package_requirements = package_requirements
        if perishable_class_name is not None:
          self.perishable_class_name = perishable_class_name
        if perishable_class_oid is not None:
          self.perishable_class_oid = perishable_class_oid
        if preorder is not None:
          self.preorder = preorder
        if require_delivery_date is not None:
          self.require_delivery_date = require_delivery_date
        if restrict_shipment_on_friday is not None:
          self.restrict_shipment_on_friday = restrict_shipment_on_friday
        if restrict_shipment_on_monday is not None:
          self.restrict_shipment_on_monday = restrict_shipment_on_monday
        if restrict_shipment_on_saturday is not None:
          self.restrict_shipment_on_saturday = restrict_shipment_on_saturday
        if restrict_shipment_on_sunday is not None:
          self.restrict_shipment_on_sunday = restrict_shipment_on_sunday
        if restrict_shipment_on_thursday is not None:
          self.restrict_shipment_on_thursday = restrict_shipment_on_thursday
        if restrict_shipment_on_tuesday is not None:
          self.restrict_shipment_on_tuesday = restrict_shipment_on_tuesday
        if restrict_shipment_on_wednesday is not None:
          self.restrict_shipment_on_wednesday = restrict_shipment_on_wednesday
        if ship_separately is not None:
          self.ship_separately = ship_separately
        if ship_separately_additional_weight is not None:
          self.ship_separately_additional_weight = ship_separately_additional_weight
        if ship_separately_height is not None:
          self.ship_separately_height = ship_separately_height
        if ship_separately_length is not None:
          self.ship_separately_length = ship_separately_length
        if ship_separately_package_special_type is not None:
          self.ship_separately_package_special_type = ship_separately_package_special_type
        if ship_separately_width is not None:
          self.ship_separately_width = ship_separately_width
        if special_product_type is not None:
          self.special_product_type = special_product_type
        if track_inventory is not None:
          self.track_inventory = track_inventory

    @property
    def allow_back_order(self):
        """
        Gets the allow_back_order of this ItemShipping.
        Allow back order

        :return: The allow_back_order of this ItemShipping.
        :rtype: bool
        """
        return self._allow_back_order

    @allow_back_order.setter
    def allow_back_order(self, allow_back_order):
        """
        Sets the allow_back_order of this ItemShipping.
        Allow back order

        :param allow_back_order: The allow_back_order of this ItemShipping.
        :type: bool
        """

        self._allow_back_order = allow_back_order

    @property
    def amazon_fba(self):
        """
        Gets the amazon_fba of this ItemShipping.
        Fulfillment by Amazon.com

        :return: The amazon_fba of this ItemShipping.
        :rtype: bool
        """
        return self._amazon_fba

    @amazon_fba.setter
    def amazon_fba(self, amazon_fba):
        """
        Sets the amazon_fba of this ItemShipping.
        Fulfillment by Amazon.com

        :param amazon_fba: The amazon_fba of this ItemShipping.
        :type: bool
        """

        self._amazon_fba = amazon_fba

    @property
    def case_inner_packs(self):
        """
        Gets the case_inner_packs of this ItemShipping.
        Case inner packs

        :return: The case_inner_packs of this ItemShipping.
        :rtype: int
        """
        return self._case_inner_packs

    @case_inner_packs.setter
    def case_inner_packs(self, case_inner_packs):
        """
        Sets the case_inner_packs of this ItemShipping.
        Case inner packs

        :param case_inner_packs: The case_inner_packs of this ItemShipping.
        :type: int
        """

        self._case_inner_packs = case_inner_packs

    @property
    def case_units(self):
        """
        Gets the case_units of this ItemShipping.
        Case units

        :return: The case_units of this ItemShipping.
        :rtype: int
        """
        return self._case_units

    @case_units.setter
    def case_units(self, case_units):
        """
        Sets the case_units of this ItemShipping.
        Case units

        :param case_units: The case_units of this ItemShipping.
        :type: int
        """

        self._case_units = case_units

    @property
    def cases(self):
        """
        Gets the cases of this ItemShipping.
        Cases

        :return: The cases of this ItemShipping.
        :rtype: list[ItemShippingCase]
        """
        return self._cases

    @cases.setter
    def cases(self, cases):
        """
        Sets the cases of this ItemShipping.
        Cases

        :param cases: The cases of this ItemShipping.
        :type: list[ItemShippingCase]
        """

        self._cases = cases

    @property
    def collect_serial_numbers(self):
        """
        Gets the collect_serial_numbers of this ItemShipping.
        This item is on pre-order

        :return: The collect_serial_numbers of this ItemShipping.
        :rtype: bool
        """
        return self._collect_serial_numbers

    @collect_serial_numbers.setter
    def collect_serial_numbers(self, collect_serial_numbers):
        """
        Sets the collect_serial_numbers of this ItemShipping.
        This item is on pre-order

        :param collect_serial_numbers: The collect_serial_numbers of this ItemShipping.
        :type: bool
        """

        self._collect_serial_numbers = collect_serial_numbers

    @property
    def country_code_of_origin(self):
        """
        Gets the country_code_of_origin of this ItemShipping.
        Country code of origin for customs forms.  (ISO-3166 two letter code)

        :return: The country_code_of_origin of this ItemShipping.
        :rtype: str
        """
        return self._country_code_of_origin

    @country_code_of_origin.setter
    def country_code_of_origin(self, country_code_of_origin):
        """
        Sets the country_code_of_origin of this ItemShipping.
        Country code of origin for customs forms.  (ISO-3166 two letter code)

        :param country_code_of_origin: The country_code_of_origin of this ItemShipping.
        :type: str
        """
        if country_code_of_origin is not None and len(country_code_of_origin) > 2:
            raise ValueError("Invalid value for `country_code_of_origin`, length must be less than or equal to `2`")

        self._country_code_of_origin = country_code_of_origin

    @property
    def customs_description(self):
        """
        Gets the customs_description of this ItemShipping.
        Customs description

        :return: The customs_description of this ItemShipping.
        :rtype: str
        """
        return self._customs_description

    @customs_description.setter
    def customs_description(self, customs_description):
        """
        Sets the customs_description of this ItemShipping.
        Customs description

        :param customs_description: The customs_description of this ItemShipping.
        :type: str
        """

        self._customs_description = customs_description

    @property
    def customs_value(self):
        """
        Gets the customs_value of this ItemShipping.
        Customs value

        :return: The customs_value of this ItemShipping.
        :rtype: float
        """
        return self._customs_value

    @customs_value.setter
    def customs_value(self, customs_value):
        """
        Sets the customs_value of this ItemShipping.
        Customs value

        :param customs_value: The customs_value of this ItemShipping.
        :type: float
        """

        self._customs_value = customs_value

    @property
    def delivery_on_friday(self):
        """
        Gets the delivery_on_friday of this ItemShipping.
        Delivery on Friday

        :return: The delivery_on_friday of this ItemShipping.
        :rtype: bool
        """
        return self._delivery_on_friday

    @delivery_on_friday.setter
    def delivery_on_friday(self, delivery_on_friday):
        """
        Sets the delivery_on_friday of this ItemShipping.
        Delivery on Friday

        :param delivery_on_friday: The delivery_on_friday of this ItemShipping.
        :type: bool
        """

        self._delivery_on_friday = delivery_on_friday

    @property
    def delivery_on_monday(self):
        """
        Gets the delivery_on_monday of this ItemShipping.
        Delivery on Monday

        :return: The delivery_on_monday of this ItemShipping.
        :rtype: bool
        """
        return self._delivery_on_monday

    @delivery_on_monday.setter
    def delivery_on_monday(self, delivery_on_monday):
        """
        Sets the delivery_on_monday of this ItemShipping.
        Delivery on Monday

        :param delivery_on_monday: The delivery_on_monday of this ItemShipping.
        :type: bool
        """

        self._delivery_on_monday = delivery_on_monday

    @property
    def delivery_on_saturday(self):
        """
        Gets the delivery_on_saturday of this ItemShipping.
        Delivery on Saturday

        :return: The delivery_on_saturday of this ItemShipping.
        :rtype: bool
        """
        return self._delivery_on_saturday

    @delivery_on_saturday.setter
    def delivery_on_saturday(self, delivery_on_saturday):
        """
        Sets the delivery_on_saturday of this ItemShipping.
        Delivery on Saturday

        :param delivery_on_saturday: The delivery_on_saturday of this ItemShipping.
        :type: bool
        """

        self._delivery_on_saturday = delivery_on_saturday

    @property
    def delivery_on_sunday(self):
        """
        Gets the delivery_on_sunday of this ItemShipping.
        Delivery on Sunday

        :return: The delivery_on_sunday of this ItemShipping.
        :rtype: bool
        """
        return self._delivery_on_sunday

    @delivery_on_sunday.setter
    def delivery_on_sunday(self, delivery_on_sunday):
        """
        Sets the delivery_on_sunday of this ItemShipping.
        Delivery on Sunday

        :param delivery_on_sunday: The delivery_on_sunday of this ItemShipping.
        :type: bool
        """

        self._delivery_on_sunday = delivery_on_sunday

    @property
    def delivery_on_thursday(self):
        """
        Gets the delivery_on_thursday of this ItemShipping.
        Delivery on Thursday

        :return: The delivery_on_thursday of this ItemShipping.
        :rtype: bool
        """
        return self._delivery_on_thursday

    @delivery_on_thursday.setter
    def delivery_on_thursday(self, delivery_on_thursday):
        """
        Sets the delivery_on_thursday of this ItemShipping.
        Delivery on Thursday

        :param delivery_on_thursday: The delivery_on_thursday of this ItemShipping.
        :type: bool
        """

        self._delivery_on_thursday = delivery_on_thursday

    @property
    def delivery_on_tuesday(self):
        """
        Gets the delivery_on_tuesday of this ItemShipping.
        Delivery on Tuesday

        :return: The delivery_on_tuesday of this ItemShipping.
        :rtype: bool
        """
        return self._delivery_on_tuesday

    @delivery_on_tuesday.setter
    def delivery_on_tuesday(self, delivery_on_tuesday):
        """
        Sets the delivery_on_tuesday of this ItemShipping.
        Delivery on Tuesday

        :param delivery_on_tuesday: The delivery_on_tuesday of this ItemShipping.
        :type: bool
        """

        self._delivery_on_tuesday = delivery_on_tuesday

    @property
    def delivery_on_wednesday(self):
        """
        Gets the delivery_on_wednesday of this ItemShipping.
        Delivery on Wednesday

        :return: The delivery_on_wednesday of this ItemShipping.
        :rtype: bool
        """
        return self._delivery_on_wednesday

    @delivery_on_wednesday.setter
    def delivery_on_wednesday(self, delivery_on_wednesday):
        """
        Sets the delivery_on_wednesday of this ItemShipping.
        Delivery on Wednesday

        :param delivery_on_wednesday: The delivery_on_wednesday of this ItemShipping.
        :type: bool
        """

        self._delivery_on_wednesday = delivery_on_wednesday

    @property
    def destination_markups(self):
        """
        Gets the destination_markups of this ItemShipping.
        Destination markups

        :return: The destination_markups of this ItemShipping.
        :rtype: list[ItemShippingDestinationMarkup]
        """
        return self._destination_markups

    @destination_markups.setter
    def destination_markups(self, destination_markups):
        """
        Sets the destination_markups of this ItemShipping.
        Destination markups

        :param destination_markups: The destination_markups of this ItemShipping.
        :type: list[ItemShippingDestinationMarkup]
        """

        self._destination_markups = destination_markups

    @property
    def destination_restrictions(self):
        """
        Gets the destination_restrictions of this ItemShipping.
        Destination restrictions

        :return: The destination_restrictions of this ItemShipping.
        :rtype: list[ItemShippingDestinationRestriction]
        """
        return self._destination_restrictions

    @destination_restrictions.setter
    def destination_restrictions(self, destination_restrictions):
        """
        Sets the destination_restrictions of this ItemShipping.
        Destination restrictions

        :param destination_restrictions: The destination_restrictions of this ItemShipping.
        :type: list[ItemShippingDestinationRestriction]
        """

        self._destination_restrictions = destination_restrictions

    @property
    def distribution_centers(self):
        """
        Gets the distribution_centers of this ItemShipping.
        Distribution centers

        :return: The distribution_centers of this ItemShipping.
        :rtype: list[ItemShippingDistributionCenter]
        """
        return self._distribution_centers

    @distribution_centers.setter
    def distribution_centers(self, distribution_centers):
        """
        Sets the distribution_centers of this ItemShipping.
        Distribution centers

        :param distribution_centers: The distribution_centers of this ItemShipping.
        :type: list[ItemShippingDistributionCenter]
        """

        self._distribution_centers = distribution_centers

    @property
    def eta(self):
        """
        Gets the eta of this ItemShipping.
        Estimated time of arrival

        :return: The eta of this ItemShipping.
        :rtype: str
        """
        return self._eta

    @eta.setter
    def eta(self, eta):
        """
        Sets the eta of this ItemShipping.
        Estimated time of arrival

        :param eta: The eta of this ItemShipping.
        :type: str
        """

        self._eta = eta

    @property
    def free_shipping(self):
        """
        Gets the free_shipping of this ItemShipping.
        Qualifies for free shipping

        :return: The free_shipping of this ItemShipping.
        :rtype: bool
        """
        return self._free_shipping

    @free_shipping.setter
    def free_shipping(self, free_shipping):
        """
        Sets the free_shipping of this ItemShipping.
        Qualifies for free shipping

        :param free_shipping: The free_shipping of this ItemShipping.
        :type: bool
        """

        self._free_shipping = free_shipping

    @property
    def freight_class(self):
        """
        Gets the freight_class of this ItemShipping.
        Freight class

        :return: The freight_class of this ItemShipping.
        :rtype: str
        """
        return self._freight_class

    @freight_class.setter
    def freight_class(self, freight_class):
        """
        Sets the freight_class of this ItemShipping.
        Freight class

        :param freight_class: The freight_class of this ItemShipping.
        :type: str
        """

        self._freight_class = freight_class

    @property
    def hazmat(self):
        """
        Gets the hazmat of this ItemShipping.
        Hazardous material

        :return: The hazmat of this ItemShipping.
        :rtype: bool
        """
        return self._hazmat

    @hazmat.setter
    def hazmat(self, hazmat):
        """
        Sets the hazmat of this ItemShipping.
        Hazardous material

        :param hazmat: The hazmat of this ItemShipping.
        :type: bool
        """

        self._hazmat = hazmat

    @property
    def made_to_order(self):
        """
        Gets the made_to_order of this ItemShipping.
        True if this item is made to order

        :return: The made_to_order of this ItemShipping.
        :rtype: bool
        """
        return self._made_to_order

    @made_to_order.setter
    def made_to_order(self, made_to_order):
        """
        Sets the made_to_order of this ItemShipping.
        True if this item is made to order

        :param made_to_order: The made_to_order of this ItemShipping.
        :type: bool
        """

        self._made_to_order = made_to_order

    @property
    def made_to_order_lead_time(self):
        """
        Gets the made_to_order_lead_time of this ItemShipping.
        Number of days lead time it takes to make the item before ite can ship

        :return: The made_to_order_lead_time of this ItemShipping.
        :rtype: int
        """
        return self._made_to_order_lead_time

    @made_to_order_lead_time.setter
    def made_to_order_lead_time(self, made_to_order_lead_time):
        """
        Sets the made_to_order_lead_time of this ItemShipping.
        Number of days lead time it takes to make the item before ite can ship

        :param made_to_order_lead_time: The made_to_order_lead_time of this ItemShipping.
        :type: int
        """

        self._made_to_order_lead_time = made_to_order_lead_time

    @property
    def max_days_time_in_transit(self):
        """
        Gets the max_days_time_in_transit of this ItemShipping.
        Maximum days allowed in transit

        :return: The max_days_time_in_transit of this ItemShipping.
        :rtype: int
        """
        return self._max_days_time_in_transit

    @max_days_time_in_transit.setter
    def max_days_time_in_transit(self, max_days_time_in_transit):
        """
        Sets the max_days_time_in_transit of this ItemShipping.
        Maximum days allowed in transit

        :param max_days_time_in_transit: The max_days_time_in_transit of this ItemShipping.
        :type: int
        """

        self._max_days_time_in_transit = max_days_time_in_transit

    @property
    def methods(self):
        """
        Gets the methods of this ItemShipping.
        Methods

        :return: The methods of this ItemShipping.
        :rtype: list[ItemShippingMethod]
        """
        return self._methods

    @methods.setter
    def methods(self, methods):
        """
        Sets the methods of this ItemShipping.
        Methods

        :param methods: The methods of this ItemShipping.
        :type: list[ItemShippingMethod]
        """

        self._methods = methods

    @property
    def no_shipping_discount(self):
        """
        Gets the no_shipping_discount of this ItemShipping.
        No shipping discounts

        :return: The no_shipping_discount of this ItemShipping.
        :rtype: bool
        """
        return self._no_shipping_discount

    @no_shipping_discount.setter
    def no_shipping_discount(self, no_shipping_discount):
        """
        Sets the no_shipping_discount of this ItemShipping.
        No shipping discounts

        :param no_shipping_discount: The no_shipping_discount of this ItemShipping.
        :type: bool
        """

        self._no_shipping_discount = no_shipping_discount

    @property
    def package_requirements(self):
        """
        Gets the package_requirements of this ItemShipping.
        Package requirements

        :return: The package_requirements of this ItemShipping.
        :rtype: list[ItemShippingPackageRequirement]
        """
        return self._package_requirements

    @package_requirements.setter
    def package_requirements(self, package_requirements):
        """
        Sets the package_requirements of this ItemShipping.
        Package requirements

        :param package_requirements: The package_requirements of this ItemShipping.
        :type: list[ItemShippingPackageRequirement]
        """

        self._package_requirements = package_requirements

    @property
    def perishable_class_name(self):
        """
        Gets the perishable_class_name of this ItemShipping.
        Perishable class name

        :return: The perishable_class_name of this ItemShipping.
        :rtype: str
        """
        return self._perishable_class_name

    @perishable_class_name.setter
    def perishable_class_name(self, perishable_class_name):
        """
        Sets the perishable_class_name of this ItemShipping.
        Perishable class name

        :param perishable_class_name: The perishable_class_name of this ItemShipping.
        :type: str
        """

        self._perishable_class_name = perishable_class_name

    @property
    def perishable_class_oid(self):
        """
        Gets the perishable_class_oid of this ItemShipping.
        Perishable class object identifier

        :return: The perishable_class_oid of this ItemShipping.
        :rtype: int
        """
        return self._perishable_class_oid

    @perishable_class_oid.setter
    def perishable_class_oid(self, perishable_class_oid):
        """
        Sets the perishable_class_oid of this ItemShipping.
        Perishable class object identifier

        :param perishable_class_oid: The perishable_class_oid of this ItemShipping.
        :type: int
        """

        self._perishable_class_oid = perishable_class_oid

    @property
    def preorder(self):
        """
        Gets the preorder of this ItemShipping.
        This item is on pre-order

        :return: The preorder of this ItemShipping.
        :rtype: bool
        """
        return self._preorder

    @preorder.setter
    def preorder(self, preorder):
        """
        Sets the preorder of this ItemShipping.
        This item is on pre-order

        :param preorder: The preorder of this ItemShipping.
        :type: bool
        """

        self._preorder = preorder

    @property
    def require_delivery_date(self):
        """
        Gets the require_delivery_date of this ItemShipping.
        True to require customer to select a delivery date

        :return: The require_delivery_date of this ItemShipping.
        :rtype: bool
        """
        return self._require_delivery_date

    @require_delivery_date.setter
    def require_delivery_date(self, require_delivery_date):
        """
        Sets the require_delivery_date of this ItemShipping.
        True to require customer to select a delivery date

        :param require_delivery_date: The require_delivery_date of this ItemShipping.
        :type: bool
        """

        self._require_delivery_date = require_delivery_date

    @property
    def restrict_shipment_on_friday(self):
        """
        Gets the restrict_shipment_on_friday of this ItemShipping.
        Restrict shipment on Friday

        :return: The restrict_shipment_on_friday of this ItemShipping.
        :rtype: bool
        """
        return self._restrict_shipment_on_friday

    @restrict_shipment_on_friday.setter
    def restrict_shipment_on_friday(self, restrict_shipment_on_friday):
        """
        Sets the restrict_shipment_on_friday of this ItemShipping.
        Restrict shipment on Friday

        :param restrict_shipment_on_friday: The restrict_shipment_on_friday of this ItemShipping.
        :type: bool
        """

        self._restrict_shipment_on_friday = restrict_shipment_on_friday

    @property
    def restrict_shipment_on_monday(self):
        """
        Gets the restrict_shipment_on_monday of this ItemShipping.
        Restrict shipment on Monday

        :return: The restrict_shipment_on_monday of this ItemShipping.
        :rtype: bool
        """
        return self._restrict_shipment_on_monday

    @restrict_shipment_on_monday.setter
    def restrict_shipment_on_monday(self, restrict_shipment_on_monday):
        """
        Sets the restrict_shipment_on_monday of this ItemShipping.
        Restrict shipment on Monday

        :param restrict_shipment_on_monday: The restrict_shipment_on_monday of this ItemShipping.
        :type: bool
        """

        self._restrict_shipment_on_monday = restrict_shipment_on_monday

    @property
    def restrict_shipment_on_saturday(self):
        """
        Gets the restrict_shipment_on_saturday of this ItemShipping.
        Restrict shipment on Saturday

        :return: The restrict_shipment_on_saturday of this ItemShipping.
        :rtype: bool
        """
        return self._restrict_shipment_on_saturday

    @restrict_shipment_on_saturday.setter
    def restrict_shipment_on_saturday(self, restrict_shipment_on_saturday):
        """
        Sets the restrict_shipment_on_saturday of this ItemShipping.
        Restrict shipment on Saturday

        :param restrict_shipment_on_saturday: The restrict_shipment_on_saturday of this ItemShipping.
        :type: bool
        """

        self._restrict_shipment_on_saturday = restrict_shipment_on_saturday

    @property
    def restrict_shipment_on_sunday(self):
        """
        Gets the restrict_shipment_on_sunday of this ItemShipping.
        Restrict shipment on Sunday

        :return: The restrict_shipment_on_sunday of this ItemShipping.
        :rtype: bool
        """
        return self._restrict_shipment_on_sunday

    @restrict_shipment_on_sunday.setter
    def restrict_shipment_on_sunday(self, restrict_shipment_on_sunday):
        """
        Sets the restrict_shipment_on_sunday of this ItemShipping.
        Restrict shipment on Sunday

        :param restrict_shipment_on_sunday: The restrict_shipment_on_sunday of this ItemShipping.
        :type: bool
        """

        self._restrict_shipment_on_sunday = restrict_shipment_on_sunday

    @property
    def restrict_shipment_on_thursday(self):
        """
        Gets the restrict_shipment_on_thursday of this ItemShipping.
        Restrict shipment on Thursday

        :return: The restrict_shipment_on_thursday of this ItemShipping.
        :rtype: bool
        """
        return self._restrict_shipment_on_thursday

    @restrict_shipment_on_thursday.setter
    def restrict_shipment_on_thursday(self, restrict_shipment_on_thursday):
        """
        Sets the restrict_shipment_on_thursday of this ItemShipping.
        Restrict shipment on Thursday

        :param restrict_shipment_on_thursday: The restrict_shipment_on_thursday of this ItemShipping.
        :type: bool
        """

        self._restrict_shipment_on_thursday = restrict_shipment_on_thursday

    @property
    def restrict_shipment_on_tuesday(self):
        """
        Gets the restrict_shipment_on_tuesday of this ItemShipping.
        Restrict shipment on Tuesday

        :return: The restrict_shipment_on_tuesday of this ItemShipping.
        :rtype: bool
        """
        return self._restrict_shipment_on_tuesday

    @restrict_shipment_on_tuesday.setter
    def restrict_shipment_on_tuesday(self, restrict_shipment_on_tuesday):
        """
        Sets the restrict_shipment_on_tuesday of this ItemShipping.
        Restrict shipment on Tuesday

        :param restrict_shipment_on_tuesday: The restrict_shipment_on_tuesday of this ItemShipping.
        :type: bool
        """

        self._restrict_shipment_on_tuesday = restrict_shipment_on_tuesday

    @property
    def restrict_shipment_on_wednesday(self):
        """
        Gets the restrict_shipment_on_wednesday of this ItemShipping.
        Restrict shipment on Wednesday

        :return: The restrict_shipment_on_wednesday of this ItemShipping.
        :rtype: bool
        """
        return self._restrict_shipment_on_wednesday

    @restrict_shipment_on_wednesday.setter
    def restrict_shipment_on_wednesday(self, restrict_shipment_on_wednesday):
        """
        Sets the restrict_shipment_on_wednesday of this ItemShipping.
        Restrict shipment on Wednesday

        :param restrict_shipment_on_wednesday: The restrict_shipment_on_wednesday of this ItemShipping.
        :type: bool
        """

        self._restrict_shipment_on_wednesday = restrict_shipment_on_wednesday

    @property
    def ship_separately(self):
        """
        Gets the ship_separately of this ItemShipping.
        Ship this item in a separate box

        :return: The ship_separately of this ItemShipping.
        :rtype: bool
        """
        return self._ship_separately

    @ship_separately.setter
    def ship_separately(self, ship_separately):
        """
        Sets the ship_separately of this ItemShipping.
        Ship this item in a separate box

        :param ship_separately: The ship_separately of this ItemShipping.
        :type: bool
        """

        self._ship_separately = ship_separately

    @property
    def ship_separately_additional_weight(self):
        """
        Gets the ship_separately_additional_weight of this ItemShipping.

        :return: The ship_separately_additional_weight of this ItemShipping.
        :rtype: Weight
        """
        return self._ship_separately_additional_weight

    @ship_separately_additional_weight.setter
    def ship_separately_additional_weight(self, ship_separately_additional_weight):
        """
        Sets the ship_separately_additional_weight of this ItemShipping.

        :param ship_separately_additional_weight: The ship_separately_additional_weight of this ItemShipping.
        :type: Weight
        """

        self._ship_separately_additional_weight = ship_separately_additional_weight

    @property
    def ship_separately_height(self):
        """
        Gets the ship_separately_height of this ItemShipping.

        :return: The ship_separately_height of this ItemShipping.
        :rtype: Distance
        """
        return self._ship_separately_height

    @ship_separately_height.setter
    def ship_separately_height(self, ship_separately_height):
        """
        Sets the ship_separately_height of this ItemShipping.

        :param ship_separately_height: The ship_separately_height of this ItemShipping.
        :type: Distance
        """

        self._ship_separately_height = ship_separately_height

    @property
    def ship_separately_length(self):
        """
        Gets the ship_separately_length of this ItemShipping.

        :return: The ship_separately_length of this ItemShipping.
        :rtype: Distance
        """
        return self._ship_separately_length

    @ship_separately_length.setter
    def ship_separately_length(self, ship_separately_length):
        """
        Sets the ship_separately_length of this ItemShipping.

        :param ship_separately_length: The ship_separately_length of this ItemShipping.
        :type: Distance
        """

        self._ship_separately_length = ship_separately_length

    @property
    def ship_separately_package_special_type(self):
        """
        Gets the ship_separately_package_special_type of this ItemShipping.
        Ship separately package special type

        :return: The ship_separately_package_special_type of this ItemShipping.
        :rtype: str
        """
        return self._ship_separately_package_special_type

    @ship_separately_package_special_type.setter
    def ship_separately_package_special_type(self, ship_separately_package_special_type):
        """
        Sets the ship_separately_package_special_type of this ItemShipping.
        Ship separately package special type

        :param ship_separately_package_special_type: The ship_separately_package_special_type of this ItemShipping.
        :type: str
        """

        self._ship_separately_package_special_type = ship_separately_package_special_type

    @property
    def ship_separately_width(self):
        """
        Gets the ship_separately_width of this ItemShipping.

        :return: The ship_separately_width of this ItemShipping.
        :rtype: Distance
        """
        return self._ship_separately_width

    @ship_separately_width.setter
    def ship_separately_width(self, ship_separately_width):
        """
        Sets the ship_separately_width of this ItemShipping.

        :param ship_separately_width: The ship_separately_width of this ItemShipping.
        :type: Distance
        """

        self._ship_separately_width = ship_separately_width

    @property
    def special_product_type(self):
        """
        Gets the special_product_type of this ItemShipping.
        Special product type (USPS Media Mail)

        :return: The special_product_type of this ItemShipping.
        :rtype: str
        """
        return self._special_product_type

    @special_product_type.setter
    def special_product_type(self, special_product_type):
        """
        Sets the special_product_type of this ItemShipping.
        Special product type (USPS Media Mail)

        :param special_product_type: The special_product_type of this ItemShipping.
        :type: str
        """

        self._special_product_type = special_product_type

    @property
    def track_inventory(self):
        """
        Gets the track_inventory of this ItemShipping.
        Track inventory

        :return: The track_inventory of this ItemShipping.
        :rtype: bool
        """
        return self._track_inventory

    @track_inventory.setter
    def track_inventory(self, track_inventory):
        """
        Sets the track_inventory of this ItemShipping.
        Track inventory

        :param track_inventory: The track_inventory of this ItemShipping.
        :type: bool
        """

        self._track_inventory = track_inventory

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ItemShipping):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
