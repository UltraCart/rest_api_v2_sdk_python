# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RegisterAffiliateClickRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'affid': 'int',
        'ip_address': 'str',
        'landing_page_url': 'str',
        'referrer_url': 'str',
        'subid': 'str',
        'user_agent': 'str'
    }

    attribute_map = {
        'affid': 'affid',
        'ip_address': 'ip_address',
        'landing_page_url': 'landing_page_url',
        'referrer_url': 'referrer_url',
        'subid': 'subid',
        'user_agent': 'user_agent'
    }

    def __init__(self, affid=None, ip_address=None, landing_page_url=None, referrer_url=None, subid=None, user_agent=None):  # noqa: E501
        """RegisterAffiliateClickRequest - a model defined in Swagger"""  # noqa: E501

        self._affid = None
        self._ip_address = None
        self._landing_page_url = None
        self._referrer_url = None
        self._subid = None
        self._user_agent = None
        self.discriminator = None

        if affid is not None:
            self.affid = affid
        if ip_address is not None:
            self.ip_address = ip_address
        if landing_page_url is not None:
            self.landing_page_url = landing_page_url
        if referrer_url is not None:
            self.referrer_url = referrer_url
        if subid is not None:
            self.subid = subid
        if user_agent is not None:
            self.user_agent = user_agent

    @property
    def affid(self):
        """Gets the affid of this RegisterAffiliateClickRequest.  # noqa: E501

        Affiliate Id (must be specified if landing_page_url is not)  # noqa: E501

        :return: The affid of this RegisterAffiliateClickRequest.  # noqa: E501
        :rtype: int
        """
        return self._affid

    @affid.setter
    def affid(self, affid):
        """Sets the affid of this RegisterAffiliateClickRequest.

        Affiliate Id (must be specified if landing_page_url is not)  # noqa: E501

        :param affid: The affid of this RegisterAffiliateClickRequest.  # noqa: E501
        :type: int
        """

        self._affid = affid

    @property
    def ip_address(self):
        """Gets the ip_address of this RegisterAffiliateClickRequest.  # noqa: E501

        IP Address (must be specified for non-browser key authenticated)  # noqa: E501

        :return: The ip_address of this RegisterAffiliateClickRequest.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this RegisterAffiliateClickRequest.

        IP Address (must be specified for non-browser key authenticated)  # noqa: E501

        :param ip_address: The ip_address of this RegisterAffiliateClickRequest.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def landing_page_url(self):
        """Gets the landing_page_url of this RegisterAffiliateClickRequest.  # noqa: E501

        Landing Page URL  # noqa: E501

        :return: The landing_page_url of this RegisterAffiliateClickRequest.  # noqa: E501
        :rtype: str
        """
        return self._landing_page_url

    @landing_page_url.setter
    def landing_page_url(self, landing_page_url):
        """Sets the landing_page_url of this RegisterAffiliateClickRequest.

        Landing Page URL  # noqa: E501

        :param landing_page_url: The landing_page_url of this RegisterAffiliateClickRequest.  # noqa: E501
        :type: str
        """

        self._landing_page_url = landing_page_url

    @property
    def referrer_url(self):
        """Gets the referrer_url of this RegisterAffiliateClickRequest.  # noqa: E501

        Referrer URL (used for detecting invisible linking)  # noqa: E501

        :return: The referrer_url of this RegisterAffiliateClickRequest.  # noqa: E501
        :rtype: str
        """
        return self._referrer_url

    @referrer_url.setter
    def referrer_url(self, referrer_url):
        """Sets the referrer_url of this RegisterAffiliateClickRequest.

        Referrer URL (used for detecting invisible linking)  # noqa: E501

        :param referrer_url: The referrer_url of this RegisterAffiliateClickRequest.  # noqa: E501
        :type: str
        """

        self._referrer_url = referrer_url

    @property
    def subid(self):
        """Gets the subid of this RegisterAffiliateClickRequest.  # noqa: E501

        Sub Id (optional value if affid is specified.  # noqa: E501

        :return: The subid of this RegisterAffiliateClickRequest.  # noqa: E501
        :rtype: str
        """
        return self._subid

    @subid.setter
    def subid(self, subid):
        """Sets the subid of this RegisterAffiliateClickRequest.

        Sub Id (optional value if affid is specified.  # noqa: E501

        :param subid: The subid of this RegisterAffiliateClickRequest.  # noqa: E501
        :type: str
        """

        self._subid = subid

    @property
    def user_agent(self):
        """Gets the user_agent of this RegisterAffiliateClickRequest.  # noqa: E501

        User agent of the browser (must be specified for non-browser key authenticated)  # noqa: E501

        :return: The user_agent of this RegisterAffiliateClickRequest.  # noqa: E501
        :rtype: str
        """
        return self._user_agent

    @user_agent.setter
    def user_agent(self, user_agent):
        """Sets the user_agent of this RegisterAffiliateClickRequest.

        User agent of the browser (must be specified for non-browser key authenticated)  # noqa: E501

        :param user_agent: The user_agent of this RegisterAffiliateClickRequest.  # noqa: E501
        :type: str
        """

        self._user_agent = user_agent

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RegisterAffiliateClickRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RegisterAffiliateClickRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
