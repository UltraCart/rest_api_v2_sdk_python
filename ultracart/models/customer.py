# coding: utf-8

"""
    UltraCart Rest API V2

    This is the next generation UltraCart REST API...

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Customer(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, affiliate_oid=None, allow_3rd_party_billing=None, allow_cod=None, allow_purchase_order=None, allow_quote_request=None, allow_selection_of_address_type=None, auto_approve_cod=None, auto_approve_purchase_order=None, automatic_merchant_notes=None, billing=None, business_notes=None, cards=None, customer_profile_oid=None, dhl_account_number=None, email=None, exempt_shipping_handling_charge=None, fedex_account_number=None, free_shipping=None, free_shipping_minimum=None, last_modified_by=None, last_modified_dts=None, maximum_item_count=None, minimum_item_count=None, minimum_subtotal=None, no_coupons=None, no_free_shipping=None, no_realtime_charge=None, password=None, pricing_tiers=None, qb_class=None, qb_code=None, referral_source=None, sales_rep_code=None, send_signup_notification=None, shipping=None, signup_dts=None, suppress_buysafe=None, tax_exempt=None, tax_id=None, terms=None, track_separately=None, unapproved=None, ups_account_number=None, website_url=None):
        """
        Customer - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'affiliate_oid': 'int',
            'allow_3rd_party_billing': 'bool',
            'allow_cod': 'bool',
            'allow_purchase_order': 'bool',
            'allow_quote_request': 'bool',
            'allow_selection_of_address_type': 'bool',
            'auto_approve_cod': 'bool',
            'auto_approve_purchase_order': 'bool',
            'automatic_merchant_notes': 'str',
            'billing': 'list[CustomerBilling]',
            'business_notes': 'str',
            'cards': 'list[CustomerCard]',
            'customer_profile_oid': 'int',
            'dhl_account_number': 'str',
            'email': 'str',
            'exempt_shipping_handling_charge': 'bool',
            'fedex_account_number': 'str',
            'free_shipping': 'bool',
            'free_shipping_minimum': 'float',
            'last_modified_by': 'str',
            'last_modified_dts': 'str',
            'maximum_item_count': 'int',
            'minimum_item_count': 'int',
            'minimum_subtotal': 'float',
            'no_coupons': 'bool',
            'no_free_shipping': 'bool',
            'no_realtime_charge': 'bool',
            'password': 'str',
            'pricing_tiers': 'list[CustomerPricingTier]',
            'qb_class': 'str',
            'qb_code': 'str',
            'referral_source': 'str',
            'sales_rep_code': 'str',
            'send_signup_notification': 'bool',
            'shipping': 'list[CustomerShipping]',
            'signup_dts': 'str',
            'suppress_buysafe': 'bool',
            'tax_exempt': 'bool',
            'tax_id': 'str',
            'terms': 'str',
            'track_separately': 'bool',
            'unapproved': 'bool',
            'ups_account_number': 'str',
            'website_url': 'str'
        }

        self.attribute_map = {
            'affiliate_oid': 'affiliate_oid',
            'allow_3rd_party_billing': 'allow_3rd_party_billing',
            'allow_cod': 'allow_cod',
            'allow_purchase_order': 'allow_purchase_order',
            'allow_quote_request': 'allow_quote_request',
            'allow_selection_of_address_type': 'allow_selection_of_address_type',
            'auto_approve_cod': 'auto_approve_cod',
            'auto_approve_purchase_order': 'auto_approve_purchase_order',
            'automatic_merchant_notes': 'automatic_merchant_notes',
            'billing': 'billing',
            'business_notes': 'business_notes',
            'cards': 'cards',
            'customer_profile_oid': 'customer_profile_oid',
            'dhl_account_number': 'dhl_account_number',
            'email': 'email',
            'exempt_shipping_handling_charge': 'exempt_shipping_handling_charge',
            'fedex_account_number': 'fedex_account_number',
            'free_shipping': 'free_shipping',
            'free_shipping_minimum': 'free_shipping_minimum',
            'last_modified_by': 'last_modified_by',
            'last_modified_dts': 'last_modified_dts',
            'maximum_item_count': 'maximum_item_count',
            'minimum_item_count': 'minimum_item_count',
            'minimum_subtotal': 'minimum_subtotal',
            'no_coupons': 'no_coupons',
            'no_free_shipping': 'no_free_shipping',
            'no_realtime_charge': 'no_realtime_charge',
            'password': 'password',
            'pricing_tiers': 'pricing_tiers',
            'qb_class': 'qb_class',
            'qb_code': 'qb_code',
            'referral_source': 'referral_source',
            'sales_rep_code': 'sales_rep_code',
            'send_signup_notification': 'send_signup_notification',
            'shipping': 'shipping',
            'signup_dts': 'signup_dts',
            'suppress_buysafe': 'suppress_buysafe',
            'tax_exempt': 'tax_exempt',
            'tax_id': 'tax_id',
            'terms': 'terms',
            'track_separately': 'track_separately',
            'unapproved': 'unapproved',
            'ups_account_number': 'ups_account_number',
            'website_url': 'website_url'
        }

        self._affiliate_oid = affiliate_oid
        self._allow_3rd_party_billing = allow_3rd_party_billing
        self._allow_cod = allow_cod
        self._allow_purchase_order = allow_purchase_order
        self._allow_quote_request = allow_quote_request
        self._allow_selection_of_address_type = allow_selection_of_address_type
        self._auto_approve_cod = auto_approve_cod
        self._auto_approve_purchase_order = auto_approve_purchase_order
        self._automatic_merchant_notes = automatic_merchant_notes
        self._billing = billing
        self._business_notes = business_notes
        self._cards = cards
        self._customer_profile_oid = customer_profile_oid
        self._dhl_account_number = dhl_account_number
        self._email = email
        self._exempt_shipping_handling_charge = exempt_shipping_handling_charge
        self._fedex_account_number = fedex_account_number
        self._free_shipping = free_shipping
        self._free_shipping_minimum = free_shipping_minimum
        self._last_modified_by = last_modified_by
        self._last_modified_dts = last_modified_dts
        self._maximum_item_count = maximum_item_count
        self._minimum_item_count = minimum_item_count
        self._minimum_subtotal = minimum_subtotal
        self._no_coupons = no_coupons
        self._no_free_shipping = no_free_shipping
        self._no_realtime_charge = no_realtime_charge
        self._password = password
        self._pricing_tiers = pricing_tiers
        self._qb_class = qb_class
        self._qb_code = qb_code
        self._referral_source = referral_source
        self._sales_rep_code = sales_rep_code
        self._send_signup_notification = send_signup_notification
        self._shipping = shipping
        self._signup_dts = signup_dts
        self._suppress_buysafe = suppress_buysafe
        self._tax_exempt = tax_exempt
        self._tax_id = tax_id
        self._terms = terms
        self._track_separately = track_separately
        self._unapproved = unapproved
        self._ups_account_number = ups_account_number
        self._website_url = website_url

    @property
    def affiliate_oid(self):
        """
        Gets the affiliate_oid of this Customer.
        Affiliate oid

        :return: The affiliate_oid of this Customer.
        :rtype: int
        """
        return self._affiliate_oid

    @affiliate_oid.setter
    def affiliate_oid(self, affiliate_oid):
        """
        Sets the affiliate_oid of this Customer.
        Affiliate oid

        :param affiliate_oid: The affiliate_oid of this Customer.
        :type: int
        """

        self._affiliate_oid = affiliate_oid

    @property
    def allow_3rd_party_billing(self):
        """
        Gets the allow_3rd_party_billing of this Customer.
        Allow 3rd party billing

        :return: The allow_3rd_party_billing of this Customer.
        :rtype: bool
        """
        return self._allow_3rd_party_billing

    @allow_3rd_party_billing.setter
    def allow_3rd_party_billing(self, allow_3rd_party_billing):
        """
        Sets the allow_3rd_party_billing of this Customer.
        Allow 3rd party billing

        :param allow_3rd_party_billing: The allow_3rd_party_billing of this Customer.
        :type: bool
        """

        self._allow_3rd_party_billing = allow_3rd_party_billing

    @property
    def allow_cod(self):
        """
        Gets the allow_cod of this Customer.
        Allow COD

        :return: The allow_cod of this Customer.
        :rtype: bool
        """
        return self._allow_cod

    @allow_cod.setter
    def allow_cod(self, allow_cod):
        """
        Sets the allow_cod of this Customer.
        Allow COD

        :param allow_cod: The allow_cod of this Customer.
        :type: bool
        """

        self._allow_cod = allow_cod

    @property
    def allow_purchase_order(self):
        """
        Gets the allow_purchase_order of this Customer.
        Allow purchase orders by this customer

        :return: The allow_purchase_order of this Customer.
        :rtype: bool
        """
        return self._allow_purchase_order

    @allow_purchase_order.setter
    def allow_purchase_order(self, allow_purchase_order):
        """
        Sets the allow_purchase_order of this Customer.
        Allow purchase orders by this customer

        :param allow_purchase_order: The allow_purchase_order of this Customer.
        :type: bool
        """

        self._allow_purchase_order = allow_purchase_order

    @property
    def allow_quote_request(self):
        """
        Gets the allow_quote_request of this Customer.
        Allow quote request

        :return: The allow_quote_request of this Customer.
        :rtype: bool
        """
        return self._allow_quote_request

    @allow_quote_request.setter
    def allow_quote_request(self, allow_quote_request):
        """
        Sets the allow_quote_request of this Customer.
        Allow quote request

        :param allow_quote_request: The allow_quote_request of this Customer.
        :type: bool
        """

        self._allow_quote_request = allow_quote_request

    @property
    def allow_selection_of_address_type(self):
        """
        Gets the allow_selection_of_address_type of this Customer.
        Allow selection of residential or business address type

        :return: The allow_selection_of_address_type of this Customer.
        :rtype: bool
        """
        return self._allow_selection_of_address_type

    @allow_selection_of_address_type.setter
    def allow_selection_of_address_type(self, allow_selection_of_address_type):
        """
        Sets the allow_selection_of_address_type of this Customer.
        Allow selection of residential or business address type

        :param allow_selection_of_address_type: The allow_selection_of_address_type of this Customer.
        :type: bool
        """

        self._allow_selection_of_address_type = allow_selection_of_address_type

    @property
    def auto_approve_cod(self):
        """
        Gets the auto_approve_cod of this Customer.
        Auto approve COD

        :return: The auto_approve_cod of this Customer.
        :rtype: bool
        """
        return self._auto_approve_cod

    @auto_approve_cod.setter
    def auto_approve_cod(self, auto_approve_cod):
        """
        Sets the auto_approve_cod of this Customer.
        Auto approve COD

        :param auto_approve_cod: The auto_approve_cod of this Customer.
        :type: bool
        """

        self._auto_approve_cod = auto_approve_cod

    @property
    def auto_approve_purchase_order(self):
        """
        Gets the auto_approve_purchase_order of this Customer.
        Auto approve purchase orders by this customer

        :return: The auto_approve_purchase_order of this Customer.
        :rtype: bool
        """
        return self._auto_approve_purchase_order

    @auto_approve_purchase_order.setter
    def auto_approve_purchase_order(self, auto_approve_purchase_order):
        """
        Sets the auto_approve_purchase_order of this Customer.
        Auto approve purchase orders by this customer

        :param auto_approve_purchase_order: The auto_approve_purchase_order of this Customer.
        :type: bool
        """

        self._auto_approve_purchase_order = auto_approve_purchase_order

    @property
    def automatic_merchant_notes(self):
        """
        Gets the automatic_merchant_notes of this Customer.
        Automatic merchant notes are added to every order placed

        :return: The automatic_merchant_notes of this Customer.
        :rtype: str
        """
        return self._automatic_merchant_notes

    @automatic_merchant_notes.setter
    def automatic_merchant_notes(self, automatic_merchant_notes):
        """
        Sets the automatic_merchant_notes of this Customer.
        Automatic merchant notes are added to every order placed

        :param automatic_merchant_notes: The automatic_merchant_notes of this Customer.
        :type: str
        """

        self._automatic_merchant_notes = automatic_merchant_notes

    @property
    def billing(self):
        """
        Gets the billing of this Customer.
        Billing addresses for this customer

        :return: The billing of this Customer.
        :rtype: list[CustomerBilling]
        """
        return self._billing

    @billing.setter
    def billing(self, billing):
        """
        Sets the billing of this Customer.
        Billing addresses for this customer

        :param billing: The billing of this Customer.
        :type: list[CustomerBilling]
        """

        self._billing = billing

    @property
    def business_notes(self):
        """
        Gets the business_notes of this Customer.
        Business notes (internally visible only)

        :return: The business_notes of this Customer.
        :rtype: str
        """
        return self._business_notes

    @business_notes.setter
    def business_notes(self, business_notes):
        """
        Sets the business_notes of this Customer.
        Business notes (internally visible only)

        :param business_notes: The business_notes of this Customer.
        :type: str
        """

        if not business_notes:
            raise ValueError("Invalid value for `business_notes`, must not be `None`")
        if len(business_notes) > 2000:
            raise ValueError("Invalid value for `business_notes`, length must be less than `2000`")

        self._business_notes = business_notes

    @property
    def cards(self):
        """
        Gets the cards of this Customer.
        Credit Cards for this customer

        :return: The cards of this Customer.
        :rtype: list[CustomerCard]
        """
        return self._cards

    @cards.setter
    def cards(self, cards):
        """
        Sets the cards of this Customer.
        Credit Cards for this customer

        :param cards: The cards of this Customer.
        :type: list[CustomerCard]
        """

        self._cards = cards

    @property
    def customer_profile_oid(self):
        """
        Gets the customer_profile_oid of this Customer.
        Customer profile object identifier

        :return: The customer_profile_oid of this Customer.
        :rtype: int
        """
        return self._customer_profile_oid

    @customer_profile_oid.setter
    def customer_profile_oid(self, customer_profile_oid):
        """
        Sets the customer_profile_oid of this Customer.
        Customer profile object identifier

        :param customer_profile_oid: The customer_profile_oid of this Customer.
        :type: int
        """

        self._customer_profile_oid = customer_profile_oid

    @property
    def dhl_account_number(self):
        """
        Gets the dhl_account_number of this Customer.
        DHL account number

        :return: The dhl_account_number of this Customer.
        :rtype: str
        """
        return self._dhl_account_number

    @dhl_account_number.setter
    def dhl_account_number(self, dhl_account_number):
        """
        Sets the dhl_account_number of this Customer.
        DHL account number

        :param dhl_account_number: The dhl_account_number of this Customer.
        :type: str
        """

        if not dhl_account_number:
            raise ValueError("Invalid value for `dhl_account_number`, must not be `None`")
        if len(dhl_account_number) > 20:
            raise ValueError("Invalid value for `dhl_account_number`, length must be less than `20`")

        self._dhl_account_number = dhl_account_number

    @property
    def email(self):
        """
        Gets the email of this Customer.
        Email address of this customer profile

        :return: The email of this Customer.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this Customer.
        Email address of this customer profile

        :param email: The email of this Customer.
        :type: str
        """

        self._email = email

    @property
    def exempt_shipping_handling_charge(self):
        """
        Gets the exempt_shipping_handling_charge of this Customer.
        Exempt shipping handling charge

        :return: The exempt_shipping_handling_charge of this Customer.
        :rtype: bool
        """
        return self._exempt_shipping_handling_charge

    @exempt_shipping_handling_charge.setter
    def exempt_shipping_handling_charge(self, exempt_shipping_handling_charge):
        """
        Sets the exempt_shipping_handling_charge of this Customer.
        Exempt shipping handling charge

        :param exempt_shipping_handling_charge: The exempt_shipping_handling_charge of this Customer.
        :type: bool
        """

        self._exempt_shipping_handling_charge = exempt_shipping_handling_charge

    @property
    def fedex_account_number(self):
        """
        Gets the fedex_account_number of this Customer.
        FedEx account number

        :return: The fedex_account_number of this Customer.
        :rtype: str
        """
        return self._fedex_account_number

    @fedex_account_number.setter
    def fedex_account_number(self, fedex_account_number):
        """
        Sets the fedex_account_number of this Customer.
        FedEx account number

        :param fedex_account_number: The fedex_account_number of this Customer.
        :type: str
        """

        if not fedex_account_number:
            raise ValueError("Invalid value for `fedex_account_number`, must not be `None`")
        if len(fedex_account_number) > 20:
            raise ValueError("Invalid value for `fedex_account_number`, length must be less than `20`")

        self._fedex_account_number = fedex_account_number

    @property
    def free_shipping(self):
        """
        Gets the free_shipping of this Customer.
        This customer always receives free shipping

        :return: The free_shipping of this Customer.
        :rtype: bool
        """
        return self._free_shipping

    @free_shipping.setter
    def free_shipping(self, free_shipping):
        """
        Sets the free_shipping of this Customer.
        This customer always receives free shipping

        :param free_shipping: The free_shipping of this Customer.
        :type: bool
        """

        self._free_shipping = free_shipping

    @property
    def free_shipping_minimum(self):
        """
        Gets the free_shipping_minimum of this Customer.
        If free_shipping is true, this is the minimum subtotal required for free shipping

        :return: The free_shipping_minimum of this Customer.
        :rtype: float
        """
        return self._free_shipping_minimum

    @free_shipping_minimum.setter
    def free_shipping_minimum(self, free_shipping_minimum):
        """
        Sets the free_shipping_minimum of this Customer.
        If free_shipping is true, this is the minimum subtotal required for free shipping

        :param free_shipping_minimum: The free_shipping_minimum of this Customer.
        :type: float
        """

        self._free_shipping_minimum = free_shipping_minimum

    @property
    def last_modified_by(self):
        """
        Gets the last_modified_by of this Customer.
        Last modified by

        :return: The last_modified_by of this Customer.
        :rtype: str
        """
        return self._last_modified_by

    @last_modified_by.setter
    def last_modified_by(self, last_modified_by):
        """
        Sets the last_modified_by of this Customer.
        Last modified by

        :param last_modified_by: The last_modified_by of this Customer.
        :type: str
        """

        if not last_modified_by:
            raise ValueError("Invalid value for `last_modified_by`, must not be `None`")
        if len(last_modified_by) > 100:
            raise ValueError("Invalid value for `last_modified_by`, length must be less than `100`")

        self._last_modified_by = last_modified_by

    @property
    def last_modified_dts(self):
        """
        Gets the last_modified_dts of this Customer.
        Last modified date

        :return: The last_modified_dts of this Customer.
        :rtype: str
        """
        return self._last_modified_dts

    @last_modified_dts.setter
    def last_modified_dts(self, last_modified_dts):
        """
        Sets the last_modified_dts of this Customer.
        Last modified date

        :param last_modified_dts: The last_modified_dts of this Customer.
        :type: str
        """

        if not last_modified_dts:
            raise ValueError("Invalid value for `last_modified_dts`, must not be `None`")
        if len(last_modified_dts) > 25:
            raise ValueError("Invalid value for `last_modified_dts`, length must be less than `25`")

        self._last_modified_dts = last_modified_dts

    @property
    def maximum_item_count(self):
        """
        Gets the maximum_item_count of this Customer.
        Maximum item count

        :return: The maximum_item_count of this Customer.
        :rtype: int
        """
        return self._maximum_item_count

    @maximum_item_count.setter
    def maximum_item_count(self, maximum_item_count):
        """
        Sets the maximum_item_count of this Customer.
        Maximum item count

        :param maximum_item_count: The maximum_item_count of this Customer.
        :type: int
        """

        self._maximum_item_count = maximum_item_count

    @property
    def minimum_item_count(self):
        """
        Gets the minimum_item_count of this Customer.
        Minimum item count

        :return: The minimum_item_count of this Customer.
        :rtype: int
        """
        return self._minimum_item_count

    @minimum_item_count.setter
    def minimum_item_count(self, minimum_item_count):
        """
        Sets the minimum_item_count of this Customer.
        Minimum item count

        :param minimum_item_count: The minimum_item_count of this Customer.
        :type: int
        """

        self._minimum_item_count = minimum_item_count

    @property
    def minimum_subtotal(self):
        """
        Gets the minimum_subtotal of this Customer.
        Minimum subtotal

        :return: The minimum_subtotal of this Customer.
        :rtype: float
        """
        return self._minimum_subtotal

    @minimum_subtotal.setter
    def minimum_subtotal(self, minimum_subtotal):
        """
        Sets the minimum_subtotal of this Customer.
        Minimum subtotal

        :param minimum_subtotal: The minimum_subtotal of this Customer.
        :type: float
        """

        self._minimum_subtotal = minimum_subtotal

    @property
    def no_coupons(self):
        """
        Gets the no_coupons of this Customer.
        No coupons

        :return: The no_coupons of this Customer.
        :rtype: bool
        """
        return self._no_coupons

    @no_coupons.setter
    def no_coupons(self, no_coupons):
        """
        Sets the no_coupons of this Customer.
        No coupons

        :param no_coupons: The no_coupons of this Customer.
        :type: bool
        """

        self._no_coupons = no_coupons

    @property
    def no_free_shipping(self):
        """
        Gets the no_free_shipping of this Customer.
        No free shipping regardless of coupons or item level settings

        :return: The no_free_shipping of this Customer.
        :rtype: bool
        """
        return self._no_free_shipping

    @no_free_shipping.setter
    def no_free_shipping(self, no_free_shipping):
        """
        Sets the no_free_shipping of this Customer.
        No free shipping regardless of coupons or item level settings

        :param no_free_shipping: The no_free_shipping of this Customer.
        :type: bool
        """

        self._no_free_shipping = no_free_shipping

    @property
    def no_realtime_charge(self):
        """
        Gets the no_realtime_charge of this Customer.
        No realtime charge

        :return: The no_realtime_charge of this Customer.
        :rtype: bool
        """
        return self._no_realtime_charge

    @no_realtime_charge.setter
    def no_realtime_charge(self, no_realtime_charge):
        """
        Sets the no_realtime_charge of this Customer.
        No realtime charge

        :param no_realtime_charge: The no_realtime_charge of this Customer.
        :type: bool
        """

        self._no_realtime_charge = no_realtime_charge

    @property
    def password(self):
        """
        Gets the password of this Customer.
        Password (may only be set, never read)

        :return: The password of this Customer.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """
        Sets the password of this Customer.
        Password (may only be set, never read)

        :param password: The password of this Customer.
        :type: str
        """

        if not password:
            raise ValueError("Invalid value for `password`, must not be `None`")
        if len(password) > 30:
            raise ValueError("Invalid value for `password`, length must be less than `30`")

        self._password = password

    @property
    def pricing_tiers(self):
        """
        Gets the pricing_tiers of this Customer.
        Pricing tiers for this customer

        :return: The pricing_tiers of this Customer.
        :rtype: list[CustomerPricingTier]
        """
        return self._pricing_tiers

    @pricing_tiers.setter
    def pricing_tiers(self, pricing_tiers):
        """
        Sets the pricing_tiers of this Customer.
        Pricing tiers for this customer

        :param pricing_tiers: The pricing_tiers of this Customer.
        :type: list[CustomerPricingTier]
        """

        self._pricing_tiers = pricing_tiers

    @property
    def qb_class(self):
        """
        Gets the qb_class of this Customer.
        QuickBooks class to import this customer as

        :return: The qb_class of this Customer.
        :rtype: str
        """
        return self._qb_class

    @qb_class.setter
    def qb_class(self, qb_class):
        """
        Sets the qb_class of this Customer.
        QuickBooks class to import this customer as

        :param qb_class: The qb_class of this Customer.
        :type: str
        """

        self._qb_class = qb_class

    @property
    def qb_code(self):
        """
        Gets the qb_code of this Customer.
        QuickBooks name to import this customer as

        :return: The qb_code of this Customer.
        :rtype: str
        """
        return self._qb_code

    @qb_code.setter
    def qb_code(self, qb_code):
        """
        Sets the qb_code of this Customer.
        QuickBooks name to import this customer as

        :param qb_code: The qb_code of this Customer.
        :type: str
        """

        self._qb_code = qb_code

    @property
    def referral_source(self):
        """
        Gets the referral_source of this Customer.
        Referral Source

        :return: The referral_source of this Customer.
        :rtype: str
        """
        return self._referral_source

    @referral_source.setter
    def referral_source(self, referral_source):
        """
        Sets the referral_source of this Customer.
        Referral Source

        :param referral_source: The referral_source of this Customer.
        :type: str
        """

        if not referral_source:
            raise ValueError("Invalid value for `referral_source`, must not be `None`")
        if len(referral_source) > 50:
            raise ValueError("Invalid value for `referral_source`, length must be less than `50`")

        self._referral_source = referral_source

    @property
    def sales_rep_code(self):
        """
        Gets the sales_rep_code of this Customer.
        Sales rep code

        :return: The sales_rep_code of this Customer.
        :rtype: str
        """
        return self._sales_rep_code

    @sales_rep_code.setter
    def sales_rep_code(self, sales_rep_code):
        """
        Sets the sales_rep_code of this Customer.
        Sales rep code

        :param sales_rep_code: The sales_rep_code of this Customer.
        :type: str
        """

        if not sales_rep_code:
            raise ValueError("Invalid value for `sales_rep_code`, must not be `None`")
        if len(sales_rep_code) > 10:
            raise ValueError("Invalid value for `sales_rep_code`, length must be less than `10`")

        self._sales_rep_code = sales_rep_code

    @property
    def send_signup_notification(self):
        """
        Gets the send_signup_notification of this Customer.
        Send signup notification, if true during customer creation, will send a notification.

        :return: The send_signup_notification of this Customer.
        :rtype: bool
        """
        return self._send_signup_notification

    @send_signup_notification.setter
    def send_signup_notification(self, send_signup_notification):
        """
        Sets the send_signup_notification of this Customer.
        Send signup notification, if true during customer creation, will send a notification.

        :param send_signup_notification: The send_signup_notification of this Customer.
        :type: bool
        """

        self._send_signup_notification = send_signup_notification

    @property
    def shipping(self):
        """
        Gets the shipping of this Customer.
        Shipping addresses for this customer

        :return: The shipping of this Customer.
        :rtype: list[CustomerShipping]
        """
        return self._shipping

    @shipping.setter
    def shipping(self, shipping):
        """
        Sets the shipping of this Customer.
        Shipping addresses for this customer

        :param shipping: The shipping of this Customer.
        :type: list[CustomerShipping]
        """

        self._shipping = shipping

    @property
    def signup_dts(self):
        """
        Gets the signup_dts of this Customer.
        Signup date

        :return: The signup_dts of this Customer.
        :rtype: str
        """
        return self._signup_dts

    @signup_dts.setter
    def signup_dts(self, signup_dts):
        """
        Sets the signup_dts of this Customer.
        Signup date

        :param signup_dts: The signup_dts of this Customer.
        :type: str
        """

        self._signup_dts = signup_dts

    @property
    def suppress_buysafe(self):
        """
        Gets the suppress_buysafe of this Customer.
        Suppress buySAFE

        :return: The suppress_buysafe of this Customer.
        :rtype: bool
        """
        return self._suppress_buysafe

    @suppress_buysafe.setter
    def suppress_buysafe(self, suppress_buysafe):
        """
        Sets the suppress_buysafe of this Customer.
        Suppress buySAFE

        :param suppress_buysafe: The suppress_buysafe of this Customer.
        :type: bool
        """

        self._suppress_buysafe = suppress_buysafe

    @property
    def tax_exempt(self):
        """
        Gets the tax_exempt of this Customer.
        True if the customer is tax exempt

        :return: The tax_exempt of this Customer.
        :rtype: bool
        """
        return self._tax_exempt

    @tax_exempt.setter
    def tax_exempt(self, tax_exempt):
        """
        Sets the tax_exempt of this Customer.
        True if the customer is tax exempt

        :param tax_exempt: The tax_exempt of this Customer.
        :type: bool
        """

        self._tax_exempt = tax_exempt

    @property
    def tax_id(self):
        """
        Gets the tax_id of this Customer.
        Tax ID

        :return: The tax_id of this Customer.
        :rtype: str
        """
        return self._tax_id

    @tax_id.setter
    def tax_id(self, tax_id):
        """
        Sets the tax_id of this Customer.
        Tax ID

        :param tax_id: The tax_id of this Customer.
        :type: str
        """

        if not tax_id:
            raise ValueError("Invalid value for `tax_id`, must not be `None`")
        if len(tax_id) > 15:
            raise ValueError("Invalid value for `tax_id`, length must be less than `15`")

        self._tax_id = tax_id

    @property
    def terms(self):
        """
        Gets the terms of this Customer.
        Terms for this customer

        :return: The terms of this Customer.
        :rtype: str
        """
        return self._terms

    @terms.setter
    def terms(self, terms):
        """
        Sets the terms of this Customer.
        Terms for this customer

        :param terms: The terms of this Customer.
        :type: str
        """

        self._terms = terms

    @property
    def track_separately(self):
        """
        Gets the track_separately of this Customer.
        True if the customer should be tracked separately in QuickBooks

        :return: The track_separately of this Customer.
        :rtype: bool
        """
        return self._track_separately

    @track_separately.setter
    def track_separately(self, track_separately):
        """
        Sets the track_separately of this Customer.
        True if the customer should be tracked separately in QuickBooks

        :param track_separately: The track_separately of this Customer.
        :type: bool
        """

        self._track_separately = track_separately

    @property
    def unapproved(self):
        """
        Gets the unapproved of this Customer.
        Unapproved

        :return: The unapproved of this Customer.
        :rtype: bool
        """
        return self._unapproved

    @unapproved.setter
    def unapproved(self, unapproved):
        """
        Sets the unapproved of this Customer.
        Unapproved

        :param unapproved: The unapproved of this Customer.
        :type: bool
        """

        self._unapproved = unapproved

    @property
    def ups_account_number(self):
        """
        Gets the ups_account_number of this Customer.
        UPS account number

        :return: The ups_account_number of this Customer.
        :rtype: str
        """
        return self._ups_account_number

    @ups_account_number.setter
    def ups_account_number(self, ups_account_number):
        """
        Sets the ups_account_number of this Customer.
        UPS account number

        :param ups_account_number: The ups_account_number of this Customer.
        :type: str
        """

        if not ups_account_number:
            raise ValueError("Invalid value for `ups_account_number`, must not be `None`")
        if len(ups_account_number) > 20:
            raise ValueError("Invalid value for `ups_account_number`, length must be less than `20`")

        self._ups_account_number = ups_account_number

    @property
    def website_url(self):
        """
        Gets the website_url of this Customer.
        Website url

        :return: The website_url of this Customer.
        :rtype: str
        """
        return self._website_url

    @website_url.setter
    def website_url(self, website_url):
        """
        Sets the website_url of this Customer.
        Website url

        :param website_url: The website_url of this Customer.
        :type: str
        """

        if not website_url:
            raise ValueError("Invalid value for `website_url`, must not be `None`")
        if len(website_url) > 100:
            raise ValueError("Invalid value for `website_url`, length must be less than `100`")

        self._website_url = website_url

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
