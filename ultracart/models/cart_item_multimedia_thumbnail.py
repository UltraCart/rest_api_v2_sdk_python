# coding: utf-8

"""
    UltraCart Rest API V2

    This is the next generation UltraCart REST API...

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class CartItemMultimediaThumbnail(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, height=None, png=None, square=None, url=None, width=None):
        """
        CartItemMultimediaThumbnail - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'height': 'int',
            'png': 'bool',
            'square': 'bool',
            'url': 'str',
            'width': 'int'
        }

        self.attribute_map = {
            'height': 'height',
            'png': 'png',
            'square': 'square',
            'url': 'url',
            'width': 'width'
        }

        self._height = height
        self._png = png
        self._square = square
        self._url = url
        self._width = width

    @property
    def height(self):
        """
        Gets the height of this CartItemMultimediaThumbnail.
        Height in pixels

        :return: The height of this CartItemMultimediaThumbnail.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """
        Sets the height of this CartItemMultimediaThumbnail.
        Height in pixels

        :param height: The height of this CartItemMultimediaThumbnail.
        :type: int
        """

        self._height = height

    @property
    def png(self):
        """
        Gets the png of this CartItemMultimediaThumbnail.
        True if thumbnail is a PNG, otherwise its a JPEG

        :return: The png of this CartItemMultimediaThumbnail.
        :rtype: bool
        """
        return self._png

    @png.setter
    def png(self, png):
        """
        Sets the png of this CartItemMultimediaThumbnail.
        True if thumbnail is a PNG, otherwise its a JPEG

        :param png: The png of this CartItemMultimediaThumbnail.
        :type: bool
        """

        self._png = png

    @property
    def square(self):
        """
        Gets the square of this CartItemMultimediaThumbnail.
        True if the thumbnail is square

        :return: The square of this CartItemMultimediaThumbnail.
        :rtype: bool
        """
        return self._square

    @square.setter
    def square(self, square):
        """
        Sets the square of this CartItemMultimediaThumbnail.
        True if the thumbnail is square

        :param square: The square of this CartItemMultimediaThumbnail.
        :type: bool
        """

        self._square = square

    @property
    def url(self):
        """
        Gets the url of this CartItemMultimediaThumbnail.
        URL for the thumbnail

        :return: The url of this CartItemMultimediaThumbnail.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this CartItemMultimediaThumbnail.
        URL for the thumbnail

        :param url: The url of this CartItemMultimediaThumbnail.
        :type: str
        """

        self._url = url

    @property
    def width(self):
        """
        Gets the width of this CartItemMultimediaThumbnail.
        Width in pixels

        :return: The width of this CartItemMultimediaThumbnail.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """
        Sets the width of this CartItemMultimediaThumbnail.
        Width in pixels

        :param width: The width of this CartItemMultimediaThumbnail.
        :type: int
        """

        self._width = width

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
