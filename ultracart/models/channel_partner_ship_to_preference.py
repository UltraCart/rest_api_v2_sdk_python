# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ChannelPartnerShipToPreference(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'additional_kit_component_item_ids': 'list[str]',
        'channel_partner_oid': 'int',
        'channel_partner_ship_to_preference_oid': 'int',
        'merchant_id': 'str',
        'return_policy': 'str',
        'ship_to_edi_code': 'str'
    }

    attribute_map = {
        'additional_kit_component_item_ids': 'additional_kit_component_item_ids',
        'channel_partner_oid': 'channel_partner_oid',
        'channel_partner_ship_to_preference_oid': 'channel_partner_ship_to_preference_oid',
        'merchant_id': 'merchant_id',
        'return_policy': 'return_policy',
        'ship_to_edi_code': 'ship_to_edi_code'
    }

    def __init__(self, additional_kit_component_item_ids=None, channel_partner_oid=None, channel_partner_ship_to_preference_oid=None, merchant_id=None, return_policy=None, ship_to_edi_code=None):  # noqa: E501
        """ChannelPartnerShipToPreference - a model defined in Swagger"""  # noqa: E501

        self._additional_kit_component_item_ids = None
        self._channel_partner_oid = None
        self._channel_partner_ship_to_preference_oid = None
        self._merchant_id = None
        self._return_policy = None
        self._ship_to_edi_code = None
        self.discriminator = None

        if additional_kit_component_item_ids is not None:
            self.additional_kit_component_item_ids = additional_kit_component_item_ids
        if channel_partner_oid is not None:
            self.channel_partner_oid = channel_partner_oid
        if channel_partner_ship_to_preference_oid is not None:
            self.channel_partner_ship_to_preference_oid = channel_partner_ship_to_preference_oid
        if merchant_id is not None:
            self.merchant_id = merchant_id
        if return_policy is not None:
            self.return_policy = return_policy
        if ship_to_edi_code is not None:
            self.ship_to_edi_code = ship_to_edi_code

    @property
    def additional_kit_component_item_ids(self):
        """Gets the additional_kit_component_item_ids of this ChannelPartnerShipToPreference.  # noqa: E501

        Additional item ids to add as kit components to the order with a zero price.  # noqa: E501

        :return: The additional_kit_component_item_ids of this ChannelPartnerShipToPreference.  # noqa: E501
        :rtype: list[str]
        """
        return self._additional_kit_component_item_ids

    @additional_kit_component_item_ids.setter
    def additional_kit_component_item_ids(self, additional_kit_component_item_ids):
        """Sets the additional_kit_component_item_ids of this ChannelPartnerShipToPreference.

        Additional item ids to add as kit components to the order with a zero price.  # noqa: E501

        :param additional_kit_component_item_ids: The additional_kit_component_item_ids of this ChannelPartnerShipToPreference.  # noqa: E501
        :type: list[str]
        """

        self._additional_kit_component_item_ids = additional_kit_component_item_ids

    @property
    def channel_partner_oid(self):
        """Gets the channel_partner_oid of this ChannelPartnerShipToPreference.  # noqa: E501

        The channel partner object identifier this preference is associated with  # noqa: E501

        :return: The channel_partner_oid of this ChannelPartnerShipToPreference.  # noqa: E501
        :rtype: int
        """
        return self._channel_partner_oid

    @channel_partner_oid.setter
    def channel_partner_oid(self, channel_partner_oid):
        """Sets the channel_partner_oid of this ChannelPartnerShipToPreference.

        The channel partner object identifier this preference is associated with  # noqa: E501

        :param channel_partner_oid: The channel_partner_oid of this ChannelPartnerShipToPreference.  # noqa: E501
        :type: int
        """

        self._channel_partner_oid = channel_partner_oid

    @property
    def channel_partner_ship_to_preference_oid(self):
        """Gets the channel_partner_ship_to_preference_oid of this ChannelPartnerShipToPreference.  # noqa: E501

        Object identifier for the ship to preference  # noqa: E501

        :return: The channel_partner_ship_to_preference_oid of this ChannelPartnerShipToPreference.  # noqa: E501
        :rtype: int
        """
        return self._channel_partner_ship_to_preference_oid

    @channel_partner_ship_to_preference_oid.setter
    def channel_partner_ship_to_preference_oid(self, channel_partner_ship_to_preference_oid):
        """Sets the channel_partner_ship_to_preference_oid of this ChannelPartnerShipToPreference.

        Object identifier for the ship to preference  # noqa: E501

        :param channel_partner_ship_to_preference_oid: The channel_partner_ship_to_preference_oid of this ChannelPartnerShipToPreference.  # noqa: E501
        :type: int
        """

        self._channel_partner_ship_to_preference_oid = channel_partner_ship_to_preference_oid

    @property
    def merchant_id(self):
        """Gets the merchant_id of this ChannelPartnerShipToPreference.  # noqa: E501

        The merchant id that owns the channel partner  # noqa: E501

        :return: The merchant_id of this ChannelPartnerShipToPreference.  # noqa: E501
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this ChannelPartnerShipToPreference.

        The merchant id that owns the channel partner  # noqa: E501

        :param merchant_id: The merchant_id of this ChannelPartnerShipToPreference.  # noqa: E501
        :type: str
        """

        self._merchant_id = merchant_id

    @property
    def return_policy(self):
        """Gets the return_policy of this ChannelPartnerShipToPreference.  # noqa: E501

        Alternate return policy to print on the packing slip.  # noqa: E501

        :return: The return_policy of this ChannelPartnerShipToPreference.  # noqa: E501
        :rtype: str
        """
        return self._return_policy

    @return_policy.setter
    def return_policy(self, return_policy):
        """Sets the return_policy of this ChannelPartnerShipToPreference.

        Alternate return policy to print on the packing slip.  # noqa: E501

        :param return_policy: The return_policy of this ChannelPartnerShipToPreference.  # noqa: E501
        :type: str
        """

        self._return_policy = return_policy

    @property
    def ship_to_edi_code(self):
        """Gets the ship_to_edi_code of this ChannelPartnerShipToPreference.  # noqa: E501

        The ship to EDI code that the preferences are for  # noqa: E501

        :return: The ship_to_edi_code of this ChannelPartnerShipToPreference.  # noqa: E501
        :rtype: str
        """
        return self._ship_to_edi_code

    @ship_to_edi_code.setter
    def ship_to_edi_code(self, ship_to_edi_code):
        """Sets the ship_to_edi_code of this ChannelPartnerShipToPreference.

        The ship to EDI code that the preferences are for  # noqa: E501

        :param ship_to_edi_code: The ship_to_edi_code of this ChannelPartnerShipToPreference.  # noqa: E501
        :type: str
        """

        self._ship_to_edi_code = ship_to_edi_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChannelPartnerShipToPreference, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChannelPartnerShipToPreference):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
