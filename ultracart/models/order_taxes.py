# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class OrderTaxes(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tax_city_accounting_code': 'str',
        'tax_country_accounting_code': 'str',
        'tax_county': 'str',
        'tax_county_accounting_code': 'str',
        'tax_postal_code_accounting_code': 'str',
        'tax_rate': 'float',
        'tax_rate_city': 'float',
        'tax_rate_country': 'float',
        'tax_rate_county': 'float',
        'tax_rate_postal_code': 'float',
        'tax_rate_state': 'float',
        'tax_state_accounting_code': 'str'
    }

    attribute_map = {
        'tax_city_accounting_code': 'tax_city_accounting_code',
        'tax_country_accounting_code': 'tax_country_accounting_code',
        'tax_county': 'tax_county',
        'tax_county_accounting_code': 'tax_county_accounting_code',
        'tax_postal_code_accounting_code': 'tax_postal_code_accounting_code',
        'tax_rate': 'tax_rate',
        'tax_rate_city': 'tax_rate_city',
        'tax_rate_country': 'tax_rate_country',
        'tax_rate_county': 'tax_rate_county',
        'tax_rate_postal_code': 'tax_rate_postal_code',
        'tax_rate_state': 'tax_rate_state',
        'tax_state_accounting_code': 'tax_state_accounting_code'
    }

    def __init__(self, tax_city_accounting_code=None, tax_country_accounting_code=None, tax_county=None, tax_county_accounting_code=None, tax_postal_code_accounting_code=None, tax_rate=None, tax_rate_city=None, tax_rate_country=None, tax_rate_county=None, tax_rate_postal_code=None, tax_rate_state=None, tax_state_accounting_code=None):
        """
        OrderTaxes - a model defined in Swagger
        """

        self._tax_city_accounting_code = None
        self._tax_country_accounting_code = None
        self._tax_county = None
        self._tax_county_accounting_code = None
        self._tax_postal_code_accounting_code = None
        self._tax_rate = None
        self._tax_rate_city = None
        self._tax_rate_country = None
        self._tax_rate_county = None
        self._tax_rate_postal_code = None
        self._tax_rate_state = None
        self._tax_state_accounting_code = None
        self.discriminator = None

        if tax_city_accounting_code is not None:
          self.tax_city_accounting_code = tax_city_accounting_code
        if tax_country_accounting_code is not None:
          self.tax_country_accounting_code = tax_country_accounting_code
        if tax_county is not None:
          self.tax_county = tax_county
        if tax_county_accounting_code is not None:
          self.tax_county_accounting_code = tax_county_accounting_code
        if tax_postal_code_accounting_code is not None:
          self.tax_postal_code_accounting_code = tax_postal_code_accounting_code
        if tax_rate is not None:
          self.tax_rate = tax_rate
        if tax_rate_city is not None:
          self.tax_rate_city = tax_rate_city
        if tax_rate_country is not None:
          self.tax_rate_country = tax_rate_country
        if tax_rate_county is not None:
          self.tax_rate_county = tax_rate_county
        if tax_rate_postal_code is not None:
          self.tax_rate_postal_code = tax_rate_postal_code
        if tax_rate_state is not None:
          self.tax_rate_state = tax_rate_state
        if tax_state_accounting_code is not None:
          self.tax_state_accounting_code = tax_state_accounting_code

    @property
    def tax_city_accounting_code(self):
        """
        Gets the tax_city_accounting_code of this OrderTaxes.
        QuickBooks tax city code

        :return: The tax_city_accounting_code of this OrderTaxes.
        :rtype: str
        """
        return self._tax_city_accounting_code

    @tax_city_accounting_code.setter
    def tax_city_accounting_code(self, tax_city_accounting_code):
        """
        Sets the tax_city_accounting_code of this OrderTaxes.
        QuickBooks tax city code

        :param tax_city_accounting_code: The tax_city_accounting_code of this OrderTaxes.
        :type: str
        """

        self._tax_city_accounting_code = tax_city_accounting_code

    @property
    def tax_country_accounting_code(self):
        """
        Gets the tax_country_accounting_code of this OrderTaxes.
        QuickBooks tax country code

        :return: The tax_country_accounting_code of this OrderTaxes.
        :rtype: str
        """
        return self._tax_country_accounting_code

    @tax_country_accounting_code.setter
    def tax_country_accounting_code(self, tax_country_accounting_code):
        """
        Sets the tax_country_accounting_code of this OrderTaxes.
        QuickBooks tax country code

        :param tax_country_accounting_code: The tax_country_accounting_code of this OrderTaxes.
        :type: str
        """

        self._tax_country_accounting_code = tax_country_accounting_code

    @property
    def tax_county(self):
        """
        Gets the tax_county of this OrderTaxes.
        County used for tax calculation purposes (only in the United States)

        :return: The tax_county of this OrderTaxes.
        :rtype: str
        """
        return self._tax_county

    @tax_county.setter
    def tax_county(self, tax_county):
        """
        Sets the tax_county of this OrderTaxes.
        County used for tax calculation purposes (only in the United States)

        :param tax_county: The tax_county of this OrderTaxes.
        :type: str
        """
        if tax_county is not None and len(tax_county) > 32:
            raise ValueError("Invalid value for `tax_county`, length must be less than or equal to `32`")

        self._tax_county = tax_county

    @property
    def tax_county_accounting_code(self):
        """
        Gets the tax_county_accounting_code of this OrderTaxes.
        QuickBooks tax county code

        :return: The tax_county_accounting_code of this OrderTaxes.
        :rtype: str
        """
        return self._tax_county_accounting_code

    @tax_county_accounting_code.setter
    def tax_county_accounting_code(self, tax_county_accounting_code):
        """
        Sets the tax_county_accounting_code of this OrderTaxes.
        QuickBooks tax county code

        :param tax_county_accounting_code: The tax_county_accounting_code of this OrderTaxes.
        :type: str
        """

        self._tax_county_accounting_code = tax_county_accounting_code

    @property
    def tax_postal_code_accounting_code(self):
        """
        Gets the tax_postal_code_accounting_code of this OrderTaxes.
        QuickBooks tax postal code code

        :return: The tax_postal_code_accounting_code of this OrderTaxes.
        :rtype: str
        """
        return self._tax_postal_code_accounting_code

    @tax_postal_code_accounting_code.setter
    def tax_postal_code_accounting_code(self, tax_postal_code_accounting_code):
        """
        Sets the tax_postal_code_accounting_code of this OrderTaxes.
        QuickBooks tax postal code code

        :param tax_postal_code_accounting_code: The tax_postal_code_accounting_code of this OrderTaxes.
        :type: str
        """

        self._tax_postal_code_accounting_code = tax_postal_code_accounting_code

    @property
    def tax_rate(self):
        """
        Gets the tax_rate of this OrderTaxes.
        Tax rate

        :return: The tax_rate of this OrderTaxes.
        :rtype: float
        """
        return self._tax_rate

    @tax_rate.setter
    def tax_rate(self, tax_rate):
        """
        Sets the tax_rate of this OrderTaxes.
        Tax rate

        :param tax_rate: The tax_rate of this OrderTaxes.
        :type: float
        """

        self._tax_rate = tax_rate

    @property
    def tax_rate_city(self):
        """
        Gets the tax_rate_city of this OrderTaxes.
        Tax rate at the city level

        :return: The tax_rate_city of this OrderTaxes.
        :rtype: float
        """
        return self._tax_rate_city

    @tax_rate_city.setter
    def tax_rate_city(self, tax_rate_city):
        """
        Sets the tax_rate_city of this OrderTaxes.
        Tax rate at the city level

        :param tax_rate_city: The tax_rate_city of this OrderTaxes.
        :type: float
        """

        self._tax_rate_city = tax_rate_city

    @property
    def tax_rate_country(self):
        """
        Gets the tax_rate_country of this OrderTaxes.
        Tax rate at the country level

        :return: The tax_rate_country of this OrderTaxes.
        :rtype: float
        """
        return self._tax_rate_country

    @tax_rate_country.setter
    def tax_rate_country(self, tax_rate_country):
        """
        Sets the tax_rate_country of this OrderTaxes.
        Tax rate at the country level

        :param tax_rate_country: The tax_rate_country of this OrderTaxes.
        :type: float
        """

        self._tax_rate_country = tax_rate_country

    @property
    def tax_rate_county(self):
        """
        Gets the tax_rate_county of this OrderTaxes.
        Tax rate at the county level

        :return: The tax_rate_county of this OrderTaxes.
        :rtype: float
        """
        return self._tax_rate_county

    @tax_rate_county.setter
    def tax_rate_county(self, tax_rate_county):
        """
        Sets the tax_rate_county of this OrderTaxes.
        Tax rate at the county level

        :param tax_rate_county: The tax_rate_county of this OrderTaxes.
        :type: float
        """

        self._tax_rate_county = tax_rate_county

    @property
    def tax_rate_postal_code(self):
        """
        Gets the tax_rate_postal_code of this OrderTaxes.
        Tax rate at the postal code level

        :return: The tax_rate_postal_code of this OrderTaxes.
        :rtype: float
        """
        return self._tax_rate_postal_code

    @tax_rate_postal_code.setter
    def tax_rate_postal_code(self, tax_rate_postal_code):
        """
        Sets the tax_rate_postal_code of this OrderTaxes.
        Tax rate at the postal code level

        :param tax_rate_postal_code: The tax_rate_postal_code of this OrderTaxes.
        :type: float
        """

        self._tax_rate_postal_code = tax_rate_postal_code

    @property
    def tax_rate_state(self):
        """
        Gets the tax_rate_state of this OrderTaxes.
        Tax rate at the state level

        :return: The tax_rate_state of this OrderTaxes.
        :rtype: float
        """
        return self._tax_rate_state

    @tax_rate_state.setter
    def tax_rate_state(self, tax_rate_state):
        """
        Sets the tax_rate_state of this OrderTaxes.
        Tax rate at the state level

        :param tax_rate_state: The tax_rate_state of this OrderTaxes.
        :type: float
        """

        self._tax_rate_state = tax_rate_state

    @property
    def tax_state_accounting_code(self):
        """
        Gets the tax_state_accounting_code of this OrderTaxes.
        QuickBOoks tax state code

        :return: The tax_state_accounting_code of this OrderTaxes.
        :rtype: str
        """
        return self._tax_state_accounting_code

    @tax_state_accounting_code.setter
    def tax_state_accounting_code(self, tax_state_accounting_code):
        """
        Sets the tax_state_accounting_code of this OrderTaxes.
        QuickBOoks tax state code

        :param tax_state_accounting_code: The tax_state_accounting_code of this OrderTaxes.
        :type: str
        """

        self._tax_state_accounting_code = tax_state_accounting_code

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, OrderTaxes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
