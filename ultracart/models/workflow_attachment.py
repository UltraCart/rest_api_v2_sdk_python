# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class WorkflowAttachment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'download_key': 'str',
        'file_name': 'str',
        'file_uuid': 'str',
        'mime_type': 'str',
        'upload_key': 'str'
    }

    attribute_map = {
        'download_key': 'download_key',
        'file_name': 'file_name',
        'file_uuid': 'file_uuid',
        'mime_type': 'mime_type',
        'upload_key': 'upload_key'
    }

    def __init__(self, download_key=None, file_name=None, file_uuid=None, mime_type=None, upload_key=None):  # noqa: E501
        """WorkflowAttachment - a model defined in Swagger"""  # noqa: E501

        self._download_key = None
        self._file_name = None
        self._file_uuid = None
        self._mime_type = None
        self._upload_key = None
        self.discriminator = None

        if download_key is not None:
            self.download_key = download_key
        if file_name is not None:
            self.file_name = file_name
        if file_uuid is not None:
            self.file_uuid = file_uuid
        if mime_type is not None:
            self.mime_type = mime_type
        if upload_key is not None:
            self.upload_key = upload_key

    @property
    def download_key(self):
        """Gets the download_key of this WorkflowAttachment.  # noqa: E501

        Temporary download URL  # noqa: E501

        :return: The download_key of this WorkflowAttachment.  # noqa: E501
        :rtype: str
        """
        return self._download_key

    @download_key.setter
    def download_key(self, download_key):
        """Sets the download_key of this WorkflowAttachment.

        Temporary download URL  # noqa: E501

        :param download_key: The download_key of this WorkflowAttachment.  # noqa: E501
        :type: str
        """

        self._download_key = download_key

    @property
    def file_name(self):
        """Gets the file_name of this WorkflowAttachment.  # noqa: E501

        File name  # noqa: E501

        :return: The file_name of this WorkflowAttachment.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this WorkflowAttachment.

        File name  # noqa: E501

        :param file_name: The file_name of this WorkflowAttachment.  # noqa: E501
        :type: str
        """

        self._file_name = file_name

    @property
    def file_uuid(self):
        """Gets the file_uuid of this WorkflowAttachment.  # noqa: E501

        File UUID  # noqa: E501

        :return: The file_uuid of this WorkflowAttachment.  # noqa: E501
        :rtype: str
        """
        return self._file_uuid

    @file_uuid.setter
    def file_uuid(self, file_uuid):
        """Sets the file_uuid of this WorkflowAttachment.

        File UUID  # noqa: E501

        :param file_uuid: The file_uuid of this WorkflowAttachment.  # noqa: E501
        :type: str
        """

        self._file_uuid = file_uuid

    @property
    def mime_type(self):
        """Gets the mime_type of this WorkflowAttachment.  # noqa: E501

        Mime Type  # noqa: E501

        :return: The mime_type of this WorkflowAttachment.  # noqa: E501
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this WorkflowAttachment.

        Mime Type  # noqa: E501

        :param mime_type: The mime_type of this WorkflowAttachment.  # noqa: E501
        :type: str
        """

        self._mime_type = mime_type

    @property
    def upload_key(self):
        """Gets the upload_key of this WorkflowAttachment.  # noqa: E501

        Temporary upload key  # noqa: E501

        :return: The upload_key of this WorkflowAttachment.  # noqa: E501
        :rtype: str
        """
        return self._upload_key

    @upload_key.setter
    def upload_key(self, upload_key):
        """Sets the upload_key of this WorkflowAttachment.

        Temporary upload key  # noqa: E501

        :param upload_key: The upload_key of this WorkflowAttachment.  # noqa: E501
        :type: str
        """

        self._upload_key = upload_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WorkflowAttachment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkflowAttachment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
