# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CustomReport(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'chart_javascript': 'str',
        'chart_javascript_url': 'str',
        'data_warehouse_report_config_oid': 'int',
        'dataset_security_level': 'str',
        'group_name': 'str',
        'merchant_id': 'str',
        'name': 'str',
        'parameters': 'list[CustomReportParameter]',
        'queries': 'list[CustomReportQuery]',
        'tooltips': 'list[CustomReportTooltip]'
    }

    attribute_map = {
        'chart_javascript': 'chart_javascript',
        'chart_javascript_url': 'chart_javascript_url',
        'data_warehouse_report_config_oid': 'data_warehouse_report_config_oid',
        'dataset_security_level': 'dataset_security_level',
        'group_name': 'group_name',
        'merchant_id': 'merchant_id',
        'name': 'name',
        'parameters': 'parameters',
        'queries': 'queries',
        'tooltips': 'tooltips'
    }

    def __init__(self, chart_javascript=None, chart_javascript_url=None, data_warehouse_report_config_oid=None, dataset_security_level=None, group_name=None, merchant_id=None, name=None, parameters=None, queries=None, tooltips=None):  # noqa: E501
        """CustomReport - a model defined in Swagger"""  # noqa: E501

        self._chart_javascript = None
        self._chart_javascript_url = None
        self._data_warehouse_report_config_oid = None
        self._dataset_security_level = None
        self._group_name = None
        self._merchant_id = None
        self._name = None
        self._parameters = None
        self._queries = None
        self._tooltips = None
        self.discriminator = None

        if chart_javascript is not None:
            self.chart_javascript = chart_javascript
        if chart_javascript_url is not None:
            self.chart_javascript_url = chart_javascript_url
        if data_warehouse_report_config_oid is not None:
            self.data_warehouse_report_config_oid = data_warehouse_report_config_oid
        if dataset_security_level is not None:
            self.dataset_security_level = dataset_security_level
        if group_name is not None:
            self.group_name = group_name
        if merchant_id is not None:
            self.merchant_id = merchant_id
        if name is not None:
            self.name = name
        if parameters is not None:
            self.parameters = parameters
        if queries is not None:
            self.queries = queries
        if tooltips is not None:
            self.tooltips = tooltips

    @property
    def chart_javascript(self):
        """Gets the chart_javascript of this CustomReport.  # noqa: E501


        :return: The chart_javascript of this CustomReport.  # noqa: E501
        :rtype: str
        """
        return self._chart_javascript

    @chart_javascript.setter
    def chart_javascript(self, chart_javascript):
        """Sets the chart_javascript of this CustomReport.


        :param chart_javascript: The chart_javascript of this CustomReport.  # noqa: E501
        :type: str
        """

        self._chart_javascript = chart_javascript

    @property
    def chart_javascript_url(self):
        """Gets the chart_javascript_url of this CustomReport.  # noqa: E501


        :return: The chart_javascript_url of this CustomReport.  # noqa: E501
        :rtype: str
        """
        return self._chart_javascript_url

    @chart_javascript_url.setter
    def chart_javascript_url(self, chart_javascript_url):
        """Sets the chart_javascript_url of this CustomReport.


        :param chart_javascript_url: The chart_javascript_url of this CustomReport.  # noqa: E501
        :type: str
        """

        self._chart_javascript_url = chart_javascript_url

    @property
    def data_warehouse_report_config_oid(self):
        """Gets the data_warehouse_report_config_oid of this CustomReport.  # noqa: E501


        :return: The data_warehouse_report_config_oid of this CustomReport.  # noqa: E501
        :rtype: int
        """
        return self._data_warehouse_report_config_oid

    @data_warehouse_report_config_oid.setter
    def data_warehouse_report_config_oid(self, data_warehouse_report_config_oid):
        """Sets the data_warehouse_report_config_oid of this CustomReport.


        :param data_warehouse_report_config_oid: The data_warehouse_report_config_oid of this CustomReport.  # noqa: E501
        :type: int
        """

        self._data_warehouse_report_config_oid = data_warehouse_report_config_oid

    @property
    def dataset_security_level(self):
        """Gets the dataset_security_level of this CustomReport.  # noqa: E501


        :return: The dataset_security_level of this CustomReport.  # noqa: E501
        :rtype: str
        """
        return self._dataset_security_level

    @dataset_security_level.setter
    def dataset_security_level(self, dataset_security_level):
        """Sets the dataset_security_level of this CustomReport.


        :param dataset_security_level: The dataset_security_level of this CustomReport.  # noqa: E501
        :type: str
        """

        self._dataset_security_level = dataset_security_level

    @property
    def group_name(self):
        """Gets the group_name of this CustomReport.  # noqa: E501


        :return: The group_name of this CustomReport.  # noqa: E501
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this CustomReport.


        :param group_name: The group_name of this CustomReport.  # noqa: E501
        :type: str
        """

        self._group_name = group_name

    @property
    def merchant_id(self):
        """Gets the merchant_id of this CustomReport.  # noqa: E501


        :return: The merchant_id of this CustomReport.  # noqa: E501
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this CustomReport.


        :param merchant_id: The merchant_id of this CustomReport.  # noqa: E501
        :type: str
        """

        self._merchant_id = merchant_id

    @property
    def name(self):
        """Gets the name of this CustomReport.  # noqa: E501


        :return: The name of this CustomReport.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CustomReport.


        :param name: The name of this CustomReport.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def parameters(self):
        """Gets the parameters of this CustomReport.  # noqa: E501


        :return: The parameters of this CustomReport.  # noqa: E501
        :rtype: list[CustomReportParameter]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this CustomReport.


        :param parameters: The parameters of this CustomReport.  # noqa: E501
        :type: list[CustomReportParameter]
        """

        self._parameters = parameters

    @property
    def queries(self):
        """Gets the queries of this CustomReport.  # noqa: E501


        :return: The queries of this CustomReport.  # noqa: E501
        :rtype: list[CustomReportQuery]
        """
        return self._queries

    @queries.setter
    def queries(self, queries):
        """Sets the queries of this CustomReport.


        :param queries: The queries of this CustomReport.  # noqa: E501
        :type: list[CustomReportQuery]
        """

        self._queries = queries

    @property
    def tooltips(self):
        """Gets the tooltips of this CustomReport.  # noqa: E501


        :return: The tooltips of this CustomReport.  # noqa: E501
        :rtype: list[CustomReportTooltip]
        """
        return self._tooltips

    @tooltips.setter
    def tooltips(self, tooltips):
        """Sets the tooltips of this CustomReport.


        :param tooltips: The tooltips of this CustomReport.  # noqa: E501
        :type: list[CustomReportTooltip]
        """

        self._tooltips = tooltips

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomReport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomReport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
