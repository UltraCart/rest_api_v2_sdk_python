# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OrderQueryBatch(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'order_ids': 'list[str]',
        'query_target': 'str'
    }

    attribute_map = {
        'order_ids': 'order_ids',
        'query_target': 'query_target'
    }

    def __init__(self, order_ids=None, query_target=None):  # noqa: E501
        """OrderQueryBatch - a model defined in Swagger"""  # noqa: E501

        self._order_ids = None
        self._query_target = None
        self.discriminator = None

        if order_ids is not None:
            self.order_ids = order_ids
        if query_target is not None:
            self.query_target = query_target

    @property
    def order_ids(self):
        """Gets the order_ids of this OrderQueryBatch.  # noqa: E501

        Order IDs  # noqa: E501

        :return: The order_ids of this OrderQueryBatch.  # noqa: E501
        :rtype: list[str]
        """
        return self._order_ids

    @order_ids.setter
    def order_ids(self, order_ids):
        """Sets the order_ids of this OrderQueryBatch.

        Order IDs  # noqa: E501

        :param order_ids: The order_ids of this OrderQueryBatch.  # noqa: E501
        :type: list[str]
        """

        self._order_ids = order_ids

    @property
    def query_target(self):
        """Gets the query_target of this OrderQueryBatch.  # noqa: E501

        Query Target  # noqa: E501

        :return: The query_target of this OrderQueryBatch.  # noqa: E501
        :rtype: str
        """
        return self._query_target

    @query_target.setter
    def query_target(self, query_target):
        """Sets the query_target of this OrderQueryBatch.

        Query Target  # noqa: E501

        :param query_target: The query_target of this OrderQueryBatch.  # noqa: E501
        :type: str
        """
        allowed_values = ["origin", "cache"]  # noqa: E501
        if query_target not in allowed_values:
            raise ValueError(
                "Invalid value for `query_target` ({0}), must be one of {1}"  # noqa: E501
                .format(query_target, allowed_values)
            )

        self._query_target = query_target

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderQueryBatch, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderQueryBatch):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
