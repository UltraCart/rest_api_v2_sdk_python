# coding: utf-8

"""
    UltraCart Rest API V2

    This is the next generation UltraCart REST API...

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class OrderDigitalOrder(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, creation_dts=None, expiration_dts=None, items=None, url=None, url_id=None):
        """
        OrderDigitalOrder - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'creation_dts': 'str',
            'expiration_dts': 'str',
            'items': 'list[OrderDigitalItem]',
            'url': 'str',
            'url_id': 'str'
        }

        self.attribute_map = {
            'creation_dts': 'creation_dts',
            'expiration_dts': 'expiration_dts',
            'items': 'items',
            'url': 'url',
            'url_id': 'url_id'
        }

        self._creation_dts = creation_dts
        self._expiration_dts = expiration_dts
        self._items = items
        self._url = url
        self._url_id = url_id

    @property
    def creation_dts(self):
        """
        Gets the creation_dts of this OrderDigitalOrder.
        Date/time that the digital order was created

        :return: The creation_dts of this OrderDigitalOrder.
        :rtype: str
        """
        return self._creation_dts

    @creation_dts.setter
    def creation_dts(self, creation_dts):
        """
        Sets the creation_dts of this OrderDigitalOrder.
        Date/time that the digital order was created

        :param creation_dts: The creation_dts of this OrderDigitalOrder.
        :type: str
        """

        self._creation_dts = creation_dts

    @property
    def expiration_dts(self):
        """
        Gets the expiration_dts of this OrderDigitalOrder.
        Expiration date/time of the digital order

        :return: The expiration_dts of this OrderDigitalOrder.
        :rtype: str
        """
        return self._expiration_dts

    @expiration_dts.setter
    def expiration_dts(self, expiration_dts):
        """
        Sets the expiration_dts of this OrderDigitalOrder.
        Expiration date/time of the digital order

        :param expiration_dts: The expiration_dts of this OrderDigitalOrder.
        :type: str
        """

        self._expiration_dts = expiration_dts

    @property
    def items(self):
        """
        Gets the items of this OrderDigitalOrder.
        Digital items associated with the digital order

        :return: The items of this OrderDigitalOrder.
        :rtype: list[OrderDigitalItem]
        """
        return self._items

    @items.setter
    def items(self, items):
        """
        Sets the items of this OrderDigitalOrder.
        Digital items associated with the digital order

        :param items: The items of this OrderDigitalOrder.
        :type: list[OrderDigitalItem]
        """

        self._items = items

    @property
    def url(self):
        """
        Gets the url of this OrderDigitalOrder.
        URL where the customer can go to and download their digital order content

        :return: The url of this OrderDigitalOrder.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this OrderDigitalOrder.
        URL where the customer can go to and download their digital order content

        :param url: The url of this OrderDigitalOrder.
        :type: str
        """

        self._url = url

    @property
    def url_id(self):
        """
        Gets the url_id of this OrderDigitalOrder.
        URL ID is a unique code that is part of the URLs

        :return: The url_id of this OrderDigitalOrder.
        :rtype: str
        """
        return self._url_id

    @url_id.setter
    def url_id(self, url_id):
        """
        Sets the url_id of this OrderDigitalOrder.
        URL ID is a unique code that is part of the URLs

        :param url_id: The url_id of this OrderDigitalOrder.
        :type: str
        """

        self._url_id = url_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
