# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OrderDigitalOrder(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'creation_dts': 'str',
        'expiration_dts': 'str',
        'items': 'list[OrderDigitalItem]',
        'url': 'str',
        'url_id': 'str'
    }

    attribute_map = {
        'creation_dts': 'creation_dts',
        'expiration_dts': 'expiration_dts',
        'items': 'items',
        'url': 'url',
        'url_id': 'url_id'
    }

    def __init__(self, creation_dts=None, expiration_dts=None, items=None, url=None, url_id=None):  # noqa: E501
        """OrderDigitalOrder - a model defined in Swagger"""  # noqa: E501

        self._creation_dts = None
        self._expiration_dts = None
        self._items = None
        self._url = None
        self._url_id = None
        self.discriminator = None

        if creation_dts is not None:
            self.creation_dts = creation_dts
        if expiration_dts is not None:
            self.expiration_dts = expiration_dts
        if items is not None:
            self.items = items
        if url is not None:
            self.url = url
        if url_id is not None:
            self.url_id = url_id

    @property
    def creation_dts(self):
        """Gets the creation_dts of this OrderDigitalOrder.  # noqa: E501

        Date/time that the digital order was created  # noqa: E501

        :return: The creation_dts of this OrderDigitalOrder.  # noqa: E501
        :rtype: str
        """
        return self._creation_dts

    @creation_dts.setter
    def creation_dts(self, creation_dts):
        """Sets the creation_dts of this OrderDigitalOrder.

        Date/time that the digital order was created  # noqa: E501

        :param creation_dts: The creation_dts of this OrderDigitalOrder.  # noqa: E501
        :type: str
        """

        self._creation_dts = creation_dts

    @property
    def expiration_dts(self):
        """Gets the expiration_dts of this OrderDigitalOrder.  # noqa: E501

        Expiration date/time of the digital order  # noqa: E501

        :return: The expiration_dts of this OrderDigitalOrder.  # noqa: E501
        :rtype: str
        """
        return self._expiration_dts

    @expiration_dts.setter
    def expiration_dts(self, expiration_dts):
        """Sets the expiration_dts of this OrderDigitalOrder.

        Expiration date/time of the digital order  # noqa: E501

        :param expiration_dts: The expiration_dts of this OrderDigitalOrder.  # noqa: E501
        :type: str
        """

        self._expiration_dts = expiration_dts

    @property
    def items(self):
        """Gets the items of this OrderDigitalOrder.  # noqa: E501

        Digital items associated with the digital order  # noqa: E501

        :return: The items of this OrderDigitalOrder.  # noqa: E501
        :rtype: list[OrderDigitalItem]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this OrderDigitalOrder.

        Digital items associated with the digital order  # noqa: E501

        :param items: The items of this OrderDigitalOrder.  # noqa: E501
        :type: list[OrderDigitalItem]
        """

        self._items = items

    @property
    def url(self):
        """Gets the url of this OrderDigitalOrder.  # noqa: E501

        URL where the customer can go to and download their digital order content  # noqa: E501

        :return: The url of this OrderDigitalOrder.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this OrderDigitalOrder.

        URL where the customer can go to and download their digital order content  # noqa: E501

        :param url: The url of this OrderDigitalOrder.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def url_id(self):
        """Gets the url_id of this OrderDigitalOrder.  # noqa: E501

        URL ID is a unique code that is part of the URLs  # noqa: E501

        :return: The url_id of this OrderDigitalOrder.  # noqa: E501
        :rtype: str
        """
        return self._url_id

    @url_id.setter
    def url_id(self, url_id):
        """Sets the url_id of this OrderDigitalOrder.

        URL ID is a unique code that is part of the URLs  # noqa: E501

        :param url_id: The url_id of this OrderDigitalOrder.  # noqa: E501
        :type: str
        """

        self._url_id = url_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderDigitalOrder, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderDigitalOrder):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
