# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ItemAutoOrder(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auth_future_amount': 'float',
        'auth_test_amount': 'float',
        'auto_order_cancel_item_id': 'str',
        'auto_order_cancel_item_oid': 'int',
        'auto_order_downgrade_items': 'list[str]',
        'auto_order_paused': 'bool',
        'auto_order_schedules': 'list[str]',
        'auto_order_upgrade_items': 'list[str]',
        'auto_order_upsell': 'bool',
        'auto_order_upsell_no_easy_cancel': 'bool',
        'auto_order_upsell_one_per_customer': 'bool',
        'auto_orderable': 'bool',
        'cancel_other_auto_orders': 'bool',
        'free_shipping_auto_order': 'bool',
        'refund_other_auto_orders': 'bool',
        'steps': 'list[ItemAutoOrderStep]'
    }

    attribute_map = {
        'auth_future_amount': 'auth_future_amount',
        'auth_test_amount': 'auth_test_amount',
        'auto_order_cancel_item_id': 'auto_order_cancel_item_id',
        'auto_order_cancel_item_oid': 'auto_order_cancel_item_oid',
        'auto_order_downgrade_items': 'auto_order_downgrade_items',
        'auto_order_paused': 'auto_order_paused',
        'auto_order_schedules': 'auto_order_schedules',
        'auto_order_upgrade_items': 'auto_order_upgrade_items',
        'auto_order_upsell': 'auto_order_upsell',
        'auto_order_upsell_no_easy_cancel': 'auto_order_upsell_no_easy_cancel',
        'auto_order_upsell_one_per_customer': 'auto_order_upsell_one_per_customer',
        'auto_orderable': 'auto_orderable',
        'cancel_other_auto_orders': 'cancel_other_auto_orders',
        'free_shipping_auto_order': 'free_shipping_auto_order',
        'refund_other_auto_orders': 'refund_other_auto_orders',
        'steps': 'steps'
    }

    def __init__(self, auth_future_amount=None, auth_test_amount=None, auto_order_cancel_item_id=None, auto_order_cancel_item_oid=None, auto_order_downgrade_items=None, auto_order_paused=None, auto_order_schedules=None, auto_order_upgrade_items=None, auto_order_upsell=None, auto_order_upsell_no_easy_cancel=None, auto_order_upsell_one_per_customer=None, auto_orderable=None, cancel_other_auto_orders=None, free_shipping_auto_order=None, refund_other_auto_orders=None, steps=None):  # noqa: E501
        """ItemAutoOrder - a model defined in Swagger"""  # noqa: E501

        self._auth_future_amount = None
        self._auth_test_amount = None
        self._auto_order_cancel_item_id = None
        self._auto_order_cancel_item_oid = None
        self._auto_order_downgrade_items = None
        self._auto_order_paused = None
        self._auto_order_schedules = None
        self._auto_order_upgrade_items = None
        self._auto_order_upsell = None
        self._auto_order_upsell_no_easy_cancel = None
        self._auto_order_upsell_one_per_customer = None
        self._auto_orderable = None
        self._cancel_other_auto_orders = None
        self._free_shipping_auto_order = None
        self._refund_other_auto_orders = None
        self._steps = None
        self.discriminator = None

        if auth_future_amount is not None:
            self.auth_future_amount = auth_future_amount
        if auth_test_amount is not None:
            self.auth_test_amount = auth_test_amount
        if auto_order_cancel_item_id is not None:
            self.auto_order_cancel_item_id = auto_order_cancel_item_id
        if auto_order_cancel_item_oid is not None:
            self.auto_order_cancel_item_oid = auto_order_cancel_item_oid
        if auto_order_downgrade_items is not None:
            self.auto_order_downgrade_items = auto_order_downgrade_items
        if auto_order_paused is not None:
            self.auto_order_paused = auto_order_paused
        if auto_order_schedules is not None:
            self.auto_order_schedules = auto_order_schedules
        if auto_order_upgrade_items is not None:
            self.auto_order_upgrade_items = auto_order_upgrade_items
        if auto_order_upsell is not None:
            self.auto_order_upsell = auto_order_upsell
        if auto_order_upsell_no_easy_cancel is not None:
            self.auto_order_upsell_no_easy_cancel = auto_order_upsell_no_easy_cancel
        if auto_order_upsell_one_per_customer is not None:
            self.auto_order_upsell_one_per_customer = auto_order_upsell_one_per_customer
        if auto_orderable is not None:
            self.auto_orderable = auto_orderable
        if cancel_other_auto_orders is not None:
            self.cancel_other_auto_orders = cancel_other_auto_orders
        if free_shipping_auto_order is not None:
            self.free_shipping_auto_order = free_shipping_auto_order
        if refund_other_auto_orders is not None:
            self.refund_other_auto_orders = refund_other_auto_orders
        if steps is not None:
            self.steps = steps

    @property
    def auth_future_amount(self):
        """Gets the auth_future_amount of this ItemAutoOrder.  # noqa: E501

        Amount to try and authorize for the future rebill  # noqa: E501

        :return: The auth_future_amount of this ItemAutoOrder.  # noqa: E501
        :rtype: float
        """
        return self._auth_future_amount

    @auth_future_amount.setter
    def auth_future_amount(self, auth_future_amount):
        """Sets the auth_future_amount of this ItemAutoOrder.

        Amount to try and authorize for the future rebill  # noqa: E501

        :param auth_future_amount: The auth_future_amount of this ItemAutoOrder.  # noqa: E501
        :type: float
        """

        self._auth_future_amount = auth_future_amount

    @property
    def auth_test_amount(self):
        """Gets the auth_test_amount of this ItemAutoOrder.  # noqa: E501

        Amount to try and test authorize  # noqa: E501

        :return: The auth_test_amount of this ItemAutoOrder.  # noqa: E501
        :rtype: float
        """
        return self._auth_test_amount

    @auth_test_amount.setter
    def auth_test_amount(self, auth_test_amount):
        """Sets the auth_test_amount of this ItemAutoOrder.

        Amount to try and test authorize  # noqa: E501

        :param auth_test_amount: The auth_test_amount of this ItemAutoOrder.  # noqa: E501
        :type: float
        """

        self._auth_test_amount = auth_test_amount

    @property
    def auto_order_cancel_item_id(self):
        """Gets the auto_order_cancel_item_id of this ItemAutoOrder.  # noqa: E501

        Item id to attempt charging the customer for if they cancel  # noqa: E501

        :return: The auto_order_cancel_item_id of this ItemAutoOrder.  # noqa: E501
        :rtype: str
        """
        return self._auto_order_cancel_item_id

    @auto_order_cancel_item_id.setter
    def auto_order_cancel_item_id(self, auto_order_cancel_item_id):
        """Sets the auto_order_cancel_item_id of this ItemAutoOrder.

        Item id to attempt charging the customer for if they cancel  # noqa: E501

        :param auto_order_cancel_item_id: The auto_order_cancel_item_id of this ItemAutoOrder.  # noqa: E501
        :type: str
        """
        if auto_order_cancel_item_id is not None and len(auto_order_cancel_item_id) > 20:
            raise ValueError("Invalid value for `auto_order_cancel_item_id`, length must be less than or equal to `20`")  # noqa: E501

        self._auto_order_cancel_item_id = auto_order_cancel_item_id

    @property
    def auto_order_cancel_item_oid(self):
        """Gets the auto_order_cancel_item_oid of this ItemAutoOrder.  # noqa: E501

        Item object identifier to attempt charging the customer for if they cancel  # noqa: E501

        :return: The auto_order_cancel_item_oid of this ItemAutoOrder.  # noqa: E501
        :rtype: int
        """
        return self._auto_order_cancel_item_oid

    @auto_order_cancel_item_oid.setter
    def auto_order_cancel_item_oid(self, auto_order_cancel_item_oid):
        """Sets the auto_order_cancel_item_oid of this ItemAutoOrder.

        Item object identifier to attempt charging the customer for if they cancel  # noqa: E501

        :param auto_order_cancel_item_oid: The auto_order_cancel_item_oid of this ItemAutoOrder.  # noqa: E501
        :type: int
        """

        self._auto_order_cancel_item_oid = auto_order_cancel_item_oid

    @property
    def auto_order_downgrade_items(self):
        """Gets the auto_order_downgrade_items of this ItemAutoOrder.  # noqa: E501

        List of downgrade items presented to customer service representatives  # noqa: E501

        :return: The auto_order_downgrade_items of this ItemAutoOrder.  # noqa: E501
        :rtype: list[str]
        """
        return self._auto_order_downgrade_items

    @auto_order_downgrade_items.setter
    def auto_order_downgrade_items(self, auto_order_downgrade_items):
        """Sets the auto_order_downgrade_items of this ItemAutoOrder.

        List of downgrade items presented to customer service representatives  # noqa: E501

        :param auto_order_downgrade_items: The auto_order_downgrade_items of this ItemAutoOrder.  # noqa: E501
        :type: list[str]
        """

        self._auto_order_downgrade_items = auto_order_downgrade_items

    @property
    def auto_order_paused(self):
        """Gets the auto_order_paused of this ItemAutoOrder.  # noqa: E501

        True if the rebill processing of this item is paused  # noqa: E501

        :return: The auto_order_paused of this ItemAutoOrder.  # noqa: E501
        :rtype: bool
        """
        return self._auto_order_paused

    @auto_order_paused.setter
    def auto_order_paused(self, auto_order_paused):
        """Sets the auto_order_paused of this ItemAutoOrder.

        True if the rebill processing of this item is paused  # noqa: E501

        :param auto_order_paused: The auto_order_paused of this ItemAutoOrder.  # noqa: E501
        :type: bool
        """

        self._auto_order_paused = auto_order_paused

    @property
    def auto_order_schedules(self):
        """Gets the auto_order_schedules of this ItemAutoOrder.  # noqa: E501

        The user selectable schedules that are available  # noqa: E501

        :return: The auto_order_schedules of this ItemAutoOrder.  # noqa: E501
        :rtype: list[str]
        """
        return self._auto_order_schedules

    @auto_order_schedules.setter
    def auto_order_schedules(self, auto_order_schedules):
        """Sets the auto_order_schedules of this ItemAutoOrder.

        The user selectable schedules that are available  # noqa: E501

        :param auto_order_schedules: The auto_order_schedules of this ItemAutoOrder.  # noqa: E501
        :type: list[str]
        """

        self._auto_order_schedules = auto_order_schedules

    @property
    def auto_order_upgrade_items(self):
        """Gets the auto_order_upgrade_items of this ItemAutoOrder.  # noqa: E501

        List of upgrade items presented to customer service representatives  # noqa: E501

        :return: The auto_order_upgrade_items of this ItemAutoOrder.  # noqa: E501
        :rtype: list[str]
        """
        return self._auto_order_upgrade_items

    @auto_order_upgrade_items.setter
    def auto_order_upgrade_items(self, auto_order_upgrade_items):
        """Sets the auto_order_upgrade_items of this ItemAutoOrder.

        List of upgrade items presented to customer service representatives  # noqa: E501

        :param auto_order_upgrade_items: The auto_order_upgrade_items of this ItemAutoOrder.  # noqa: E501
        :type: list[str]
        """

        self._auto_order_upgrade_items = auto_order_upgrade_items

    @property
    def auto_order_upsell(self):
        """Gets the auto_order_upsell of this ItemAutoOrder.  # noqa: E501

        True if this item uses a fixed upsell step schedule  # noqa: E501

        :return: The auto_order_upsell of this ItemAutoOrder.  # noqa: E501
        :rtype: bool
        """
        return self._auto_order_upsell

    @auto_order_upsell.setter
    def auto_order_upsell(self, auto_order_upsell):
        """Sets the auto_order_upsell of this ItemAutoOrder.

        True if this item uses a fixed upsell step schedule  # noqa: E501

        :param auto_order_upsell: The auto_order_upsell of this ItemAutoOrder.  # noqa: E501
        :type: bool
        """

        self._auto_order_upsell = auto_order_upsell

    @property
    def auto_order_upsell_no_easy_cancel(self):
        """Gets the auto_order_upsell_no_easy_cancel of this ItemAutoOrder.  # noqa: E501

        Do not send the easy cancel email to the customer  # noqa: E501

        :return: The auto_order_upsell_no_easy_cancel of this ItemAutoOrder.  # noqa: E501
        :rtype: bool
        """
        return self._auto_order_upsell_no_easy_cancel

    @auto_order_upsell_no_easy_cancel.setter
    def auto_order_upsell_no_easy_cancel(self, auto_order_upsell_no_easy_cancel):
        """Sets the auto_order_upsell_no_easy_cancel of this ItemAutoOrder.

        Do not send the easy cancel email to the customer  # noqa: E501

        :param auto_order_upsell_no_easy_cancel: The auto_order_upsell_no_easy_cancel of this ItemAutoOrder.  # noqa: E501
        :type: bool
        """

        self._auto_order_upsell_no_easy_cancel = auto_order_upsell_no_easy_cancel

    @property
    def auto_order_upsell_one_per_customer(self):
        """Gets the auto_order_upsell_one_per_customer of this ItemAutoOrder.  # noqa: E501

        Limit the purchase of this item to one per customer  # noqa: E501

        :return: The auto_order_upsell_one_per_customer of this ItemAutoOrder.  # noqa: E501
        :rtype: bool
        """
        return self._auto_order_upsell_one_per_customer

    @auto_order_upsell_one_per_customer.setter
    def auto_order_upsell_one_per_customer(self, auto_order_upsell_one_per_customer):
        """Sets the auto_order_upsell_one_per_customer of this ItemAutoOrder.

        Limit the purchase of this item to one per customer  # noqa: E501

        :param auto_order_upsell_one_per_customer: The auto_order_upsell_one_per_customer of this ItemAutoOrder.  # noqa: E501
        :type: bool
        """

        self._auto_order_upsell_one_per_customer = auto_order_upsell_one_per_customer

    @property
    def auto_orderable(self):
        """Gets the auto_orderable of this ItemAutoOrder.  # noqa: E501

        True if this item can be automatically ordered by the customer  # noqa: E501

        :return: The auto_orderable of this ItemAutoOrder.  # noqa: E501
        :rtype: bool
        """
        return self._auto_orderable

    @auto_orderable.setter
    def auto_orderable(self, auto_orderable):
        """Sets the auto_orderable of this ItemAutoOrder.

        True if this item can be automatically ordered by the customer  # noqa: E501

        :param auto_orderable: The auto_orderable of this ItemAutoOrder.  # noqa: E501
        :type: bool
        """

        self._auto_orderable = auto_orderable

    @property
    def cancel_other_auto_orders(self):
        """Gets the cancel_other_auto_orders of this ItemAutoOrder.  # noqa: E501

        True if other auto orders for this customer should be canceled when this item is ordered  # noqa: E501

        :return: The cancel_other_auto_orders of this ItemAutoOrder.  # noqa: E501
        :rtype: bool
        """
        return self._cancel_other_auto_orders

    @cancel_other_auto_orders.setter
    def cancel_other_auto_orders(self, cancel_other_auto_orders):
        """Sets the cancel_other_auto_orders of this ItemAutoOrder.

        True if other auto orders for this customer should be canceled when this item is ordered  # noqa: E501

        :param cancel_other_auto_orders: The cancel_other_auto_orders of this ItemAutoOrder.  # noqa: E501
        :type: bool
        """

        self._cancel_other_auto_orders = cancel_other_auto_orders

    @property
    def free_shipping_auto_order(self):
        """Gets the free_shipping_auto_order of this ItemAutoOrder.  # noqa: E501

        True if the customer should be given free shipping  # noqa: E501

        :return: The free_shipping_auto_order of this ItemAutoOrder.  # noqa: E501
        :rtype: bool
        """
        return self._free_shipping_auto_order

    @free_shipping_auto_order.setter
    def free_shipping_auto_order(self, free_shipping_auto_order):
        """Sets the free_shipping_auto_order of this ItemAutoOrder.

        True if the customer should be given free shipping  # noqa: E501

        :param free_shipping_auto_order: The free_shipping_auto_order of this ItemAutoOrder.  # noqa: E501
        :type: bool
        """

        self._free_shipping_auto_order = free_shipping_auto_order

    @property
    def refund_other_auto_orders(self):
        """Gets the refund_other_auto_orders of this ItemAutoOrder.  # noqa: E501

        True if other auto orders for this customer should refunded if this item is refunded.  # noqa: E501

        :return: The refund_other_auto_orders of this ItemAutoOrder.  # noqa: E501
        :rtype: bool
        """
        return self._refund_other_auto_orders

    @refund_other_auto_orders.setter
    def refund_other_auto_orders(self, refund_other_auto_orders):
        """Sets the refund_other_auto_orders of this ItemAutoOrder.

        True if other auto orders for this customer should refunded if this item is refunded.  # noqa: E501

        :param refund_other_auto_orders: The refund_other_auto_orders of this ItemAutoOrder.  # noqa: E501
        :type: bool
        """

        self._refund_other_auto_orders = refund_other_auto_orders

    @property
    def steps(self):
        """Gets the steps of this ItemAutoOrder.  # noqa: E501

        The rebill steps if this auto order is an upsell  # noqa: E501

        :return: The steps of this ItemAutoOrder.  # noqa: E501
        :rtype: list[ItemAutoOrderStep]
        """
        return self._steps

    @steps.setter
    def steps(self, steps):
        """Sets the steps of this ItemAutoOrder.

        The rebill steps if this auto order is an upsell  # noqa: E501

        :param steps: The steps of this ItemAutoOrder.  # noqa: E501
        :type: list[ItemAutoOrderStep]
        """

        self._steps = steps

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ItemAutoOrder, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ItemAutoOrder):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
