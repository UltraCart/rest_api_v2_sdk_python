# coding: utf-8

"""
    UltraCart Rest API V2

    This is the next generation UltraCart REST API...

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class CouponFreeItemWithItemPurchase(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, items=None, limit=None, required_purchase_items=None):
        """
        CouponFreeItemWithItemPurchase - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'items': 'list[str]',
            'limit': 'int',
            'required_purchase_items': 'list[str]'
        }

        self.attribute_map = {
            'items': 'items',
            'limit': 'limit',
            'required_purchase_items': 'required_purchase_items'
        }

        self._items = items
        self._limit = limit
        self._required_purchase_items = required_purchase_items

    @property
    def items(self):
        """
        Gets the items of this CouponFreeItemWithItemPurchase.
        A list of free items which will receive a discount if one of the required purchase items is purchased.

        :return: The items of this CouponFreeItemWithItemPurchase.
        :rtype: list[str]
        """
        return self._items

    @items.setter
    def items(self, items):
        """
        Sets the items of this CouponFreeItemWithItemPurchase.
        A list of free items which will receive a discount if one of the required purchase items is purchased.

        :param items: The items of this CouponFreeItemWithItemPurchase.
        :type: list[str]
        """

        self._items = items

    @property
    def limit(self):
        """
        Gets the limit of this CouponFreeItemWithItemPurchase.
        The (optional) maximum quantity of discounted items.

        :return: The limit of this CouponFreeItemWithItemPurchase.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """
        Sets the limit of this CouponFreeItemWithItemPurchase.
        The (optional) maximum quantity of discounted items.

        :param limit: The limit of this CouponFreeItemWithItemPurchase.
        :type: int
        """

        self._limit = limit

    @property
    def required_purchase_items(self):
        """
        Gets the required_purchase_items of this CouponFreeItemWithItemPurchase.
        Required items (at least one from the list) that must be purchased for coupon to be valid

        :return: The required_purchase_items of this CouponFreeItemWithItemPurchase.
        :rtype: list[str]
        """
        return self._required_purchase_items

    @required_purchase_items.setter
    def required_purchase_items(self, required_purchase_items):
        """
        Sets the required_purchase_items of this CouponFreeItemWithItemPurchase.
        Required items (at least one from the list) that must be purchased for coupon to be valid

        :param required_purchase_items: The required_purchase_items of this CouponFreeItemWithItemPurchase.
        :type: list[str]
        """

        self._required_purchase_items = required_purchase_items

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
