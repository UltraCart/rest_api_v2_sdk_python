# coding: utf-8

"""
    UltraCart Rest API V2

    This is the next generation UltraCart REST API...

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class CouponFreeItemsWithMixMatchPurchase(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, free_item=None, free_quantity=None, limit=None, required_purchase_mix_and_match_group=None, required_purchase_quantity=None):
        """
        CouponFreeItemsWithMixMatchPurchase - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'free_item': 'str',
            'free_quantity': 'int',
            'limit': 'int',
            'required_purchase_mix_and_match_group': 'str',
            'required_purchase_quantity': 'int'
        }

        self.attribute_map = {
            'free_item': 'free_item',
            'free_quantity': 'free_quantity',
            'limit': 'limit',
            'required_purchase_mix_and_match_group': 'required_purchase_mix_and_match_group',
            'required_purchase_quantity': 'required_purchase_quantity'
        }

        self._free_item = free_item
        self._free_quantity = free_quantity
        self._limit = limit
        self._required_purchase_mix_and_match_group = required_purchase_mix_and_match_group
        self._required_purchase_quantity = required_purchase_quantity

    @property
    def free_item(self):
        """
        Gets the free_item of this CouponFreeItemsWithMixMatchPurchase.
        The item id of the free item that will be received when the required mix and match group quantity is purchased.

        :return: The free_item of this CouponFreeItemsWithMixMatchPurchase.
        :rtype: str
        """
        return self._free_item

    @free_item.setter
    def free_item(self, free_item):
        """
        Sets the free_item of this CouponFreeItemsWithMixMatchPurchase.
        The item id of the free item that will be received when the required mix and match group quantity is purchased.

        :param free_item: The free_item of this CouponFreeItemsWithMixMatchPurchase.
        :type: str
        """

        self._free_item = free_item

    @property
    def free_quantity(self):
        """
        Gets the free_quantity of this CouponFreeItemsWithMixMatchPurchase.
        The quantity of free item that will be received.

        :return: The free_quantity of this CouponFreeItemsWithMixMatchPurchase.
        :rtype: int
        """
        return self._free_quantity

    @free_quantity.setter
    def free_quantity(self, free_quantity):
        """
        Sets the free_quantity of this CouponFreeItemsWithMixMatchPurchase.
        The quantity of free item that will be received.

        :param free_quantity: The free_quantity of this CouponFreeItemsWithMixMatchPurchase.
        :type: int
        """

        self._free_quantity = free_quantity

    @property
    def limit(self):
        """
        Gets the limit of this CouponFreeItemsWithMixMatchPurchase.
        The limit of free items that may be received when purchasing multiple mix and match group items

        :return: The limit of this CouponFreeItemsWithMixMatchPurchase.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """
        Sets the limit of this CouponFreeItemsWithMixMatchPurchase.
        The limit of free items that may be received when purchasing multiple mix and match group items

        :param limit: The limit of this CouponFreeItemsWithMixMatchPurchase.
        :type: int
        """

        self._limit = limit

    @property
    def required_purchase_mix_and_match_group(self):
        """
        Gets the required_purchase_mix_and_match_group of this CouponFreeItemsWithMixMatchPurchase.
        Required mix and match group that must be purchased for coupon to be valid

        :return: The required_purchase_mix_and_match_group of this CouponFreeItemsWithMixMatchPurchase.
        :rtype: str
        """
        return self._required_purchase_mix_and_match_group

    @required_purchase_mix_and_match_group.setter
    def required_purchase_mix_and_match_group(self, required_purchase_mix_and_match_group):
        """
        Sets the required_purchase_mix_and_match_group of this CouponFreeItemsWithMixMatchPurchase.
        Required mix and match group that must be purchased for coupon to be valid

        :param required_purchase_mix_and_match_group: The required_purchase_mix_and_match_group of this CouponFreeItemsWithMixMatchPurchase.
        :type: str
        """

        self._required_purchase_mix_and_match_group = required_purchase_mix_and_match_group

    @property
    def required_purchase_quantity(self):
        """
        Gets the required_purchase_quantity of this CouponFreeItemsWithMixMatchPurchase.
        Required quantity of mix and match group items that must be purchased for coupon to be valid

        :return: The required_purchase_quantity of this CouponFreeItemsWithMixMatchPurchase.
        :rtype: int
        """
        return self._required_purchase_quantity

    @required_purchase_quantity.setter
    def required_purchase_quantity(self, required_purchase_quantity):
        """
        Sets the required_purchase_quantity of this CouponFreeItemsWithMixMatchPurchase.
        Required quantity of mix and match group items that must be purchased for coupon to be valid

        :param required_purchase_quantity: The required_purchase_quantity of this CouponFreeItemsWithMixMatchPurchase.
        :type: int
        """

        self._required_purchase_quantity = required_purchase_quantity

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
