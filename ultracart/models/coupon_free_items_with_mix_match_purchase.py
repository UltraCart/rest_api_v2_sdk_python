# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CouponFreeItemsWithMixMatchPurchase(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'free_item': 'str',
        'free_quantity': 'int',
        'limit': 'int',
        'required_purchase_mix_and_match_group': 'str',
        'required_purchase_quantity': 'int'
    }

    attribute_map = {
        'free_item': 'free_item',
        'free_quantity': 'free_quantity',
        'limit': 'limit',
        'required_purchase_mix_and_match_group': 'required_purchase_mix_and_match_group',
        'required_purchase_quantity': 'required_purchase_quantity'
    }

    def __init__(self, free_item=None, free_quantity=None, limit=None, required_purchase_mix_and_match_group=None, required_purchase_quantity=None):  # noqa: E501
        """CouponFreeItemsWithMixMatchPurchase - a model defined in Swagger"""  # noqa: E501

        self._free_item = None
        self._free_quantity = None
        self._limit = None
        self._required_purchase_mix_and_match_group = None
        self._required_purchase_quantity = None
        self.discriminator = None

        if free_item is not None:
            self.free_item = free_item
        if free_quantity is not None:
            self.free_quantity = free_quantity
        if limit is not None:
            self.limit = limit
        if required_purchase_mix_and_match_group is not None:
            self.required_purchase_mix_and_match_group = required_purchase_mix_and_match_group
        if required_purchase_quantity is not None:
            self.required_purchase_quantity = required_purchase_quantity

    @property
    def free_item(self):
        """Gets the free_item of this CouponFreeItemsWithMixMatchPurchase.  # noqa: E501

        The item id of the free item that will be received when the required mix and match group quantity is purchased.  # noqa: E501

        :return: The free_item of this CouponFreeItemsWithMixMatchPurchase.  # noqa: E501
        :rtype: str
        """
        return self._free_item

    @free_item.setter
    def free_item(self, free_item):
        """Sets the free_item of this CouponFreeItemsWithMixMatchPurchase.

        The item id of the free item that will be received when the required mix and match group quantity is purchased.  # noqa: E501

        :param free_item: The free_item of this CouponFreeItemsWithMixMatchPurchase.  # noqa: E501
        :type: str
        """

        self._free_item = free_item

    @property
    def free_quantity(self):
        """Gets the free_quantity of this CouponFreeItemsWithMixMatchPurchase.  # noqa: E501

        The quantity of free item that will be received.  # noqa: E501

        :return: The free_quantity of this CouponFreeItemsWithMixMatchPurchase.  # noqa: E501
        :rtype: int
        """
        return self._free_quantity

    @free_quantity.setter
    def free_quantity(self, free_quantity):
        """Sets the free_quantity of this CouponFreeItemsWithMixMatchPurchase.

        The quantity of free item that will be received.  # noqa: E501

        :param free_quantity: The free_quantity of this CouponFreeItemsWithMixMatchPurchase.  # noqa: E501
        :type: int
        """

        self._free_quantity = free_quantity

    @property
    def limit(self):
        """Gets the limit of this CouponFreeItemsWithMixMatchPurchase.  # noqa: E501

        The limit of free items that may be received when purchasing multiple mix and match group items  # noqa: E501

        :return: The limit of this CouponFreeItemsWithMixMatchPurchase.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this CouponFreeItemsWithMixMatchPurchase.

        The limit of free items that may be received when purchasing multiple mix and match group items  # noqa: E501

        :param limit: The limit of this CouponFreeItemsWithMixMatchPurchase.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def required_purchase_mix_and_match_group(self):
        """Gets the required_purchase_mix_and_match_group of this CouponFreeItemsWithMixMatchPurchase.  # noqa: E501

        Required mix and match group that must be purchased for coupon to be valid  # noqa: E501

        :return: The required_purchase_mix_and_match_group of this CouponFreeItemsWithMixMatchPurchase.  # noqa: E501
        :rtype: str
        """
        return self._required_purchase_mix_and_match_group

    @required_purchase_mix_and_match_group.setter
    def required_purchase_mix_and_match_group(self, required_purchase_mix_and_match_group):
        """Sets the required_purchase_mix_and_match_group of this CouponFreeItemsWithMixMatchPurchase.

        Required mix and match group that must be purchased for coupon to be valid  # noqa: E501

        :param required_purchase_mix_and_match_group: The required_purchase_mix_and_match_group of this CouponFreeItemsWithMixMatchPurchase.  # noqa: E501
        :type: str
        """

        self._required_purchase_mix_and_match_group = required_purchase_mix_and_match_group

    @property
    def required_purchase_quantity(self):
        """Gets the required_purchase_quantity of this CouponFreeItemsWithMixMatchPurchase.  # noqa: E501

        Required quantity of mix and match group items that must be purchased for coupon to be valid  # noqa: E501

        :return: The required_purchase_quantity of this CouponFreeItemsWithMixMatchPurchase.  # noqa: E501
        :rtype: int
        """
        return self._required_purchase_quantity

    @required_purchase_quantity.setter
    def required_purchase_quantity(self, required_purchase_quantity):
        """Sets the required_purchase_quantity of this CouponFreeItemsWithMixMatchPurchase.

        Required quantity of mix and match group items that must be purchased for coupon to be valid  # noqa: E501

        :param required_purchase_quantity: The required_purchase_quantity of this CouponFreeItemsWithMixMatchPurchase.  # noqa: E501
        :type: int
        """

        self._required_purchase_quantity = required_purchase_quantity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CouponFreeItemsWithMixMatchPurchase, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CouponFreeItemsWithMixMatchPurchase):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
