# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Warning(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'more_info': 'str',
        'warning_message': 'str'
    }

    attribute_map = {
        'more_info': 'more_info',
        'warning_message': 'warning_message'
    }

    def __init__(self, more_info=None, warning_message=None):  # noqa: E501
        """Warning - a model defined in Swagger"""  # noqa: E501

        self._more_info = None
        self._warning_message = None
        self.discriminator = None

        if more_info is not None:
            self.more_info = more_info
        if warning_message is not None:
            self.warning_message = warning_message

    @property
    def more_info(self):
        """Gets the more_info of this Warning.  # noqa: E501

        Additional information often a link to additional documentation  # noqa: E501

        :return: The more_info of this Warning.  # noqa: E501
        :rtype: str
        """
        return self._more_info

    @more_info.setter
    def more_info(self, more_info):
        """Sets the more_info of this Warning.

        Additional information often a link to additional documentation  # noqa: E501

        :param more_info: The more_info of this Warning.  # noqa: E501
        :type: str
        """

        self._more_info = more_info

    @property
    def warning_message(self):
        """Gets the warning_message of this Warning.  # noqa: E501

        A technical message meant to be read by a developer  # noqa: E501

        :return: The warning_message of this Warning.  # noqa: E501
        :rtype: str
        """
        return self._warning_message

    @warning_message.setter
    def warning_message(self, warning_message):
        """Sets the warning_message of this Warning.

        A technical message meant to be read by a developer  # noqa: E501

        :param warning_message: The warning_message of this Warning.  # noqa: E501
        :type: str
        """

        self._warning_message = warning_message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Warning, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Warning):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
