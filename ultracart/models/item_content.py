# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ItemContent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'assignments': 'list[ItemContentAssignment]',
        'attributes': 'list[ItemContentAttribute]',
        'custom_thank_you_url': 'str',
        'exclude_from_search': 'bool',
        'exclude_from_sitemap': 'bool',
        'exclude_from_top_sellers': 'bool',
        'extended_description': 'str',
        'extended_description_translated_text_instance_oid': 'int',
        'meta_description': 'str',
        'meta_keywords': 'str',
        'meta_title': 'str',
        'multimedia': 'list[ItemContentMultimedia]',
        'new_item': 'bool',
        'new_item_end': 'str',
        'new_item_start': 'str',
        'view_url': 'str'
    }

    attribute_map = {
        'assignments': 'assignments',
        'attributes': 'attributes',
        'custom_thank_you_url': 'custom_thank_you_url',
        'exclude_from_search': 'exclude_from_search',
        'exclude_from_sitemap': 'exclude_from_sitemap',
        'exclude_from_top_sellers': 'exclude_from_top_sellers',
        'extended_description': 'extended_description',
        'extended_description_translated_text_instance_oid': 'extended_description_translated_text_instance_oid',
        'meta_description': 'meta_description',
        'meta_keywords': 'meta_keywords',
        'meta_title': 'meta_title',
        'multimedia': 'multimedia',
        'new_item': 'new_item',
        'new_item_end': 'new_item_end',
        'new_item_start': 'new_item_start',
        'view_url': 'view_url'
    }

    def __init__(self, assignments=None, attributes=None, custom_thank_you_url=None, exclude_from_search=None, exclude_from_sitemap=None, exclude_from_top_sellers=None, extended_description=None, extended_description_translated_text_instance_oid=None, meta_description=None, meta_keywords=None, meta_title=None, multimedia=None, new_item=None, new_item_end=None, new_item_start=None, view_url=None):  # noqa: E501
        """ItemContent - a model defined in Swagger"""  # noqa: E501

        self._assignments = None
        self._attributes = None
        self._custom_thank_you_url = None
        self._exclude_from_search = None
        self._exclude_from_sitemap = None
        self._exclude_from_top_sellers = None
        self._extended_description = None
        self._extended_description_translated_text_instance_oid = None
        self._meta_description = None
        self._meta_keywords = None
        self._meta_title = None
        self._multimedia = None
        self._new_item = None
        self._new_item_end = None
        self._new_item_start = None
        self._view_url = None
        self.discriminator = None

        if assignments is not None:
            self.assignments = assignments
        if attributes is not None:
            self.attributes = attributes
        if custom_thank_you_url is not None:
            self.custom_thank_you_url = custom_thank_you_url
        if exclude_from_search is not None:
            self.exclude_from_search = exclude_from_search
        if exclude_from_sitemap is not None:
            self.exclude_from_sitemap = exclude_from_sitemap
        if exclude_from_top_sellers is not None:
            self.exclude_from_top_sellers = exclude_from_top_sellers
        if extended_description is not None:
            self.extended_description = extended_description
        if extended_description_translated_text_instance_oid is not None:
            self.extended_description_translated_text_instance_oid = extended_description_translated_text_instance_oid
        if meta_description is not None:
            self.meta_description = meta_description
        if meta_keywords is not None:
            self.meta_keywords = meta_keywords
        if meta_title is not None:
            self.meta_title = meta_title
        if multimedia is not None:
            self.multimedia = multimedia
        if new_item is not None:
            self.new_item = new_item
        if new_item_end is not None:
            self.new_item_end = new_item_end
        if new_item_start is not None:
            self.new_item_start = new_item_start
        if view_url is not None:
            self.view_url = view_url

    @property
    def assignments(self):
        """Gets the assignments of this ItemContent.  # noqa: E501

        StoreFront assignments  # noqa: E501

        :return: The assignments of this ItemContent.  # noqa: E501
        :rtype: list[ItemContentAssignment]
        """
        return self._assignments

    @assignments.setter
    def assignments(self, assignments):
        """Sets the assignments of this ItemContent.

        StoreFront assignments  # noqa: E501

        :param assignments: The assignments of this ItemContent.  # noqa: E501
        :type: list[ItemContentAssignment]
        """

        self._assignments = assignments

    @property
    def attributes(self):
        """Gets the attributes of this ItemContent.  # noqa: E501

        StoreFront attributes  # noqa: E501

        :return: The attributes of this ItemContent.  # noqa: E501
        :rtype: list[ItemContentAttribute]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this ItemContent.

        StoreFront attributes  # noqa: E501

        :param attributes: The attributes of this ItemContent.  # noqa: E501
        :type: list[ItemContentAttribute]
        """

        self._attributes = attributes

    @property
    def custom_thank_you_url(self):
        """Gets the custom_thank_you_url of this ItemContent.  # noqa: E501

        Custom Thank You URL  # noqa: E501

        :return: The custom_thank_you_url of this ItemContent.  # noqa: E501
        :rtype: str
        """
        return self._custom_thank_you_url

    @custom_thank_you_url.setter
    def custom_thank_you_url(self, custom_thank_you_url):
        """Sets the custom_thank_you_url of this ItemContent.

        Custom Thank You URL  # noqa: E501

        :param custom_thank_you_url: The custom_thank_you_url of this ItemContent.  # noqa: E501
        :type: str
        """

        self._custom_thank_you_url = custom_thank_you_url

    @property
    def exclude_from_search(self):
        """Gets the exclude_from_search of this ItemContent.  # noqa: E501

        Exclude from search  # noqa: E501

        :return: The exclude_from_search of this ItemContent.  # noqa: E501
        :rtype: bool
        """
        return self._exclude_from_search

    @exclude_from_search.setter
    def exclude_from_search(self, exclude_from_search):
        """Sets the exclude_from_search of this ItemContent.

        Exclude from search  # noqa: E501

        :param exclude_from_search: The exclude_from_search of this ItemContent.  # noqa: E501
        :type: bool
        """

        self._exclude_from_search = exclude_from_search

    @property
    def exclude_from_sitemap(self):
        """Gets the exclude_from_sitemap of this ItemContent.  # noqa: E501

        Exclude from the sitemap for the StoreFront  # noqa: E501

        :return: The exclude_from_sitemap of this ItemContent.  # noqa: E501
        :rtype: bool
        """
        return self._exclude_from_sitemap

    @exclude_from_sitemap.setter
    def exclude_from_sitemap(self, exclude_from_sitemap):
        """Sets the exclude_from_sitemap of this ItemContent.

        Exclude from the sitemap for the StoreFront  # noqa: E501

        :param exclude_from_sitemap: The exclude_from_sitemap of this ItemContent.  # noqa: E501
        :type: bool
        """

        self._exclude_from_sitemap = exclude_from_sitemap

    @property
    def exclude_from_top_sellers(self):
        """Gets the exclude_from_top_sellers of this ItemContent.  # noqa: E501

        Exclude from the top sellers list in the StoreFront  # noqa: E501

        :return: The exclude_from_top_sellers of this ItemContent.  # noqa: E501
        :rtype: bool
        """
        return self._exclude_from_top_sellers

    @exclude_from_top_sellers.setter
    def exclude_from_top_sellers(self, exclude_from_top_sellers):
        """Sets the exclude_from_top_sellers of this ItemContent.

        Exclude from the top sellers list in the StoreFront  # noqa: E501

        :param exclude_from_top_sellers: The exclude_from_top_sellers of this ItemContent.  # noqa: E501
        :type: bool
        """

        self._exclude_from_top_sellers = exclude_from_top_sellers

    @property
    def extended_description(self):
        """Gets the extended_description of this ItemContent.  # noqa: E501

        Extended description (max 10000 characters)  # noqa: E501

        :return: The extended_description of this ItemContent.  # noqa: E501
        :rtype: str
        """
        return self._extended_description

    @extended_description.setter
    def extended_description(self, extended_description):
        """Sets the extended_description of this ItemContent.

        Extended description (max 10000 characters)  # noqa: E501

        :param extended_description: The extended_description of this ItemContent.  # noqa: E501
        :type: str
        """
        if extended_description is not None and len(extended_description) > 10000:
            raise ValueError("Invalid value for `extended_description`, length must be less than or equal to `10000`")  # noqa: E501

        self._extended_description = extended_description

    @property
    def extended_description_translated_text_instance_oid(self):
        """Gets the extended_description_translated_text_instance_oid of this ItemContent.  # noqa: E501

        Extended description text translation instance identifier  # noqa: E501

        :return: The extended_description_translated_text_instance_oid of this ItemContent.  # noqa: E501
        :rtype: int
        """
        return self._extended_description_translated_text_instance_oid

    @extended_description_translated_text_instance_oid.setter
    def extended_description_translated_text_instance_oid(self, extended_description_translated_text_instance_oid):
        """Sets the extended_description_translated_text_instance_oid of this ItemContent.

        Extended description text translation instance identifier  # noqa: E501

        :param extended_description_translated_text_instance_oid: The extended_description_translated_text_instance_oid of this ItemContent.  # noqa: E501
        :type: int
        """

        self._extended_description_translated_text_instance_oid = extended_description_translated_text_instance_oid

    @property
    def meta_description(self):
        """Gets the meta_description of this ItemContent.  # noqa: E501

        SEO meta description used by Storefronts  # noqa: E501

        :return: The meta_description of this ItemContent.  # noqa: E501
        :rtype: str
        """
        return self._meta_description

    @meta_description.setter
    def meta_description(self, meta_description):
        """Sets the meta_description of this ItemContent.

        SEO meta description used by Storefronts  # noqa: E501

        :param meta_description: The meta_description of this ItemContent.  # noqa: E501
        :type: str
        """

        self._meta_description = meta_description

    @property
    def meta_keywords(self):
        """Gets the meta_keywords of this ItemContent.  # noqa: E501

        SEO meta keywords used by Storefronts  # noqa: E501

        :return: The meta_keywords of this ItemContent.  # noqa: E501
        :rtype: str
        """
        return self._meta_keywords

    @meta_keywords.setter
    def meta_keywords(self, meta_keywords):
        """Sets the meta_keywords of this ItemContent.

        SEO meta keywords used by Storefronts  # noqa: E501

        :param meta_keywords: The meta_keywords of this ItemContent.  # noqa: E501
        :type: str
        """

        self._meta_keywords = meta_keywords

    @property
    def meta_title(self):
        """Gets the meta_title of this ItemContent.  # noqa: E501

        SEO meta title used by Storefronts  # noqa: E501

        :return: The meta_title of this ItemContent.  # noqa: E501
        :rtype: str
        """
        return self._meta_title

    @meta_title.setter
    def meta_title(self, meta_title):
        """Sets the meta_title of this ItemContent.

        SEO meta title used by Storefronts  # noqa: E501

        :param meta_title: The meta_title of this ItemContent.  # noqa: E501
        :type: str
        """

        self._meta_title = meta_title

    @property
    def multimedia(self):
        """Gets the multimedia of this ItemContent.  # noqa: E501

        Multimedia  # noqa: E501

        :return: The multimedia of this ItemContent.  # noqa: E501
        :rtype: list[ItemContentMultimedia]
        """
        return self._multimedia

    @multimedia.setter
    def multimedia(self, multimedia):
        """Sets the multimedia of this ItemContent.

        Multimedia  # noqa: E501

        :param multimedia: The multimedia of this ItemContent.  # noqa: E501
        :type: list[ItemContentMultimedia]
        """

        self._multimedia = multimedia

    @property
    def new_item(self):
        """Gets the new_item of this ItemContent.  # noqa: E501

        True if the item is new  # noqa: E501

        :return: The new_item of this ItemContent.  # noqa: E501
        :rtype: bool
        """
        return self._new_item

    @new_item.setter
    def new_item(self, new_item):
        """Sets the new_item of this ItemContent.

        True if the item is new  # noqa: E501

        :param new_item: The new_item of this ItemContent.  # noqa: E501
        :type: bool
        """

        self._new_item = new_item

    @property
    def new_item_end(self):
        """Gets the new_item_end of this ItemContent.  # noqa: E501

        The date the item should no longer be considered new  # noqa: E501

        :return: The new_item_end of this ItemContent.  # noqa: E501
        :rtype: str
        """
        return self._new_item_end

    @new_item_end.setter
    def new_item_end(self, new_item_end):
        """Sets the new_item_end of this ItemContent.

        The date the item should no longer be considered new  # noqa: E501

        :param new_item_end: The new_item_end of this ItemContent.  # noqa: E501
        :type: str
        """

        self._new_item_end = new_item_end

    @property
    def new_item_start(self):
        """Gets the new_item_start of this ItemContent.  # noqa: E501

        The date the item should start being considered new  # noqa: E501

        :return: The new_item_start of this ItemContent.  # noqa: E501
        :rtype: str
        """
        return self._new_item_start

    @new_item_start.setter
    def new_item_start(self, new_item_start):
        """Sets the new_item_start of this ItemContent.

        The date the item should start being considered new  # noqa: E501

        :param new_item_start: The new_item_start of this ItemContent.  # noqa: E501
        :type: str
        """

        self._new_item_start = new_item_start

    @property
    def view_url(self):
        """Gets the view_url of this ItemContent.  # noqa: E501

        Legacy view URL (not used by StoreFronts)  # noqa: E501

        :return: The view_url of this ItemContent.  # noqa: E501
        :rtype: str
        """
        return self._view_url

    @view_url.setter
    def view_url(self, view_url):
        """Sets the view_url of this ItemContent.

        Legacy view URL (not used by StoreFronts)  # noqa: E501

        :param view_url: The view_url of this ItemContent.  # noqa: E501
        :type: str
        """

        self._view_url = view_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ItemContent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ItemContent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
