# coding: utf-8

"""
    UltraCart Rest API V2

    This is the next generation UltraCart REST API...

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ItemContent(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'assignments': 'list[ItemContentAssignment]',
        'attributes': 'list[ItemContentAttribute]',
        'exclude_from_search': 'bool',
        'exclude_from_top_sellers': 'bool',
        'extended_description': 'str',
        'extended_description_translated_text_instance_oid': 'int',
        'multimedia': 'list[ItemContentMultimedia]',
        'new_item': 'bool',
        'new_item_end': 'str',
        'new_item_start': 'str',
        'view_url': 'str'
    }

    attribute_map = {
        'assignments': 'assignments',
        'attributes': 'attributes',
        'exclude_from_search': 'exclude_from_search',
        'exclude_from_top_sellers': 'exclude_from_top_sellers',
        'extended_description': 'extended_description',
        'extended_description_translated_text_instance_oid': 'extended_description_translated_text_instance_oid',
        'multimedia': 'multimedia',
        'new_item': 'new_item',
        'new_item_end': 'new_item_end',
        'new_item_start': 'new_item_start',
        'view_url': 'view_url'
    }

    def __init__(self, assignments=None, attributes=None, exclude_from_search=None, exclude_from_top_sellers=None, extended_description=None, extended_description_translated_text_instance_oid=None, multimedia=None, new_item=None, new_item_end=None, new_item_start=None, view_url=None):
        """
        ItemContent - a model defined in Swagger
        """

        self._assignments = None
        self._attributes = None
        self._exclude_from_search = None
        self._exclude_from_top_sellers = None
        self._extended_description = None
        self._extended_description_translated_text_instance_oid = None
        self._multimedia = None
        self._new_item = None
        self._new_item_end = None
        self._new_item_start = None
        self._view_url = None
        self.discriminator = None

        if assignments is not None:
          self.assignments = assignments
        if attributes is not None:
          self.attributes = attributes
        if exclude_from_search is not None:
          self.exclude_from_search = exclude_from_search
        if exclude_from_top_sellers is not None:
          self.exclude_from_top_sellers = exclude_from_top_sellers
        if extended_description is not None:
          self.extended_description = extended_description
        if extended_description_translated_text_instance_oid is not None:
          self.extended_description_translated_text_instance_oid = extended_description_translated_text_instance_oid
        if multimedia is not None:
          self.multimedia = multimedia
        if new_item is not None:
          self.new_item = new_item
        if new_item_end is not None:
          self.new_item_end = new_item_end
        if new_item_start is not None:
          self.new_item_start = new_item_start
        if view_url is not None:
          self.view_url = view_url

    @property
    def assignments(self):
        """
        Gets the assignments of this ItemContent.
        StoreFront assignments

        :return: The assignments of this ItemContent.
        :rtype: list[ItemContentAssignment]
        """
        return self._assignments

    @assignments.setter
    def assignments(self, assignments):
        """
        Sets the assignments of this ItemContent.
        StoreFront assignments

        :param assignments: The assignments of this ItemContent.
        :type: list[ItemContentAssignment]
        """

        self._assignments = assignments

    @property
    def attributes(self):
        """
        Gets the attributes of this ItemContent.
        StoreFront attributes

        :return: The attributes of this ItemContent.
        :rtype: list[ItemContentAttribute]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """
        Sets the attributes of this ItemContent.
        StoreFront attributes

        :param attributes: The attributes of this ItemContent.
        :type: list[ItemContentAttribute]
        """

        self._attributes = attributes

    @property
    def exclude_from_search(self):
        """
        Gets the exclude_from_search of this ItemContent.
        Exclude from search

        :return: The exclude_from_search of this ItemContent.
        :rtype: bool
        """
        return self._exclude_from_search

    @exclude_from_search.setter
    def exclude_from_search(self, exclude_from_search):
        """
        Sets the exclude_from_search of this ItemContent.
        Exclude from search

        :param exclude_from_search: The exclude_from_search of this ItemContent.
        :type: bool
        """

        self._exclude_from_search = exclude_from_search

    @property
    def exclude_from_top_sellers(self):
        """
        Gets the exclude_from_top_sellers of this ItemContent.
        Exclude from the top sellers list in the StoreFront

        :return: The exclude_from_top_sellers of this ItemContent.
        :rtype: bool
        """
        return self._exclude_from_top_sellers

    @exclude_from_top_sellers.setter
    def exclude_from_top_sellers(self, exclude_from_top_sellers):
        """
        Sets the exclude_from_top_sellers of this ItemContent.
        Exclude from the top sellers list in the StoreFront

        :param exclude_from_top_sellers: The exclude_from_top_sellers of this ItemContent.
        :type: bool
        """

        self._exclude_from_top_sellers = exclude_from_top_sellers

    @property
    def extended_description(self):
        """
        Gets the extended_description of this ItemContent.
        Extended description (max 2000 characters)

        :return: The extended_description of this ItemContent.
        :rtype: str
        """
        return self._extended_description

    @extended_description.setter
    def extended_description(self, extended_description):
        """
        Sets the extended_description of this ItemContent.
        Extended description (max 2000 characters)

        :param extended_description: The extended_description of this ItemContent.
        :type: str
        """
        if extended_description is not None and len(extended_description) > 2000:
            raise ValueError("Invalid value for `extended_description`, length must be less than or equal to `2000`")

        self._extended_description = extended_description

    @property
    def extended_description_translated_text_instance_oid(self):
        """
        Gets the extended_description_translated_text_instance_oid of this ItemContent.
        Extneded description text translation instance identifier

        :return: The extended_description_translated_text_instance_oid of this ItemContent.
        :rtype: int
        """
        return self._extended_description_translated_text_instance_oid

    @extended_description_translated_text_instance_oid.setter
    def extended_description_translated_text_instance_oid(self, extended_description_translated_text_instance_oid):
        """
        Sets the extended_description_translated_text_instance_oid of this ItemContent.
        Extneded description text translation instance identifier

        :param extended_description_translated_text_instance_oid: The extended_description_translated_text_instance_oid of this ItemContent.
        :type: int
        """

        self._extended_description_translated_text_instance_oid = extended_description_translated_text_instance_oid

    @property
    def multimedia(self):
        """
        Gets the multimedia of this ItemContent.
        Multimedia

        :return: The multimedia of this ItemContent.
        :rtype: list[ItemContentMultimedia]
        """
        return self._multimedia

    @multimedia.setter
    def multimedia(self, multimedia):
        """
        Sets the multimedia of this ItemContent.
        Multimedia

        :param multimedia: The multimedia of this ItemContent.
        :type: list[ItemContentMultimedia]
        """

        self._multimedia = multimedia

    @property
    def new_item(self):
        """
        Gets the new_item of this ItemContent.
        True if the item is new

        :return: The new_item of this ItemContent.
        :rtype: bool
        """
        return self._new_item

    @new_item.setter
    def new_item(self, new_item):
        """
        Sets the new_item of this ItemContent.
        True if the item is new

        :param new_item: The new_item of this ItemContent.
        :type: bool
        """

        self._new_item = new_item

    @property
    def new_item_end(self):
        """
        Gets the new_item_end of this ItemContent.
        The date the item should no longer be considered new

        :return: The new_item_end of this ItemContent.
        :rtype: str
        """
        return self._new_item_end

    @new_item_end.setter
    def new_item_end(self, new_item_end):
        """
        Sets the new_item_end of this ItemContent.
        The date the item should no longer be considered new

        :param new_item_end: The new_item_end of this ItemContent.
        :type: str
        """

        self._new_item_end = new_item_end

    @property
    def new_item_start(self):
        """
        Gets the new_item_start of this ItemContent.
        The date the item should start being considered new

        :return: The new_item_start of this ItemContent.
        :rtype: str
        """
        return self._new_item_start

    @new_item_start.setter
    def new_item_start(self, new_item_start):
        """
        Sets the new_item_start of this ItemContent.
        The date the item should start being considered new

        :param new_item_start: The new_item_start of this ItemContent.
        :type: str
        """

        self._new_item_start = new_item_start

    @property
    def view_url(self):
        """
        Gets the view_url of this ItemContent.
        Legacy view URL (not used by StoreFronts)

        :return: The view_url of this ItemContent.
        :rtype: str
        """
        return self._view_url

    @view_url.setter
    def view_url(self, view_url):
        """
        Sets the view_url of this ItemContent.
        Legacy view URL (not used by StoreFronts)

        :param view_url: The view_url of this ItemContent.
        :type: str
        """

        self._view_url = view_url

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ItemContent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
