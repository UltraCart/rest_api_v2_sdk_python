# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ReportFilter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'config': 'str',
        'connections': 'list[ReportFilterConnection]',
        'name': 'str',
        'styles': 'str',
        'timezone': 'str',
        'type': 'str',
        'uuid': 'str',
        'values': 'list[str]'
    }

    attribute_map = {
        'config': 'config',
        'connections': 'connections',
        'name': 'name',
        'styles': 'styles',
        'timezone': 'timezone',
        'type': 'type',
        'uuid': 'uuid',
        'values': 'values'
    }

    def __init__(self, config=None, connections=None, name=None, styles=None, timezone=None, type=None, uuid=None, values=None):  # noqa: E501
        """ReportFilter - a model defined in Swagger"""  # noqa: E501

        self._config = None
        self._connections = None
        self._name = None
        self._styles = None
        self._timezone = None
        self._type = None
        self._uuid = None
        self._values = None
        self.discriminator = None

        if config is not None:
            self.config = config
        if connections is not None:
            self.connections = connections
        if name is not None:
            self.name = name
        if styles is not None:
            self.styles = styles
        if timezone is not None:
            self.timezone = timezone
        if type is not None:
            self.type = type
        if uuid is not None:
            self.uuid = uuid
        if values is not None:
            self.values = values

    @property
    def config(self):
        """Gets the config of this ReportFilter.  # noqa: E501

        A JSON representation of the configuration for this visualization  # noqa: E501

        :return: The config of this ReportFilter.  # noqa: E501
        :rtype: str
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this ReportFilter.

        A JSON representation of the configuration for this visualization  # noqa: E501

        :param config: The config of this ReportFilter.  # noqa: E501
        :type: str
        """

        self._config = config

    @property
    def connections(self):
        """Gets the connections of this ReportFilter.  # noqa: E501

        How this filter connects to the data sources and columns  # noqa: E501

        :return: The connections of this ReportFilter.  # noqa: E501
        :rtype: list[ReportFilterConnection]
        """
        return self._connections

    @connections.setter
    def connections(self, connections):
        """Sets the connections of this ReportFilter.

        How this filter connects to the data sources and columns  # noqa: E501

        :param connections: The connections of this ReportFilter.  # noqa: E501
        :type: list[ReportFilterConnection]
        """

        self._connections = connections

    @property
    def name(self):
        """Gets the name of this ReportFilter.  # noqa: E501


        :return: The name of this ReportFilter.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ReportFilter.


        :param name: The name of this ReportFilter.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def styles(self):
        """Gets the styles of this ReportFilter.  # noqa: E501

        A JSON representation of the style configuration for this visualization  # noqa: E501

        :return: The styles of this ReportFilter.  # noqa: E501
        :rtype: str
        """
        return self._styles

    @styles.setter
    def styles(self, styles):
        """Sets the styles of this ReportFilter.

        A JSON representation of the style configuration for this visualization  # noqa: E501

        :param styles: The styles of this ReportFilter.  # noqa: E501
        :type: str
        """

        self._styles = styles

    @property
    def timezone(self):
        """Gets the timezone of this ReportFilter.  # noqa: E501

        The timezone that the date range is querying on.  # noqa: E501

        :return: The timezone of this ReportFilter.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this ReportFilter.

        The timezone that the date range is querying on.  # noqa: E501

        :param timezone: The timezone of this ReportFilter.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def type(self):
        """Gets the type of this ReportFilter.  # noqa: E501

        Type of filter  # noqa: E501

        :return: The type of this ReportFilter.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ReportFilter.

        Type of filter  # noqa: E501

        :param type: The type of this ReportFilter.  # noqa: E501
        :type: str
        """
        allowed_values = ["date range", "date comparison", "single value", "multiple values"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def uuid(self):
        """Gets the uuid of this ReportFilter.  # noqa: E501

        Unique UUID assigned to the filter.  Assists when returning values that the filter can use.  # noqa: E501

        :return: The uuid of this ReportFilter.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this ReportFilter.

        Unique UUID assigned to the filter.  Assists when returning values that the filter can use.  # noqa: E501

        :param uuid: The uuid of this ReportFilter.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def values(self):
        """Gets the values of this ReportFilter.  # noqa: E501

        The selected values for the filter.  When used, some type conversion will need to occur.  # noqa: E501

        :return: The values of this ReportFilter.  # noqa: E501
        :rtype: list[str]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this ReportFilter.

        The selected values for the filter.  When used, some type conversion will need to occur.  # noqa: E501

        :param values: The values of this ReportFilter.  # noqa: E501
        :type: list[str]
        """

        self._values = values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReportFilter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportFilter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
