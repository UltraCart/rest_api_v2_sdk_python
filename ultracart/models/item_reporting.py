# coding: utf-8

"""
    UltraCart Rest API V2

    This is the next generation UltraCart REST API...

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ItemReporting(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'report_as_upsell': 'bool',
        'report_pickable_quantities': 'list[int]'
    }

    attribute_map = {
        'report_as_upsell': 'report_as_upsell',
        'report_pickable_quantities': 'report_pickable_quantities'
    }

    def __init__(self, report_as_upsell=None, report_pickable_quantities=None):
        """
        ItemReporting - a model defined in Swagger
        """

        self._report_as_upsell = None
        self._report_pickable_quantities = None
        self.discriminator = None

        if report_as_upsell is not None:
          self.report_as_upsell = report_as_upsell
        if report_pickable_quantities is not None:
          self.report_pickable_quantities = report_pickable_quantities

    @property
    def report_as_upsell(self):
        """
        Gets the report_as_upsell of this ItemReporting.
        Report as an upsell

        :return: The report_as_upsell of this ItemReporting.
        :rtype: bool
        """
        return self._report_as_upsell

    @report_as_upsell.setter
    def report_as_upsell(self, report_as_upsell):
        """
        Sets the report_as_upsell of this ItemReporting.
        Report as an upsell

        :param report_as_upsell: The report_as_upsell of this ItemReporting.
        :type: bool
        """

        self._report_as_upsell = report_as_upsell

    @property
    def report_pickable_quantities(self):
        """
        Gets the report_pickable_quantities of this ItemReporting.
        Report pickable quantities

        :return: The report_pickable_quantities of this ItemReporting.
        :rtype: list[int]
        """
        return self._report_pickable_quantities

    @report_pickable_quantities.setter
    def report_pickable_quantities(self, report_pickable_quantities):
        """
        Sets the report_pickable_quantities of this ItemReporting.
        Report pickable quantities

        :param report_pickable_quantities: The report_pickable_quantities of this ItemReporting.
        :type: list[int]
        """

        self._report_pickable_quantities = report_pickable_quantities

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ItemReporting):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
