# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GiftCertificate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'activated': 'bool',
        'code': 'str',
        'deleted': 'bool',
        'email': 'str',
        'expiration_dts': 'str',
        'gift_certificate_oid': 'int',
        'ledger_entries': 'list[GiftCertificateLedgerEntry]',
        'merchant_id': 'str',
        'merchant_note': 'str',
        'original_balance': 'float',
        'reference_order_id': 'str',
        'remaining_balance': 'float'
    }

    attribute_map = {
        'activated': 'activated',
        'code': 'code',
        'deleted': 'deleted',
        'email': 'email',
        'expiration_dts': 'expiration_dts',
        'gift_certificate_oid': 'gift_certificate_oid',
        'ledger_entries': 'ledger_entries',
        'merchant_id': 'merchant_id',
        'merchant_note': 'merchant_note',
        'original_balance': 'original_balance',
        'reference_order_id': 'reference_order_id',
        'remaining_balance': 'remaining_balance'
    }

    def __init__(self, activated=None, code=None, deleted=None, email=None, expiration_dts=None, gift_certificate_oid=None, ledger_entries=None, merchant_id=None, merchant_note=None, original_balance=None, reference_order_id=None, remaining_balance=None):  # noqa: E501
        """GiftCertificate - a model defined in Swagger"""  # noqa: E501

        self._activated = None
        self._code = None
        self._deleted = None
        self._email = None
        self._expiration_dts = None
        self._gift_certificate_oid = None
        self._ledger_entries = None
        self._merchant_id = None
        self._merchant_note = None
        self._original_balance = None
        self._reference_order_id = None
        self._remaining_balance = None
        self.discriminator = None

        if activated is not None:
            self.activated = activated
        if code is not None:
            self.code = code
        if deleted is not None:
            self.deleted = deleted
        if email is not None:
            self.email = email
        if expiration_dts is not None:
            self.expiration_dts = expiration_dts
        if gift_certificate_oid is not None:
            self.gift_certificate_oid = gift_certificate_oid
        if ledger_entries is not None:
            self.ledger_entries = ledger_entries
        if merchant_id is not None:
            self.merchant_id = merchant_id
        if merchant_note is not None:
            self.merchant_note = merchant_note
        if original_balance is not None:
            self.original_balance = original_balance
        if reference_order_id is not None:
            self.reference_order_id = reference_order_id
        if remaining_balance is not None:
            self.remaining_balance = remaining_balance

    @property
    def activated(self):
        """Gets the activated of this GiftCertificate.  # noqa: E501

        True if this gift certificate is activated and ready to apply to purchases.  # noqa: E501

        :return: The activated of this GiftCertificate.  # noqa: E501
        :rtype: bool
        """
        return self._activated

    @activated.setter
    def activated(self, activated):
        """Sets the activated of this GiftCertificate.

        True if this gift certificate is activated and ready to apply to purchases.  # noqa: E501

        :param activated: The activated of this GiftCertificate.  # noqa: E501
        :type: bool
        """

        self._activated = activated

    @property
    def code(self):
        """Gets the code of this GiftCertificate.  # noqa: E501

        The code used by the customer to purchase against this gift certificate.  # noqa: E501

        :return: The code of this GiftCertificate.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this GiftCertificate.

        The code used by the customer to purchase against this gift certificate.  # noqa: E501

        :param code: The code of this GiftCertificate.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def deleted(self):
        """Gets the deleted of this GiftCertificate.  # noqa: E501

        True if this gift certificate was deleted.  # noqa: E501

        :return: The deleted of this GiftCertificate.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this GiftCertificate.

        True if this gift certificate was deleted.  # noqa: E501

        :param deleted: The deleted of this GiftCertificate.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def email(self):
        """Gets the email of this GiftCertificate.  # noqa: E501

        Email of the customer associated with this gift certificate.  # noqa: E501

        :return: The email of this GiftCertificate.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this GiftCertificate.

        Email of the customer associated with this gift certificate.  # noqa: E501

        :param email: The email of this GiftCertificate.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def expiration_dts(self):
        """Gets the expiration_dts of this GiftCertificate.  # noqa: E501

        Expiration date time.  # noqa: E501

        :return: The expiration_dts of this GiftCertificate.  # noqa: E501
        :rtype: str
        """
        return self._expiration_dts

    @expiration_dts.setter
    def expiration_dts(self, expiration_dts):
        """Sets the expiration_dts of this GiftCertificate.

        Expiration date time.  # noqa: E501

        :param expiration_dts: The expiration_dts of this GiftCertificate.  # noqa: E501
        :type: str
        """

        self._expiration_dts = expiration_dts

    @property
    def gift_certificate_oid(self):
        """Gets the gift_certificate_oid of this GiftCertificate.  # noqa: E501

        Gift certificate oid.  # noqa: E501

        :return: The gift_certificate_oid of this GiftCertificate.  # noqa: E501
        :rtype: int
        """
        return self._gift_certificate_oid

    @gift_certificate_oid.setter
    def gift_certificate_oid(self, gift_certificate_oid):
        """Sets the gift_certificate_oid of this GiftCertificate.

        Gift certificate oid.  # noqa: E501

        :param gift_certificate_oid: The gift_certificate_oid of this GiftCertificate.  # noqa: E501
        :type: int
        """

        self._gift_certificate_oid = gift_certificate_oid

    @property
    def ledger_entries(self):
        """Gets the ledger_entries of this GiftCertificate.  # noqa: E501

        A list of all ledger activity for this gift certificate.  # noqa: E501

        :return: The ledger_entries of this GiftCertificate.  # noqa: E501
        :rtype: list[GiftCertificateLedgerEntry]
        """
        return self._ledger_entries

    @ledger_entries.setter
    def ledger_entries(self, ledger_entries):
        """Sets the ledger_entries of this GiftCertificate.

        A list of all ledger activity for this gift certificate.  # noqa: E501

        :param ledger_entries: The ledger_entries of this GiftCertificate.  # noqa: E501
        :type: list[GiftCertificateLedgerEntry]
        """

        self._ledger_entries = ledger_entries

    @property
    def merchant_id(self):
        """Gets the merchant_id of this GiftCertificate.  # noqa: E501

        Merchant Id  # noqa: E501

        :return: The merchant_id of this GiftCertificate.  # noqa: E501
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this GiftCertificate.

        Merchant Id  # noqa: E501

        :param merchant_id: The merchant_id of this GiftCertificate.  # noqa: E501
        :type: str
        """

        self._merchant_id = merchant_id

    @property
    def merchant_note(self):
        """Gets the merchant_note of this GiftCertificate.  # noqa: E501

        A list of all ledger activity for this gift certificate.  # noqa: E501

        :return: The merchant_note of this GiftCertificate.  # noqa: E501
        :rtype: str
        """
        return self._merchant_note

    @merchant_note.setter
    def merchant_note(self, merchant_note):
        """Sets the merchant_note of this GiftCertificate.

        A list of all ledger activity for this gift certificate.  # noqa: E501

        :param merchant_note: The merchant_note of this GiftCertificate.  # noqa: E501
        :type: str
        """

        self._merchant_note = merchant_note

    @property
    def original_balance(self):
        """Gets the original_balance of this GiftCertificate.  # noqa: E501

        Original balance of the gift certificate.  # noqa: E501

        :return: The original_balance of this GiftCertificate.  # noqa: E501
        :rtype: float
        """
        return self._original_balance

    @original_balance.setter
    def original_balance(self, original_balance):
        """Sets the original_balance of this GiftCertificate.

        Original balance of the gift certificate.  # noqa: E501

        :param original_balance: The original_balance of this GiftCertificate.  # noqa: E501
        :type: float
        """

        self._original_balance = original_balance

    @property
    def reference_order_id(self):
        """Gets the reference_order_id of this GiftCertificate.  # noqa: E501

        The order used to purchase this gift certificate.  This value is ONLY set during checkout when a certificate is purchased, not when it is used.  Any usage is recorded in the ledger  # noqa: E501

        :return: The reference_order_id of this GiftCertificate.  # noqa: E501
        :rtype: str
        """
        return self._reference_order_id

    @reference_order_id.setter
    def reference_order_id(self, reference_order_id):
        """Sets the reference_order_id of this GiftCertificate.

        The order used to purchase this gift certificate.  This value is ONLY set during checkout when a certificate is purchased, not when it is used.  Any usage is recorded in the ledger  # noqa: E501

        :param reference_order_id: The reference_order_id of this GiftCertificate.  # noqa: E501
        :type: str
        """

        self._reference_order_id = reference_order_id

    @property
    def remaining_balance(self):
        """Gets the remaining_balance of this GiftCertificate.  # noqa: E501

        The remaining balance on the gift certificate.  This is never set directly, but calculated from the ledger.  To change the remaining balance, add a ledger entry.  # noqa: E501

        :return: The remaining_balance of this GiftCertificate.  # noqa: E501
        :rtype: float
        """
        return self._remaining_balance

    @remaining_balance.setter
    def remaining_balance(self, remaining_balance):
        """Sets the remaining_balance of this GiftCertificate.

        The remaining balance on the gift certificate.  This is never set directly, but calculated from the ledger.  To change the remaining balance, add a ledger entry.  # noqa: E501

        :param remaining_balance: The remaining_balance of this GiftCertificate.  # noqa: E501
        :type: float
        """

        self._remaining_balance = remaining_balance

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GiftCertificate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GiftCertificate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
