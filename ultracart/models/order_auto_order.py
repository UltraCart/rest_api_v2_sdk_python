# coding: utf-8

"""
    UltraCart Rest API V2

    This is the next generation UltraCart REST API...

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class OrderAutoOrder(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auto_order_code': 'str',
        'auto_order_oid': 'int',
        'original_order_id': 'str',
        'status': 'str'
    }

    attribute_map = {
        'auto_order_code': 'auto_order_code',
        'auto_order_oid': 'auto_order_oid',
        'original_order_id': 'original_order_id',
        'status': 'status'
    }

    def __init__(self, auto_order_code=None, auto_order_oid=None, original_order_id=None, status=None):
        """
        OrderAutoOrder - a model defined in Swagger
        """

        self._auto_order_code = None
        self._auto_order_oid = None
        self._original_order_id = None
        self._status = None
        self.discriminator = None

        if auto_order_code is not None:
          self.auto_order_code = auto_order_code
        if auto_order_oid is not None:
          self.auto_order_oid = auto_order_oid
        if original_order_id is not None:
          self.original_order_id = original_order_id
        if status is not None:
          self.status = status

    @property
    def auto_order_code(self):
        """
        Gets the auto_order_code of this OrderAutoOrder.
        Unique code assigned to the auto order

        :return: The auto_order_code of this OrderAutoOrder.
        :rtype: str
        """
        return self._auto_order_code

    @auto_order_code.setter
    def auto_order_code(self, auto_order_code):
        """
        Sets the auto_order_code of this OrderAutoOrder.
        Unique code assigned to the auto order

        :param auto_order_code: The auto_order_code of this OrderAutoOrder.
        :type: str
        """

        self._auto_order_code = auto_order_code

    @property
    def auto_order_oid(self):
        """
        Gets the auto_order_oid of this OrderAutoOrder.
        Unique identifier assigned to the auto order

        :return: The auto_order_oid of this OrderAutoOrder.
        :rtype: int
        """
        return self._auto_order_oid

    @auto_order_oid.setter
    def auto_order_oid(self, auto_order_oid):
        """
        Sets the auto_order_oid of this OrderAutoOrder.
        Unique identifier assigned to the auto order

        :param auto_order_oid: The auto_order_oid of this OrderAutoOrder.
        :type: int
        """

        self._auto_order_oid = auto_order_oid

    @property
    def original_order_id(self):
        """
        Gets the original_order_id of this OrderAutoOrder.
        Orignal order id that started this auto order sequence

        :return: The original_order_id of this OrderAutoOrder.
        :rtype: str
        """
        return self._original_order_id

    @original_order_id.setter
    def original_order_id(self, original_order_id):
        """
        Sets the original_order_id of this OrderAutoOrder.
        Orignal order id that started this auto order sequence

        :param original_order_id: The original_order_id of this OrderAutoOrder.
        :type: str
        """

        self._original_order_id = original_order_id

    @property
    def status(self):
        """
        Gets the status of this OrderAutoOrder.
        The status of the auto order

        :return: The status of this OrderAutoOrder.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this OrderAutoOrder.
        The status of the auto order

        :param status: The status of this OrderAutoOrder.
        :type: str
        """
        allowed_values = ["active", "canceled", "disabled"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, OrderAutoOrder):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
