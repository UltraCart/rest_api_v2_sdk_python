# coding: utf-8

"""
    UltraCart Rest API V2

    This is the next generation UltraCart REST API...

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class CartTaxes(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, county=None, exempt=None, rate=None):
        """
        CartTaxes - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'county': 'str',
            'exempt': 'bool',
            'rate': 'float'
        }

        self.attribute_map = {
            'county': 'county',
            'exempt': 'exempt',
            'rate': 'rate'
        }

        self._county = county
        self._exempt = exempt
        self._rate = rate

    @property
    def county(self):
        """
        Gets the county of this CartTaxes.
        Tax county if the state requires it.

        :return: The county of this CartTaxes.
        :rtype: str
        """
        return self._county

    @county.setter
    def county(self, county):
        """
        Sets the county of this CartTaxes.
        Tax county if the state requires it.

        :param county: The county of this CartTaxes.
        :type: str
        """

        if not county:
            raise ValueError("Invalid value for `county`, must not be `None`")
        if len(county) > 32:
            raise ValueError("Invalid value for `county`, length must be less than `32`")

        self._county = county

    @property
    def exempt(self):
        """
        Gets the exempt of this CartTaxes.
        True if tax exempt

        :return: The exempt of this CartTaxes.
        :rtype: bool
        """
        return self._exempt

    @exempt.setter
    def exempt(self, exempt):
        """
        Sets the exempt of this CartTaxes.
        True if tax exempt

        :param exempt: The exempt of this CartTaxes.
        :type: bool
        """

        self._exempt = exempt

    @property
    def rate(self):
        """
        Gets the rate of this CartTaxes.
        Tax rate

        :return: The rate of this CartTaxes.
        :rtype: float
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """
        Sets the rate of this CartTaxes.
        Tax rate

        :param rate: The rate of this CartTaxes.
        :type: float
        """

        self._rate = rate

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
