# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConversationEventReadMessage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'conversation_message_uuid': 'str',
        'message_dts': 'str',
        'message_epoch': 'int'
    }

    attribute_map = {
        'conversation_message_uuid': 'conversation_message_uuid',
        'message_dts': 'message_dts',
        'message_epoch': 'message_epoch'
    }

    def __init__(self, conversation_message_uuid=None, message_dts=None, message_epoch=None):  # noqa: E501
        """ConversationEventReadMessage - a model defined in Swagger"""  # noqa: E501

        self._conversation_message_uuid = None
        self._message_dts = None
        self._message_epoch = None
        self.discriminator = None

        if conversation_message_uuid is not None:
            self.conversation_message_uuid = conversation_message_uuid
        if message_dts is not None:
            self.message_dts = message_dts
        if message_epoch is not None:
            self.message_epoch = message_epoch

    @property
    def conversation_message_uuid(self):
        """Gets the conversation_message_uuid of this ConversationEventReadMessage.  # noqa: E501


        :return: The conversation_message_uuid of this ConversationEventReadMessage.  # noqa: E501
        :rtype: str
        """
        return self._conversation_message_uuid

    @conversation_message_uuid.setter
    def conversation_message_uuid(self, conversation_message_uuid):
        """Sets the conversation_message_uuid of this ConversationEventReadMessage.


        :param conversation_message_uuid: The conversation_message_uuid of this ConversationEventReadMessage.  # noqa: E501
        :type: str
        """

        self._conversation_message_uuid = conversation_message_uuid

    @property
    def message_dts(self):
        """Gets the message_dts of this ConversationEventReadMessage.  # noqa: E501

        Message date/time  # noqa: E501

        :return: The message_dts of this ConversationEventReadMessage.  # noqa: E501
        :rtype: str
        """
        return self._message_dts

    @message_dts.setter
    def message_dts(self, message_dts):
        """Sets the message_dts of this ConversationEventReadMessage.

        Message date/time  # noqa: E501

        :param message_dts: The message_dts of this ConversationEventReadMessage.  # noqa: E501
        :type: str
        """

        self._message_dts = message_dts

    @property
    def message_epoch(self):
        """Gets the message_epoch of this ConversationEventReadMessage.  # noqa: E501


        :return: The message_epoch of this ConversationEventReadMessage.  # noqa: E501
        :rtype: int
        """
        return self._message_epoch

    @message_epoch.setter
    def message_epoch(self, message_epoch):
        """Sets the message_epoch of this ConversationEventReadMessage.


        :param message_epoch: The message_epoch of this ConversationEventReadMessage.  # noqa: E501
        :type: int
        """

        self._message_epoch = message_epoch

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConversationEventReadMessage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConversationEventReadMessage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
