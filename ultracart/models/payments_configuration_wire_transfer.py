# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PaymentsConfigurationWireTransfer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'accept_wire_transfer': 'bool',
        'account_number': 'str',
        'accounting_code': 'str',
        'bank_address': 'str',
        'deposit_to_account': 'str',
        'intermediate_routing_number': 'str',
        'restrictions': 'PaymentsConfigurationRestrictions',
        'routing_number': 'str',
        'surcharge_accounting_code': 'str',
        'surcharge_fee': 'float',
        'surcharge_percentage': 'float'
    }

    attribute_map = {
        'accept_wire_transfer': 'accept_wire_transfer',
        'account_number': 'account_number',
        'accounting_code': 'accounting_code',
        'bank_address': 'bank_address',
        'deposit_to_account': 'deposit_to_account',
        'intermediate_routing_number': 'intermediate_routing_number',
        'restrictions': 'restrictions',
        'routing_number': 'routing_number',
        'surcharge_accounting_code': 'surcharge_accounting_code',
        'surcharge_fee': 'surcharge_fee',
        'surcharge_percentage': 'surcharge_percentage'
    }

    def __init__(self, accept_wire_transfer=None, account_number=None, accounting_code=None, bank_address=None, deposit_to_account=None, intermediate_routing_number=None, restrictions=None, routing_number=None, surcharge_accounting_code=None, surcharge_fee=None, surcharge_percentage=None):  # noqa: E501
        """PaymentsConfigurationWireTransfer - a model defined in Swagger"""  # noqa: E501

        self._accept_wire_transfer = None
        self._account_number = None
        self._accounting_code = None
        self._bank_address = None
        self._deposit_to_account = None
        self._intermediate_routing_number = None
        self._restrictions = None
        self._routing_number = None
        self._surcharge_accounting_code = None
        self._surcharge_fee = None
        self._surcharge_percentage = None
        self.discriminator = None

        if accept_wire_transfer is not None:
            self.accept_wire_transfer = accept_wire_transfer
        if account_number is not None:
            self.account_number = account_number
        if accounting_code is not None:
            self.accounting_code = accounting_code
        if bank_address is not None:
            self.bank_address = bank_address
        if deposit_to_account is not None:
            self.deposit_to_account = deposit_to_account
        if intermediate_routing_number is not None:
            self.intermediate_routing_number = intermediate_routing_number
        if restrictions is not None:
            self.restrictions = restrictions
        if routing_number is not None:
            self.routing_number = routing_number
        if surcharge_accounting_code is not None:
            self.surcharge_accounting_code = surcharge_accounting_code
        if surcharge_fee is not None:
            self.surcharge_fee = surcharge_fee
        if surcharge_percentage is not None:
            self.surcharge_percentage = surcharge_percentage

    @property
    def accept_wire_transfer(self):
        """Gets the accept_wire_transfer of this PaymentsConfigurationWireTransfer.  # noqa: E501

        Master flag indicating this merchant accepts wire transfers  # noqa: E501

        :return: The accept_wire_transfer of this PaymentsConfigurationWireTransfer.  # noqa: E501
        :rtype: bool
        """
        return self._accept_wire_transfer

    @accept_wire_transfer.setter
    def accept_wire_transfer(self, accept_wire_transfer):
        """Sets the accept_wire_transfer of this PaymentsConfigurationWireTransfer.

        Master flag indicating this merchant accepts wire transfers  # noqa: E501

        :param accept_wire_transfer: The accept_wire_transfer of this PaymentsConfigurationWireTransfer.  # noqa: E501
        :type: bool
        """

        self._accept_wire_transfer = accept_wire_transfer

    @property
    def account_number(self):
        """Gets the account_number of this PaymentsConfigurationWireTransfer.  # noqa: E501

        account_number  # noqa: E501

        :return: The account_number of this PaymentsConfigurationWireTransfer.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this PaymentsConfigurationWireTransfer.

        account_number  # noqa: E501

        :param account_number: The account_number of this PaymentsConfigurationWireTransfer.  # noqa: E501
        :type: str
        """

        self._account_number = account_number

    @property
    def accounting_code(self):
        """Gets the accounting_code of this PaymentsConfigurationWireTransfer.  # noqa: E501

        Optional Quickbooks accounting code  # noqa: E501

        :return: The accounting_code of this PaymentsConfigurationWireTransfer.  # noqa: E501
        :rtype: str
        """
        return self._accounting_code

    @accounting_code.setter
    def accounting_code(self, accounting_code):
        """Sets the accounting_code of this PaymentsConfigurationWireTransfer.

        Optional Quickbooks accounting code  # noqa: E501

        :param accounting_code: The accounting_code of this PaymentsConfigurationWireTransfer.  # noqa: E501
        :type: str
        """

        self._accounting_code = accounting_code

    @property
    def bank_address(self):
        """Gets the bank_address of this PaymentsConfigurationWireTransfer.  # noqa: E501

        Bank address  # noqa: E501

        :return: The bank_address of this PaymentsConfigurationWireTransfer.  # noqa: E501
        :rtype: str
        """
        return self._bank_address

    @bank_address.setter
    def bank_address(self, bank_address):
        """Sets the bank_address of this PaymentsConfigurationWireTransfer.

        Bank address  # noqa: E501

        :param bank_address: The bank_address of this PaymentsConfigurationWireTransfer.  # noqa: E501
        :type: str
        """

        self._bank_address = bank_address

    @property
    def deposit_to_account(self):
        """Gets the deposit_to_account of this PaymentsConfigurationWireTransfer.  # noqa: E501

        Optional Quickbooks deposit to account  # noqa: E501

        :return: The deposit_to_account of this PaymentsConfigurationWireTransfer.  # noqa: E501
        :rtype: str
        """
        return self._deposit_to_account

    @deposit_to_account.setter
    def deposit_to_account(self, deposit_to_account):
        """Sets the deposit_to_account of this PaymentsConfigurationWireTransfer.

        Optional Quickbooks deposit to account  # noqa: E501

        :param deposit_to_account: The deposit_to_account of this PaymentsConfigurationWireTransfer.  # noqa: E501
        :type: str
        """

        self._deposit_to_account = deposit_to_account

    @property
    def intermediate_routing_number(self):
        """Gets the intermediate_routing_number of this PaymentsConfigurationWireTransfer.  # noqa: E501

        Intermediate routing number  # noqa: E501

        :return: The intermediate_routing_number of this PaymentsConfigurationWireTransfer.  # noqa: E501
        :rtype: str
        """
        return self._intermediate_routing_number

    @intermediate_routing_number.setter
    def intermediate_routing_number(self, intermediate_routing_number):
        """Sets the intermediate_routing_number of this PaymentsConfigurationWireTransfer.

        Intermediate routing number  # noqa: E501

        :param intermediate_routing_number: The intermediate_routing_number of this PaymentsConfigurationWireTransfer.  # noqa: E501
        :type: str
        """

        self._intermediate_routing_number = intermediate_routing_number

    @property
    def restrictions(self):
        """Gets the restrictions of this PaymentsConfigurationWireTransfer.  # noqa: E501


        :return: The restrictions of this PaymentsConfigurationWireTransfer.  # noqa: E501
        :rtype: PaymentsConfigurationRestrictions
        """
        return self._restrictions

    @restrictions.setter
    def restrictions(self, restrictions):
        """Sets the restrictions of this PaymentsConfigurationWireTransfer.


        :param restrictions: The restrictions of this PaymentsConfigurationWireTransfer.  # noqa: E501
        :type: PaymentsConfigurationRestrictions
        """

        self._restrictions = restrictions

    @property
    def routing_number(self):
        """Gets the routing_number of this PaymentsConfigurationWireTransfer.  # noqa: E501

        Routing number  # noqa: E501

        :return: The routing_number of this PaymentsConfigurationWireTransfer.  # noqa: E501
        :rtype: str
        """
        return self._routing_number

    @routing_number.setter
    def routing_number(self, routing_number):
        """Sets the routing_number of this PaymentsConfigurationWireTransfer.

        Routing number  # noqa: E501

        :param routing_number: The routing_number of this PaymentsConfigurationWireTransfer.  # noqa: E501
        :type: str
        """

        self._routing_number = routing_number

    @property
    def surcharge_accounting_code(self):
        """Gets the surcharge_accounting_code of this PaymentsConfigurationWireTransfer.  # noqa: E501

        If a surcharge is present and this merchant is integrated with Quickbooks, this is the accounting code for the surcharge amount  # noqa: E501

        :return: The surcharge_accounting_code of this PaymentsConfigurationWireTransfer.  # noqa: E501
        :rtype: str
        """
        return self._surcharge_accounting_code

    @surcharge_accounting_code.setter
    def surcharge_accounting_code(self, surcharge_accounting_code):
        """Sets the surcharge_accounting_code of this PaymentsConfigurationWireTransfer.

        If a surcharge is present and this merchant is integrated with Quickbooks, this is the accounting code for the surcharge amount  # noqa: E501

        :param surcharge_accounting_code: The surcharge_accounting_code of this PaymentsConfigurationWireTransfer.  # noqa: E501
        :type: str
        """

        self._surcharge_accounting_code = surcharge_accounting_code

    @property
    def surcharge_fee(self):
        """Gets the surcharge_fee of this PaymentsConfigurationWireTransfer.  # noqa: E501

        surcharge_fee  # noqa: E501

        :return: The surcharge_fee of this PaymentsConfigurationWireTransfer.  # noqa: E501
        :rtype: float
        """
        return self._surcharge_fee

    @surcharge_fee.setter
    def surcharge_fee(self, surcharge_fee):
        """Sets the surcharge_fee of this PaymentsConfigurationWireTransfer.

        surcharge_fee  # noqa: E501

        :param surcharge_fee: The surcharge_fee of this PaymentsConfigurationWireTransfer.  # noqa: E501
        :type: float
        """

        self._surcharge_fee = surcharge_fee

    @property
    def surcharge_percentage(self):
        """Gets the surcharge_percentage of this PaymentsConfigurationWireTransfer.  # noqa: E501

        surcharge_percentage  # noqa: E501

        :return: The surcharge_percentage of this PaymentsConfigurationWireTransfer.  # noqa: E501
        :rtype: float
        """
        return self._surcharge_percentage

    @surcharge_percentage.setter
    def surcharge_percentage(self, surcharge_percentage):
        """Sets the surcharge_percentage of this PaymentsConfigurationWireTransfer.

        surcharge_percentage  # noqa: E501

        :param surcharge_percentage: The surcharge_percentage of this PaymentsConfigurationWireTransfer.  # noqa: E501
        :type: float
        """

        self._surcharge_percentage = surcharge_percentage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaymentsConfigurationWireTransfer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentsConfigurationWireTransfer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
