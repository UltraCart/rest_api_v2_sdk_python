# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PaymentsConfigurationWireTransfer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'accept_wire_transfer': 'bool',
        'restrictions': 'PaymentsConfigurationRestrictions',
        'wire_transfer_accounting_code': 'str',
        'wire_transfer_account_number': 'str',
        'wire_transfer_bank_address': 'str',
        'wire_transfer_deposit_to_account': 'str',
        'wire_transfer_intermediate_routing_number': 'str',
        'wire_transfer_routing_number': 'str',
        'wire_transfer_surcharge_accounting_code': 'str',
        'wire_transfer_surcharge_fee': 'str',
        'wire_transfer_surcharge_perc': 'str'
    }

    attribute_map = {
        'accept_wire_transfer': 'acceptWireTransfer',
        'restrictions': 'restrictions',
        'wire_transfer_accounting_code': 'wireTransferAccountingCode',
        'wire_transfer_account_number': 'wireTransferAccountNumber',
        'wire_transfer_bank_address': 'wireTransferBankAddress',
        'wire_transfer_deposit_to_account': 'wireTransferDepositToAccount',
        'wire_transfer_intermediate_routing_number': 'wireTransferIntermediateRoutingNumber',
        'wire_transfer_routing_number': 'wireTransferRoutingNumber',
        'wire_transfer_surcharge_accounting_code': 'wireTransferSurchargeAccountingCode',
        'wire_transfer_surcharge_fee': 'wireTransferSurchargeFee',
        'wire_transfer_surcharge_perc': 'wireTransferSurchargePerc'
    }

    def __init__(self, accept_wire_transfer=None, restrictions=None, wire_transfer_accounting_code=None, wire_transfer_account_number=None, wire_transfer_bank_address=None, wire_transfer_deposit_to_account=None, wire_transfer_intermediate_routing_number=None, wire_transfer_routing_number=None, wire_transfer_surcharge_accounting_code=None, wire_transfer_surcharge_fee=None, wire_transfer_surcharge_perc=None):  # noqa: E501
        """PaymentsConfigurationWireTransfer - a model defined in Swagger"""  # noqa: E501

        self._accept_wire_transfer = None
        self._restrictions = None
        self._wire_transfer_accounting_code = None
        self._wire_transfer_account_number = None
        self._wire_transfer_bank_address = None
        self._wire_transfer_deposit_to_account = None
        self._wire_transfer_intermediate_routing_number = None
        self._wire_transfer_routing_number = None
        self._wire_transfer_surcharge_accounting_code = None
        self._wire_transfer_surcharge_fee = None
        self._wire_transfer_surcharge_perc = None
        self.discriminator = None

        if accept_wire_transfer is not None:
            self.accept_wire_transfer = accept_wire_transfer
        if restrictions is not None:
            self.restrictions = restrictions
        if wire_transfer_accounting_code is not None:
            self.wire_transfer_accounting_code = wire_transfer_accounting_code
        if wire_transfer_account_number is not None:
            self.wire_transfer_account_number = wire_transfer_account_number
        if wire_transfer_bank_address is not None:
            self.wire_transfer_bank_address = wire_transfer_bank_address
        if wire_transfer_deposit_to_account is not None:
            self.wire_transfer_deposit_to_account = wire_transfer_deposit_to_account
        if wire_transfer_intermediate_routing_number is not None:
            self.wire_transfer_intermediate_routing_number = wire_transfer_intermediate_routing_number
        if wire_transfer_routing_number is not None:
            self.wire_transfer_routing_number = wire_transfer_routing_number
        if wire_transfer_surcharge_accounting_code is not None:
            self.wire_transfer_surcharge_accounting_code = wire_transfer_surcharge_accounting_code
        if wire_transfer_surcharge_fee is not None:
            self.wire_transfer_surcharge_fee = wire_transfer_surcharge_fee
        if wire_transfer_surcharge_perc is not None:
            self.wire_transfer_surcharge_perc = wire_transfer_surcharge_perc

    @property
    def accept_wire_transfer(self):
        """Gets the accept_wire_transfer of this PaymentsConfigurationWireTransfer.  # noqa: E501


        :return: The accept_wire_transfer of this PaymentsConfigurationWireTransfer.  # noqa: E501
        :rtype: bool
        """
        return self._accept_wire_transfer

    @accept_wire_transfer.setter
    def accept_wire_transfer(self, accept_wire_transfer):
        """Sets the accept_wire_transfer of this PaymentsConfigurationWireTransfer.


        :param accept_wire_transfer: The accept_wire_transfer of this PaymentsConfigurationWireTransfer.  # noqa: E501
        :type: bool
        """

        self._accept_wire_transfer = accept_wire_transfer

    @property
    def restrictions(self):
        """Gets the restrictions of this PaymentsConfigurationWireTransfer.  # noqa: E501


        :return: The restrictions of this PaymentsConfigurationWireTransfer.  # noqa: E501
        :rtype: PaymentsConfigurationRestrictions
        """
        return self._restrictions

    @restrictions.setter
    def restrictions(self, restrictions):
        """Sets the restrictions of this PaymentsConfigurationWireTransfer.


        :param restrictions: The restrictions of this PaymentsConfigurationWireTransfer.  # noqa: E501
        :type: PaymentsConfigurationRestrictions
        """

        self._restrictions = restrictions

    @property
    def wire_transfer_accounting_code(self):
        """Gets the wire_transfer_accounting_code of this PaymentsConfigurationWireTransfer.  # noqa: E501


        :return: The wire_transfer_accounting_code of this PaymentsConfigurationWireTransfer.  # noqa: E501
        :rtype: str
        """
        return self._wire_transfer_accounting_code

    @wire_transfer_accounting_code.setter
    def wire_transfer_accounting_code(self, wire_transfer_accounting_code):
        """Sets the wire_transfer_accounting_code of this PaymentsConfigurationWireTransfer.


        :param wire_transfer_accounting_code: The wire_transfer_accounting_code of this PaymentsConfigurationWireTransfer.  # noqa: E501
        :type: str
        """

        self._wire_transfer_accounting_code = wire_transfer_accounting_code

    @property
    def wire_transfer_account_number(self):
        """Gets the wire_transfer_account_number of this PaymentsConfigurationWireTransfer.  # noqa: E501


        :return: The wire_transfer_account_number of this PaymentsConfigurationWireTransfer.  # noqa: E501
        :rtype: str
        """
        return self._wire_transfer_account_number

    @wire_transfer_account_number.setter
    def wire_transfer_account_number(self, wire_transfer_account_number):
        """Sets the wire_transfer_account_number of this PaymentsConfigurationWireTransfer.


        :param wire_transfer_account_number: The wire_transfer_account_number of this PaymentsConfigurationWireTransfer.  # noqa: E501
        :type: str
        """

        self._wire_transfer_account_number = wire_transfer_account_number

    @property
    def wire_transfer_bank_address(self):
        """Gets the wire_transfer_bank_address of this PaymentsConfigurationWireTransfer.  # noqa: E501


        :return: The wire_transfer_bank_address of this PaymentsConfigurationWireTransfer.  # noqa: E501
        :rtype: str
        """
        return self._wire_transfer_bank_address

    @wire_transfer_bank_address.setter
    def wire_transfer_bank_address(self, wire_transfer_bank_address):
        """Sets the wire_transfer_bank_address of this PaymentsConfigurationWireTransfer.


        :param wire_transfer_bank_address: The wire_transfer_bank_address of this PaymentsConfigurationWireTransfer.  # noqa: E501
        :type: str
        """

        self._wire_transfer_bank_address = wire_transfer_bank_address

    @property
    def wire_transfer_deposit_to_account(self):
        """Gets the wire_transfer_deposit_to_account of this PaymentsConfigurationWireTransfer.  # noqa: E501


        :return: The wire_transfer_deposit_to_account of this PaymentsConfigurationWireTransfer.  # noqa: E501
        :rtype: str
        """
        return self._wire_transfer_deposit_to_account

    @wire_transfer_deposit_to_account.setter
    def wire_transfer_deposit_to_account(self, wire_transfer_deposit_to_account):
        """Sets the wire_transfer_deposit_to_account of this PaymentsConfigurationWireTransfer.


        :param wire_transfer_deposit_to_account: The wire_transfer_deposit_to_account of this PaymentsConfigurationWireTransfer.  # noqa: E501
        :type: str
        """

        self._wire_transfer_deposit_to_account = wire_transfer_deposit_to_account

    @property
    def wire_transfer_intermediate_routing_number(self):
        """Gets the wire_transfer_intermediate_routing_number of this PaymentsConfigurationWireTransfer.  # noqa: E501


        :return: The wire_transfer_intermediate_routing_number of this PaymentsConfigurationWireTransfer.  # noqa: E501
        :rtype: str
        """
        return self._wire_transfer_intermediate_routing_number

    @wire_transfer_intermediate_routing_number.setter
    def wire_transfer_intermediate_routing_number(self, wire_transfer_intermediate_routing_number):
        """Sets the wire_transfer_intermediate_routing_number of this PaymentsConfigurationWireTransfer.


        :param wire_transfer_intermediate_routing_number: The wire_transfer_intermediate_routing_number of this PaymentsConfigurationWireTransfer.  # noqa: E501
        :type: str
        """

        self._wire_transfer_intermediate_routing_number = wire_transfer_intermediate_routing_number

    @property
    def wire_transfer_routing_number(self):
        """Gets the wire_transfer_routing_number of this PaymentsConfigurationWireTransfer.  # noqa: E501


        :return: The wire_transfer_routing_number of this PaymentsConfigurationWireTransfer.  # noqa: E501
        :rtype: str
        """
        return self._wire_transfer_routing_number

    @wire_transfer_routing_number.setter
    def wire_transfer_routing_number(self, wire_transfer_routing_number):
        """Sets the wire_transfer_routing_number of this PaymentsConfigurationWireTransfer.


        :param wire_transfer_routing_number: The wire_transfer_routing_number of this PaymentsConfigurationWireTransfer.  # noqa: E501
        :type: str
        """

        self._wire_transfer_routing_number = wire_transfer_routing_number

    @property
    def wire_transfer_surcharge_accounting_code(self):
        """Gets the wire_transfer_surcharge_accounting_code of this PaymentsConfigurationWireTransfer.  # noqa: E501


        :return: The wire_transfer_surcharge_accounting_code of this PaymentsConfigurationWireTransfer.  # noqa: E501
        :rtype: str
        """
        return self._wire_transfer_surcharge_accounting_code

    @wire_transfer_surcharge_accounting_code.setter
    def wire_transfer_surcharge_accounting_code(self, wire_transfer_surcharge_accounting_code):
        """Sets the wire_transfer_surcharge_accounting_code of this PaymentsConfigurationWireTransfer.


        :param wire_transfer_surcharge_accounting_code: The wire_transfer_surcharge_accounting_code of this PaymentsConfigurationWireTransfer.  # noqa: E501
        :type: str
        """

        self._wire_transfer_surcharge_accounting_code = wire_transfer_surcharge_accounting_code

    @property
    def wire_transfer_surcharge_fee(self):
        """Gets the wire_transfer_surcharge_fee of this PaymentsConfigurationWireTransfer.  # noqa: E501


        :return: The wire_transfer_surcharge_fee of this PaymentsConfigurationWireTransfer.  # noqa: E501
        :rtype: str
        """
        return self._wire_transfer_surcharge_fee

    @wire_transfer_surcharge_fee.setter
    def wire_transfer_surcharge_fee(self, wire_transfer_surcharge_fee):
        """Sets the wire_transfer_surcharge_fee of this PaymentsConfigurationWireTransfer.


        :param wire_transfer_surcharge_fee: The wire_transfer_surcharge_fee of this PaymentsConfigurationWireTransfer.  # noqa: E501
        :type: str
        """

        self._wire_transfer_surcharge_fee = wire_transfer_surcharge_fee

    @property
    def wire_transfer_surcharge_perc(self):
        """Gets the wire_transfer_surcharge_perc of this PaymentsConfigurationWireTransfer.  # noqa: E501


        :return: The wire_transfer_surcharge_perc of this PaymentsConfigurationWireTransfer.  # noqa: E501
        :rtype: str
        """
        return self._wire_transfer_surcharge_perc

    @wire_transfer_surcharge_perc.setter
    def wire_transfer_surcharge_perc(self, wire_transfer_surcharge_perc):
        """Sets the wire_transfer_surcharge_perc of this PaymentsConfigurationWireTransfer.


        :param wire_transfer_surcharge_perc: The wire_transfer_surcharge_perc of this PaymentsConfigurationWireTransfer.  # noqa: E501
        :type: str
        """

        self._wire_transfer_surcharge_perc = wire_transfer_surcharge_perc

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaymentsConfigurationWireTransfer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentsConfigurationWireTransfer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
