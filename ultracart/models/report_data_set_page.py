# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ReportDataSetPage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data_set_uuid': 'str',
        'merchant_id': 'str',
        'next_page_token': 'str',
        'next_start_index': 'int',
        'page_number': 'int',
        'row_count': 'int',
        'rows': 'list[ReportDataSetRow]',
        'rows_s3_url': 'str',
        'start_index': 'int',
        'table_id': 'str'
    }

    attribute_map = {
        'data_set_uuid': 'data_set_uuid',
        'merchant_id': 'merchant_id',
        'next_page_token': 'next_page_token',
        'next_start_index': 'next_start_index',
        'page_number': 'page_number',
        'row_count': 'row_count',
        'rows': 'rows',
        'rows_s3_url': 'rows_s3_url',
        'start_index': 'start_index',
        'table_id': 'table_id'
    }

    def __init__(self, data_set_uuid=None, merchant_id=None, next_page_token=None, next_start_index=None, page_number=None, row_count=None, rows=None, rows_s3_url=None, start_index=None, table_id=None):  # noqa: E501
        """ReportDataSetPage - a model defined in Swagger"""  # noqa: E501

        self._data_set_uuid = None
        self._merchant_id = None
        self._next_page_token = None
        self._next_start_index = None
        self._page_number = None
        self._row_count = None
        self._rows = None
        self._rows_s3_url = None
        self._start_index = None
        self._table_id = None
        self.discriminator = None

        if data_set_uuid is not None:
            self.data_set_uuid = data_set_uuid
        if merchant_id is not None:
            self.merchant_id = merchant_id
        if next_page_token is not None:
            self.next_page_token = next_page_token
        if next_start_index is not None:
            self.next_start_index = next_start_index
        if page_number is not None:
            self.page_number = page_number
        if row_count is not None:
            self.row_count = row_count
        if rows is not None:
            self.rows = rows
        if rows_s3_url is not None:
            self.rows_s3_url = rows_s3_url
        if start_index is not None:
            self.start_index = start_index
        if table_id is not None:
            self.table_id = table_id

    @property
    def data_set_uuid(self):
        """Gets the data_set_uuid of this ReportDataSetPage.  # noqa: E501

        A unique identifier assigned to the data set that is returned.  # noqa: E501

        :return: The data_set_uuid of this ReportDataSetPage.  # noqa: E501
        :rtype: str
        """
        return self._data_set_uuid

    @data_set_uuid.setter
    def data_set_uuid(self, data_set_uuid):
        """Sets the data_set_uuid of this ReportDataSetPage.

        A unique identifier assigned to the data set that is returned.  # noqa: E501

        :param data_set_uuid: The data_set_uuid of this ReportDataSetPage.  # noqa: E501
        :type: str
        """

        self._data_set_uuid = data_set_uuid

    @property
    def merchant_id(self):
        """Gets the merchant_id of this ReportDataSetPage.  # noqa: E501

        Merchant that owns this data set  # noqa: E501

        :return: The merchant_id of this ReportDataSetPage.  # noqa: E501
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this ReportDataSetPage.

        Merchant that owns this data set  # noqa: E501

        :param merchant_id: The merchant_id of this ReportDataSetPage.  # noqa: E501
        :type: str
        """

        self._merchant_id = merchant_id

    @property
    def next_page_token(self):
        """Gets the next_page_token of this ReportDataSetPage.  # noqa: E501


        :return: The next_page_token of this ReportDataSetPage.  # noqa: E501
        :rtype: str
        """
        return self._next_page_token

    @next_page_token.setter
    def next_page_token(self, next_page_token):
        """Sets the next_page_token of this ReportDataSetPage.


        :param next_page_token: The next_page_token of this ReportDataSetPage.  # noqa: E501
        :type: str
        """

        self._next_page_token = next_page_token

    @property
    def next_start_index(self):
        """Gets the next_start_index of this ReportDataSetPage.  # noqa: E501


        :return: The next_start_index of this ReportDataSetPage.  # noqa: E501
        :rtype: int
        """
        return self._next_start_index

    @next_start_index.setter
    def next_start_index(self, next_start_index):
        """Sets the next_start_index of this ReportDataSetPage.


        :param next_start_index: The next_start_index of this ReportDataSetPage.  # noqa: E501
        :type: int
        """

        self._next_start_index = next_start_index

    @property
    def page_number(self):
        """Gets the page_number of this ReportDataSetPage.  # noqa: E501


        :return: The page_number of this ReportDataSetPage.  # noqa: E501
        :rtype: int
        """
        return self._page_number

    @page_number.setter
    def page_number(self, page_number):
        """Sets the page_number of this ReportDataSetPage.


        :param page_number: The page_number of this ReportDataSetPage.  # noqa: E501
        :type: int
        """

        self._page_number = page_number

    @property
    def row_count(self):
        """Gets the row_count of this ReportDataSetPage.  # noqa: E501


        :return: The row_count of this ReportDataSetPage.  # noqa: E501
        :rtype: int
        """
        return self._row_count

    @row_count.setter
    def row_count(self, row_count):
        """Sets the row_count of this ReportDataSetPage.


        :param row_count: The row_count of this ReportDataSetPage.  # noqa: E501
        :type: int
        """

        self._row_count = row_count

    @property
    def rows(self):
        """Gets the rows of this ReportDataSetPage.  # noqa: E501

        Rows returned for the data set  # noqa: E501

        :return: The rows of this ReportDataSetPage.  # noqa: E501
        :rtype: list[ReportDataSetRow]
        """
        return self._rows

    @rows.setter
    def rows(self, rows):
        """Sets the rows of this ReportDataSetPage.

        Rows returned for the data set  # noqa: E501

        :param rows: The rows of this ReportDataSetPage.  # noqa: E501
        :type: list[ReportDataSetRow]
        """

        self._rows = rows

    @property
    def rows_s3_url(self):
        """Gets the rows_s3_url of this ReportDataSetPage.  # noqa: E501

        Signed S3 URL where the page rows can be downloaded from  # noqa: E501

        :return: The rows_s3_url of this ReportDataSetPage.  # noqa: E501
        :rtype: str
        """
        return self._rows_s3_url

    @rows_s3_url.setter
    def rows_s3_url(self, rows_s3_url):
        """Sets the rows_s3_url of this ReportDataSetPage.

        Signed S3 URL where the page rows can be downloaded from  # noqa: E501

        :param rows_s3_url: The rows_s3_url of this ReportDataSetPage.  # noqa: E501
        :type: str
        """

        self._rows_s3_url = rows_s3_url

    @property
    def start_index(self):
        """Gets the start_index of this ReportDataSetPage.  # noqa: E501

        Zero based index of the starting row  # noqa: E501

        :return: The start_index of this ReportDataSetPage.  # noqa: E501
        :rtype: int
        """
        return self._start_index

    @start_index.setter
    def start_index(self, start_index):
        """Sets the start_index of this ReportDataSetPage.

        Zero based index of the starting row  # noqa: E501

        :param start_index: The start_index of this ReportDataSetPage.  # noqa: E501
        :type: int
        """

        self._start_index = start_index

    @property
    def table_id(self):
        """Gets the table_id of this ReportDataSetPage.  # noqa: E501

        The BigQuery destination table id that contains the result.  # noqa: E501

        :return: The table_id of this ReportDataSetPage.  # noqa: E501
        :rtype: str
        """
        return self._table_id

    @table_id.setter
    def table_id(self, table_id):
        """Sets the table_id of this ReportDataSetPage.

        The BigQuery destination table id that contains the result.  # noqa: E501

        :param table_id: The table_id of this ReportDataSetPage.  # noqa: E501
        :type: str
        """

        self._table_id = table_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReportDataSetPage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportDataSetPage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
