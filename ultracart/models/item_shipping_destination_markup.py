# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ItemShippingDestinationMarkup(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'country_code': 'str',
        'flat_fee': 'float',
        'per_item': 'float',
        'postal_code': 'str',
        'shipping_method': 'str',
        'state': 'str'
    }

    attribute_map = {
        'country_code': 'country_code',
        'flat_fee': 'flat_fee',
        'per_item': 'per_item',
        'postal_code': 'postal_code',
        'shipping_method': 'shipping_method',
        'state': 'state'
    }

    def __init__(self, country_code=None, flat_fee=None, per_item=None, postal_code=None, shipping_method=None, state=None):
        """
        ItemShippingDestinationMarkup - a model defined in Swagger
        """

        self._country_code = None
        self._flat_fee = None
        self._per_item = None
        self._postal_code = None
        self._shipping_method = None
        self._state = None
        self.discriminator = None

        if country_code is not None:
          self.country_code = country_code
        if flat_fee is not None:
          self.flat_fee = flat_fee
        if per_item is not None:
          self.per_item = per_item
        if postal_code is not None:
          self.postal_code = postal_code
        if shipping_method is not None:
          self.shipping_method = shipping_method
        if state is not None:
          self.state = state

    @property
    def country_code(self):
        """
        Gets the country_code of this ItemShippingDestinationMarkup.
        Country code (ISO-3166 two letter)

        :return: The country_code of this ItemShippingDestinationMarkup.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """
        Sets the country_code of this ItemShippingDestinationMarkup.
        Country code (ISO-3166 two letter)

        :param country_code: The country_code of this ItemShippingDestinationMarkup.
        :type: str
        """
        if country_code is not None and len(country_code) > 2:
            raise ValueError("Invalid value for `country_code`, length must be less than or equal to `2`")

        self._country_code = country_code

    @property
    def flat_fee(self):
        """
        Gets the flat_fee of this ItemShippingDestinationMarkup.
        Flat fee

        :return: The flat_fee of this ItemShippingDestinationMarkup.
        :rtype: float
        """
        return self._flat_fee

    @flat_fee.setter
    def flat_fee(self, flat_fee):
        """
        Sets the flat_fee of this ItemShippingDestinationMarkup.
        Flat fee

        :param flat_fee: The flat_fee of this ItemShippingDestinationMarkup.
        :type: float
        """

        self._flat_fee = flat_fee

    @property
    def per_item(self):
        """
        Gets the per_item of this ItemShippingDestinationMarkup.
        Per item

        :return: The per_item of this ItemShippingDestinationMarkup.
        :rtype: float
        """
        return self._per_item

    @per_item.setter
    def per_item(self, per_item):
        """
        Sets the per_item of this ItemShippingDestinationMarkup.
        Per item

        :param per_item: The per_item of this ItemShippingDestinationMarkup.
        :type: float
        """

        self._per_item = per_item

    @property
    def postal_code(self):
        """
        Gets the postal_code of this ItemShippingDestinationMarkup.
        Postal code

        :return: The postal_code of this ItemShippingDestinationMarkup.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """
        Sets the postal_code of this ItemShippingDestinationMarkup.
        Postal code

        :param postal_code: The postal_code of this ItemShippingDestinationMarkup.
        :type: str
        """
        if postal_code is not None and len(postal_code) > 20:
            raise ValueError("Invalid value for `postal_code`, length must be less than or equal to `20`")

        self._postal_code = postal_code

    @property
    def shipping_method(self):
        """
        Gets the shipping_method of this ItemShippingDestinationMarkup.
        Shipping method

        :return: The shipping_method of this ItemShippingDestinationMarkup.
        :rtype: str
        """
        return self._shipping_method

    @shipping_method.setter
    def shipping_method(self, shipping_method):
        """
        Sets the shipping_method of this ItemShippingDestinationMarkup.
        Shipping method

        :param shipping_method: The shipping_method of this ItemShippingDestinationMarkup.
        :type: str
        """

        self._shipping_method = shipping_method

    @property
    def state(self):
        """
        Gets the state of this ItemShippingDestinationMarkup.
        State

        :return: The state of this ItemShippingDestinationMarkup.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this ItemShippingDestinationMarkup.
        State

        :param state: The state of this ItemShippingDestinationMarkup.
        :type: str
        """
        if state is not None and len(state) > 32:
            raise ValueError("Invalid value for `state`, length must be less than or equal to `32`")

        self._state = state

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ItemShippingDestinationMarkup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
