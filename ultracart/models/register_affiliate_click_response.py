# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RegisterAffiliateClickResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cookie_max_age': 'int',
        'cookie_names': 'list[str]',
        'cookie_values': 'list[str]',
        'registered': 'bool'
    }

    attribute_map = {
        'cookie_max_age': 'cookie_max_age',
        'cookie_names': 'cookie_names',
        'cookie_values': 'cookie_values',
        'registered': 'registered'
    }

    def __init__(self, cookie_max_age=None, cookie_names=None, cookie_values=None, registered=None):  # noqa: E501
        """RegisterAffiliateClickResponse - a model defined in Swagger"""  # noqa: E501

        self._cookie_max_age = None
        self._cookie_names = None
        self._cookie_values = None
        self._registered = None
        self.discriminator = None

        if cookie_max_age is not None:
            self.cookie_max_age = cookie_max_age
        if cookie_names is not None:
            self.cookie_names = cookie_names
        if cookie_values is not None:
            self.cookie_values = cookie_values
        if registered is not None:
            self.registered = registered

    @property
    def cookie_max_age(self):
        """Gets the cookie_max_age of this RegisterAffiliateClickResponse.  # noqa: E501

        The cookie max age to use  # noqa: E501

        :return: The cookie_max_age of this RegisterAffiliateClickResponse.  # noqa: E501
        :rtype: int
        """
        return self._cookie_max_age

    @cookie_max_age.setter
    def cookie_max_age(self, cookie_max_age):
        """Sets the cookie_max_age of this RegisterAffiliateClickResponse.

        The cookie max age to use  # noqa: E501

        :param cookie_max_age: The cookie_max_age of this RegisterAffiliateClickResponse.  # noqa: E501
        :type: int
        """

        self._cookie_max_age = cookie_max_age

    @property
    def cookie_names(self):
        """Gets the cookie_names of this RegisterAffiliateClickResponse.  # noqa: E501

        The names of all the cookies to set on the browser  # noqa: E501

        :return: The cookie_names of this RegisterAffiliateClickResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._cookie_names

    @cookie_names.setter
    def cookie_names(self, cookie_names):
        """Sets the cookie_names of this RegisterAffiliateClickResponse.

        The names of all the cookies to set on the browser  # noqa: E501

        :param cookie_names: The cookie_names of this RegisterAffiliateClickResponse.  # noqa: E501
        :type: list[str]
        """

        self._cookie_names = cookie_names

    @property
    def cookie_values(self):
        """Gets the cookie_values of this RegisterAffiliateClickResponse.  # noqa: E501

        The values of all the cookies to set on the browser  # noqa: E501

        :return: The cookie_values of this RegisterAffiliateClickResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._cookie_values

    @cookie_values.setter
    def cookie_values(self, cookie_values):
        """Sets the cookie_values of this RegisterAffiliateClickResponse.

        The values of all the cookies to set on the browser  # noqa: E501

        :param cookie_values: The cookie_values of this RegisterAffiliateClickResponse.  # noqa: E501
        :type: list[str]
        """

        self._cookie_values = cookie_values

    @property
    def registered(self):
        """Gets the registered of this RegisterAffiliateClickResponse.  # noqa: E501

        True if a click was registered  # noqa: E501

        :return: The registered of this RegisterAffiliateClickResponse.  # noqa: E501
        :rtype: bool
        """
        return self._registered

    @registered.setter
    def registered(self, registered):
        """Sets the registered of this RegisterAffiliateClickResponse.

        True if a click was registered  # noqa: E501

        :param registered: The registered of this RegisterAffiliateClickResponse.  # noqa: E501
        :type: bool
        """

        self._registered = registered

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RegisterAffiliateClickResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RegisterAffiliateClickResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
