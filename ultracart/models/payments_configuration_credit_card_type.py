# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PaymentsConfigurationCreditCardType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'accounting_code': 'str',
        'card_type_icon': 'str',
        'credit_card': 'str',
        'deposit_to_account': 'str',
        'enabled': 'bool',
        'processing_fee': 'float',
        'processing_percentage': 'float',
        'restrictions': 'PaymentsConfigurationRestrictions',
        'surcharge_accounting_code': 'str',
        'transaction_fee': 'float',
        'transaction_percentage': 'float'
    }

    attribute_map = {
        'accounting_code': 'accounting_code',
        'card_type_icon': 'card_type_icon',
        'credit_card': 'credit_card',
        'deposit_to_account': 'deposit_to_account',
        'enabled': 'enabled',
        'processing_fee': 'processing_fee',
        'processing_percentage': 'processing_percentage',
        'restrictions': 'restrictions',
        'surcharge_accounting_code': 'surcharge_accounting_code',
        'transaction_fee': 'transaction_fee',
        'transaction_percentage': 'transaction_percentage'
    }

    def __init__(self, accounting_code=None, card_type_icon=None, credit_card=None, deposit_to_account=None, enabled=None, processing_fee=None, processing_percentage=None, restrictions=None, surcharge_accounting_code=None, transaction_fee=None, transaction_percentage=None):  # noqa: E501
        """PaymentsConfigurationCreditCardType - a model defined in Swagger"""  # noqa: E501

        self._accounting_code = None
        self._card_type_icon = None
        self._credit_card = None
        self._deposit_to_account = None
        self._enabled = None
        self._processing_fee = None
        self._processing_percentage = None
        self._restrictions = None
        self._surcharge_accounting_code = None
        self._transaction_fee = None
        self._transaction_percentage = None
        self.discriminator = None

        if accounting_code is not None:
            self.accounting_code = accounting_code
        if card_type_icon is not None:
            self.card_type_icon = card_type_icon
        if credit_card is not None:
            self.credit_card = credit_card
        if deposit_to_account is not None:
            self.deposit_to_account = deposit_to_account
        if enabled is not None:
            self.enabled = enabled
        if processing_fee is not None:
            self.processing_fee = processing_fee
        if processing_percentage is not None:
            self.processing_percentage = processing_percentage
        if restrictions is not None:
            self.restrictions = restrictions
        if surcharge_accounting_code is not None:
            self.surcharge_accounting_code = surcharge_accounting_code
        if transaction_fee is not None:
            self.transaction_fee = transaction_fee
        if transaction_percentage is not None:
            self.transaction_percentage = transaction_percentage

    @property
    def accounting_code(self):
        """Gets the accounting_code of this PaymentsConfigurationCreditCardType.  # noqa: E501

        Optional field used for Quickbooks integrations to match this credit card with the corresponding payment type in Quickbooks  # noqa: E501

        :return: The accounting_code of this PaymentsConfigurationCreditCardType.  # noqa: E501
        :rtype: str
        """
        return self._accounting_code

    @accounting_code.setter
    def accounting_code(self, accounting_code):
        """Sets the accounting_code of this PaymentsConfigurationCreditCardType.

        Optional field used for Quickbooks integrations to match this credit card with the corresponding payment type in Quickbooks  # noqa: E501

        :param accounting_code: The accounting_code of this PaymentsConfigurationCreditCardType.  # noqa: E501
        :type: str
        """

        self._accounting_code = accounting_code

    @property
    def card_type_icon(self):
        """Gets the card_type_icon of this PaymentsConfigurationCreditCardType.  # noqa: E501

        Internally used icon information for this card type  # noqa: E501

        :return: The card_type_icon of this PaymentsConfigurationCreditCardType.  # noqa: E501
        :rtype: str
        """
        return self._card_type_icon

    @card_type_icon.setter
    def card_type_icon(self, card_type_icon):
        """Sets the card_type_icon of this PaymentsConfigurationCreditCardType.

        Internally used icon information for this card type  # noqa: E501

        :param card_type_icon: The card_type_icon of this PaymentsConfigurationCreditCardType.  # noqa: E501
        :type: str
        """

        self._card_type_icon = card_type_icon

    @property
    def credit_card(self):
        """Gets the credit_card of this PaymentsConfigurationCreditCardType.  # noqa: E501

        Credit card type  # noqa: E501

        :return: The credit_card of this PaymentsConfigurationCreditCardType.  # noqa: E501
        :rtype: str
        """
        return self._credit_card

    @credit_card.setter
    def credit_card(self, credit_card):
        """Sets the credit_card of this PaymentsConfigurationCreditCardType.

        Credit card type  # noqa: E501

        :param credit_card: The credit_card of this PaymentsConfigurationCreditCardType.  # noqa: E501
        :type: str
        """
        allowed_values = ["AMEX", "Visa", "Diners Club", "Discover", "JCB", "MasterCard"]  # noqa: E501
        if credit_card not in allowed_values:
            raise ValueError(
                "Invalid value for `credit_card` ({0}), must be one of {1}"  # noqa: E501
                .format(credit_card, allowed_values)
            )

        self._credit_card = credit_card

    @property
    def deposit_to_account(self):
        """Gets the deposit_to_account of this PaymentsConfigurationCreditCardType.  # noqa: E501

        The name of the account to deposit funds  # noqa: E501

        :return: The deposit_to_account of this PaymentsConfigurationCreditCardType.  # noqa: E501
        :rtype: str
        """
        return self._deposit_to_account

    @deposit_to_account.setter
    def deposit_to_account(self, deposit_to_account):
        """Sets the deposit_to_account of this PaymentsConfigurationCreditCardType.

        The name of the account to deposit funds  # noqa: E501

        :param deposit_to_account: The deposit_to_account of this PaymentsConfigurationCreditCardType.  # noqa: E501
        :type: str
        """

        self._deposit_to_account = deposit_to_account

    @property
    def enabled(self):
        """Gets the enabled of this PaymentsConfigurationCreditCardType.  # noqa: E501

        If true, this card type will be accepted during checkout  # noqa: E501

        :return: The enabled of this PaymentsConfigurationCreditCardType.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this PaymentsConfigurationCreditCardType.

        If true, this card type will be accepted during checkout  # noqa: E501

        :param enabled: The enabled of this PaymentsConfigurationCreditCardType.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def processing_fee(self):
        """Gets the processing_fee of this PaymentsConfigurationCreditCardType.  # noqa: E501

        Optional additional fee applied to order for this card  # noqa: E501

        :return: The processing_fee of this PaymentsConfigurationCreditCardType.  # noqa: E501
        :rtype: float
        """
        return self._processing_fee

    @processing_fee.setter
    def processing_fee(self, processing_fee):
        """Sets the processing_fee of this PaymentsConfigurationCreditCardType.

        Optional additional fee applied to order for this card  # noqa: E501

        :param processing_fee: The processing_fee of this PaymentsConfigurationCreditCardType.  # noqa: E501
        :type: float
        """

        self._processing_fee = processing_fee

    @property
    def processing_percentage(self):
        """Gets the processing_percentage of this PaymentsConfigurationCreditCardType.  # noqa: E501

        Optional additional fee applied to order for this card  # noqa: E501

        :return: The processing_percentage of this PaymentsConfigurationCreditCardType.  # noqa: E501
        :rtype: float
        """
        return self._processing_percentage

    @processing_percentage.setter
    def processing_percentage(self, processing_percentage):
        """Sets the processing_percentage of this PaymentsConfigurationCreditCardType.

        Optional additional fee applied to order for this card  # noqa: E501

        :param processing_percentage: The processing_percentage of this PaymentsConfigurationCreditCardType.  # noqa: E501
        :type: float
        """

        self._processing_percentage = processing_percentage

    @property
    def restrictions(self):
        """Gets the restrictions of this PaymentsConfigurationCreditCardType.  # noqa: E501


        :return: The restrictions of this PaymentsConfigurationCreditCardType.  # noqa: E501
        :rtype: PaymentsConfigurationRestrictions
        """
        return self._restrictions

    @restrictions.setter
    def restrictions(self, restrictions):
        """Sets the restrictions of this PaymentsConfigurationCreditCardType.


        :param restrictions: The restrictions of this PaymentsConfigurationCreditCardType.  # noqa: E501
        :type: PaymentsConfigurationRestrictions
        """

        self._restrictions = restrictions

    @property
    def surcharge_accounting_code(self):
        """Gets the surcharge_accounting_code of this PaymentsConfigurationCreditCardType.  # noqa: E501

        Optional field. If integrated with Quickbooks, this code will be used when informing Quickbooks about any surcharges applied to orders  # noqa: E501

        :return: The surcharge_accounting_code of this PaymentsConfigurationCreditCardType.  # noqa: E501
        :rtype: str
        """
        return self._surcharge_accounting_code

    @surcharge_accounting_code.setter
    def surcharge_accounting_code(self, surcharge_accounting_code):
        """Sets the surcharge_accounting_code of this PaymentsConfigurationCreditCardType.

        Optional field. If integrated with Quickbooks, this code will be used when informing Quickbooks about any surcharges applied to orders  # noqa: E501

        :param surcharge_accounting_code: The surcharge_accounting_code of this PaymentsConfigurationCreditCardType.  # noqa: E501
        :type: str
        """

        self._surcharge_accounting_code = surcharge_accounting_code

    @property
    def transaction_fee(self):
        """Gets the transaction_fee of this PaymentsConfigurationCreditCardType.  # noqa: E501

        An optional additional fee to charge the customer for using this card.  # noqa: E501

        :return: The transaction_fee of this PaymentsConfigurationCreditCardType.  # noqa: E501
        :rtype: float
        """
        return self._transaction_fee

    @transaction_fee.setter
    def transaction_fee(self, transaction_fee):
        """Sets the transaction_fee of this PaymentsConfigurationCreditCardType.

        An optional additional fee to charge the customer for using this card.  # noqa: E501

        :param transaction_fee: The transaction_fee of this PaymentsConfigurationCreditCardType.  # noqa: E501
        :type: float
        """

        self._transaction_fee = transaction_fee

    @property
    def transaction_percentage(self):
        """Gets the transaction_percentage of this PaymentsConfigurationCreditCardType.  # noqa: E501

        An optional transaction percentage to charge the customer for using this card  # noqa: E501

        :return: The transaction_percentage of this PaymentsConfigurationCreditCardType.  # noqa: E501
        :rtype: float
        """
        return self._transaction_percentage

    @transaction_percentage.setter
    def transaction_percentage(self, transaction_percentage):
        """Sets the transaction_percentage of this PaymentsConfigurationCreditCardType.

        An optional transaction percentage to charge the customer for using this card  # noqa: E501

        :param transaction_percentage: The transaction_percentage of this PaymentsConfigurationCreditCardType.  # noqa: E501
        :type: float
        """

        self._transaction_percentage = transaction_percentage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaymentsConfigurationCreditCardType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentsConfigurationCreditCardType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
