# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SovosConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_key': 'str',
        'estimate_only': 'bool',
        'last_test_dts': 'str',
        'secret_key': 'str',
        'send_test_orders': 'bool',
        'test_results': 'str',
        'uat': 'bool'
    }

    attribute_map = {
        'access_key': 'access_key',
        'estimate_only': 'estimate_only',
        'last_test_dts': 'last_test_dts',
        'secret_key': 'secret_key',
        'send_test_orders': 'send_test_orders',
        'test_results': 'test_results',
        'uat': 'uat'
    }

    def __init__(self, access_key=None, estimate_only=None, last_test_dts=None, secret_key=None, send_test_orders=None, test_results=None, uat=None):  # noqa: E501
        """SovosConfig - a model defined in Swagger"""  # noqa: E501

        self._access_key = None
        self._estimate_only = None
        self._last_test_dts = None
        self._secret_key = None
        self._send_test_orders = None
        self._test_results = None
        self._uat = None
        self.discriminator = None

        if access_key is not None:
            self.access_key = access_key
        if estimate_only is not None:
            self.estimate_only = estimate_only
        if last_test_dts is not None:
            self.last_test_dts = last_test_dts
        if secret_key is not None:
            self.secret_key = secret_key
        if send_test_orders is not None:
            self.send_test_orders = send_test_orders
        if test_results is not None:
            self.test_results = test_results
        if uat is not None:
            self.uat = uat

    @property
    def access_key(self):
        """Gets the access_key of this SovosConfig.  # noqa: E501

        Sovos access key  # noqa: E501

        :return: The access_key of this SovosConfig.  # noqa: E501
        :rtype: str
        """
        return self._access_key

    @access_key.setter
    def access_key(self, access_key):
        """Sets the access_key of this SovosConfig.

        Sovos access key  # noqa: E501

        :param access_key: The access_key of this SovosConfig.  # noqa: E501
        :type: str
        """

        self._access_key = access_key

    @property
    def estimate_only(self):
        """Gets the estimate_only of this SovosConfig.  # noqa: E501

        True if this Sovos configuration is to estimate taxes only and not report placed orders to Sovos  # noqa: E501

        :return: The estimate_only of this SovosConfig.  # noqa: E501
        :rtype: bool
        """
        return self._estimate_only

    @estimate_only.setter
    def estimate_only(self, estimate_only):
        """Sets the estimate_only of this SovosConfig.

        True if this Sovos configuration is to estimate taxes only and not report placed orders to Sovos  # noqa: E501

        :param estimate_only: The estimate_only of this SovosConfig.  # noqa: E501
        :type: bool
        """

        self._estimate_only = estimate_only

    @property
    def last_test_dts(self):
        """Gets the last_test_dts of this SovosConfig.  # noqa: E501

        Date/time of the connection test to Sovos  # noqa: E501

        :return: The last_test_dts of this SovosConfig.  # noqa: E501
        :rtype: str
        """
        return self._last_test_dts

    @last_test_dts.setter
    def last_test_dts(self, last_test_dts):
        """Sets the last_test_dts of this SovosConfig.

        Date/time of the connection test to Sovos  # noqa: E501

        :param last_test_dts: The last_test_dts of this SovosConfig.  # noqa: E501
        :type: str
        """

        self._last_test_dts = last_test_dts

    @property
    def secret_key(self):
        """Gets the secret_key of this SovosConfig.  # noqa: E501

        Sovos secret key  # noqa: E501

        :return: The secret_key of this SovosConfig.  # noqa: E501
        :rtype: str
        """
        return self._secret_key

    @secret_key.setter
    def secret_key(self, secret_key):
        """Sets the secret_key of this SovosConfig.

        Sovos secret key  # noqa: E501

        :param secret_key: The secret_key of this SovosConfig.  # noqa: E501
        :type: str
        """

        self._secret_key = secret_key

    @property
    def send_test_orders(self):
        """Gets the send_test_orders of this SovosConfig.  # noqa: E501

        Send test orders through to Sovos.  The default is to not transmit test orders to Sovos.  # noqa: E501

        :return: The send_test_orders of this SovosConfig.  # noqa: E501
        :rtype: bool
        """
        return self._send_test_orders

    @send_test_orders.setter
    def send_test_orders(self, send_test_orders):
        """Sets the send_test_orders of this SovosConfig.

        Send test orders through to Sovos.  The default is to not transmit test orders to Sovos.  # noqa: E501

        :param send_test_orders: The send_test_orders of this SovosConfig.  # noqa: E501
        :type: bool
        """

        self._send_test_orders = send_test_orders

    @property
    def test_results(self):
        """Gets the test_results of this SovosConfig.  # noqa: E501

        Test results of the last connection test to Sovos  # noqa: E501

        :return: The test_results of this SovosConfig.  # noqa: E501
        :rtype: str
        """
        return self._test_results

    @test_results.setter
    def test_results(self, test_results):
        """Sets the test_results of this SovosConfig.

        Test results of the last connection test to Sovos  # noqa: E501

        :param test_results: The test_results of this SovosConfig.  # noqa: E501
        :type: str
        """

        self._test_results = test_results

    @property
    def uat(self):
        """Gets the uat of this SovosConfig.  # noqa: E501

        True if this Sovos configuration is currently undergoing user acceptance testing  # noqa: E501

        :return: The uat of this SovosConfig.  # noqa: E501
        :rtype: bool
        """
        return self._uat

    @uat.setter
    def uat(self, uat):
        """Sets the uat of this SovosConfig.

        True if this Sovos configuration is currently undergoing user acceptance testing  # noqa: E501

        :param uat: The uat of this SovosConfig.  # noqa: E501
        :type: bool
        """

        self._uat = uat

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SovosConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SovosConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
