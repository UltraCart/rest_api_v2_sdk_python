# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AvalaraConfig(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'active': 'bool',
        'avalara_oid': 'int',
        'company_id': 'str',
        'enable_upc': 'bool',
        'estimate_only': 'bool',
        'guest_customer_code': 'str',
        'last_test_dts': 'str',
        'license_key': 'str',
        'sandbox': 'bool',
        'send_test_orders': 'bool',
        'service_url': 'str',
        'test_results': 'str'
    }

    attribute_map = {
        'account_id': 'account_id',
        'active': 'active',
        'avalara_oid': 'avalara_oid',
        'company_id': 'company_id',
        'enable_upc': 'enable_upc',
        'estimate_only': 'estimate_only',
        'guest_customer_code': 'guest_customer_code',
        'last_test_dts': 'last_test_dts',
        'license_key': 'license_key',
        'sandbox': 'sandbox',
        'send_test_orders': 'send_test_orders',
        'service_url': 'service_url',
        'test_results': 'test_results'
    }

    def __init__(self, account_id=None, active=None, avalara_oid=None, company_id=None, enable_upc=None, estimate_only=None, guest_customer_code=None, last_test_dts=None, license_key=None, sandbox=None, send_test_orders=None, service_url=None, test_results=None):
        """
        AvalaraConfig - a model defined in Swagger
        """

        self._account_id = None
        self._active = None
        self._avalara_oid = None
        self._company_id = None
        self._enable_upc = None
        self._estimate_only = None
        self._guest_customer_code = None
        self._last_test_dts = None
        self._license_key = None
        self._sandbox = None
        self._send_test_orders = None
        self._service_url = None
        self._test_results = None
        self.discriminator = None

        if account_id is not None:
          self.account_id = account_id
        if active is not None:
          self.active = active
        if avalara_oid is not None:
          self.avalara_oid = avalara_oid
        if company_id is not None:
          self.company_id = company_id
        if enable_upc is not None:
          self.enable_upc = enable_upc
        if estimate_only is not None:
          self.estimate_only = estimate_only
        if guest_customer_code is not None:
          self.guest_customer_code = guest_customer_code
        if last_test_dts is not None:
          self.last_test_dts = last_test_dts
        if license_key is not None:
          self.license_key = license_key
        if sandbox is not None:
          self.sandbox = sandbox
        if send_test_orders is not None:
          self.send_test_orders = send_test_orders
        if service_url is not None:
          self.service_url = service_url
        if test_results is not None:
          self.test_results = test_results

    @property
    def account_id(self):
        """
        Gets the account_id of this AvalaraConfig.
        Avalara account ID

        :return: The account_id of this AvalaraConfig.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """
        Sets the account_id of this AvalaraConfig.
        Avalara account ID

        :param account_id: The account_id of this AvalaraConfig.
        :type: str
        """

        self._account_id = account_id

    @property
    def active(self):
        """
        Gets the active of this AvalaraConfig.
        True if Avalara is active for this merchant

        :return: The active of this AvalaraConfig.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """
        Sets the active of this AvalaraConfig.
        True if Avalara is active for this merchant

        :param active: The active of this AvalaraConfig.
        :type: bool
        """

        self._active = active

    @property
    def avalara_oid(self):
        """
        Gets the avalara_oid of this AvalaraConfig.
        Unique identifier for this avalara config object

        :return: The avalara_oid of this AvalaraConfig.
        :rtype: int
        """
        return self._avalara_oid

    @avalara_oid.setter
    def avalara_oid(self, avalara_oid):
        """
        Sets the avalara_oid of this AvalaraConfig.
        Unique identifier for this avalara config object

        :param avalara_oid: The avalara_oid of this AvalaraConfig.
        :type: int
        """

        self._avalara_oid = avalara_oid

    @property
    def company_id(self):
        """
        Gets the company_id of this AvalaraConfig.
        Avalara company ID

        :return: The company_id of this AvalaraConfig.
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """
        Sets the company_id of this AvalaraConfig.
        Avalara company ID

        :param company_id: The company_id of this AvalaraConfig.
        :type: str
        """

        self._company_id = company_id

    @property
    def enable_upc(self):
        """
        Gets the enable_upc of this AvalaraConfig.
        True if this Avalara configuration is set to enable tax valuation by UPC

        :return: The enable_upc of this AvalaraConfig.
        :rtype: bool
        """
        return self._enable_upc

    @enable_upc.setter
    def enable_upc(self, enable_upc):
        """
        Sets the enable_upc of this AvalaraConfig.
        True if this Avalara configuration is set to enable tax valuation by UPC

        :param enable_upc: The enable_upc of this AvalaraConfig.
        :type: bool
        """

        self._enable_upc = enable_upc

    @property
    def estimate_only(self):
        """
        Gets the estimate_only of this AvalaraConfig.
        True if this Avalara configuration is to estimate taxes only and not report placed orders to Avalara

        :return: The estimate_only of this AvalaraConfig.
        :rtype: bool
        """
        return self._estimate_only

    @estimate_only.setter
    def estimate_only(self, estimate_only):
        """
        Sets the estimate_only of this AvalaraConfig.
        True if this Avalara configuration is to estimate taxes only and not report placed orders to Avalara

        :param estimate_only: The estimate_only of this AvalaraConfig.
        :type: bool
        """

        self._estimate_only = estimate_only

    @property
    def guest_customer_code(self):
        """
        Gets the guest_customer_code of this AvalaraConfig.
        Optional customer code for customers without profiles, defaults to GuestCustomer

        :return: The guest_customer_code of this AvalaraConfig.
        :rtype: str
        """
        return self._guest_customer_code

    @guest_customer_code.setter
    def guest_customer_code(self, guest_customer_code):
        """
        Sets the guest_customer_code of this AvalaraConfig.
        Optional customer code for customers without profiles, defaults to GuestCustomer

        :param guest_customer_code: The guest_customer_code of this AvalaraConfig.
        :type: str
        """

        self._guest_customer_code = guest_customer_code

    @property
    def last_test_dts(self):
        """
        Gets the last_test_dts of this AvalaraConfig.
        Date/time of the connection test to Avalara

        :return: The last_test_dts of this AvalaraConfig.
        :rtype: str
        """
        return self._last_test_dts

    @last_test_dts.setter
    def last_test_dts(self, last_test_dts):
        """
        Sets the last_test_dts of this AvalaraConfig.
        Date/time of the connection test to Avalara

        :param last_test_dts: The last_test_dts of this AvalaraConfig.
        :type: str
        """

        self._last_test_dts = last_test_dts

    @property
    def license_key(self):
        """
        Gets the license_key of this AvalaraConfig.
        Avalara license key

        :return: The license_key of this AvalaraConfig.
        :rtype: str
        """
        return self._license_key

    @license_key.setter
    def license_key(self, license_key):
        """
        Sets the license_key of this AvalaraConfig.
        Avalara license key

        :param license_key: The license_key of this AvalaraConfig.
        :type: str
        """

        self._license_key = license_key

    @property
    def sandbox(self):
        """
        Gets the sandbox of this AvalaraConfig.
        True if this Avalara instance is pointed at the Avalara Sandbox

        :return: The sandbox of this AvalaraConfig.
        :rtype: bool
        """
        return self._sandbox

    @sandbox.setter
    def sandbox(self, sandbox):
        """
        Sets the sandbox of this AvalaraConfig.
        True if this Avalara instance is pointed at the Avalara Sandbox

        :param sandbox: The sandbox of this AvalaraConfig.
        :type: bool
        """

        self._sandbox = sandbox

    @property
    def send_test_orders(self):
        """
        Gets the send_test_orders of this AvalaraConfig.
        Send test orders through to Avalara.  The default is to not transmit test orders to Avalara.

        :return: The send_test_orders of this AvalaraConfig.
        :rtype: bool
        """
        return self._send_test_orders

    @send_test_orders.setter
    def send_test_orders(self, send_test_orders):
        """
        Sets the send_test_orders of this AvalaraConfig.
        Send test orders through to Avalara.  The default is to not transmit test orders to Avalara.

        :param send_test_orders: The send_test_orders of this AvalaraConfig.
        :type: bool
        """

        self._send_test_orders = send_test_orders

    @property
    def service_url(self):
        """
        Gets the service_url of this AvalaraConfig.
        Avalara service URL

        :return: The service_url of this AvalaraConfig.
        :rtype: str
        """
        return self._service_url

    @service_url.setter
    def service_url(self, service_url):
        """
        Sets the service_url of this AvalaraConfig.
        Avalara service URL

        :param service_url: The service_url of this AvalaraConfig.
        :type: str
        """

        self._service_url = service_url

    @property
    def test_results(self):
        """
        Gets the test_results of this AvalaraConfig.
        Test results of the last connection test to Avalara

        :return: The test_results of this AvalaraConfig.
        :rtype: str
        """
        return self._test_results

    @test_results.setter
    def test_results(self, test_results):
        """
        Sets the test_results of this AvalaraConfig.
        Test results of the last connection test to Avalara

        :param test_results: The test_results of this AvalaraConfig.
        :type: str
        """

        self._test_results = test_results

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AvalaraConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
