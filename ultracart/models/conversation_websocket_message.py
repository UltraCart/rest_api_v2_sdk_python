# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConversationWebsocketMessage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'conversation_uuid': 'str',
        'event_conversation_closed': 'Conversation',
        'event_new_conversation': 'Conversation',
        'event_new_message': 'Conversation',
        'event_queue_position': 'ConversationEventQueuePosition',
        'event_type': 'str',
        'event_updated_message': 'ConversationMessage',
        'message': 'ConversationMessage',
        'type': 'str'
    }

    attribute_map = {
        'conversation_uuid': 'conversation_uuid',
        'event_conversation_closed': 'event_conversation_closed',
        'event_new_conversation': 'event_new_conversation',
        'event_new_message': 'event_new_message',
        'event_queue_position': 'event_queue_position',
        'event_type': 'event_type',
        'event_updated_message': 'event_updated_message',
        'message': 'message',
        'type': 'type'
    }

    def __init__(self, conversation_uuid=None, event_conversation_closed=None, event_new_conversation=None, event_new_message=None, event_queue_position=None, event_type=None, event_updated_message=None, message=None, type=None):  # noqa: E501
        """ConversationWebsocketMessage - a model defined in Swagger"""  # noqa: E501

        self._conversation_uuid = None
        self._event_conversation_closed = None
        self._event_new_conversation = None
        self._event_new_message = None
        self._event_queue_position = None
        self._event_type = None
        self._event_updated_message = None
        self._message = None
        self._type = None
        self.discriminator = None

        if conversation_uuid is not None:
            self.conversation_uuid = conversation_uuid
        if event_conversation_closed is not None:
            self.event_conversation_closed = event_conversation_closed
        if event_new_conversation is not None:
            self.event_new_conversation = event_new_conversation
        if event_new_message is not None:
            self.event_new_message = event_new_message
        if event_queue_position is not None:
            self.event_queue_position = event_queue_position
        if event_type is not None:
            self.event_type = event_type
        if event_updated_message is not None:
            self.event_updated_message = event_updated_message
        if message is not None:
            self.message = message
        if type is not None:
            self.type = type

    @property
    def conversation_uuid(self):
        """Gets the conversation_uuid of this ConversationWebsocketMessage.  # noqa: E501

        Conversation UUID if the websocket message is tied to a specific conversation  # noqa: E501

        :return: The conversation_uuid of this ConversationWebsocketMessage.  # noqa: E501
        :rtype: str
        """
        return self._conversation_uuid

    @conversation_uuid.setter
    def conversation_uuid(self, conversation_uuid):
        """Sets the conversation_uuid of this ConversationWebsocketMessage.

        Conversation UUID if the websocket message is tied to a specific conversation  # noqa: E501

        :param conversation_uuid: The conversation_uuid of this ConversationWebsocketMessage.  # noqa: E501
        :type: str
        """

        self._conversation_uuid = conversation_uuid

    @property
    def event_conversation_closed(self):
        """Gets the event_conversation_closed of this ConversationWebsocketMessage.  # noqa: E501


        :return: The event_conversation_closed of this ConversationWebsocketMessage.  # noqa: E501
        :rtype: Conversation
        """
        return self._event_conversation_closed

    @event_conversation_closed.setter
    def event_conversation_closed(self, event_conversation_closed):
        """Sets the event_conversation_closed of this ConversationWebsocketMessage.


        :param event_conversation_closed: The event_conversation_closed of this ConversationWebsocketMessage.  # noqa: E501
        :type: Conversation
        """

        self._event_conversation_closed = event_conversation_closed

    @property
    def event_new_conversation(self):
        """Gets the event_new_conversation of this ConversationWebsocketMessage.  # noqa: E501


        :return: The event_new_conversation of this ConversationWebsocketMessage.  # noqa: E501
        :rtype: Conversation
        """
        return self._event_new_conversation

    @event_new_conversation.setter
    def event_new_conversation(self, event_new_conversation):
        """Sets the event_new_conversation of this ConversationWebsocketMessage.


        :param event_new_conversation: The event_new_conversation of this ConversationWebsocketMessage.  # noqa: E501
        :type: Conversation
        """

        self._event_new_conversation = event_new_conversation

    @property
    def event_new_message(self):
        """Gets the event_new_message of this ConversationWebsocketMessage.  # noqa: E501


        :return: The event_new_message of this ConversationWebsocketMessage.  # noqa: E501
        :rtype: Conversation
        """
        return self._event_new_message

    @event_new_message.setter
    def event_new_message(self, event_new_message):
        """Sets the event_new_message of this ConversationWebsocketMessage.


        :param event_new_message: The event_new_message of this ConversationWebsocketMessage.  # noqa: E501
        :type: Conversation
        """

        self._event_new_message = event_new_message

    @property
    def event_queue_position(self):
        """Gets the event_queue_position of this ConversationWebsocketMessage.  # noqa: E501


        :return: The event_queue_position of this ConversationWebsocketMessage.  # noqa: E501
        :rtype: ConversationEventQueuePosition
        """
        return self._event_queue_position

    @event_queue_position.setter
    def event_queue_position(self, event_queue_position):
        """Sets the event_queue_position of this ConversationWebsocketMessage.


        :param event_queue_position: The event_queue_position of this ConversationWebsocketMessage.  # noqa: E501
        :type: ConversationEventQueuePosition
        """

        self._event_queue_position = event_queue_position

    @property
    def event_type(self):
        """Gets the event_type of this ConversationWebsocketMessage.  # noqa: E501

        Type of event  # noqa: E501

        :return: The event_type of this ConversationWebsocketMessage.  # noqa: E501
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this ConversationWebsocketMessage.

        Type of event  # noqa: E501

        :param event_type: The event_type of this ConversationWebsocketMessage.  # noqa: E501
        :type: str
        """
        allowed_values = ["queue position", "webchat start conversation", "conversation closed", "new conversation", "new message", "updated message"]  # noqa: E501
        if event_type not in allowed_values:
            raise ValueError(
                "Invalid value for `event_type` ({0}), must be one of {1}"  # noqa: E501
                .format(event_type, allowed_values)
            )

        self._event_type = event_type

    @property
    def event_updated_message(self):
        """Gets the event_updated_message of this ConversationWebsocketMessage.  # noqa: E501


        :return: The event_updated_message of this ConversationWebsocketMessage.  # noqa: E501
        :rtype: ConversationMessage
        """
        return self._event_updated_message

    @event_updated_message.setter
    def event_updated_message(self, event_updated_message):
        """Sets the event_updated_message of this ConversationWebsocketMessage.


        :param event_updated_message: The event_updated_message of this ConversationWebsocketMessage.  # noqa: E501
        :type: ConversationMessage
        """

        self._event_updated_message = event_updated_message

    @property
    def message(self):
        """Gets the message of this ConversationWebsocketMessage.  # noqa: E501


        :return: The message of this ConversationWebsocketMessage.  # noqa: E501
        :rtype: ConversationMessage
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ConversationWebsocketMessage.


        :param message: The message of this ConversationWebsocketMessage.  # noqa: E501
        :type: ConversationMessage
        """

        self._message = message

    @property
    def type(self):
        """Gets the type of this ConversationWebsocketMessage.  # noqa: E501

        Type of message  # noqa: E501

        :return: The type of this ConversationWebsocketMessage.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ConversationWebsocketMessage.

        Type of message  # noqa: E501

        :param type: The type of this ConversationWebsocketMessage.  # noqa: E501
        :type: str
        """
        allowed_values = ["message", "event", "ping"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConversationWebsocketMessage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConversationWebsocketMessage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
