# coding: utf-8

"""
    UltraCart Rest API V2

    This is the next generation UltraCart REST API...

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class OrderQuote(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, quote_expiration_dts=None, quoted_by=None, quoted_dts=None):
        """
        OrderQuote - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'quote_expiration_dts': 'str',
            'quoted_by': 'str',
            'quoted_dts': 'str'
        }

        self.attribute_map = {
            'quote_expiration_dts': 'quote_expiration_dts',
            'quoted_by': 'quoted_by',
            'quoted_dts': 'quoted_dts'
        }

        self._quote_expiration_dts = quote_expiration_dts
        self._quoted_by = quoted_by
        self._quoted_dts = quoted_dts

    @property
    def quote_expiration_dts(self):
        """
        Gets the quote_expiration_dts of this OrderQuote.
        Expiration of quote at date/time

        :return: The quote_expiration_dts of this OrderQuote.
        :rtype: str
        """
        return self._quote_expiration_dts

    @quote_expiration_dts.setter
    def quote_expiration_dts(self, quote_expiration_dts):
        """
        Sets the quote_expiration_dts of this OrderQuote.
        Expiration of quote at date/time

        :param quote_expiration_dts: The quote_expiration_dts of this OrderQuote.
        :type: str
        """

        self._quote_expiration_dts = quote_expiration_dts

    @property
    def quoted_by(self):
        """
        Gets the quoted_by of this OrderQuote.
        Quoted by user

        :return: The quoted_by of this OrderQuote.
        :rtype: str
        """
        return self._quoted_by

    @quoted_by.setter
    def quoted_by(self, quoted_by):
        """
        Sets the quoted_by of this OrderQuote.
        Quoted by user

        :param quoted_by: The quoted_by of this OrderQuote.
        :type: str
        """

        self._quoted_by = quoted_by

    @property
    def quoted_dts(self):
        """
        Gets the quoted_dts of this OrderQuote.
        Quoted on date/time

        :return: The quoted_dts of this OrderQuote.
        :rtype: str
        """
        return self._quoted_dts

    @quoted_dts.setter
    def quoted_dts(self, quoted_dts):
        """
        Sets the quoted_dts of this OrderQuote.
        Quoted on date/time

        :param quoted_dts: The quoted_dts of this OrderQuote.
        :type: str
        """

        self._quoted_dts = quoted_dts

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
