# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OrderQuote(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'quote_expiration_dts': 'str',
        'quoted_by': 'str',
        'quoted_dts': 'str'
    }

    attribute_map = {
        'quote_expiration_dts': 'quote_expiration_dts',
        'quoted_by': 'quoted_by',
        'quoted_dts': 'quoted_dts'
    }

    def __init__(self, quote_expiration_dts=None, quoted_by=None, quoted_dts=None):  # noqa: E501
        """OrderQuote - a model defined in Swagger"""  # noqa: E501

        self._quote_expiration_dts = None
        self._quoted_by = None
        self._quoted_dts = None
        self.discriminator = None

        if quote_expiration_dts is not None:
            self.quote_expiration_dts = quote_expiration_dts
        if quoted_by is not None:
            self.quoted_by = quoted_by
        if quoted_dts is not None:
            self.quoted_dts = quoted_dts

    @property
    def quote_expiration_dts(self):
        """Gets the quote_expiration_dts of this OrderQuote.  # noqa: E501

        Expiration of quote at date/time  # noqa: E501

        :return: The quote_expiration_dts of this OrderQuote.  # noqa: E501
        :rtype: str
        """
        return self._quote_expiration_dts

    @quote_expiration_dts.setter
    def quote_expiration_dts(self, quote_expiration_dts):
        """Sets the quote_expiration_dts of this OrderQuote.

        Expiration of quote at date/time  # noqa: E501

        :param quote_expiration_dts: The quote_expiration_dts of this OrderQuote.  # noqa: E501
        :type: str
        """

        self._quote_expiration_dts = quote_expiration_dts

    @property
    def quoted_by(self):
        """Gets the quoted_by of this OrderQuote.  # noqa: E501

        Quoted by user  # noqa: E501

        :return: The quoted_by of this OrderQuote.  # noqa: E501
        :rtype: str
        """
        return self._quoted_by

    @quoted_by.setter
    def quoted_by(self, quoted_by):
        """Sets the quoted_by of this OrderQuote.

        Quoted by user  # noqa: E501

        :param quoted_by: The quoted_by of this OrderQuote.  # noqa: E501
        :type: str
        """

        self._quoted_by = quoted_by

    @property
    def quoted_dts(self):
        """Gets the quoted_dts of this OrderQuote.  # noqa: E501

        Quoted on date/time  # noqa: E501

        :return: The quoted_dts of this OrderQuote.  # noqa: E501
        :rtype: str
        """
        return self._quoted_dts

    @quoted_dts.setter
    def quoted_dts(self, quoted_dts):
        """Sets the quoted_dts of this OrderQuote.

        Quoted on date/time  # noqa: E501

        :param quoted_dts: The quoted_dts of this OrderQuote.  # noqa: E501
        :type: str
        """

        self._quoted_dts = quoted_dts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderQuote, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderQuote):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
