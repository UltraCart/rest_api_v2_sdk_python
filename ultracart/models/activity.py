# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Activity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action': 'str',
        'channel': 'str',
        'metric': 'str',
        'storefront_oid': 'int',
        'subject': 'str',
        'ts': 'int',
        'type': 'str',
        'uuid': 'str'
    }

    attribute_map = {
        'action': 'action',
        'channel': 'channel',
        'metric': 'metric',
        'storefront_oid': 'storefront_oid',
        'subject': 'subject',
        'ts': 'ts',
        'type': 'type',
        'uuid': 'uuid'
    }

    def __init__(self, action=None, channel=None, metric=None, storefront_oid=None, subject=None, ts=None, type=None, uuid=None):  # noqa: E501
        """Activity - a model defined in Swagger"""  # noqa: E501

        self._action = None
        self._channel = None
        self._metric = None
        self._storefront_oid = None
        self._subject = None
        self._ts = None
        self._type = None
        self._uuid = None
        self.discriminator = None

        if action is not None:
            self.action = action
        if channel is not None:
            self.channel = channel
        if metric is not None:
            self.metric = metric
        if storefront_oid is not None:
            self.storefront_oid = storefront_oid
        if subject is not None:
            self.subject = subject
        if ts is not None:
            self.ts = ts
        if type is not None:
            self.type = type
        if uuid is not None:
            self.uuid = uuid

    @property
    def action(self):
        """Gets the action of this Activity.  # noqa: E501


        :return: The action of this Activity.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this Activity.


        :param action: The action of this Activity.  # noqa: E501
        :type: str
        """

        self._action = action

    @property
    def channel(self):
        """Gets the channel of this Activity.  # noqa: E501


        :return: The channel of this Activity.  # noqa: E501
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this Activity.


        :param channel: The channel of this Activity.  # noqa: E501
        :type: str
        """

        self._channel = channel

    @property
    def metric(self):
        """Gets the metric of this Activity.  # noqa: E501


        :return: The metric of this Activity.  # noqa: E501
        :rtype: str
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """Sets the metric of this Activity.


        :param metric: The metric of this Activity.  # noqa: E501
        :type: str
        """

        self._metric = metric

    @property
    def storefront_oid(self):
        """Gets the storefront_oid of this Activity.  # noqa: E501


        :return: The storefront_oid of this Activity.  # noqa: E501
        :rtype: int
        """
        return self._storefront_oid

    @storefront_oid.setter
    def storefront_oid(self, storefront_oid):
        """Sets the storefront_oid of this Activity.


        :param storefront_oid: The storefront_oid of this Activity.  # noqa: E501
        :type: int
        """

        self._storefront_oid = storefront_oid

    @property
    def subject(self):
        """Gets the subject of this Activity.  # noqa: E501


        :return: The subject of this Activity.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this Activity.


        :param subject: The subject of this Activity.  # noqa: E501
        :type: str
        """

        self._subject = subject

    @property
    def ts(self):
        """Gets the ts of this Activity.  # noqa: E501


        :return: The ts of this Activity.  # noqa: E501
        :rtype: int
        """
        return self._ts

    @ts.setter
    def ts(self, ts):
        """Sets the ts of this Activity.


        :param ts: The ts of this Activity.  # noqa: E501
        :type: int
        """

        self._ts = ts

    @property
    def type(self):
        """Gets the type of this Activity.  # noqa: E501


        :return: The type of this Activity.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Activity.


        :param type: The type of this Activity.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def uuid(self):
        """Gets the uuid of this Activity.  # noqa: E501


        :return: The uuid of this Activity.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Activity.


        :param uuid: The uuid of this Activity.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Activity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Activity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
