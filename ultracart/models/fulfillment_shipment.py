# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class FulfillmentShipment(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'order_id': 'str',
        'tracking_numbers': 'list[str]'
    }

    attribute_map = {
        'order_id': 'order_id',
        'tracking_numbers': 'tracking_numbers'
    }

    def __init__(self, order_id=None, tracking_numbers=None):
        """
        FulfillmentShipment - a model defined in Swagger
        """

        self._order_id = None
        self._tracking_numbers = None
        self.discriminator = None

        if order_id is not None:
          self.order_id = order_id
        if tracking_numbers is not None:
          self.tracking_numbers = tracking_numbers

    @property
    def order_id(self):
        """
        Gets the order_id of this FulfillmentShipment.
        Order ID that was shipped

        :return: The order_id of this FulfillmentShipment.
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """
        Sets the order_id of this FulfillmentShipment.
        Order ID that was shipped

        :param order_id: The order_id of this FulfillmentShipment.
        :type: str
        """

        self._order_id = order_id

    @property
    def tracking_numbers(self):
        """
        Gets the tracking_numbers of this FulfillmentShipment.
        Tracking numbers associated with the shipment

        :return: The tracking_numbers of this FulfillmentShipment.
        :rtype: list[str]
        """
        return self._tracking_numbers

    @tracking_numbers.setter
    def tracking_numbers(self, tracking_numbers):
        """
        Sets the tracking_numbers of this FulfillmentShipment.
        Tracking numbers associated with the shipment

        :param tracking_numbers: The tracking_numbers of this FulfillmentShipment.
        :type: list[str]
        """

        self._tracking_numbers = tracking_numbers

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FulfillmentShipment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
