# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class FulfillmentShipment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fulfillment_fee': 'float',
        'order_id': 'str',
        'package_cost': 'float',
        'shipping_cost': 'float',
        'tracking_numbers': 'list[str]'
    }

    attribute_map = {
        'fulfillment_fee': 'fulfillment_fee',
        'order_id': 'order_id',
        'package_cost': 'package_cost',
        'shipping_cost': 'shipping_cost',
        'tracking_numbers': 'tracking_numbers'
    }

    def __init__(self, fulfillment_fee=None, order_id=None, package_cost=None, shipping_cost=None, tracking_numbers=None):  # noqa: E501
        """FulfillmentShipment - a model defined in Swagger"""  # noqa: E501

        self._fulfillment_fee = None
        self._order_id = None
        self._package_cost = None
        self._shipping_cost = None
        self._tracking_numbers = None
        self.discriminator = None

        if fulfillment_fee is not None:
            self.fulfillment_fee = fulfillment_fee
        if order_id is not None:
            self.order_id = order_id
        if package_cost is not None:
            self.package_cost = package_cost
        if shipping_cost is not None:
            self.shipping_cost = shipping_cost
        if tracking_numbers is not None:
            self.tracking_numbers = tracking_numbers

    @property
    def fulfillment_fee(self):
        """Gets the fulfillment_fee of this FulfillmentShipment.  # noqa: E501

        Fees charged by the fulfillment company other than the shipping cost to process the order.  # noqa: E501

        :return: The fulfillment_fee of this FulfillmentShipment.  # noqa: E501
        :rtype: float
        """
        return self._fulfillment_fee

    @fulfillment_fee.setter
    def fulfillment_fee(self, fulfillment_fee):
        """Sets the fulfillment_fee of this FulfillmentShipment.

        Fees charged by the fulfillment company other than the shipping cost to process the order.  # noqa: E501

        :param fulfillment_fee: The fulfillment_fee of this FulfillmentShipment.  # noqa: E501
        :type: float
        """

        self._fulfillment_fee = fulfillment_fee

    @property
    def order_id(self):
        """Gets the order_id of this FulfillmentShipment.  # noqa: E501

        Order ID that was shipped  # noqa: E501

        :return: The order_id of this FulfillmentShipment.  # noqa: E501
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this FulfillmentShipment.

        Order ID that was shipped  # noqa: E501

        :param order_id: The order_id of this FulfillmentShipment.  # noqa: E501
        :type: str
        """

        self._order_id = order_id

    @property
    def package_cost(self):
        """Gets the package_cost of this FulfillmentShipment.  # noqa: E501

        The cost of the packaging used to sent this shipment  # noqa: E501

        :return: The package_cost of this FulfillmentShipment.  # noqa: E501
        :rtype: float
        """
        return self._package_cost

    @package_cost.setter
    def package_cost(self, package_cost):
        """Sets the package_cost of this FulfillmentShipment.

        The cost of the packaging used to sent this shipment  # noqa: E501

        :param package_cost: The package_cost of this FulfillmentShipment.  # noqa: E501
        :type: float
        """

        self._package_cost = package_cost

    @property
    def shipping_cost(self):
        """Gets the shipping_cost of this FulfillmentShipment.  # noqa: E501

        The actual total cost of shipping this order  # noqa: E501

        :return: The shipping_cost of this FulfillmentShipment.  # noqa: E501
        :rtype: float
        """
        return self._shipping_cost

    @shipping_cost.setter
    def shipping_cost(self, shipping_cost):
        """Sets the shipping_cost of this FulfillmentShipment.

        The actual total cost of shipping this order  # noqa: E501

        :param shipping_cost: The shipping_cost of this FulfillmentShipment.  # noqa: E501
        :type: float
        """

        self._shipping_cost = shipping_cost

    @property
    def tracking_numbers(self):
        """Gets the tracking_numbers of this FulfillmentShipment.  # noqa: E501

        Tracking numbers associated with the shipment  # noqa: E501

        :return: The tracking_numbers of this FulfillmentShipment.  # noqa: E501
        :rtype: list[str]
        """
        return self._tracking_numbers

    @tracking_numbers.setter
    def tracking_numbers(self, tracking_numbers):
        """Sets the tracking_numbers of this FulfillmentShipment.

        Tracking numbers associated with the shipment  # noqa: E501

        :param tracking_numbers: The tracking_numbers of this FulfillmentShipment.  # noqa: E501
        :type: list[str]
        """

        self._tracking_numbers = tracking_numbers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FulfillmentShipment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FulfillmentShipment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
