# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ItemContentMultimedia(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cloud_url': 'str',
        'cloud_url_expiration': 'str',
        'code': 'str',
        'description': 'str',
        'exclude_from_gallery': 'bool',
        'file_name': 'str',
        'height': 'int',
        'merchant_item_multimedia_oid': 'int',
        'orphan': 'bool',
        'placeholder': 'bool',
        'temp_multimedia_oid': 'int',
        'thumbnails': 'list[ItemContentMultimediaThumbnail]',
        'type': 'str',
        'url': 'str',
        'width': 'int'
    }

    attribute_map = {
        'cloud_url': 'cloud_url',
        'cloud_url_expiration': 'cloud_url_expiration',
        'code': 'code',
        'description': 'description',
        'exclude_from_gallery': 'exclude_from_gallery',
        'file_name': 'file_name',
        'height': 'height',
        'merchant_item_multimedia_oid': 'merchant_item_multimedia_oid',
        'orphan': 'orphan',
        'placeholder': 'placeholder',
        'temp_multimedia_oid': 'temp_multimedia_oid',
        'thumbnails': 'thumbnails',
        'type': 'type',
        'url': 'url',
        'width': 'width'
    }

    def __init__(self, cloud_url=None, cloud_url_expiration=None, code=None, description=None, exclude_from_gallery=None, file_name=None, height=None, merchant_item_multimedia_oid=None, orphan=None, placeholder=None, temp_multimedia_oid=None, thumbnails=None, type=None, url=None, width=None):  # noqa: E501
        """ItemContentMultimedia - a model defined in Swagger"""  # noqa: E501

        self._cloud_url = None
        self._cloud_url_expiration = None
        self._code = None
        self._description = None
        self._exclude_from_gallery = None
        self._file_name = None
        self._height = None
        self._merchant_item_multimedia_oid = None
        self._orphan = None
        self._placeholder = None
        self._temp_multimedia_oid = None
        self._thumbnails = None
        self._type = None
        self._url = None
        self._width = None
        self.discriminator = None

        if cloud_url is not None:
            self.cloud_url = cloud_url
        if cloud_url_expiration is not None:
            self.cloud_url_expiration = cloud_url_expiration
        if code is not None:
            self.code = code
        if description is not None:
            self.description = description
        if exclude_from_gallery is not None:
            self.exclude_from_gallery = exclude_from_gallery
        if file_name is not None:
            self.file_name = file_name
        if height is not None:
            self.height = height
        if merchant_item_multimedia_oid is not None:
            self.merchant_item_multimedia_oid = merchant_item_multimedia_oid
        if orphan is not None:
            self.orphan = orphan
        if placeholder is not None:
            self.placeholder = placeholder
        if temp_multimedia_oid is not None:
            self.temp_multimedia_oid = temp_multimedia_oid
        if thumbnails is not None:
            self.thumbnails = thumbnails
        if type is not None:
            self.type = type
        if url is not None:
            self.url = url
        if width is not None:
            self.width = width

    @property
    def cloud_url(self):
        """Gets the cloud_url of this ItemContentMultimedia.  # noqa: E501

        URL where the image can be downloaded from the cloud  # noqa: E501

        :return: The cloud_url of this ItemContentMultimedia.  # noqa: E501
        :rtype: str
        """
        return self._cloud_url

    @cloud_url.setter
    def cloud_url(self, cloud_url):
        """Sets the cloud_url of this ItemContentMultimedia.

        URL where the image can be downloaded from the cloud  # noqa: E501

        :param cloud_url: The cloud_url of this ItemContentMultimedia.  # noqa: E501
        :type: str
        """

        self._cloud_url = cloud_url

    @property
    def cloud_url_expiration(self):
        """Gets the cloud_url_expiration of this ItemContentMultimedia.  # noqa: E501

        Expiration date of the cloud URL  # noqa: E501

        :return: The cloud_url_expiration of this ItemContentMultimedia.  # noqa: E501
        :rtype: str
        """
        return self._cloud_url_expiration

    @cloud_url_expiration.setter
    def cloud_url_expiration(self, cloud_url_expiration):
        """Sets the cloud_url_expiration of this ItemContentMultimedia.

        Expiration date of the cloud URL  # noqa: E501

        :param cloud_url_expiration: The cloud_url_expiration of this ItemContentMultimedia.  # noqa: E501
        :type: str
        """

        self._cloud_url_expiration = cloud_url_expiration

    @property
    def code(self):
        """Gets the code of this ItemContentMultimedia.  # noqa: E501

        Code assigned to the file  # noqa: E501

        :return: The code of this ItemContentMultimedia.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ItemContentMultimedia.

        Code assigned to the file  # noqa: E501

        :param code: The code of this ItemContentMultimedia.  # noqa: E501
        :type: str
        """
        if code is not None and len(code) > 20:
            raise ValueError("Invalid value for `code`, length must be less than or equal to `20`")  # noqa: E501

        self._code = code

    @property
    def description(self):
        """Gets the description of this ItemContentMultimedia.  # noqa: E501

        Description  # noqa: E501

        :return: The description of this ItemContentMultimedia.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ItemContentMultimedia.

        Description  # noqa: E501

        :param description: The description of this ItemContentMultimedia.  # noqa: E501
        :type: str
        """
        if description is not None and len(description) > 50000:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `50000`")  # noqa: E501

        self._description = description

    @property
    def exclude_from_gallery(self):
        """Gets the exclude_from_gallery of this ItemContentMultimedia.  # noqa: E501

        True to exclude from multimedia gallery  # noqa: E501

        :return: The exclude_from_gallery of this ItemContentMultimedia.  # noqa: E501
        :rtype: bool
        """
        return self._exclude_from_gallery

    @exclude_from_gallery.setter
    def exclude_from_gallery(self, exclude_from_gallery):
        """Sets the exclude_from_gallery of this ItemContentMultimedia.

        True to exclude from multimedia gallery  # noqa: E501

        :param exclude_from_gallery: The exclude_from_gallery of this ItemContentMultimedia.  # noqa: E501
        :type: bool
        """

        self._exclude_from_gallery = exclude_from_gallery

    @property
    def file_name(self):
        """Gets the file_name of this ItemContentMultimedia.  # noqa: E501

        File name  # noqa: E501

        :return: The file_name of this ItemContentMultimedia.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this ItemContentMultimedia.

        File name  # noqa: E501

        :param file_name: The file_name of this ItemContentMultimedia.  # noqa: E501
        :type: str
        """
        if file_name is not None and len(file_name) > 75:
            raise ValueError("Invalid value for `file_name`, length must be less than or equal to `75`")  # noqa: E501

        self._file_name = file_name

    @property
    def height(self):
        """Gets the height of this ItemContentMultimedia.  # noqa: E501

        Height of the image  # noqa: E501

        :return: The height of this ItemContentMultimedia.  # noqa: E501
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this ItemContentMultimedia.

        Height of the image  # noqa: E501

        :param height: The height of this ItemContentMultimedia.  # noqa: E501
        :type: int
        """

        self._height = height

    @property
    def merchant_item_multimedia_oid(self):
        """Gets the merchant_item_multimedia_oid of this ItemContentMultimedia.  # noqa: E501

        Item multimedia object identifier  # noqa: E501

        :return: The merchant_item_multimedia_oid of this ItemContentMultimedia.  # noqa: E501
        :rtype: int
        """
        return self._merchant_item_multimedia_oid

    @merchant_item_multimedia_oid.setter
    def merchant_item_multimedia_oid(self, merchant_item_multimedia_oid):
        """Sets the merchant_item_multimedia_oid of this ItemContentMultimedia.

        Item multimedia object identifier  # noqa: E501

        :param merchant_item_multimedia_oid: The merchant_item_multimedia_oid of this ItemContentMultimedia.  # noqa: E501
        :type: int
        """

        self._merchant_item_multimedia_oid = merchant_item_multimedia_oid

    @property
    def orphan(self):
        """Gets the orphan of this ItemContentMultimedia.  # noqa: E501

        True if the multimedia is an orphan of the active StoreFront themes  # noqa: E501

        :return: The orphan of this ItemContentMultimedia.  # noqa: E501
        :rtype: bool
        """
        return self._orphan

    @orphan.setter
    def orphan(self, orphan):
        """Sets the orphan of this ItemContentMultimedia.

        True if the multimedia is an orphan of the active StoreFront themes  # noqa: E501

        :param orphan: The orphan of this ItemContentMultimedia.  # noqa: E501
        :type: bool
        """

        self._orphan = orphan

    @property
    def placeholder(self):
        """Gets the placeholder of this ItemContentMultimedia.  # noqa: E501

        True if the object is a place holder that can be populated  # noqa: E501

        :return: The placeholder of this ItemContentMultimedia.  # noqa: E501
        :rtype: bool
        """
        return self._placeholder

    @placeholder.setter
    def placeholder(self, placeholder):
        """Sets the placeholder of this ItemContentMultimedia.

        True if the object is a place holder that can be populated  # noqa: E501

        :param placeholder: The placeholder of this ItemContentMultimedia.  # noqa: E501
        :type: bool
        """

        self._placeholder = placeholder

    @property
    def temp_multimedia_oid(self):
        """Gets the temp_multimedia_oid of this ItemContentMultimedia.  # noqa: E501

        Temporary multimedia object identifier assigned if uploading new multimedia  # noqa: E501

        :return: The temp_multimedia_oid of this ItemContentMultimedia.  # noqa: E501
        :rtype: int
        """
        return self._temp_multimedia_oid

    @temp_multimedia_oid.setter
    def temp_multimedia_oid(self, temp_multimedia_oid):
        """Sets the temp_multimedia_oid of this ItemContentMultimedia.

        Temporary multimedia object identifier assigned if uploading new multimedia  # noqa: E501

        :param temp_multimedia_oid: The temp_multimedia_oid of this ItemContentMultimedia.  # noqa: E501
        :type: int
        """

        self._temp_multimedia_oid = temp_multimedia_oid

    @property
    def thumbnails(self):
        """Gets the thumbnails of this ItemContentMultimedia.  # noqa: E501

        Thumbnails of this image  # noqa: E501

        :return: The thumbnails of this ItemContentMultimedia.  # noqa: E501
        :rtype: list[ItemContentMultimediaThumbnail]
        """
        return self._thumbnails

    @thumbnails.setter
    def thumbnails(self, thumbnails):
        """Sets the thumbnails of this ItemContentMultimedia.

        Thumbnails of this image  # noqa: E501

        :param thumbnails: The thumbnails of this ItemContentMultimedia.  # noqa: E501
        :type: list[ItemContentMultimediaThumbnail]
        """

        self._thumbnails = thumbnails

    @property
    def type(self):
        """Gets the type of this ItemContentMultimedia.  # noqa: E501

        Type of file  # noqa: E501

        :return: The type of this ItemContentMultimedia.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ItemContentMultimedia.

        Type of file  # noqa: E501

        :param type: The type of this ItemContentMultimedia.  # noqa: E501
        :type: str
        """
        allowed_values = ["Image", "PDF", "Text", "Unknown", "Video"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def url(self):
        """Gets the url of this ItemContentMultimedia.  # noqa: E501

        URL to download file (on new multimedia record this can be a URL for UltraCart to fetch)  # noqa: E501

        :return: The url of this ItemContentMultimedia.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ItemContentMultimedia.

        URL to download file (on new multimedia record this can be a URL for UltraCart to fetch)  # noqa: E501

        :param url: The url of this ItemContentMultimedia.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def width(self):
        """Gets the width of this ItemContentMultimedia.  # noqa: E501

        Width of the image  # noqa: E501

        :return: The width of this ItemContentMultimedia.  # noqa: E501
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this ItemContentMultimedia.

        Width of the image  # noqa: E501

        :param width: The width of this ItemContentMultimedia.  # noqa: E501
        :type: int
        """

        self._width = width

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ItemContentMultimedia, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ItemContentMultimedia):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
