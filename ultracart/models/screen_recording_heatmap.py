# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ScreenRecordingHeatmap(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'large_click_url': 'str',
        'large_movement_url': 'str',
        'large_regular_url': 'str',
        'large_scroll_url': 'str',
        'medium_click_url': 'str',
        'medium_movement_url': 'str',
        'medium_regular_url': 'str',
        'medium_scroll_url': 'str',
        'small_click_url': 'str',
        'small_movement_url': 'str',
        'small_regular_url': 'str',
        'small_scroll_url': 'str'
    }

    attribute_map = {
        'large_click_url': 'large_click_url',
        'large_movement_url': 'large_movement_url',
        'large_regular_url': 'large_regular_url',
        'large_scroll_url': 'large_scroll_url',
        'medium_click_url': 'medium_click_url',
        'medium_movement_url': 'medium_movement_url',
        'medium_regular_url': 'medium_regular_url',
        'medium_scroll_url': 'medium_scroll_url',
        'small_click_url': 'small_click_url',
        'small_movement_url': 'small_movement_url',
        'small_regular_url': 'small_regular_url',
        'small_scroll_url': 'small_scroll_url'
    }

    def __init__(self, large_click_url=None, large_movement_url=None, large_regular_url=None, large_scroll_url=None, medium_click_url=None, medium_movement_url=None, medium_regular_url=None, medium_scroll_url=None, small_click_url=None, small_movement_url=None, small_regular_url=None, small_scroll_url=None):  # noqa: E501
        """ScreenRecordingHeatmap - a model defined in Swagger"""  # noqa: E501

        self._large_click_url = None
        self._large_movement_url = None
        self._large_regular_url = None
        self._large_scroll_url = None
        self._medium_click_url = None
        self._medium_movement_url = None
        self._medium_regular_url = None
        self._medium_scroll_url = None
        self._small_click_url = None
        self._small_movement_url = None
        self._small_regular_url = None
        self._small_scroll_url = None
        self.discriminator = None

        if large_click_url is not None:
            self.large_click_url = large_click_url
        if large_movement_url is not None:
            self.large_movement_url = large_movement_url
        if large_regular_url is not None:
            self.large_regular_url = large_regular_url
        if large_scroll_url is not None:
            self.large_scroll_url = large_scroll_url
        if medium_click_url is not None:
            self.medium_click_url = medium_click_url
        if medium_movement_url is not None:
            self.medium_movement_url = medium_movement_url
        if medium_regular_url is not None:
            self.medium_regular_url = medium_regular_url
        if medium_scroll_url is not None:
            self.medium_scroll_url = medium_scroll_url
        if small_click_url is not None:
            self.small_click_url = small_click_url
        if small_movement_url is not None:
            self.small_movement_url = small_movement_url
        if small_regular_url is not None:
            self.small_regular_url = small_regular_url
        if small_scroll_url is not None:
            self.small_scroll_url = small_scroll_url

    @property
    def large_click_url(self):
        """Gets the large_click_url of this ScreenRecordingHeatmap.  # noqa: E501


        :return: The large_click_url of this ScreenRecordingHeatmap.  # noqa: E501
        :rtype: str
        """
        return self._large_click_url

    @large_click_url.setter
    def large_click_url(self, large_click_url):
        """Sets the large_click_url of this ScreenRecordingHeatmap.


        :param large_click_url: The large_click_url of this ScreenRecordingHeatmap.  # noqa: E501
        :type: str
        """

        self._large_click_url = large_click_url

    @property
    def large_movement_url(self):
        """Gets the large_movement_url of this ScreenRecordingHeatmap.  # noqa: E501


        :return: The large_movement_url of this ScreenRecordingHeatmap.  # noqa: E501
        :rtype: str
        """
        return self._large_movement_url

    @large_movement_url.setter
    def large_movement_url(self, large_movement_url):
        """Sets the large_movement_url of this ScreenRecordingHeatmap.


        :param large_movement_url: The large_movement_url of this ScreenRecordingHeatmap.  # noqa: E501
        :type: str
        """

        self._large_movement_url = large_movement_url

    @property
    def large_regular_url(self):
        """Gets the large_regular_url of this ScreenRecordingHeatmap.  # noqa: E501


        :return: The large_regular_url of this ScreenRecordingHeatmap.  # noqa: E501
        :rtype: str
        """
        return self._large_regular_url

    @large_regular_url.setter
    def large_regular_url(self, large_regular_url):
        """Sets the large_regular_url of this ScreenRecordingHeatmap.


        :param large_regular_url: The large_regular_url of this ScreenRecordingHeatmap.  # noqa: E501
        :type: str
        """

        self._large_regular_url = large_regular_url

    @property
    def large_scroll_url(self):
        """Gets the large_scroll_url of this ScreenRecordingHeatmap.  # noqa: E501


        :return: The large_scroll_url of this ScreenRecordingHeatmap.  # noqa: E501
        :rtype: str
        """
        return self._large_scroll_url

    @large_scroll_url.setter
    def large_scroll_url(self, large_scroll_url):
        """Sets the large_scroll_url of this ScreenRecordingHeatmap.


        :param large_scroll_url: The large_scroll_url of this ScreenRecordingHeatmap.  # noqa: E501
        :type: str
        """

        self._large_scroll_url = large_scroll_url

    @property
    def medium_click_url(self):
        """Gets the medium_click_url of this ScreenRecordingHeatmap.  # noqa: E501


        :return: The medium_click_url of this ScreenRecordingHeatmap.  # noqa: E501
        :rtype: str
        """
        return self._medium_click_url

    @medium_click_url.setter
    def medium_click_url(self, medium_click_url):
        """Sets the medium_click_url of this ScreenRecordingHeatmap.


        :param medium_click_url: The medium_click_url of this ScreenRecordingHeatmap.  # noqa: E501
        :type: str
        """

        self._medium_click_url = medium_click_url

    @property
    def medium_movement_url(self):
        """Gets the medium_movement_url of this ScreenRecordingHeatmap.  # noqa: E501


        :return: The medium_movement_url of this ScreenRecordingHeatmap.  # noqa: E501
        :rtype: str
        """
        return self._medium_movement_url

    @medium_movement_url.setter
    def medium_movement_url(self, medium_movement_url):
        """Sets the medium_movement_url of this ScreenRecordingHeatmap.


        :param medium_movement_url: The medium_movement_url of this ScreenRecordingHeatmap.  # noqa: E501
        :type: str
        """

        self._medium_movement_url = medium_movement_url

    @property
    def medium_regular_url(self):
        """Gets the medium_regular_url of this ScreenRecordingHeatmap.  # noqa: E501


        :return: The medium_regular_url of this ScreenRecordingHeatmap.  # noqa: E501
        :rtype: str
        """
        return self._medium_regular_url

    @medium_regular_url.setter
    def medium_regular_url(self, medium_regular_url):
        """Sets the medium_regular_url of this ScreenRecordingHeatmap.


        :param medium_regular_url: The medium_regular_url of this ScreenRecordingHeatmap.  # noqa: E501
        :type: str
        """

        self._medium_regular_url = medium_regular_url

    @property
    def medium_scroll_url(self):
        """Gets the medium_scroll_url of this ScreenRecordingHeatmap.  # noqa: E501


        :return: The medium_scroll_url of this ScreenRecordingHeatmap.  # noqa: E501
        :rtype: str
        """
        return self._medium_scroll_url

    @medium_scroll_url.setter
    def medium_scroll_url(self, medium_scroll_url):
        """Sets the medium_scroll_url of this ScreenRecordingHeatmap.


        :param medium_scroll_url: The medium_scroll_url of this ScreenRecordingHeatmap.  # noqa: E501
        :type: str
        """

        self._medium_scroll_url = medium_scroll_url

    @property
    def small_click_url(self):
        """Gets the small_click_url of this ScreenRecordingHeatmap.  # noqa: E501


        :return: The small_click_url of this ScreenRecordingHeatmap.  # noqa: E501
        :rtype: str
        """
        return self._small_click_url

    @small_click_url.setter
    def small_click_url(self, small_click_url):
        """Sets the small_click_url of this ScreenRecordingHeatmap.


        :param small_click_url: The small_click_url of this ScreenRecordingHeatmap.  # noqa: E501
        :type: str
        """

        self._small_click_url = small_click_url

    @property
    def small_movement_url(self):
        """Gets the small_movement_url of this ScreenRecordingHeatmap.  # noqa: E501


        :return: The small_movement_url of this ScreenRecordingHeatmap.  # noqa: E501
        :rtype: str
        """
        return self._small_movement_url

    @small_movement_url.setter
    def small_movement_url(self, small_movement_url):
        """Sets the small_movement_url of this ScreenRecordingHeatmap.


        :param small_movement_url: The small_movement_url of this ScreenRecordingHeatmap.  # noqa: E501
        :type: str
        """

        self._small_movement_url = small_movement_url

    @property
    def small_regular_url(self):
        """Gets the small_regular_url of this ScreenRecordingHeatmap.  # noqa: E501


        :return: The small_regular_url of this ScreenRecordingHeatmap.  # noqa: E501
        :rtype: str
        """
        return self._small_regular_url

    @small_regular_url.setter
    def small_regular_url(self, small_regular_url):
        """Sets the small_regular_url of this ScreenRecordingHeatmap.


        :param small_regular_url: The small_regular_url of this ScreenRecordingHeatmap.  # noqa: E501
        :type: str
        """

        self._small_regular_url = small_regular_url

    @property
    def small_scroll_url(self):
        """Gets the small_scroll_url of this ScreenRecordingHeatmap.  # noqa: E501


        :return: The small_scroll_url of this ScreenRecordingHeatmap.  # noqa: E501
        :rtype: str
        """
        return self._small_scroll_url

    @small_scroll_url.setter
    def small_scroll_url(self, small_scroll_url):
        """Sets the small_scroll_url of this ScreenRecordingHeatmap.


        :param small_scroll_url: The small_scroll_url of this ScreenRecordingHeatmap.  # noqa: E501
        :type: str
        """

        self._small_scroll_url = small_scroll_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScreenRecordingHeatmap, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScreenRecordingHeatmap):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
