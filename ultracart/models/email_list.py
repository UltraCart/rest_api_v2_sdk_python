# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class EmailList(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allow_csv_download': 'bool',
        'created_dts': 'str',
        'deleted': 'bool',
        'email_list_uuid': 'str',
        'member_count': 'int',
        'merchant_id': 'str',
        'name': 'str',
        'public_description': 'str',
        'public_list': 'bool',
        'storefront_oid': 'int',
        'used_by': 'list[EmailListSegmentUsedBy]'
    }

    attribute_map = {
        'allow_csv_download': 'allow_csv_download',
        'created_dts': 'created_dts',
        'deleted': 'deleted',
        'email_list_uuid': 'email_list_uuid',
        'member_count': 'member_count',
        'merchant_id': 'merchant_id',
        'name': 'name',
        'public_description': 'public_description',
        'public_list': 'public_list',
        'storefront_oid': 'storefront_oid',
        'used_by': 'used_by'
    }

    def __init__(self, allow_csv_download=None, created_dts=None, deleted=None, email_list_uuid=None, member_count=None, merchant_id=None, name=None, public_description=None, public_list=None, storefront_oid=None, used_by=None):  # noqa: E501
        """EmailList - a model defined in Swagger"""  # noqa: E501

        self._allow_csv_download = None
        self._created_dts = None
        self._deleted = None
        self._email_list_uuid = None
        self._member_count = None
        self._merchant_id = None
        self._name = None
        self._public_description = None
        self._public_list = None
        self._storefront_oid = None
        self._used_by = None
        self.discriminator = None

        if allow_csv_download is not None:
            self.allow_csv_download = allow_csv_download
        if created_dts is not None:
            self.created_dts = created_dts
        if deleted is not None:
            self.deleted = deleted
        if email_list_uuid is not None:
            self.email_list_uuid = email_list_uuid
        if member_count is not None:
            self.member_count = member_count
        if merchant_id is not None:
            self.merchant_id = merchant_id
        if name is not None:
            self.name = name
        if public_description is not None:
            self.public_description = public_description
        if public_list is not None:
            self.public_list = public_list
        if storefront_oid is not None:
            self.storefront_oid = storefront_oid
        if used_by is not None:
            self.used_by = used_by

    @property
    def allow_csv_download(self):
        """Gets the allow_csv_download of this EmailList.  # noqa: E501

        True if the current user has the rights to download this list.  # noqa: E501

        :return: The allow_csv_download of this EmailList.  # noqa: E501
        :rtype: bool
        """
        return self._allow_csv_download

    @allow_csv_download.setter
    def allow_csv_download(self, allow_csv_download):
        """Sets the allow_csv_download of this EmailList.

        True if the current user has the rights to download this list.  # noqa: E501

        :param allow_csv_download: The allow_csv_download of this EmailList.  # noqa: E501
        :type: bool
        """

        self._allow_csv_download = allow_csv_download

    @property
    def created_dts(self):
        """Gets the created_dts of this EmailList.  # noqa: E501

        Created date  # noqa: E501

        :return: The created_dts of this EmailList.  # noqa: E501
        :rtype: str
        """
        return self._created_dts

    @created_dts.setter
    def created_dts(self, created_dts):
        """Sets the created_dts of this EmailList.

        Created date  # noqa: E501

        :param created_dts: The created_dts of this EmailList.  # noqa: E501
        :type: str
        """

        self._created_dts = created_dts

    @property
    def deleted(self):
        """Gets the deleted of this EmailList.  # noqa: E501

        True if this campaign was deleted  # noqa: E501

        :return: The deleted of this EmailList.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this EmailList.

        True if this campaign was deleted  # noqa: E501

        :param deleted: The deleted of this EmailList.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def email_list_uuid(self):
        """Gets the email_list_uuid of this EmailList.  # noqa: E501

        Email list UUID  # noqa: E501

        :return: The email_list_uuid of this EmailList.  # noqa: E501
        :rtype: str
        """
        return self._email_list_uuid

    @email_list_uuid.setter
    def email_list_uuid(self, email_list_uuid):
        """Sets the email_list_uuid of this EmailList.

        Email list UUID  # noqa: E501

        :param email_list_uuid: The email_list_uuid of this EmailList.  # noqa: E501
        :type: str
        """

        self._email_list_uuid = email_list_uuid

    @property
    def member_count(self):
        """Gets the member_count of this EmailList.  # noqa: E501

        Count of members in this list  # noqa: E501

        :return: The member_count of this EmailList.  # noqa: E501
        :rtype: int
        """
        return self._member_count

    @member_count.setter
    def member_count(self, member_count):
        """Sets the member_count of this EmailList.

        Count of members in this list  # noqa: E501

        :param member_count: The member_count of this EmailList.  # noqa: E501
        :type: int
        """

        self._member_count = member_count

    @property
    def merchant_id(self):
        """Gets the merchant_id of this EmailList.  # noqa: E501

        Merchant ID  # noqa: E501

        :return: The merchant_id of this EmailList.  # noqa: E501
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this EmailList.

        Merchant ID  # noqa: E501

        :param merchant_id: The merchant_id of this EmailList.  # noqa: E501
        :type: str
        """

        self._merchant_id = merchant_id

    @property
    def name(self):
        """Gets the name of this EmailList.  # noqa: E501

        Name of email list  # noqa: E501

        :return: The name of this EmailList.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EmailList.

        Name of email list  # noqa: E501

        :param name: The name of this EmailList.  # noqa: E501
        :type: str
        """
        if name is not None and len(name) > 250:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `250`")  # noqa: E501

        self._name = name

    @property
    def public_description(self):
        """Gets the public_description of this EmailList.  # noqa: E501

        Description of list shown to customer.  # noqa: E501

        :return: The public_description of this EmailList.  # noqa: E501
        :rtype: str
        """
        return self._public_description

    @public_description.setter
    def public_description(self, public_description):
        """Sets the public_description of this EmailList.

        Description of list shown to customer.  # noqa: E501

        :param public_description: The public_description of this EmailList.  # noqa: E501
        :type: str
        """

        self._public_description = public_description

    @property
    def public_list(self):
        """Gets the public_list of this EmailList.  # noqa: E501

        True if this list is public  # noqa: E501

        :return: The public_list of this EmailList.  # noqa: E501
        :rtype: bool
        """
        return self._public_list

    @public_list.setter
    def public_list(self, public_list):
        """Sets the public_list of this EmailList.

        True if this list is public  # noqa: E501

        :param public_list: The public_list of this EmailList.  # noqa: E501
        :type: bool
        """

        self._public_list = public_list

    @property
    def storefront_oid(self):
        """Gets the storefront_oid of this EmailList.  # noqa: E501

        Storefront oid  # noqa: E501

        :return: The storefront_oid of this EmailList.  # noqa: E501
        :rtype: int
        """
        return self._storefront_oid

    @storefront_oid.setter
    def storefront_oid(self, storefront_oid):
        """Sets the storefront_oid of this EmailList.

        Storefront oid  # noqa: E501

        :param storefront_oid: The storefront_oid of this EmailList.  # noqa: E501
        :type: int
        """

        self._storefront_oid = storefront_oid

    @property
    def used_by(self):
        """Gets the used_by of this EmailList.  # noqa: E501

        Details on the flows or campaigns that use this list.  # noqa: E501

        :return: The used_by of this EmailList.  # noqa: E501
        :rtype: list[EmailListSegmentUsedBy]
        """
        return self._used_by

    @used_by.setter
    def used_by(self, used_by):
        """Sets the used_by of this EmailList.

        Details on the flows or campaigns that use this list.  # noqa: E501

        :param used_by: The used_by of this EmailList.  # noqa: E501
        :type: list[EmailListSegmentUsedBy]
        """

        self._used_by = used_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EmailList, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmailList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
