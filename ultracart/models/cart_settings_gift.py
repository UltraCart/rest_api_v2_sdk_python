# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CartSettingsGift(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allow_gifts': 'bool',
        'gift_charge': 'Currency',
        'gift_wraps': 'list[CartSettingsGiftWrap]',
        'max_message_length': 'int'
    }

    attribute_map = {
        'allow_gifts': 'allow_gifts',
        'gift_charge': 'gift_charge',
        'gift_wraps': 'gift_wraps',
        'max_message_length': 'max_message_length'
    }

    def __init__(self, allow_gifts=None, gift_charge=None, gift_wraps=None, max_message_length=None):  # noqa: E501
        """CartSettingsGift - a model defined in Swagger"""  # noqa: E501

        self._allow_gifts = None
        self._gift_charge = None
        self._gift_wraps = None
        self._max_message_length = None
        self.discriminator = None

        if allow_gifts is not None:
            self.allow_gifts = allow_gifts
        if gift_charge is not None:
            self.gift_charge = gift_charge
        if gift_wraps is not None:
            self.gift_wraps = gift_wraps
        if max_message_length is not None:
            self.max_message_length = max_message_length

    @property
    def allow_gifts(self):
        """Gets the allow_gifts of this CartSettingsGift.  # noqa: E501

        True if this checkout supports gift giving  # noqa: E501

        :return: The allow_gifts of this CartSettingsGift.  # noqa: E501
        :rtype: bool
        """
        return self._allow_gifts

    @allow_gifts.setter
    def allow_gifts(self, allow_gifts):
        """Sets the allow_gifts of this CartSettingsGift.

        True if this checkout supports gift giving  # noqa: E501

        :param allow_gifts: The allow_gifts of this CartSettingsGift.  # noqa: E501
        :type: bool
        """

        self._allow_gifts = allow_gifts

    @property
    def gift_charge(self):
        """Gets the gift_charge of this CartSettingsGift.  # noqa: E501


        :return: The gift_charge of this CartSettingsGift.  # noqa: E501
        :rtype: Currency
        """
        return self._gift_charge

    @gift_charge.setter
    def gift_charge(self, gift_charge):
        """Sets the gift_charge of this CartSettingsGift.


        :param gift_charge: The gift_charge of this CartSettingsGift.  # noqa: E501
        :type: Currency
        """

        self._gift_charge = gift_charge

    @property
    def gift_wraps(self):
        """Gets the gift_wraps of this CartSettingsGift.  # noqa: E501

        The gift wraps available for the customer to select from  # noqa: E501

        :return: The gift_wraps of this CartSettingsGift.  # noqa: E501
        :rtype: list[CartSettingsGiftWrap]
        """
        return self._gift_wraps

    @gift_wraps.setter
    def gift_wraps(self, gift_wraps):
        """Sets the gift_wraps of this CartSettingsGift.

        The gift wraps available for the customer to select from  # noqa: E501

        :param gift_wraps: The gift_wraps of this CartSettingsGift.  # noqa: E501
        :type: list[CartSettingsGiftWrap]
        """

        self._gift_wraps = gift_wraps

    @property
    def max_message_length(self):
        """Gets the max_message_length of this CartSettingsGift.  # noqa: E501

        The maximum length of the gift message the giver can enter  # noqa: E501

        :return: The max_message_length of this CartSettingsGift.  # noqa: E501
        :rtype: int
        """
        return self._max_message_length

    @max_message_length.setter
    def max_message_length(self, max_message_length):
        """Sets the max_message_length of this CartSettingsGift.

        The maximum length of the gift message the giver can enter  # noqa: E501

        :param max_message_length: The max_message_length of this CartSettingsGift.  # noqa: E501
        :type: int
        """

        self._max_message_length = max_message_length

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CartSettingsGift, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CartSettingsGift):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
