# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConversationEngagement(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'conversation_engagement_oid': 'int',
        'customer_greeting': 'str',
        'department_oids': 'list[int]',
        'engagement_name': 'str',
        'equation': 'ConversationEngagementEquation',
        'time_on_page': 'int',
        'visitor_type': 'str'
    }

    attribute_map = {
        'conversation_engagement_oid': 'conversation_engagement_oid',
        'customer_greeting': 'customer_greeting',
        'department_oids': 'department_oids',
        'engagement_name': 'engagement_name',
        'equation': 'equation',
        'time_on_page': 'time_on_page',
        'visitor_type': 'visitor_type'
    }

    def __init__(self, conversation_engagement_oid=None, customer_greeting=None, department_oids=None, engagement_name=None, equation=None, time_on_page=None, visitor_type=None):  # noqa: E501
        """ConversationEngagement - a model defined in Swagger"""  # noqa: E501

        self._conversation_engagement_oid = None
        self._customer_greeting = None
        self._department_oids = None
        self._engagement_name = None
        self._equation = None
        self._time_on_page = None
        self._visitor_type = None
        self.discriminator = None

        if conversation_engagement_oid is not None:
            self.conversation_engagement_oid = conversation_engagement_oid
        if customer_greeting is not None:
            self.customer_greeting = customer_greeting
        if department_oids is not None:
            self.department_oids = department_oids
        if engagement_name is not None:
            self.engagement_name = engagement_name
        if equation is not None:
            self.equation = equation
        if time_on_page is not None:
            self.time_on_page = time_on_page
        if visitor_type is not None:
            self.visitor_type = visitor_type

    @property
    def conversation_engagement_oid(self):
        """Gets the conversation_engagement_oid of this ConversationEngagement.  # noqa: E501


        :return: The conversation_engagement_oid of this ConversationEngagement.  # noqa: E501
        :rtype: int
        """
        return self._conversation_engagement_oid

    @conversation_engagement_oid.setter
    def conversation_engagement_oid(self, conversation_engagement_oid):
        """Sets the conversation_engagement_oid of this ConversationEngagement.


        :param conversation_engagement_oid: The conversation_engagement_oid of this ConversationEngagement.  # noqa: E501
        :type: int
        """

        self._conversation_engagement_oid = conversation_engagement_oid

    @property
    def customer_greeting(self):
        """Gets the customer_greeting of this ConversationEngagement.  # noqa: E501


        :return: The customer_greeting of this ConversationEngagement.  # noqa: E501
        :rtype: str
        """
        return self._customer_greeting

    @customer_greeting.setter
    def customer_greeting(self, customer_greeting):
        """Sets the customer_greeting of this ConversationEngagement.


        :param customer_greeting: The customer_greeting of this ConversationEngagement.  # noqa: E501
        :type: str
        """

        self._customer_greeting = customer_greeting

    @property
    def department_oids(self):
        """Gets the department_oids of this ConversationEngagement.  # noqa: E501


        :return: The department_oids of this ConversationEngagement.  # noqa: E501
        :rtype: list[int]
        """
        return self._department_oids

    @department_oids.setter
    def department_oids(self, department_oids):
        """Sets the department_oids of this ConversationEngagement.


        :param department_oids: The department_oids of this ConversationEngagement.  # noqa: E501
        :type: list[int]
        """

        self._department_oids = department_oids

    @property
    def engagement_name(self):
        """Gets the engagement_name of this ConversationEngagement.  # noqa: E501


        :return: The engagement_name of this ConversationEngagement.  # noqa: E501
        :rtype: str
        """
        return self._engagement_name

    @engagement_name.setter
    def engagement_name(self, engagement_name):
        """Sets the engagement_name of this ConversationEngagement.


        :param engagement_name: The engagement_name of this ConversationEngagement.  # noqa: E501
        :type: str
        """

        self._engagement_name = engagement_name

    @property
    def equation(self):
        """Gets the equation of this ConversationEngagement.  # noqa: E501


        :return: The equation of this ConversationEngagement.  # noqa: E501
        :rtype: ConversationEngagementEquation
        """
        return self._equation

    @equation.setter
    def equation(self, equation):
        """Sets the equation of this ConversationEngagement.


        :param equation: The equation of this ConversationEngagement.  # noqa: E501
        :type: ConversationEngagementEquation
        """

        self._equation = equation

    @property
    def time_on_page(self):
        """Gets the time_on_page of this ConversationEngagement.  # noqa: E501


        :return: The time_on_page of this ConversationEngagement.  # noqa: E501
        :rtype: int
        """
        return self._time_on_page

    @time_on_page.setter
    def time_on_page(self, time_on_page):
        """Sets the time_on_page of this ConversationEngagement.


        :param time_on_page: The time_on_page of this ConversationEngagement.  # noqa: E501
        :type: int
        """

        self._time_on_page = time_on_page

    @property
    def visitor_type(self):
        """Gets the visitor_type of this ConversationEngagement.  # noqa: E501

        The type of visitor  # noqa: E501

        :return: The visitor_type of this ConversationEngagement.  # noqa: E501
        :rtype: str
        """
        return self._visitor_type

    @visitor_type.setter
    def visitor_type(self, visitor_type):
        """Sets the visitor_type of this ConversationEngagement.

        The type of visitor  # noqa: E501

        :param visitor_type: The visitor_type of this ConversationEngagement.  # noqa: E501
        :type: str
        """
        allowed_values = ["all", "first time", "returning"]  # noqa: E501
        if visitor_type not in allowed_values:
            raise ValueError(
                "Invalid value for `visitor_type` ({0}), must be one of {1}"  # noqa: E501
                .format(visitor_type, allowed_values)
            )

        self._visitor_type = visitor_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConversationEngagement, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConversationEngagement):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
