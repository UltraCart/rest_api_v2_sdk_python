# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OrderBuysafe(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'buysafe_bond_available': 'bool',
        'buysafe_bond_cost': 'Currency',
        'buysafe_bond_free': 'bool',
        'buysafe_bond_refunded': 'Currency',
        'buysafe_bond_wanted': 'bool',
        'buysafe_shopping_cart_id': 'str'
    }

    attribute_map = {
        'buysafe_bond_available': 'buysafe_bond_available',
        'buysafe_bond_cost': 'buysafe_bond_cost',
        'buysafe_bond_free': 'buysafe_bond_free',
        'buysafe_bond_refunded': 'buysafe_bond_refunded',
        'buysafe_bond_wanted': 'buysafe_bond_wanted',
        'buysafe_shopping_cart_id': 'buysafe_shopping_cart_id'
    }

    def __init__(self, buysafe_bond_available=None, buysafe_bond_cost=None, buysafe_bond_free=None, buysafe_bond_refunded=None, buysafe_bond_wanted=None, buysafe_shopping_cart_id=None):  # noqa: E501
        """OrderBuysafe - a model defined in Swagger"""  # noqa: E501

        self._buysafe_bond_available = None
        self._buysafe_bond_cost = None
        self._buysafe_bond_free = None
        self._buysafe_bond_refunded = None
        self._buysafe_bond_wanted = None
        self._buysafe_shopping_cart_id = None
        self.discriminator = None

        if buysafe_bond_available is not None:
            self.buysafe_bond_available = buysafe_bond_available
        if buysafe_bond_cost is not None:
            self.buysafe_bond_cost = buysafe_bond_cost
        if buysafe_bond_free is not None:
            self.buysafe_bond_free = buysafe_bond_free
        if buysafe_bond_refunded is not None:
            self.buysafe_bond_refunded = buysafe_bond_refunded
        if buysafe_bond_wanted is not None:
            self.buysafe_bond_wanted = buysafe_bond_wanted
        if buysafe_shopping_cart_id is not None:
            self.buysafe_shopping_cart_id = buysafe_shopping_cart_id

    @property
    def buysafe_bond_available(self):
        """Gets the buysafe_bond_available of this OrderBuysafe.  # noqa: E501

        True if a buySAFE bond was available for purchase on this order  # noqa: E501

        :return: The buysafe_bond_available of this OrderBuysafe.  # noqa: E501
        :rtype: bool
        """
        return self._buysafe_bond_available

    @buysafe_bond_available.setter
    def buysafe_bond_available(self, buysafe_bond_available):
        """Sets the buysafe_bond_available of this OrderBuysafe.

        True if a buySAFE bond was available for purchase on this order  # noqa: E501

        :param buysafe_bond_available: The buysafe_bond_available of this OrderBuysafe.  # noqa: E501
        :type: bool
        """

        self._buysafe_bond_available = buysafe_bond_available

    @property
    def buysafe_bond_cost(self):
        """Gets the buysafe_bond_cost of this OrderBuysafe.  # noqa: E501


        :return: The buysafe_bond_cost of this OrderBuysafe.  # noqa: E501
        :rtype: Currency
        """
        return self._buysafe_bond_cost

    @buysafe_bond_cost.setter
    def buysafe_bond_cost(self, buysafe_bond_cost):
        """Sets the buysafe_bond_cost of this OrderBuysafe.


        :param buysafe_bond_cost: The buysafe_bond_cost of this OrderBuysafe.  # noqa: E501
        :type: Currency
        """

        self._buysafe_bond_cost = buysafe_bond_cost

    @property
    def buysafe_bond_free(self):
        """Gets the buysafe_bond_free of this OrderBuysafe.  # noqa: E501

        True if the buySAFE bond was free for this order  # noqa: E501

        :return: The buysafe_bond_free of this OrderBuysafe.  # noqa: E501
        :rtype: bool
        """
        return self._buysafe_bond_free

    @buysafe_bond_free.setter
    def buysafe_bond_free(self, buysafe_bond_free):
        """Sets the buysafe_bond_free of this OrderBuysafe.

        True if the buySAFE bond was free for this order  # noqa: E501

        :param buysafe_bond_free: The buysafe_bond_free of this OrderBuysafe.  # noqa: E501
        :type: bool
        """

        self._buysafe_bond_free = buysafe_bond_free

    @property
    def buysafe_bond_refunded(self):
        """Gets the buysafe_bond_refunded of this OrderBuysafe.  # noqa: E501


        :return: The buysafe_bond_refunded of this OrderBuysafe.  # noqa: E501
        :rtype: Currency
        """
        return self._buysafe_bond_refunded

    @buysafe_bond_refunded.setter
    def buysafe_bond_refunded(self, buysafe_bond_refunded):
        """Sets the buysafe_bond_refunded of this OrderBuysafe.


        :param buysafe_bond_refunded: The buysafe_bond_refunded of this OrderBuysafe.  # noqa: E501
        :type: Currency
        """

        self._buysafe_bond_refunded = buysafe_bond_refunded

    @property
    def buysafe_bond_wanted(self):
        """Gets the buysafe_bond_wanted of this OrderBuysafe.  # noqa: E501

        True if the buySAFE bond was wanted by the customer  # noqa: E501

        :return: The buysafe_bond_wanted of this OrderBuysafe.  # noqa: E501
        :rtype: bool
        """
        return self._buysafe_bond_wanted

    @buysafe_bond_wanted.setter
    def buysafe_bond_wanted(self, buysafe_bond_wanted):
        """Sets the buysafe_bond_wanted of this OrderBuysafe.

        True if the buySAFE bond was wanted by the customer  # noqa: E501

        :param buysafe_bond_wanted: The buysafe_bond_wanted of this OrderBuysafe.  # noqa: E501
        :type: bool
        """

        self._buysafe_bond_wanted = buysafe_bond_wanted

    @property
    def buysafe_shopping_cart_id(self):
        """Gets the buysafe_shopping_cart_id of this OrderBuysafe.  # noqa: E501

        Shopping cart ID associated with the buySAFE bond  # noqa: E501

        :return: The buysafe_shopping_cart_id of this OrderBuysafe.  # noqa: E501
        :rtype: str
        """
        return self._buysafe_shopping_cart_id

    @buysafe_shopping_cart_id.setter
    def buysafe_shopping_cart_id(self, buysafe_shopping_cart_id):
        """Sets the buysafe_shopping_cart_id of this OrderBuysafe.

        Shopping cart ID associated with the buySAFE bond  # noqa: E501

        :param buysafe_shopping_cart_id: The buysafe_shopping_cart_id of this OrderBuysafe.  # noqa: E501
        :type: str
        """

        self._buysafe_shopping_cart_id = buysafe_shopping_cart_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderBuysafe, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderBuysafe):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
