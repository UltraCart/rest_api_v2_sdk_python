# coding: utf-8

"""
    UltraCart Rest API V2

    This is the next generation UltraCart REST API...

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ItemVariation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'default_text': 'str',
        'default_text_translated_text_instance_oid': 'int',
        'name': 'str',
        'name_translated_text_instance_oid': 'int',
        'options': 'list[ItemVariationOption]'
    }

    attribute_map = {
        'default_text': 'default_text',
        'default_text_translated_text_instance_oid': 'default_text_translated_text_instance_oid',
        'name': 'name',
        'name_translated_text_instance_oid': 'name_translated_text_instance_oid',
        'options': 'options'
    }

    def __init__(self, default_text=None, default_text_translated_text_instance_oid=None, name=None, name_translated_text_instance_oid=None, options=None):
        """
        ItemVariation - a model defined in Swagger
        """

        self._default_text = None
        self._default_text_translated_text_instance_oid = None
        self._name = None
        self._name_translated_text_instance_oid = None
        self._options = None
        self.discriminator = None

        if default_text is not None:
          self.default_text = default_text
        if default_text_translated_text_instance_oid is not None:
          self.default_text_translated_text_instance_oid = default_text_translated_text_instance_oid
        if name is not None:
          self.name = name
        if name_translated_text_instance_oid is not None:
          self.name_translated_text_instance_oid = name_translated_text_instance_oid
        if options is not None:
          self.options = options

    @property
    def default_text(self):
        """
        Gets the default_text of this ItemVariation.
        Default text

        :return: The default_text of this ItemVariation.
        :rtype: str
        """
        return self._default_text

    @default_text.setter
    def default_text(self, default_text):
        """
        Sets the default_text of this ItemVariation.
        Default text

        :param default_text: The default_text of this ItemVariation.
        :type: str
        """
        if default_text is not None and len(default_text) > 50:
            raise ValueError("Invalid value for `default_text`, length must be less than or equal to `50`")

        self._default_text = default_text

    @property
    def default_text_translated_text_instance_oid(self):
        """
        Gets the default_text_translated_text_instance_oid of this ItemVariation.
        Default text translated text instance id

        :return: The default_text_translated_text_instance_oid of this ItemVariation.
        :rtype: int
        """
        return self._default_text_translated_text_instance_oid

    @default_text_translated_text_instance_oid.setter
    def default_text_translated_text_instance_oid(self, default_text_translated_text_instance_oid):
        """
        Sets the default_text_translated_text_instance_oid of this ItemVariation.
        Default text translated text instance id

        :param default_text_translated_text_instance_oid: The default_text_translated_text_instance_oid of this ItemVariation.
        :type: int
        """

        self._default_text_translated_text_instance_oid = default_text_translated_text_instance_oid

    @property
    def name(self):
        """
        Gets the name of this ItemVariation.
        Name

        :return: The name of this ItemVariation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ItemVariation.
        Name

        :param name: The name of this ItemVariation.
        :type: str
        """
        if name is not None and len(name) > 50:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `50`")

        self._name = name

    @property
    def name_translated_text_instance_oid(self):
        """
        Gets the name_translated_text_instance_oid of this ItemVariation.
        Name translated text instance id

        :return: The name_translated_text_instance_oid of this ItemVariation.
        :rtype: int
        """
        return self._name_translated_text_instance_oid

    @name_translated_text_instance_oid.setter
    def name_translated_text_instance_oid(self, name_translated_text_instance_oid):
        """
        Sets the name_translated_text_instance_oid of this ItemVariation.
        Name translated text instance id

        :param name_translated_text_instance_oid: The name_translated_text_instance_oid of this ItemVariation.
        :type: int
        """

        self._name_translated_text_instance_oid = name_translated_text_instance_oid

    @property
    def options(self):
        """
        Gets the options of this ItemVariation.
        Options

        :return: The options of this ItemVariation.
        :rtype: list[ItemVariationOption]
        """
        return self._options

    @options.setter
    def options(self, options):
        """
        Sets the options of this ItemVariation.
        Options

        :param options: The options of this ItemVariation.
        :type: list[ItemVariationOption]
        """

        self._options = options

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ItemVariation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
