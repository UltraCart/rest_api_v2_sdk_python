# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CustomerShipping(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address1': 'str',
        'address2': 'str',
        'city': 'str',
        'company': 'str',
        'country_code': 'str',
        'customer_profile_oid': 'int',
        'customer_shipping_oid': 'int',
        'day_phone': 'str',
        'default_shipping': 'bool',
        'evening_phone': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'last_used_dts': 'str',
        'postal_code': 'str',
        'state_region': 'str',
        'tax_county': 'str',
        'title': 'str'
    }

    attribute_map = {
        'address1': 'address1',
        'address2': 'address2',
        'city': 'city',
        'company': 'company',
        'country_code': 'country_code',
        'customer_profile_oid': 'customer_profile_oid',
        'customer_shipping_oid': 'customer_shipping_oid',
        'day_phone': 'day_phone',
        'default_shipping': 'default_shipping',
        'evening_phone': 'evening_phone',
        'first_name': 'first_name',
        'last_name': 'last_name',
        'last_used_dts': 'last_used_dts',
        'postal_code': 'postal_code',
        'state_region': 'state_region',
        'tax_county': 'tax_county',
        'title': 'title'
    }

    def __init__(self, address1=None, address2=None, city=None, company=None, country_code=None, customer_profile_oid=None, customer_shipping_oid=None, day_phone=None, default_shipping=None, evening_phone=None, first_name=None, last_name=None, last_used_dts=None, postal_code=None, state_region=None, tax_county=None, title=None):  # noqa: E501
        """CustomerShipping - a model defined in Swagger"""  # noqa: E501

        self._address1 = None
        self._address2 = None
        self._city = None
        self._company = None
        self._country_code = None
        self._customer_profile_oid = None
        self._customer_shipping_oid = None
        self._day_phone = None
        self._default_shipping = None
        self._evening_phone = None
        self._first_name = None
        self._last_name = None
        self._last_used_dts = None
        self._postal_code = None
        self._state_region = None
        self._tax_county = None
        self._title = None
        self.discriminator = None

        if address1 is not None:
            self.address1 = address1
        if address2 is not None:
            self.address2 = address2
        if city is not None:
            self.city = city
        if company is not None:
            self.company = company
        if country_code is not None:
            self.country_code = country_code
        if customer_profile_oid is not None:
            self.customer_profile_oid = customer_profile_oid
        if customer_shipping_oid is not None:
            self.customer_shipping_oid = customer_shipping_oid
        if day_phone is not None:
            self.day_phone = day_phone
        if default_shipping is not None:
            self.default_shipping = default_shipping
        if evening_phone is not None:
            self.evening_phone = evening_phone
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if last_used_dts is not None:
            self.last_used_dts = last_used_dts
        if postal_code is not None:
            self.postal_code = postal_code
        if state_region is not None:
            self.state_region = state_region
        if tax_county is not None:
            self.tax_county = tax_county
        if title is not None:
            self.title = title

    @property
    def address1(self):
        """Gets the address1 of this CustomerShipping.  # noqa: E501

        Address line 1  # noqa: E501

        :return: The address1 of this CustomerShipping.  # noqa: E501
        :rtype: str
        """
        return self._address1

    @address1.setter
    def address1(self, address1):
        """Sets the address1 of this CustomerShipping.

        Address line 1  # noqa: E501

        :param address1: The address1 of this CustomerShipping.  # noqa: E501
        :type: str
        """
        if address1 is not None and len(address1) > 50:
            raise ValueError("Invalid value for `address1`, length must be less than or equal to `50`")  # noqa: E501

        self._address1 = address1

    @property
    def address2(self):
        """Gets the address2 of this CustomerShipping.  # noqa: E501

        Address line 2  # noqa: E501

        :return: The address2 of this CustomerShipping.  # noqa: E501
        :rtype: str
        """
        return self._address2

    @address2.setter
    def address2(self, address2):
        """Sets the address2 of this CustomerShipping.

        Address line 2  # noqa: E501

        :param address2: The address2 of this CustomerShipping.  # noqa: E501
        :type: str
        """
        if address2 is not None and len(address2) > 50:
            raise ValueError("Invalid value for `address2`, length must be less than or equal to `50`")  # noqa: E501

        self._address2 = address2

    @property
    def city(self):
        """Gets the city of this CustomerShipping.  # noqa: E501

        City  # noqa: E501

        :return: The city of this CustomerShipping.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this CustomerShipping.

        City  # noqa: E501

        :param city: The city of this CustomerShipping.  # noqa: E501
        :type: str
        """
        if city is not None and len(city) > 32:
            raise ValueError("Invalid value for `city`, length must be less than or equal to `32`")  # noqa: E501

        self._city = city

    @property
    def company(self):
        """Gets the company of this CustomerShipping.  # noqa: E501

        Company  # noqa: E501

        :return: The company of this CustomerShipping.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this CustomerShipping.

        Company  # noqa: E501

        :param company: The company of this CustomerShipping.  # noqa: E501
        :type: str
        """
        if company is not None and len(company) > 50:
            raise ValueError("Invalid value for `company`, length must be less than or equal to `50`")  # noqa: E501

        self._company = company

    @property
    def country_code(self):
        """Gets the country_code of this CustomerShipping.  # noqa: E501

        ISO-3166 two letter country code  # noqa: E501

        :return: The country_code of this CustomerShipping.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this CustomerShipping.

        ISO-3166 two letter country code  # noqa: E501

        :param country_code: The country_code of this CustomerShipping.  # noqa: E501
        :type: str
        """
        if country_code is not None and len(country_code) > 2:
            raise ValueError("Invalid value for `country_code`, length must be less than or equal to `2`")  # noqa: E501

        self._country_code = country_code

    @property
    def customer_profile_oid(self):
        """Gets the customer_profile_oid of this CustomerShipping.  # noqa: E501

        Customer profile object identifier  # noqa: E501

        :return: The customer_profile_oid of this CustomerShipping.  # noqa: E501
        :rtype: int
        """
        return self._customer_profile_oid

    @customer_profile_oid.setter
    def customer_profile_oid(self, customer_profile_oid):
        """Sets the customer_profile_oid of this CustomerShipping.

        Customer profile object identifier  # noqa: E501

        :param customer_profile_oid: The customer_profile_oid of this CustomerShipping.  # noqa: E501
        :type: int
        """

        self._customer_profile_oid = customer_profile_oid

    @property
    def customer_shipping_oid(self):
        """Gets the customer_shipping_oid of this CustomerShipping.  # noqa: E501

        Customer profile shipping object identifier  # noqa: E501

        :return: The customer_shipping_oid of this CustomerShipping.  # noqa: E501
        :rtype: int
        """
        return self._customer_shipping_oid

    @customer_shipping_oid.setter
    def customer_shipping_oid(self, customer_shipping_oid):
        """Sets the customer_shipping_oid of this CustomerShipping.

        Customer profile shipping object identifier  # noqa: E501

        :param customer_shipping_oid: The customer_shipping_oid of this CustomerShipping.  # noqa: E501
        :type: int
        """

        self._customer_shipping_oid = customer_shipping_oid

    @property
    def day_phone(self):
        """Gets the day_phone of this CustomerShipping.  # noqa: E501

        Day phone  # noqa: E501

        :return: The day_phone of this CustomerShipping.  # noqa: E501
        :rtype: str
        """
        return self._day_phone

    @day_phone.setter
    def day_phone(self, day_phone):
        """Sets the day_phone of this CustomerShipping.

        Day phone  # noqa: E501

        :param day_phone: The day_phone of this CustomerShipping.  # noqa: E501
        :type: str
        """
        if day_phone is not None and len(day_phone) > 25:
            raise ValueError("Invalid value for `day_phone`, length must be less than or equal to `25`")  # noqa: E501

        self._day_phone = day_phone

    @property
    def default_shipping(self):
        """Gets the default_shipping of this CustomerShipping.  # noqa: E501

        Default shipping  # noqa: E501

        :return: The default_shipping of this CustomerShipping.  # noqa: E501
        :rtype: bool
        """
        return self._default_shipping

    @default_shipping.setter
    def default_shipping(self, default_shipping):
        """Sets the default_shipping of this CustomerShipping.

        Default shipping  # noqa: E501

        :param default_shipping: The default_shipping of this CustomerShipping.  # noqa: E501
        :type: bool
        """

        self._default_shipping = default_shipping

    @property
    def evening_phone(self):
        """Gets the evening_phone of this CustomerShipping.  # noqa: E501

        Evening phone  # noqa: E501

        :return: The evening_phone of this CustomerShipping.  # noqa: E501
        :rtype: str
        """
        return self._evening_phone

    @evening_phone.setter
    def evening_phone(self, evening_phone):
        """Sets the evening_phone of this CustomerShipping.

        Evening phone  # noqa: E501

        :param evening_phone: The evening_phone of this CustomerShipping.  # noqa: E501
        :type: str
        """
        if evening_phone is not None and len(evening_phone) > 25:
            raise ValueError("Invalid value for `evening_phone`, length must be less than or equal to `25`")  # noqa: E501

        self._evening_phone = evening_phone

    @property
    def first_name(self):
        """Gets the first_name of this CustomerShipping.  # noqa: E501

        First name  # noqa: E501

        :return: The first_name of this CustomerShipping.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this CustomerShipping.

        First name  # noqa: E501

        :param first_name: The first_name of this CustomerShipping.  # noqa: E501
        :type: str
        """
        if first_name is not None and len(first_name) > 30:
            raise ValueError("Invalid value for `first_name`, length must be less than or equal to `30`")  # noqa: E501

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this CustomerShipping.  # noqa: E501

        Last name  # noqa: E501

        :return: The last_name of this CustomerShipping.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this CustomerShipping.

        Last name  # noqa: E501

        :param last_name: The last_name of this CustomerShipping.  # noqa: E501
        :type: str
        """
        if last_name is not None and len(last_name) > 30:
            raise ValueError("Invalid value for `last_name`, length must be less than or equal to `30`")  # noqa: E501

        self._last_name = last_name

    @property
    def last_used_dts(self):
        """Gets the last_used_dts of this CustomerShipping.  # noqa: E501

        Last used date  # noqa: E501

        :return: The last_used_dts of this CustomerShipping.  # noqa: E501
        :rtype: str
        """
        return self._last_used_dts

    @last_used_dts.setter
    def last_used_dts(self, last_used_dts):
        """Sets the last_used_dts of this CustomerShipping.

        Last used date  # noqa: E501

        :param last_used_dts: The last_used_dts of this CustomerShipping.  # noqa: E501
        :type: str
        """

        self._last_used_dts = last_used_dts

    @property
    def postal_code(self):
        """Gets the postal_code of this CustomerShipping.  # noqa: E501

        Postal code  # noqa: E501

        :return: The postal_code of this CustomerShipping.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this CustomerShipping.

        Postal code  # noqa: E501

        :param postal_code: The postal_code of this CustomerShipping.  # noqa: E501
        :type: str
        """
        if postal_code is not None and len(postal_code) > 20:
            raise ValueError("Invalid value for `postal_code`, length must be less than or equal to `20`")  # noqa: E501

        self._postal_code = postal_code

    @property
    def state_region(self):
        """Gets the state_region of this CustomerShipping.  # noqa: E501

        State for United States otherwise region or province for other countries  # noqa: E501

        :return: The state_region of this CustomerShipping.  # noqa: E501
        :rtype: str
        """
        return self._state_region

    @state_region.setter
    def state_region(self, state_region):
        """Sets the state_region of this CustomerShipping.

        State for United States otherwise region or province for other countries  # noqa: E501

        :param state_region: The state_region of this CustomerShipping.  # noqa: E501
        :type: str
        """
        if state_region is not None and len(state_region) > 32:
            raise ValueError("Invalid value for `state_region`, length must be less than or equal to `32`")  # noqa: E501

        self._state_region = state_region

    @property
    def tax_county(self):
        """Gets the tax_county of this CustomerShipping.  # noqa: E501

        Tax County  # noqa: E501

        :return: The tax_county of this CustomerShipping.  # noqa: E501
        :rtype: str
        """
        return self._tax_county

    @tax_county.setter
    def tax_county(self, tax_county):
        """Sets the tax_county of this CustomerShipping.

        Tax County  # noqa: E501

        :param tax_county: The tax_county of this CustomerShipping.  # noqa: E501
        :type: str
        """
        if tax_county is not None and len(tax_county) > 32:
            raise ValueError("Invalid value for `tax_county`, length must be less than or equal to `32`")  # noqa: E501

        self._tax_county = tax_county

    @property
    def title(self):
        """Gets the title of this CustomerShipping.  # noqa: E501

        Title  # noqa: E501

        :return: The title of this CustomerShipping.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this CustomerShipping.

        Title  # noqa: E501

        :param title: The title of this CustomerShipping.  # noqa: E501
        :type: str
        """
        if title is not None and len(title) > 50:
            raise ValueError("Invalid value for `title`, length must be less than or equal to `50`")  # noqa: E501

        self._title = title

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomerShipping, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomerShipping):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
