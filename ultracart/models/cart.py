# coding: utf-8

"""
    UltraCart Rest API V2

    This is the next generation UltraCart REST API...

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Cart(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, affiliate=None, base_currency_code=None, billing=None, buysafe=None, cart_id=None, checkout=None, coupons=None, currency_code=None, customer_profile=None, exchange_rate=None, gift=None, gift_certificate=None, items=None, language_iso_code=None, logged_in=None, marketing=None, merchant_id=None, payment=None, settings=None, shipping=None, summary=None, taxes=None, upsell_after=None):
        """
        Cart - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'affiliate': 'CartAffiliate',
            'base_currency_code': 'str',
            'billing': 'CartBilling',
            'buysafe': 'CartBuysafe',
            'cart_id': 'str',
            'checkout': 'CartCheckout',
            'coupons': 'list[CartCoupon]',
            'currency_code': 'str',
            'customer_profile': 'CartCustomerProfile',
            'exchange_rate': 'float',
            'gift': 'CartGift',
            'gift_certificate': 'CartGiftCertificate',
            'items': 'list[CartItem]',
            'language_iso_code': 'str',
            'logged_in': 'bool',
            'marketing': 'CartMarketing',
            'merchant_id': 'str',
            'payment': 'CartPayment',
            'settings': 'CartSettings',
            'shipping': 'CartShipping',
            'summary': 'CartSummary',
            'taxes': 'CartTaxes',
            'upsell_after': 'CartUpsellAfter'
        }

        self.attribute_map = {
            'affiliate': 'affiliate',
            'base_currency_code': 'base_currency_code',
            'billing': 'billing',
            'buysafe': 'buysafe',
            'cart_id': 'cart_id',
            'checkout': 'checkout',
            'coupons': 'coupons',
            'currency_code': 'currency_code',
            'customer_profile': 'customer_profile',
            'exchange_rate': 'exchange_rate',
            'gift': 'gift',
            'gift_certificate': 'gift_certificate',
            'items': 'items',
            'language_iso_code': 'language_iso_code',
            'logged_in': 'logged_in',
            'marketing': 'marketing',
            'merchant_id': 'merchant_id',
            'payment': 'payment',
            'settings': 'settings',
            'shipping': 'shipping',
            'summary': 'summary',
            'taxes': 'taxes',
            'upsell_after': 'upsell_after'
        }

        self._affiliate = affiliate
        self._base_currency_code = base_currency_code
        self._billing = billing
        self._buysafe = buysafe
        self._cart_id = cart_id
        self._checkout = checkout
        self._coupons = coupons
        self._currency_code = currency_code
        self._customer_profile = customer_profile
        self._exchange_rate = exchange_rate
        self._gift = gift
        self._gift_certificate = gift_certificate
        self._items = items
        self._language_iso_code = language_iso_code
        self._logged_in = logged_in
        self._marketing = marketing
        self._merchant_id = merchant_id
        self._payment = payment
        self._settings = settings
        self._shipping = shipping
        self._summary = summary
        self._taxes = taxes
        self._upsell_after = upsell_after

    @property
    def affiliate(self):
        """
        Gets the affiliate of this Cart.


        :return: The affiliate of this Cart.
        :rtype: CartAffiliate
        """
        return self._affiliate

    @affiliate.setter
    def affiliate(self, affiliate):
        """
        Sets the affiliate of this Cart.


        :param affiliate: The affiliate of this Cart.
        :type: CartAffiliate
        """

        self._affiliate = affiliate

    @property
    def base_currency_code(self):
        """
        Gets the base_currency_code of this Cart.
        The ISO-4217 three letter base currency code of the account

        :return: The base_currency_code of this Cart.
        :rtype: str
        """
        return self._base_currency_code

    @base_currency_code.setter
    def base_currency_code(self, base_currency_code):
        """
        Sets the base_currency_code of this Cart.
        The ISO-4217 three letter base currency code of the account

        :param base_currency_code: The base_currency_code of this Cart.
        :type: str
        """

        if not base_currency_code:
            raise ValueError("Invalid value for `base_currency_code`, must not be `None`")
        if len(base_currency_code) > 3:
            raise ValueError("Invalid value for `base_currency_code`, length must be less than `3`")

        self._base_currency_code = base_currency_code

    @property
    def billing(self):
        """
        Gets the billing of this Cart.


        :return: The billing of this Cart.
        :rtype: CartBilling
        """
        return self._billing

    @billing.setter
    def billing(self, billing):
        """
        Sets the billing of this Cart.


        :param billing: The billing of this Cart.
        :type: CartBilling
        """

        self._billing = billing

    @property
    def buysafe(self):
        """
        Gets the buysafe of this Cart.


        :return: The buysafe of this Cart.
        :rtype: CartBuysafe
        """
        return self._buysafe

    @buysafe.setter
    def buysafe(self, buysafe):
        """
        Sets the buysafe of this Cart.


        :param buysafe: The buysafe of this Cart.
        :type: CartBuysafe
        """

        self._buysafe = buysafe

    @property
    def cart_id(self):
        """
        Gets the cart_id of this Cart.
        Unique identifier for this cart

        :return: The cart_id of this Cart.
        :rtype: str
        """
        return self._cart_id

    @cart_id.setter
    def cart_id(self, cart_id):
        """
        Sets the cart_id of this Cart.
        Unique identifier for this cart

        :param cart_id: The cart_id of this Cart.
        :type: str
        """

        self._cart_id = cart_id

    @property
    def checkout(self):
        """
        Gets the checkout of this Cart.


        :return: The checkout of this Cart.
        :rtype: CartCheckout
        """
        return self._checkout

    @checkout.setter
    def checkout(self, checkout):
        """
        Sets the checkout of this Cart.


        :param checkout: The checkout of this Cart.
        :type: CartCheckout
        """

        self._checkout = checkout

    @property
    def coupons(self):
        """
        Gets the coupons of this Cart.
        Coupons

        :return: The coupons of this Cart.
        :rtype: list[CartCoupon]
        """
        return self._coupons

    @coupons.setter
    def coupons(self, coupons):
        """
        Sets the coupons of this Cart.
        Coupons

        :param coupons: The coupons of this Cart.
        :type: list[CartCoupon]
        """

        self._coupons = coupons

    @property
    def currency_code(self):
        """
        Gets the currency_code of this Cart.
        The ISO-4217 three letter currency code the customer is viewing prices in

        :return: The currency_code of this Cart.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """
        Sets the currency_code of this Cart.
        The ISO-4217 three letter currency code the customer is viewing prices in

        :param currency_code: The currency_code of this Cart.
        :type: str
        """

        if not currency_code:
            raise ValueError("Invalid value for `currency_code`, must not be `None`")
        if len(currency_code) > 3:
            raise ValueError("Invalid value for `currency_code`, length must be less than `3`")

        self._currency_code = currency_code

    @property
    def customer_profile(self):
        """
        Gets the customer_profile of this Cart.


        :return: The customer_profile of this Cart.
        :rtype: CartCustomerProfile
        """
        return self._customer_profile

    @customer_profile.setter
    def customer_profile(self, customer_profile):
        """
        Sets the customer_profile of this Cart.


        :param customer_profile: The customer_profile of this Cart.
        :type: CartCustomerProfile
        """

        self._customer_profile = customer_profile

    @property
    def exchange_rate(self):
        """
        Gets the exchange_rate of this Cart.
        The exchange rate if the customer is viewing a different currency than the base

        :return: The exchange_rate of this Cart.
        :rtype: float
        """
        return self._exchange_rate

    @exchange_rate.setter
    def exchange_rate(self, exchange_rate):
        """
        Sets the exchange_rate of this Cart.
        The exchange rate if the customer is viewing a different currency than the base

        :param exchange_rate: The exchange_rate of this Cart.
        :type: float
        """

        self._exchange_rate = exchange_rate

    @property
    def gift(self):
        """
        Gets the gift of this Cart.


        :return: The gift of this Cart.
        :rtype: CartGift
        """
        return self._gift

    @gift.setter
    def gift(self, gift):
        """
        Sets the gift of this Cart.


        :param gift: The gift of this Cart.
        :type: CartGift
        """

        self._gift = gift

    @property
    def gift_certificate(self):
        """
        Gets the gift_certificate of this Cart.


        :return: The gift_certificate of this Cart.
        :rtype: CartGiftCertificate
        """
        return self._gift_certificate

    @gift_certificate.setter
    def gift_certificate(self, gift_certificate):
        """
        Sets the gift_certificate of this Cart.


        :param gift_certificate: The gift_certificate of this Cart.
        :type: CartGiftCertificate
        """

        self._gift_certificate = gift_certificate

    @property
    def items(self):
        """
        Gets the items of this Cart.
        Items

        :return: The items of this Cart.
        :rtype: list[CartItem]
        """
        return self._items

    @items.setter
    def items(self, items):
        """
        Sets the items of this Cart.
        Items

        :param items: The items of this Cart.
        :type: list[CartItem]
        """

        self._items = items

    @property
    def language_iso_code(self):
        """
        Gets the language_iso_code of this Cart.
        The ISO-631 three letter code the customer would like to checkout with

        :return: The language_iso_code of this Cart.
        :rtype: str
        """
        return self._language_iso_code

    @language_iso_code.setter
    def language_iso_code(self, language_iso_code):
        """
        Sets the language_iso_code of this Cart.
        The ISO-631 three letter code the customer would like to checkout with

        :param language_iso_code: The language_iso_code of this Cart.
        :type: str
        """

        if not language_iso_code:
            raise ValueError("Invalid value for `language_iso_code`, must not be `None`")
        if len(language_iso_code) > 3:
            raise ValueError("Invalid value for `language_iso_code`, length must be less than `3`")

        self._language_iso_code = language_iso_code

    @property
    def logged_in(self):
        """
        Gets the logged_in of this Cart.
        True if the customer is logged into their profile

        :return: The logged_in of this Cart.
        :rtype: bool
        """
        return self._logged_in

    @logged_in.setter
    def logged_in(self, logged_in):
        """
        Sets the logged_in of this Cart.
        True if the customer is logged into their profile

        :param logged_in: The logged_in of this Cart.
        :type: bool
        """

        self._logged_in = logged_in

    @property
    def marketing(self):
        """
        Gets the marketing of this Cart.


        :return: The marketing of this Cart.
        :rtype: CartMarketing
        """
        return self._marketing

    @marketing.setter
    def marketing(self, marketing):
        """
        Sets the marketing of this Cart.


        :param marketing: The marketing of this Cart.
        :type: CartMarketing
        """

        self._marketing = marketing

    @property
    def merchant_id(self):
        """
        Gets the merchant_id of this Cart.
        Merchant ID this cart is associated with

        :return: The merchant_id of this Cart.
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """
        Sets the merchant_id of this Cart.
        Merchant ID this cart is associated with

        :param merchant_id: The merchant_id of this Cart.
        :type: str
        """

        self._merchant_id = merchant_id

    @property
    def payment(self):
        """
        Gets the payment of this Cart.


        :return: The payment of this Cart.
        :rtype: CartPayment
        """
        return self._payment

    @payment.setter
    def payment(self, payment):
        """
        Sets the payment of this Cart.


        :param payment: The payment of this Cart.
        :type: CartPayment
        """

        self._payment = payment

    @property
    def settings(self):
        """
        Gets the settings of this Cart.


        :return: The settings of this Cart.
        :rtype: CartSettings
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """
        Sets the settings of this Cart.


        :param settings: The settings of this Cart.
        :type: CartSettings
        """

        self._settings = settings

    @property
    def shipping(self):
        """
        Gets the shipping of this Cart.


        :return: The shipping of this Cart.
        :rtype: CartShipping
        """
        return self._shipping

    @shipping.setter
    def shipping(self, shipping):
        """
        Sets the shipping of this Cart.


        :param shipping: The shipping of this Cart.
        :type: CartShipping
        """

        self._shipping = shipping

    @property
    def summary(self):
        """
        Gets the summary of this Cart.


        :return: The summary of this Cart.
        :rtype: CartSummary
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """
        Sets the summary of this Cart.


        :param summary: The summary of this Cart.
        :type: CartSummary
        """

        self._summary = summary

    @property
    def taxes(self):
        """
        Gets the taxes of this Cart.


        :return: The taxes of this Cart.
        :rtype: CartTaxes
        """
        return self._taxes

    @taxes.setter
    def taxes(self, taxes):
        """
        Sets the taxes of this Cart.


        :param taxes: The taxes of this Cart.
        :type: CartTaxes
        """

        self._taxes = taxes

    @property
    def upsell_after(self):
        """
        Gets the upsell_after of this Cart.


        :return: The upsell_after of this Cart.
        :rtype: CartUpsellAfter
        """
        return self._upsell_after

    @upsell_after.setter
    def upsell_after(self, upsell_after):
        """
        Sets the upsell_after of this Cart.


        :param upsell_after: The upsell_after of this Cart.
        :type: CartUpsellAfter
        """

        self._upsell_after = upsell_after

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
