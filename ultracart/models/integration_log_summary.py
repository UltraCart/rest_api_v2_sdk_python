# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class IntegrationLogSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'critical': 'int',
        'error': 'int',
        'events': 'int',
        'log_type': 'str',
        'logger_id': 'str',
        'logger_name': 'str',
        'success': 'int',
        'view_url': 'str',
        'warning': 'int'
    }

    attribute_map = {
        'critical': 'critical',
        'error': 'error',
        'events': 'events',
        'log_type': 'log_type',
        'logger_id': 'logger_id',
        'logger_name': 'logger_name',
        'success': 'success',
        'view_url': 'view_url',
        'warning': 'warning'
    }

    def __init__(self, critical=None, error=None, events=None, log_type=None, logger_id=None, logger_name=None, success=None, view_url=None, warning=None):  # noqa: E501
        """IntegrationLogSummary - a model defined in Swagger"""  # noqa: E501

        self._critical = None
        self._error = None
        self._events = None
        self._log_type = None
        self._logger_id = None
        self._logger_name = None
        self._success = None
        self._view_url = None
        self._warning = None
        self.discriminator = None

        if critical is not None:
            self.critical = critical
        if error is not None:
            self.error = error
        if events is not None:
            self.events = events
        if log_type is not None:
            self.log_type = log_type
        if logger_id is not None:
            self.logger_id = logger_id
        if logger_name is not None:
            self.logger_name = logger_name
        if success is not None:
            self.success = success
        if view_url is not None:
            self.view_url = view_url
        if warning is not None:
            self.warning = warning

    @property
    def critical(self):
        """Gets the critical of this IntegrationLogSummary.  # noqa: E501


        :return: The critical of this IntegrationLogSummary.  # noqa: E501
        :rtype: int
        """
        return self._critical

    @critical.setter
    def critical(self, critical):
        """Sets the critical of this IntegrationLogSummary.


        :param critical: The critical of this IntegrationLogSummary.  # noqa: E501
        :type: int
        """

        self._critical = critical

    @property
    def error(self):
        """Gets the error of this IntegrationLogSummary.  # noqa: E501


        :return: The error of this IntegrationLogSummary.  # noqa: E501
        :rtype: int
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this IntegrationLogSummary.


        :param error: The error of this IntegrationLogSummary.  # noqa: E501
        :type: int
        """

        self._error = error

    @property
    def events(self):
        """Gets the events of this IntegrationLogSummary.  # noqa: E501


        :return: The events of this IntegrationLogSummary.  # noqa: E501
        :rtype: int
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this IntegrationLogSummary.


        :param events: The events of this IntegrationLogSummary.  # noqa: E501
        :type: int
        """

        self._events = events

    @property
    def log_type(self):
        """Gets the log_type of this IntegrationLogSummary.  # noqa: E501


        :return: The log_type of this IntegrationLogSummary.  # noqa: E501
        :rtype: str
        """
        return self._log_type

    @log_type.setter
    def log_type(self, log_type):
        """Sets the log_type of this IntegrationLogSummary.


        :param log_type: The log_type of this IntegrationLogSummary.  # noqa: E501
        :type: str
        """

        self._log_type = log_type

    @property
    def logger_id(self):
        """Gets the logger_id of this IntegrationLogSummary.  # noqa: E501


        :return: The logger_id of this IntegrationLogSummary.  # noqa: E501
        :rtype: str
        """
        return self._logger_id

    @logger_id.setter
    def logger_id(self, logger_id):
        """Sets the logger_id of this IntegrationLogSummary.


        :param logger_id: The logger_id of this IntegrationLogSummary.  # noqa: E501
        :type: str
        """

        self._logger_id = logger_id

    @property
    def logger_name(self):
        """Gets the logger_name of this IntegrationLogSummary.  # noqa: E501


        :return: The logger_name of this IntegrationLogSummary.  # noqa: E501
        :rtype: str
        """
        return self._logger_name

    @logger_name.setter
    def logger_name(self, logger_name):
        """Sets the logger_name of this IntegrationLogSummary.


        :param logger_name: The logger_name of this IntegrationLogSummary.  # noqa: E501
        :type: str
        """

        self._logger_name = logger_name

    @property
    def success(self):
        """Gets the success of this IntegrationLogSummary.  # noqa: E501


        :return: The success of this IntegrationLogSummary.  # noqa: E501
        :rtype: int
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this IntegrationLogSummary.


        :param success: The success of this IntegrationLogSummary.  # noqa: E501
        :type: int
        """

        self._success = success

    @property
    def view_url(self):
        """Gets the view_url of this IntegrationLogSummary.  # noqa: E501


        :return: The view_url of this IntegrationLogSummary.  # noqa: E501
        :rtype: str
        """
        return self._view_url

    @view_url.setter
    def view_url(self, view_url):
        """Sets the view_url of this IntegrationLogSummary.


        :param view_url: The view_url of this IntegrationLogSummary.  # noqa: E501
        :type: str
        """

        self._view_url = view_url

    @property
    def warning(self):
        """Gets the warning of this IntegrationLogSummary.  # noqa: E501


        :return: The warning of this IntegrationLogSummary.  # noqa: E501
        :rtype: int
        """
        return self._warning

    @warning.setter
    def warning(self, warning):
        """Sets the warning of this IntegrationLogSummary.


        :param warning: The warning of this IntegrationLogSummary.  # noqa: E501
        :type: int
        """

        self._warning = warning

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IntegrationLogSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IntegrationLogSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
