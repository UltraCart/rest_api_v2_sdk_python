# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConversationKnowledgeBaseDocument(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'chunk_count': 'int',
        'description': 'str',
        'document_id': 'str',
        'document_uuid': 'str',
        'metadata': 'str',
        'mime_type': 'str',
        's3_key': 'str'
    }

    attribute_map = {
        'chunk_count': 'chunk_count',
        'description': 'description',
        'document_id': 'document_id',
        'document_uuid': 'document_uuid',
        'metadata': 'metadata',
        'mime_type': 'mime_type',
        's3_key': 's3_key'
    }

    def __init__(self, chunk_count=None, description=None, document_id=None, document_uuid=None, metadata=None, mime_type=None, s3_key=None):  # noqa: E501
        """ConversationKnowledgeBaseDocument - a model defined in Swagger"""  # noqa: E501

        self._chunk_count = None
        self._description = None
        self._document_id = None
        self._document_uuid = None
        self._metadata = None
        self._mime_type = None
        self._s3_key = None
        self.discriminator = None

        if chunk_count is not None:
            self.chunk_count = chunk_count
        if description is not None:
            self.description = description
        if document_id is not None:
            self.document_id = document_id
        if document_uuid is not None:
            self.document_uuid = document_uuid
        if metadata is not None:
            self.metadata = metadata
        if mime_type is not None:
            self.mime_type = mime_type
        if s3_key is not None:
            self.s3_key = s3_key

    @property
    def chunk_count(self):
        """Gets the chunk_count of this ConversationKnowledgeBaseDocument.  # noqa: E501


        :return: The chunk_count of this ConversationKnowledgeBaseDocument.  # noqa: E501
        :rtype: int
        """
        return self._chunk_count

    @chunk_count.setter
    def chunk_count(self, chunk_count):
        """Sets the chunk_count of this ConversationKnowledgeBaseDocument.


        :param chunk_count: The chunk_count of this ConversationKnowledgeBaseDocument.  # noqa: E501
        :type: int
        """

        self._chunk_count = chunk_count

    @property
    def description(self):
        """Gets the description of this ConversationKnowledgeBaseDocument.  # noqa: E501


        :return: The description of this ConversationKnowledgeBaseDocument.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConversationKnowledgeBaseDocument.


        :param description: The description of this ConversationKnowledgeBaseDocument.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def document_id(self):
        """Gets the document_id of this ConversationKnowledgeBaseDocument.  # noqa: E501

        Human readable identifier.  Filename is recommended.  # noqa: E501

        :return: The document_id of this ConversationKnowledgeBaseDocument.  # noqa: E501
        :rtype: str
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this ConversationKnowledgeBaseDocument.

        Human readable identifier.  Filename is recommended.  # noqa: E501

        :param document_id: The document_id of this ConversationKnowledgeBaseDocument.  # noqa: E501
        :type: str
        """

        self._document_id = document_id

    @property
    def document_uuid(self):
        """Gets the document_uuid of this ConversationKnowledgeBaseDocument.  # noqa: E501


        :return: The document_uuid of this ConversationKnowledgeBaseDocument.  # noqa: E501
        :rtype: str
        """
        return self._document_uuid

    @document_uuid.setter
    def document_uuid(self, document_uuid):
        """Sets the document_uuid of this ConversationKnowledgeBaseDocument.


        :param document_uuid: The document_uuid of this ConversationKnowledgeBaseDocument.  # noqa: E501
        :type: str
        """

        self._document_uuid = document_uuid

    @property
    def metadata(self):
        """Gets the metadata of this ConversationKnowledgeBaseDocument.  # noqa: E501


        :return: The metadata of this ConversationKnowledgeBaseDocument.  # noqa: E501
        :rtype: str
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this ConversationKnowledgeBaseDocument.


        :param metadata: The metadata of this ConversationKnowledgeBaseDocument.  # noqa: E501
        :type: str
        """

        self._metadata = metadata

    @property
    def mime_type(self):
        """Gets the mime_type of this ConversationKnowledgeBaseDocument.  # noqa: E501


        :return: The mime_type of this ConversationKnowledgeBaseDocument.  # noqa: E501
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this ConversationKnowledgeBaseDocument.


        :param mime_type: The mime_type of this ConversationKnowledgeBaseDocument.  # noqa: E501
        :type: str
        """

        self._mime_type = mime_type

    @property
    def s3_key(self):
        """Gets the s3_key of this ConversationKnowledgeBaseDocument.  # noqa: E501


        :return: The s3_key of this ConversationKnowledgeBaseDocument.  # noqa: E501
        :rtype: str
        """
        return self._s3_key

    @s3_key.setter
    def s3_key(self, s3_key):
        """Sets the s3_key of this ConversationKnowledgeBaseDocument.


        :param s3_key: The s3_key of this ConversationKnowledgeBaseDocument.  # noqa: E501
        :type: str
        """

        self._s3_key = s3_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConversationKnowledgeBaseDocument, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConversationKnowledgeBaseDocument):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
