# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class EmailStepStat(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'left_conversion_count': 'int',
        'left_conversion_count_formatted': 'str',
        'left_customer_count': 'int',
        'left_customer_count_formatted': 'str',
        'left_order_count': 'int',
        'left_order_count_formatted': 'str',
        'left_profit': 'float',
        'left_profit_formatted': 'str',
        'left_revenue': 'float',
        'left_revenue_formatted': 'str',
        'right_conversion_count': 'int',
        'right_conversion_count_formatted': 'str',
        'right_customer_count': 'int',
        'right_customer_count_formatted': 'str',
        'right_order_count': 'int',
        'right_order_count_formatted': 'str',
        'right_profit': 'float',
        'right_profit_formatted': 'str',
        'right_revenue': 'float',
        'right_revenue_formatted': 'str'
    }

    attribute_map = {
        'left_conversion_count': 'left_conversion_count',
        'left_conversion_count_formatted': 'left_conversion_count_formatted',
        'left_customer_count': 'left_customer_count',
        'left_customer_count_formatted': 'left_customer_count_formatted',
        'left_order_count': 'left_order_count',
        'left_order_count_formatted': 'left_order_count_formatted',
        'left_profit': 'left_profit',
        'left_profit_formatted': 'left_profit_formatted',
        'left_revenue': 'left_revenue',
        'left_revenue_formatted': 'left_revenue_formatted',
        'right_conversion_count': 'right_conversion_count',
        'right_conversion_count_formatted': 'right_conversion_count_formatted',
        'right_customer_count': 'right_customer_count',
        'right_customer_count_formatted': 'right_customer_count_formatted',
        'right_order_count': 'right_order_count',
        'right_order_count_formatted': 'right_order_count_formatted',
        'right_profit': 'right_profit',
        'right_profit_formatted': 'right_profit_formatted',
        'right_revenue': 'right_revenue',
        'right_revenue_formatted': 'right_revenue_formatted'
    }

    def __init__(self, left_conversion_count=None, left_conversion_count_formatted=None, left_customer_count=None, left_customer_count_formatted=None, left_order_count=None, left_order_count_formatted=None, left_profit=None, left_profit_formatted=None, left_revenue=None, left_revenue_formatted=None, right_conversion_count=None, right_conversion_count_formatted=None, right_customer_count=None, right_customer_count_formatted=None, right_order_count=None, right_order_count_formatted=None, right_profit=None, right_profit_formatted=None, right_revenue=None, right_revenue_formatted=None):
        """
        EmailStepStat - a model defined in Swagger
        """

        self._left_conversion_count = None
        self._left_conversion_count_formatted = None
        self._left_customer_count = None
        self._left_customer_count_formatted = None
        self._left_order_count = None
        self._left_order_count_formatted = None
        self._left_profit = None
        self._left_profit_formatted = None
        self._left_revenue = None
        self._left_revenue_formatted = None
        self._right_conversion_count = None
        self._right_conversion_count_formatted = None
        self._right_customer_count = None
        self._right_customer_count_formatted = None
        self._right_order_count = None
        self._right_order_count_formatted = None
        self._right_profit = None
        self._right_profit_formatted = None
        self._right_revenue = None
        self._right_revenue_formatted = None
        self.discriminator = None

        if left_conversion_count is not None:
          self.left_conversion_count = left_conversion_count
        if left_conversion_count_formatted is not None:
          self.left_conversion_count_formatted = left_conversion_count_formatted
        if left_customer_count is not None:
          self.left_customer_count = left_customer_count
        if left_customer_count_formatted is not None:
          self.left_customer_count_formatted = left_customer_count_formatted
        if left_order_count is not None:
          self.left_order_count = left_order_count
        if left_order_count_formatted is not None:
          self.left_order_count_formatted = left_order_count_formatted
        if left_profit is not None:
          self.left_profit = left_profit
        if left_profit_formatted is not None:
          self.left_profit_formatted = left_profit_formatted
        if left_revenue is not None:
          self.left_revenue = left_revenue
        if left_revenue_formatted is not None:
          self.left_revenue_formatted = left_revenue_formatted
        if right_conversion_count is not None:
          self.right_conversion_count = right_conversion_count
        if right_conversion_count_formatted is not None:
          self.right_conversion_count_formatted = right_conversion_count_formatted
        if right_customer_count is not None:
          self.right_customer_count = right_customer_count
        if right_customer_count_formatted is not None:
          self.right_customer_count_formatted = right_customer_count_formatted
        if right_order_count is not None:
          self.right_order_count = right_order_count
        if right_order_count_formatted is not None:
          self.right_order_count_formatted = right_order_count_formatted
        if right_profit is not None:
          self.right_profit = right_profit
        if right_profit_formatted is not None:
          self.right_profit_formatted = right_profit_formatted
        if right_revenue is not None:
          self.right_revenue = right_revenue
        if right_revenue_formatted is not None:
          self.right_revenue_formatted = right_revenue_formatted

    @property
    def left_conversion_count(self):
        """
        Gets the left_conversion_count of this EmailStepStat.
        conversion count (left/default side)

        :return: The left_conversion_count of this EmailStepStat.
        :rtype: int
        """
        return self._left_conversion_count

    @left_conversion_count.setter
    def left_conversion_count(self, left_conversion_count):
        """
        Sets the left_conversion_count of this EmailStepStat.
        conversion count (left/default side)

        :param left_conversion_count: The left_conversion_count of this EmailStepStat.
        :type: int
        """

        self._left_conversion_count = left_conversion_count

    @property
    def left_conversion_count_formatted(self):
        """
        Gets the left_conversion_count_formatted of this EmailStepStat.
        conversion count formatted (left/default side)

        :return: The left_conversion_count_formatted of this EmailStepStat.
        :rtype: str
        """
        return self._left_conversion_count_formatted

    @left_conversion_count_formatted.setter
    def left_conversion_count_formatted(self, left_conversion_count_formatted):
        """
        Sets the left_conversion_count_formatted of this EmailStepStat.
        conversion count formatted (left/default side)

        :param left_conversion_count_formatted: The left_conversion_count_formatted of this EmailStepStat.
        :type: str
        """

        self._left_conversion_count_formatted = left_conversion_count_formatted

    @property
    def left_customer_count(self):
        """
        Gets the left_customer_count of this EmailStepStat.
        customer count (left/default side)

        :return: The left_customer_count of this EmailStepStat.
        :rtype: int
        """
        return self._left_customer_count

    @left_customer_count.setter
    def left_customer_count(self, left_customer_count):
        """
        Sets the left_customer_count of this EmailStepStat.
        customer count (left/default side)

        :param left_customer_count: The left_customer_count of this EmailStepStat.
        :type: int
        """

        self._left_customer_count = left_customer_count

    @property
    def left_customer_count_formatted(self):
        """
        Gets the left_customer_count_formatted of this EmailStepStat.
        customer count formatted (left/default side)

        :return: The left_customer_count_formatted of this EmailStepStat.
        :rtype: str
        """
        return self._left_customer_count_formatted

    @left_customer_count_formatted.setter
    def left_customer_count_formatted(self, left_customer_count_formatted):
        """
        Sets the left_customer_count_formatted of this EmailStepStat.
        customer count formatted (left/default side)

        :param left_customer_count_formatted: The left_customer_count_formatted of this EmailStepStat.
        :type: str
        """

        self._left_customer_count_formatted = left_customer_count_formatted

    @property
    def left_order_count(self):
        """
        Gets the left_order_count of this EmailStepStat.
        order count (left/default side)

        :return: The left_order_count of this EmailStepStat.
        :rtype: int
        """
        return self._left_order_count

    @left_order_count.setter
    def left_order_count(self, left_order_count):
        """
        Sets the left_order_count of this EmailStepStat.
        order count (left/default side)

        :param left_order_count: The left_order_count of this EmailStepStat.
        :type: int
        """

        self._left_order_count = left_order_count

    @property
    def left_order_count_formatted(self):
        """
        Gets the left_order_count_formatted of this EmailStepStat.
        order count formatted (left/default side)

        :return: The left_order_count_formatted of this EmailStepStat.
        :rtype: str
        """
        return self._left_order_count_formatted

    @left_order_count_formatted.setter
    def left_order_count_formatted(self, left_order_count_formatted):
        """
        Sets the left_order_count_formatted of this EmailStepStat.
        order count formatted (left/default side)

        :param left_order_count_formatted: The left_order_count_formatted of this EmailStepStat.
        :type: str
        """

        self._left_order_count_formatted = left_order_count_formatted

    @property
    def left_profit(self):
        """
        Gets the left_profit of this EmailStepStat.
        profit (left/default side)

        :return: The left_profit of this EmailStepStat.
        :rtype: float
        """
        return self._left_profit

    @left_profit.setter
    def left_profit(self, left_profit):
        """
        Sets the left_profit of this EmailStepStat.
        profit (left/default side)

        :param left_profit: The left_profit of this EmailStepStat.
        :type: float
        """

        self._left_profit = left_profit

    @property
    def left_profit_formatted(self):
        """
        Gets the left_profit_formatted of this EmailStepStat.
        profit formatted (left/default side)

        :return: The left_profit_formatted of this EmailStepStat.
        :rtype: str
        """
        return self._left_profit_formatted

    @left_profit_formatted.setter
    def left_profit_formatted(self, left_profit_formatted):
        """
        Sets the left_profit_formatted of this EmailStepStat.
        profit formatted (left/default side)

        :param left_profit_formatted: The left_profit_formatted of this EmailStepStat.
        :type: str
        """

        self._left_profit_formatted = left_profit_formatted

    @property
    def left_revenue(self):
        """
        Gets the left_revenue of this EmailStepStat.
        revenue (left/default side)

        :return: The left_revenue of this EmailStepStat.
        :rtype: float
        """
        return self._left_revenue

    @left_revenue.setter
    def left_revenue(self, left_revenue):
        """
        Sets the left_revenue of this EmailStepStat.
        revenue (left/default side)

        :param left_revenue: The left_revenue of this EmailStepStat.
        :type: float
        """

        self._left_revenue = left_revenue

    @property
    def left_revenue_formatted(self):
        """
        Gets the left_revenue_formatted of this EmailStepStat.
        revenue formatted (left/default side)

        :return: The left_revenue_formatted of this EmailStepStat.
        :rtype: str
        """
        return self._left_revenue_formatted

    @left_revenue_formatted.setter
    def left_revenue_formatted(self, left_revenue_formatted):
        """
        Sets the left_revenue_formatted of this EmailStepStat.
        revenue formatted (left/default side)

        :param left_revenue_formatted: The left_revenue_formatted of this EmailStepStat.
        :type: str
        """

        self._left_revenue_formatted = left_revenue_formatted

    @property
    def right_conversion_count(self):
        """
        Gets the right_conversion_count of this EmailStepStat.
        conversion count (right side)

        :return: The right_conversion_count of this EmailStepStat.
        :rtype: int
        """
        return self._right_conversion_count

    @right_conversion_count.setter
    def right_conversion_count(self, right_conversion_count):
        """
        Sets the right_conversion_count of this EmailStepStat.
        conversion count (right side)

        :param right_conversion_count: The right_conversion_count of this EmailStepStat.
        :type: int
        """

        self._right_conversion_count = right_conversion_count

    @property
    def right_conversion_count_formatted(self):
        """
        Gets the right_conversion_count_formatted of this EmailStepStat.
        conversion count formatted (right side)

        :return: The right_conversion_count_formatted of this EmailStepStat.
        :rtype: str
        """
        return self._right_conversion_count_formatted

    @right_conversion_count_formatted.setter
    def right_conversion_count_formatted(self, right_conversion_count_formatted):
        """
        Sets the right_conversion_count_formatted of this EmailStepStat.
        conversion count formatted (right side)

        :param right_conversion_count_formatted: The right_conversion_count_formatted of this EmailStepStat.
        :type: str
        """

        self._right_conversion_count_formatted = right_conversion_count_formatted

    @property
    def right_customer_count(self):
        """
        Gets the right_customer_count of this EmailStepStat.
        customer count (right side)

        :return: The right_customer_count of this EmailStepStat.
        :rtype: int
        """
        return self._right_customer_count

    @right_customer_count.setter
    def right_customer_count(self, right_customer_count):
        """
        Sets the right_customer_count of this EmailStepStat.
        customer count (right side)

        :param right_customer_count: The right_customer_count of this EmailStepStat.
        :type: int
        """

        self._right_customer_count = right_customer_count

    @property
    def right_customer_count_formatted(self):
        """
        Gets the right_customer_count_formatted of this EmailStepStat.
        customer count formatted (right side)

        :return: The right_customer_count_formatted of this EmailStepStat.
        :rtype: str
        """
        return self._right_customer_count_formatted

    @right_customer_count_formatted.setter
    def right_customer_count_formatted(self, right_customer_count_formatted):
        """
        Sets the right_customer_count_formatted of this EmailStepStat.
        customer count formatted (right side)

        :param right_customer_count_formatted: The right_customer_count_formatted of this EmailStepStat.
        :type: str
        """

        self._right_customer_count_formatted = right_customer_count_formatted

    @property
    def right_order_count(self):
        """
        Gets the right_order_count of this EmailStepStat.
        order count (right side)

        :return: The right_order_count of this EmailStepStat.
        :rtype: int
        """
        return self._right_order_count

    @right_order_count.setter
    def right_order_count(self, right_order_count):
        """
        Sets the right_order_count of this EmailStepStat.
        order count (right side)

        :param right_order_count: The right_order_count of this EmailStepStat.
        :type: int
        """

        self._right_order_count = right_order_count

    @property
    def right_order_count_formatted(self):
        """
        Gets the right_order_count_formatted of this EmailStepStat.
        order count formatted (right side)

        :return: The right_order_count_formatted of this EmailStepStat.
        :rtype: str
        """
        return self._right_order_count_formatted

    @right_order_count_formatted.setter
    def right_order_count_formatted(self, right_order_count_formatted):
        """
        Sets the right_order_count_formatted of this EmailStepStat.
        order count formatted (right side)

        :param right_order_count_formatted: The right_order_count_formatted of this EmailStepStat.
        :type: str
        """

        self._right_order_count_formatted = right_order_count_formatted

    @property
    def right_profit(self):
        """
        Gets the right_profit of this EmailStepStat.
        profit (right side)

        :return: The right_profit of this EmailStepStat.
        :rtype: float
        """
        return self._right_profit

    @right_profit.setter
    def right_profit(self, right_profit):
        """
        Sets the right_profit of this EmailStepStat.
        profit (right side)

        :param right_profit: The right_profit of this EmailStepStat.
        :type: float
        """

        self._right_profit = right_profit

    @property
    def right_profit_formatted(self):
        """
        Gets the right_profit_formatted of this EmailStepStat.
        profit formatted (right side)

        :return: The right_profit_formatted of this EmailStepStat.
        :rtype: str
        """
        return self._right_profit_formatted

    @right_profit_formatted.setter
    def right_profit_formatted(self, right_profit_formatted):
        """
        Sets the right_profit_formatted of this EmailStepStat.
        profit formatted (right side)

        :param right_profit_formatted: The right_profit_formatted of this EmailStepStat.
        :type: str
        """

        self._right_profit_formatted = right_profit_formatted

    @property
    def right_revenue(self):
        """
        Gets the right_revenue of this EmailStepStat.
        revenue (right side)

        :return: The right_revenue of this EmailStepStat.
        :rtype: float
        """
        return self._right_revenue

    @right_revenue.setter
    def right_revenue(self, right_revenue):
        """
        Sets the right_revenue of this EmailStepStat.
        revenue (right side)

        :param right_revenue: The right_revenue of this EmailStepStat.
        :type: float
        """

        self._right_revenue = right_revenue

    @property
    def right_revenue_formatted(self):
        """
        Gets the right_revenue_formatted of this EmailStepStat.
        revenue formatted (right side)

        :return: The right_revenue_formatted of this EmailStepStat.
        :rtype: str
        """
        return self._right_revenue_formatted

    @right_revenue_formatted.setter
    def right_revenue_formatted(self, right_revenue_formatted):
        """
        Sets the right_revenue_formatted of this EmailStepStat.
        revenue formatted (right side)

        :param right_revenue_formatted: The right_revenue_formatted of this EmailStepStat.
        :type: str
        """

        self._right_revenue_formatted = right_revenue_formatted

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, EmailStepStat):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
