# coding: utf-8

"""
    UltraCart Rest API V2

    This is the next generation UltraCart REST API...

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CustomerEditorValues(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'affiliates': 'list[CustomerAffiliate]',
        'card_exp_months': 'list[str]',
        'card_exp_years': 'list[str]',
        'card_types': 'list[str]',
        'countries': 'list[str]',
        'qb_classes': 'list[str]',
        'sales_rep_codes': 'list[str]',
        'terms': 'list[str]'
    }

    attribute_map = {
        'affiliates': 'affiliates',
        'card_exp_months': 'card_exp_months',
        'card_exp_years': 'card_exp_years',
        'card_types': 'card_types',
        'countries': 'countries',
        'qb_classes': 'qb_classes',
        'sales_rep_codes': 'sales_rep_codes',
        'terms': 'terms'
    }

    def __init__(self, affiliates=None, card_exp_months=None, card_exp_years=None, card_types=None, countries=None, qb_classes=None, sales_rep_codes=None, terms=None):
        """
        CustomerEditorValues - a model defined in Swagger
        """

        self._affiliates = None
        self._card_exp_months = None
        self._card_exp_years = None
        self._card_types = None
        self._countries = None
        self._qb_classes = None
        self._sales_rep_codes = None
        self._terms = None
        self.discriminator = None

        if affiliates is not None:
          self.affiliates = affiliates
        if card_exp_months is not None:
          self.card_exp_months = card_exp_months
        if card_exp_years is not None:
          self.card_exp_years = card_exp_years
        if card_types is not None:
          self.card_types = card_types
        if countries is not None:
          self.countries = countries
        if qb_classes is not None:
          self.qb_classes = qb_classes
        if sales_rep_codes is not None:
          self.sales_rep_codes = sales_rep_codes
        if terms is not None:
          self.terms = terms

    @property
    def affiliates(self):
        """
        Gets the affiliates of this CustomerEditorValues.
        affiliates

        :return: The affiliates of this CustomerEditorValues.
        :rtype: list[CustomerAffiliate]
        """
        return self._affiliates

    @affiliates.setter
    def affiliates(self, affiliates):
        """
        Sets the affiliates of this CustomerEditorValues.
        affiliates

        :param affiliates: The affiliates of this CustomerEditorValues.
        :type: list[CustomerAffiliate]
        """

        self._affiliates = affiliates

    @property
    def card_exp_months(self):
        """
        Gets the card_exp_months of this CustomerEditorValues.
        card_exp_months

        :return: The card_exp_months of this CustomerEditorValues.
        :rtype: list[str]
        """
        return self._card_exp_months

    @card_exp_months.setter
    def card_exp_months(self, card_exp_months):
        """
        Sets the card_exp_months of this CustomerEditorValues.
        card_exp_months

        :param card_exp_months: The card_exp_months of this CustomerEditorValues.
        :type: list[str]
        """

        self._card_exp_months = card_exp_months

    @property
    def card_exp_years(self):
        """
        Gets the card_exp_years of this CustomerEditorValues.
        card_exp_years

        :return: The card_exp_years of this CustomerEditorValues.
        :rtype: list[str]
        """
        return self._card_exp_years

    @card_exp_years.setter
    def card_exp_years(self, card_exp_years):
        """
        Sets the card_exp_years of this CustomerEditorValues.
        card_exp_years

        :param card_exp_years: The card_exp_years of this CustomerEditorValues.
        :type: list[str]
        """

        self._card_exp_years = card_exp_years

    @property
    def card_types(self):
        """
        Gets the card_types of this CustomerEditorValues.
        card_types

        :return: The card_types of this CustomerEditorValues.
        :rtype: list[str]
        """
        return self._card_types

    @card_types.setter
    def card_types(self, card_types):
        """
        Sets the card_types of this CustomerEditorValues.
        card_types

        :param card_types: The card_types of this CustomerEditorValues.
        :type: list[str]
        """

        self._card_types = card_types

    @property
    def countries(self):
        """
        Gets the countries of this CustomerEditorValues.
        countries

        :return: The countries of this CustomerEditorValues.
        :rtype: list[str]
        """
        return self._countries

    @countries.setter
    def countries(self, countries):
        """
        Sets the countries of this CustomerEditorValues.
        countries

        :param countries: The countries of this CustomerEditorValues.
        :type: list[str]
        """

        self._countries = countries

    @property
    def qb_classes(self):
        """
        Gets the qb_classes of this CustomerEditorValues.
        qb_classes

        :return: The qb_classes of this CustomerEditorValues.
        :rtype: list[str]
        """
        return self._qb_classes

    @qb_classes.setter
    def qb_classes(self, qb_classes):
        """
        Sets the qb_classes of this CustomerEditorValues.
        qb_classes

        :param qb_classes: The qb_classes of this CustomerEditorValues.
        :type: list[str]
        """

        self._qb_classes = qb_classes

    @property
    def sales_rep_codes(self):
        """
        Gets the sales_rep_codes of this CustomerEditorValues.
        sales_rep_codes

        :return: The sales_rep_codes of this CustomerEditorValues.
        :rtype: list[str]
        """
        return self._sales_rep_codes

    @sales_rep_codes.setter
    def sales_rep_codes(self, sales_rep_codes):
        """
        Sets the sales_rep_codes of this CustomerEditorValues.
        sales_rep_codes

        :param sales_rep_codes: The sales_rep_codes of this CustomerEditorValues.
        :type: list[str]
        """

        self._sales_rep_codes = sales_rep_codes

    @property
    def terms(self):
        """
        Gets the terms of this CustomerEditorValues.
        terms

        :return: The terms of this CustomerEditorValues.
        :rtype: list[str]
        """
        return self._terms

    @terms.setter
    def terms(self, terms):
        """
        Sets the terms of this CustomerEditorValues.
        terms

        :param terms: The terms of this CustomerEditorValues.
        :type: list[str]
        """

        self._terms = terms

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CustomerEditorValues):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
