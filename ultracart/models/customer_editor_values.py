# coding: utf-8

"""
    UltraCart Rest API V2

    This is the next generation UltraCart REST API...

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class CustomerEditorValues(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, affiliates=None, card_exp_months=None, card_exp_years=None, card_types=None, countries=None, qb_classes=None, sales_rep_codes=None, terms=None):
        """
        CustomerEditorValues - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'affiliates': 'list[CustomerAffiliate]',
            'card_exp_months': 'list[str]',
            'card_exp_years': 'list[str]',
            'card_types': 'list[str]',
            'countries': 'list[str]',
            'qb_classes': 'list[str]',
            'sales_rep_codes': 'list[str]',
            'terms': 'list[str]'
        }

        self.attribute_map = {
            'affiliates': 'affiliates',
            'card_exp_months': 'card_exp_months',
            'card_exp_years': 'card_exp_years',
            'card_types': 'card_types',
            'countries': 'countries',
            'qb_classes': 'qb_classes',
            'sales_rep_codes': 'sales_rep_codes',
            'terms': 'terms'
        }

        self._affiliates = affiliates
        self._card_exp_months = card_exp_months
        self._card_exp_years = card_exp_years
        self._card_types = card_types
        self._countries = countries
        self._qb_classes = qb_classes
        self._sales_rep_codes = sales_rep_codes
        self._terms = terms

    @property
    def affiliates(self):
        """
        Gets the affiliates of this CustomerEditorValues.
        affiliates

        :return: The affiliates of this CustomerEditorValues.
        :rtype: list[CustomerAffiliate]
        """
        return self._affiliates

    @affiliates.setter
    def affiliates(self, affiliates):
        """
        Sets the affiliates of this CustomerEditorValues.
        affiliates

        :param affiliates: The affiliates of this CustomerEditorValues.
        :type: list[CustomerAffiliate]
        """

        self._affiliates = affiliates

    @property
    def card_exp_months(self):
        """
        Gets the card_exp_months of this CustomerEditorValues.
        card_exp_months

        :return: The card_exp_months of this CustomerEditorValues.
        :rtype: list[str]
        """
        return self._card_exp_months

    @card_exp_months.setter
    def card_exp_months(self, card_exp_months):
        """
        Sets the card_exp_months of this CustomerEditorValues.
        card_exp_months

        :param card_exp_months: The card_exp_months of this CustomerEditorValues.
        :type: list[str]
        """

        self._card_exp_months = card_exp_months

    @property
    def card_exp_years(self):
        """
        Gets the card_exp_years of this CustomerEditorValues.
        card_exp_years

        :return: The card_exp_years of this CustomerEditorValues.
        :rtype: list[str]
        """
        return self._card_exp_years

    @card_exp_years.setter
    def card_exp_years(self, card_exp_years):
        """
        Sets the card_exp_years of this CustomerEditorValues.
        card_exp_years

        :param card_exp_years: The card_exp_years of this CustomerEditorValues.
        :type: list[str]
        """

        self._card_exp_years = card_exp_years

    @property
    def card_types(self):
        """
        Gets the card_types of this CustomerEditorValues.
        card_types

        :return: The card_types of this CustomerEditorValues.
        :rtype: list[str]
        """
        return self._card_types

    @card_types.setter
    def card_types(self, card_types):
        """
        Sets the card_types of this CustomerEditorValues.
        card_types

        :param card_types: The card_types of this CustomerEditorValues.
        :type: list[str]
        """

        self._card_types = card_types

    @property
    def countries(self):
        """
        Gets the countries of this CustomerEditorValues.
        countries

        :return: The countries of this CustomerEditorValues.
        :rtype: list[str]
        """
        return self._countries

    @countries.setter
    def countries(self, countries):
        """
        Sets the countries of this CustomerEditorValues.
        countries

        :param countries: The countries of this CustomerEditorValues.
        :type: list[str]
        """

        self._countries = countries

    @property
    def qb_classes(self):
        """
        Gets the qb_classes of this CustomerEditorValues.
        qb_classes

        :return: The qb_classes of this CustomerEditorValues.
        :rtype: list[str]
        """
        return self._qb_classes

    @qb_classes.setter
    def qb_classes(self, qb_classes):
        """
        Sets the qb_classes of this CustomerEditorValues.
        qb_classes

        :param qb_classes: The qb_classes of this CustomerEditorValues.
        :type: list[str]
        """

        self._qb_classes = qb_classes

    @property
    def sales_rep_codes(self):
        """
        Gets the sales_rep_codes of this CustomerEditorValues.
        sales_rep_codes

        :return: The sales_rep_codes of this CustomerEditorValues.
        :rtype: list[str]
        """
        return self._sales_rep_codes

    @sales_rep_codes.setter
    def sales_rep_codes(self, sales_rep_codes):
        """
        Sets the sales_rep_codes of this CustomerEditorValues.
        sales_rep_codes

        :param sales_rep_codes: The sales_rep_codes of this CustomerEditorValues.
        :type: list[str]
        """

        self._sales_rep_codes = sales_rep_codes

    @property
    def terms(self):
        """
        Gets the terms of this CustomerEditorValues.
        terms

        :return: The terms of this CustomerEditorValues.
        :rtype: list[str]
        """
        return self._terms

    @terms.setter
    def terms(self, terms):
        """
        Sets the terms of this CustomerEditorValues.
        terms

        :param terms: The terms of this CustomerEditorValues.
        :type: list[str]
        """

        self._terms = terms

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
