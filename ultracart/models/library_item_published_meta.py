# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class LibraryItemPublishedMeta(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'count_of_versions': 'int',
        'library_item_published_oid': 'int',
        'library_item_review_oid': 'int',
        'rejected': 'bool',
        'rejected_reason': 'str',
        'release_version': 'int',
        'review_version': 'int',
        'under_review': 'bool'
    }

    attribute_map = {
        'count_of_versions': 'count_of_versions',
        'library_item_published_oid': 'library_item_published_oid',
        'library_item_review_oid': 'library_item_review_oid',
        'rejected': 'rejected',
        'rejected_reason': 'rejected_reason',
        'release_version': 'release_version',
        'review_version': 'review_version',
        'under_review': 'under_review'
    }

    def __init__(self, count_of_versions=None, library_item_published_oid=None, library_item_review_oid=None, rejected=None, rejected_reason=None, release_version=None, review_version=None, under_review=None):  # noqa: E501
        """LibraryItemPublishedMeta - a model defined in Swagger"""  # noqa: E501

        self._count_of_versions = None
        self._library_item_published_oid = None
        self._library_item_review_oid = None
        self._rejected = None
        self._rejected_reason = None
        self._release_version = None
        self._review_version = None
        self._under_review = None
        self.discriminator = None

        if count_of_versions is not None:
            self.count_of_versions = count_of_versions
        if library_item_published_oid is not None:
            self.library_item_published_oid = library_item_published_oid
        if library_item_review_oid is not None:
            self.library_item_review_oid = library_item_review_oid
        if rejected is not None:
            self.rejected = rejected
        if rejected_reason is not None:
            self.rejected_reason = rejected_reason
        if release_version is not None:
            self.release_version = release_version
        if review_version is not None:
            self.review_version = review_version
        if under_review is not None:
            self.under_review = under_review

    @property
    def count_of_versions(self):
        """Gets the count_of_versions of this LibraryItemPublishedMeta.  # noqa: E501

        The number of published versions a source item has, or zero if this item is not a source or is private  # noqa: E501

        :return: The count_of_versions of this LibraryItemPublishedMeta.  # noqa: E501
        :rtype: int
        """
        return self._count_of_versions

    @count_of_versions.setter
    def count_of_versions(self, count_of_versions):
        """Sets the count_of_versions of this LibraryItemPublishedMeta.

        The number of published versions a source item has, or zero if this item is not a source or is private  # noqa: E501

        :param count_of_versions: The count_of_versions of this LibraryItemPublishedMeta.  # noqa: E501
        :type: int
        """

        self._count_of_versions = count_of_versions

    @property
    def library_item_published_oid(self):
        """Gets the library_item_published_oid of this LibraryItemPublishedMeta.  # noqa: E501

        The oid pointing to the most recent published version, or zero if this is not a published source item.  # noqa: E501

        :return: The library_item_published_oid of this LibraryItemPublishedMeta.  # noqa: E501
        :rtype: int
        """
        return self._library_item_published_oid

    @library_item_published_oid.setter
    def library_item_published_oid(self, library_item_published_oid):
        """Sets the library_item_published_oid of this LibraryItemPublishedMeta.

        The oid pointing to the most recent published version, or zero if this is not a published source item.  # noqa: E501

        :param library_item_published_oid: The library_item_published_oid of this LibraryItemPublishedMeta.  # noqa: E501
        :type: int
        """

        self._library_item_published_oid = library_item_published_oid

    @property
    def library_item_review_oid(self):
        """Gets the library_item_review_oid of this LibraryItemPublishedMeta.  # noqa: E501

        The oid pointing to the review data if this is a source library item and currently under review  # noqa: E501

        :return: The library_item_review_oid of this LibraryItemPublishedMeta.  # noqa: E501
        :rtype: int
        """
        return self._library_item_review_oid

    @library_item_review_oid.setter
    def library_item_review_oid(self, library_item_review_oid):
        """Sets the library_item_review_oid of this LibraryItemPublishedMeta.

        The oid pointing to the review data if this is a source library item and currently under review  # noqa: E501

        :param library_item_review_oid: The library_item_review_oid of this LibraryItemPublishedMeta.  # noqa: E501
        :type: int
        """

        self._library_item_review_oid = library_item_review_oid

    @property
    def rejected(self):
        """Gets the rejected of this LibraryItemPublishedMeta.  # noqa: E501

        True if this is a source item and is under review and was rejected.  # noqa: E501

        :return: The rejected of this LibraryItemPublishedMeta.  # noqa: E501
        :rtype: bool
        """
        return self._rejected

    @rejected.setter
    def rejected(self, rejected):
        """Sets the rejected of this LibraryItemPublishedMeta.

        True if this is a source item and is under review and was rejected.  # noqa: E501

        :param rejected: The rejected of this LibraryItemPublishedMeta.  # noqa: E501
        :type: bool
        """

        self._rejected = rejected

    @property
    def rejected_reason(self):
        """Gets the rejected_reason of this LibraryItemPublishedMeta.  # noqa: E501

        The reason for rejection if this item is a source item, is under review, and was rejected.  For all other cases, this value will be null or missing.  # noqa: E501

        :return: The rejected_reason of this LibraryItemPublishedMeta.  # noqa: E501
        :rtype: str
        """
        return self._rejected_reason

    @rejected_reason.setter
    def rejected_reason(self, rejected_reason):
        """Sets the rejected_reason of this LibraryItemPublishedMeta.

        The reason for rejection if this item is a source item, is under review, and was rejected.  For all other cases, this value will be null or missing.  # noqa: E501

        :param rejected_reason: The rejected_reason of this LibraryItemPublishedMeta.  # noqa: E501
        :type: str
        """

        self._rejected_reason = rejected_reason

    @property
    def release_version(self):
        """Gets the release_version of this LibraryItemPublishedMeta.  # noqa: E501

        If this library item is a source item and it is published, this is the most recent release version number  # noqa: E501

        :return: The release_version of this LibraryItemPublishedMeta.  # noqa: E501
        :rtype: int
        """
        return self._release_version

    @release_version.setter
    def release_version(self, release_version):
        """Sets the release_version of this LibraryItemPublishedMeta.

        If this library item is a source item and it is published, this is the most recent release version number  # noqa: E501

        :param release_version: The release_version of this LibraryItemPublishedMeta.  # noqa: E501
        :type: int
        """

        self._release_version = release_version

    @property
    def review_version(self):
        """Gets the review_version of this LibraryItemPublishedMeta.  # noqa: E501

        If this library item is a source item and has a published item currently under review, this is that version number  # noqa: E501

        :return: The review_version of this LibraryItemPublishedMeta.  # noqa: E501
        :rtype: int
        """
        return self._review_version

    @review_version.setter
    def review_version(self, review_version):
        """Sets the review_version of this LibraryItemPublishedMeta.

        If this library item is a source item and has a published item currently under review, this is that version number  # noqa: E501

        :param review_version: The review_version of this LibraryItemPublishedMeta.  # noqa: E501
        :type: int
        """

        self._review_version = review_version

    @property
    def under_review(self):
        """Gets the under_review of this LibraryItemPublishedMeta.  # noqa: E501

        True if this library item is a source item and is currently under review  # noqa: E501

        :return: The under_review of this LibraryItemPublishedMeta.  # noqa: E501
        :rtype: bool
        """
        return self._under_review

    @under_review.setter
    def under_review(self, under_review):
        """Sets the under_review of this LibraryItemPublishedMeta.

        True if this library item is a source item and is currently under review  # noqa: E501

        :param under_review: The under_review of this LibraryItemPublishedMeta.  # noqa: E501
        :type: bool
        """

        self._under_review = under_review

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LibraryItemPublishedMeta, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LibraryItemPublishedMeta):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
