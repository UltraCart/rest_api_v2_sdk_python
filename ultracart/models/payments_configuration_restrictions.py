# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PaymentsConfigurationRestrictions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'descriptions': 'list[str]',
        'maximum_subtotal': 'float',
        'minimum_subtotal': 'float',
        'payment_method': 'str',
        'restriction_alaska_hawaii': 'str',
        'restriction_apo_fpo': 'str',
        'restriction_canada': 'str',
        'restriction_continental_us': 'str',
        'restriction_domestic_only': 'str',
        'restriction_international_only': 'str',
        'restriction_po_box': 'str',
        'restriction_puerto_rico': 'str',
        'restriction_us_territories': 'str',
        'themes': 'list[PaymentsConfigurationRestrictionsTheme]'
    }

    attribute_map = {
        'descriptions': 'descriptions',
        'maximum_subtotal': 'maximum_subtotal',
        'minimum_subtotal': 'minimum_subtotal',
        'payment_method': 'payment_method',
        'restriction_alaska_hawaii': 'restriction_alaska_hawaii',
        'restriction_apo_fpo': 'restriction_apo_fpo',
        'restriction_canada': 'restriction_canada',
        'restriction_continental_us': 'restriction_continental_us',
        'restriction_domestic_only': 'restriction_domestic_only',
        'restriction_international_only': 'restriction_international_only',
        'restriction_po_box': 'restriction_po_box',
        'restriction_puerto_rico': 'restriction_puerto_rico',
        'restriction_us_territories': 'restriction_us_territories',
        'themes': 'themes'
    }

    def __init__(self, descriptions=None, maximum_subtotal=None, minimum_subtotal=None, payment_method=None, restriction_alaska_hawaii=None, restriction_apo_fpo=None, restriction_canada=None, restriction_continental_us=None, restriction_domestic_only=None, restriction_international_only=None, restriction_po_box=None, restriction_puerto_rico=None, restriction_us_territories=None, themes=None):  # noqa: E501
        """PaymentsConfigurationRestrictions - a model defined in Swagger"""  # noqa: E501

        self._descriptions = None
        self._maximum_subtotal = None
        self._minimum_subtotal = None
        self._payment_method = None
        self._restriction_alaska_hawaii = None
        self._restriction_apo_fpo = None
        self._restriction_canada = None
        self._restriction_continental_us = None
        self._restriction_domestic_only = None
        self._restriction_international_only = None
        self._restriction_po_box = None
        self._restriction_puerto_rico = None
        self._restriction_us_territories = None
        self._themes = None
        self.discriminator = None

        if descriptions is not None:
            self.descriptions = descriptions
        if maximum_subtotal is not None:
            self.maximum_subtotal = maximum_subtotal
        if minimum_subtotal is not None:
            self.minimum_subtotal = minimum_subtotal
        if payment_method is not None:
            self.payment_method = payment_method
        if restriction_alaska_hawaii is not None:
            self.restriction_alaska_hawaii = restriction_alaska_hawaii
        if restriction_apo_fpo is not None:
            self.restriction_apo_fpo = restriction_apo_fpo
        if restriction_canada is not None:
            self.restriction_canada = restriction_canada
        if restriction_continental_us is not None:
            self.restriction_continental_us = restriction_continental_us
        if restriction_domestic_only is not None:
            self.restriction_domestic_only = restriction_domestic_only
        if restriction_international_only is not None:
            self.restriction_international_only = restriction_international_only
        if restriction_po_box is not None:
            self.restriction_po_box = restriction_po_box
        if restriction_puerto_rico is not None:
            self.restriction_puerto_rico = restriction_puerto_rico
        if restriction_us_territories is not None:
            self.restriction_us_territories = restriction_us_territories
        if themes is not None:
            self.themes = themes

    @property
    def descriptions(self):
        """Gets the descriptions of this PaymentsConfigurationRestrictions.  # noqa: E501


        :return: The descriptions of this PaymentsConfigurationRestrictions.  # noqa: E501
        :rtype: list[str]
        """
        return self._descriptions

    @descriptions.setter
    def descriptions(self, descriptions):
        """Sets the descriptions of this PaymentsConfigurationRestrictions.


        :param descriptions: The descriptions of this PaymentsConfigurationRestrictions.  # noqa: E501
        :type: list[str]
        """

        self._descriptions = descriptions

    @property
    def maximum_subtotal(self):
        """Gets the maximum_subtotal of this PaymentsConfigurationRestrictions.  # noqa: E501

        Maximum subtotal  # noqa: E501

        :return: The maximum_subtotal of this PaymentsConfigurationRestrictions.  # noqa: E501
        :rtype: float
        """
        return self._maximum_subtotal

    @maximum_subtotal.setter
    def maximum_subtotal(self, maximum_subtotal):
        """Sets the maximum_subtotal of this PaymentsConfigurationRestrictions.

        Maximum subtotal  # noqa: E501

        :param maximum_subtotal: The maximum_subtotal of this PaymentsConfigurationRestrictions.  # noqa: E501
        :type: float
        """

        self._maximum_subtotal = maximum_subtotal

    @property
    def minimum_subtotal(self):
        """Gets the minimum_subtotal of this PaymentsConfigurationRestrictions.  # noqa: E501

        Minimum subtotal  # noqa: E501

        :return: The minimum_subtotal of this PaymentsConfigurationRestrictions.  # noqa: E501
        :rtype: float
        """
        return self._minimum_subtotal

    @minimum_subtotal.setter
    def minimum_subtotal(self, minimum_subtotal):
        """Sets the minimum_subtotal of this PaymentsConfigurationRestrictions.

        Minimum subtotal  # noqa: E501

        :param minimum_subtotal: The minimum_subtotal of this PaymentsConfigurationRestrictions.  # noqa: E501
        :type: float
        """

        self._minimum_subtotal = minimum_subtotal

    @property
    def payment_method(self):
        """Gets the payment_method of this PaymentsConfigurationRestrictions.  # noqa: E501

        Payment method  # noqa: E501

        :return: The payment_method of this PaymentsConfigurationRestrictions.  # noqa: E501
        :rtype: str
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """Sets the payment_method of this PaymentsConfigurationRestrictions.

        Payment method  # noqa: E501

        :param payment_method: The payment_method of this PaymentsConfigurationRestrictions.  # noqa: E501
        :type: str
        """

        self._payment_method = payment_method

    @property
    def restriction_alaska_hawaii(self):
        """Gets the restriction_alaska_hawaii of this PaymentsConfigurationRestrictions.  # noqa: E501

        Alaska and Hawaii restriction  # noqa: E501

        :return: The restriction_alaska_hawaii of this PaymentsConfigurationRestrictions.  # noqa: E501
        :rtype: str
        """
        return self._restriction_alaska_hawaii

    @restriction_alaska_hawaii.setter
    def restriction_alaska_hawaii(self, restriction_alaska_hawaii):
        """Sets the restriction_alaska_hawaii of this PaymentsConfigurationRestrictions.

        Alaska and Hawaii restriction  # noqa: E501

        :param restriction_alaska_hawaii: The restriction_alaska_hawaii of this PaymentsConfigurationRestrictions.  # noqa: E501
        :type: str
        """
        allowed_values = ["invalid", "invalidOnly", "valid"]  # noqa: E501
        if restriction_alaska_hawaii not in allowed_values:
            raise ValueError(
                "Invalid value for `restriction_alaska_hawaii` ({0}), must be one of {1}"  # noqa: E501
                .format(restriction_alaska_hawaii, allowed_values)
            )

        self._restriction_alaska_hawaii = restriction_alaska_hawaii

    @property
    def restriction_apo_fpo(self):
        """Gets the restriction_apo_fpo of this PaymentsConfigurationRestrictions.  # noqa: E501

        APO/FPO restriction  # noqa: E501

        :return: The restriction_apo_fpo of this PaymentsConfigurationRestrictions.  # noqa: E501
        :rtype: str
        """
        return self._restriction_apo_fpo

    @restriction_apo_fpo.setter
    def restriction_apo_fpo(self, restriction_apo_fpo):
        """Sets the restriction_apo_fpo of this PaymentsConfigurationRestrictions.

        APO/FPO restriction  # noqa: E501

        :param restriction_apo_fpo: The restriction_apo_fpo of this PaymentsConfigurationRestrictions.  # noqa: E501
        :type: str
        """
        allowed_values = ["invalid", "invalidOnly", "valid"]  # noqa: E501
        if restriction_apo_fpo not in allowed_values:
            raise ValueError(
                "Invalid value for `restriction_apo_fpo` ({0}), must be one of {1}"  # noqa: E501
                .format(restriction_apo_fpo, allowed_values)
            )

        self._restriction_apo_fpo = restriction_apo_fpo

    @property
    def restriction_canada(self):
        """Gets the restriction_canada of this PaymentsConfigurationRestrictions.  # noqa: E501

        Canada restriction  # noqa: E501

        :return: The restriction_canada of this PaymentsConfigurationRestrictions.  # noqa: E501
        :rtype: str
        """
        return self._restriction_canada

    @restriction_canada.setter
    def restriction_canada(self, restriction_canada):
        """Sets the restriction_canada of this PaymentsConfigurationRestrictions.

        Canada restriction  # noqa: E501

        :param restriction_canada: The restriction_canada of this PaymentsConfigurationRestrictions.  # noqa: E501
        :type: str
        """
        allowed_values = ["invalid", "invalidOnly", "valid"]  # noqa: E501
        if restriction_canada not in allowed_values:
            raise ValueError(
                "Invalid value for `restriction_canada` ({0}), must be one of {1}"  # noqa: E501
                .format(restriction_canada, allowed_values)
            )

        self._restriction_canada = restriction_canada

    @property
    def restriction_continental_us(self):
        """Gets the restriction_continental_us of this PaymentsConfigurationRestrictions.  # noqa: E501

        Continental US restriction  # noqa: E501

        :return: The restriction_continental_us of this PaymentsConfigurationRestrictions.  # noqa: E501
        :rtype: str
        """
        return self._restriction_continental_us

    @restriction_continental_us.setter
    def restriction_continental_us(self, restriction_continental_us):
        """Sets the restriction_continental_us of this PaymentsConfigurationRestrictions.

        Continental US restriction  # noqa: E501

        :param restriction_continental_us: The restriction_continental_us of this PaymentsConfigurationRestrictions.  # noqa: E501
        :type: str
        """
        allowed_values = ["invalid", "invalidOnly", "valid"]  # noqa: E501
        if restriction_continental_us not in allowed_values:
            raise ValueError(
                "Invalid value for `restriction_continental_us` ({0}), must be one of {1}"  # noqa: E501
                .format(restriction_continental_us, allowed_values)
            )

        self._restriction_continental_us = restriction_continental_us

    @property
    def restriction_domestic_only(self):
        """Gets the restriction_domestic_only of this PaymentsConfigurationRestrictions.  # noqa: E501

        Domestic only restriction  # noqa: E501

        :return: The restriction_domestic_only of this PaymentsConfigurationRestrictions.  # noqa: E501
        :rtype: str
        """
        return self._restriction_domestic_only

    @restriction_domestic_only.setter
    def restriction_domestic_only(self, restriction_domestic_only):
        """Sets the restriction_domestic_only of this PaymentsConfigurationRestrictions.

        Domestic only restriction  # noqa: E501

        :param restriction_domestic_only: The restriction_domestic_only of this PaymentsConfigurationRestrictions.  # noqa: E501
        :type: str
        """
        allowed_values = ["invalid", "invalidOnly", "valid"]  # noqa: E501
        if restriction_domestic_only not in allowed_values:
            raise ValueError(
                "Invalid value for `restriction_domestic_only` ({0}), must be one of {1}"  # noqa: E501
                .format(restriction_domestic_only, allowed_values)
            )

        self._restriction_domestic_only = restriction_domestic_only

    @property
    def restriction_international_only(self):
        """Gets the restriction_international_only of this PaymentsConfigurationRestrictions.  # noqa: E501

        International only restriction  # noqa: E501

        :return: The restriction_international_only of this PaymentsConfigurationRestrictions.  # noqa: E501
        :rtype: str
        """
        return self._restriction_international_only

    @restriction_international_only.setter
    def restriction_international_only(self, restriction_international_only):
        """Sets the restriction_international_only of this PaymentsConfigurationRestrictions.

        International only restriction  # noqa: E501

        :param restriction_international_only: The restriction_international_only of this PaymentsConfigurationRestrictions.  # noqa: E501
        :type: str
        """
        allowed_values = ["invalid", "invalidOnly", "valid"]  # noqa: E501
        if restriction_international_only not in allowed_values:
            raise ValueError(
                "Invalid value for `restriction_international_only` ({0}), must be one of {1}"  # noqa: E501
                .format(restriction_international_only, allowed_values)
            )

        self._restriction_international_only = restriction_international_only

    @property
    def restriction_po_box(self):
        """Gets the restriction_po_box of this PaymentsConfigurationRestrictions.  # noqa: E501

        PO Box restriction  # noqa: E501

        :return: The restriction_po_box of this PaymentsConfigurationRestrictions.  # noqa: E501
        :rtype: str
        """
        return self._restriction_po_box

    @restriction_po_box.setter
    def restriction_po_box(self, restriction_po_box):
        """Sets the restriction_po_box of this PaymentsConfigurationRestrictions.

        PO Box restriction  # noqa: E501

        :param restriction_po_box: The restriction_po_box of this PaymentsConfigurationRestrictions.  # noqa: E501
        :type: str
        """
        allowed_values = ["invalid", "invalidOnly", "valid"]  # noqa: E501
        if restriction_po_box not in allowed_values:
            raise ValueError(
                "Invalid value for `restriction_po_box` ({0}), must be one of {1}"  # noqa: E501
                .format(restriction_po_box, allowed_values)
            )

        self._restriction_po_box = restriction_po_box

    @property
    def restriction_puerto_rico(self):
        """Gets the restriction_puerto_rico of this PaymentsConfigurationRestrictions.  # noqa: E501

        Puerto Rico restriction  # noqa: E501

        :return: The restriction_puerto_rico of this PaymentsConfigurationRestrictions.  # noqa: E501
        :rtype: str
        """
        return self._restriction_puerto_rico

    @restriction_puerto_rico.setter
    def restriction_puerto_rico(self, restriction_puerto_rico):
        """Sets the restriction_puerto_rico of this PaymentsConfigurationRestrictions.

        Puerto Rico restriction  # noqa: E501

        :param restriction_puerto_rico: The restriction_puerto_rico of this PaymentsConfigurationRestrictions.  # noqa: E501
        :type: str
        """
        allowed_values = ["invalid", "invalidOnly", "valid"]  # noqa: E501
        if restriction_puerto_rico not in allowed_values:
            raise ValueError(
                "Invalid value for `restriction_puerto_rico` ({0}), must be one of {1}"  # noqa: E501
                .format(restriction_puerto_rico, allowed_values)
            )

        self._restriction_puerto_rico = restriction_puerto_rico

    @property
    def restriction_us_territories(self):
        """Gets the restriction_us_territories of this PaymentsConfigurationRestrictions.  # noqa: E501

        US Territories restriction  # noqa: E501

        :return: The restriction_us_territories of this PaymentsConfigurationRestrictions.  # noqa: E501
        :rtype: str
        """
        return self._restriction_us_territories

    @restriction_us_territories.setter
    def restriction_us_territories(self, restriction_us_territories):
        """Sets the restriction_us_territories of this PaymentsConfigurationRestrictions.

        US Territories restriction  # noqa: E501

        :param restriction_us_territories: The restriction_us_territories of this PaymentsConfigurationRestrictions.  # noqa: E501
        :type: str
        """
        allowed_values = ["invalid", "invalidOnly", "valid"]  # noqa: E501
        if restriction_us_territories not in allowed_values:
            raise ValueError(
                "Invalid value for `restriction_us_territories` ({0}), must be one of {1}"  # noqa: E501
                .format(restriction_us_territories, allowed_values)
            )

        self._restriction_us_territories = restriction_us_territories

    @property
    def themes(self):
        """Gets the themes of this PaymentsConfigurationRestrictions.  # noqa: E501


        :return: The themes of this PaymentsConfigurationRestrictions.  # noqa: E501
        :rtype: list[PaymentsConfigurationRestrictionsTheme]
        """
        return self._themes

    @themes.setter
    def themes(self, themes):
        """Sets the themes of this PaymentsConfigurationRestrictions.


        :param themes: The themes of this PaymentsConfigurationRestrictions.  # noqa: E501
        :type: list[PaymentsConfigurationRestrictionsTheme]
        """

        self._themes = themes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaymentsConfigurationRestrictions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentsConfigurationRestrictions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
