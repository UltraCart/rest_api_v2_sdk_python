# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class StoreFront(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'host_alias1': 'str',
        'host_alias2': 'str',
        'host_alias3': 'str',
        'host_alias4': 'str',
        'host_alias5': 'str',
        'host_name': 'str',
        'locked': 'bool',
        'merchant_id': 'str',
        'redirect_aliases': 'bool',
        'storefront_oid': 'int',
        'unlock_password': 'str'
    }

    attribute_map = {
        'host_alias1': 'host_alias1',
        'host_alias2': 'host_alias2',
        'host_alias3': 'host_alias3',
        'host_alias4': 'host_alias4',
        'host_alias5': 'host_alias5',
        'host_name': 'host_name',
        'locked': 'locked',
        'merchant_id': 'merchant_id',
        'redirect_aliases': 'redirect_aliases',
        'storefront_oid': 'storefront_oid',
        'unlock_password': 'unlock_password'
    }

    def __init__(self, host_alias1=None, host_alias2=None, host_alias3=None, host_alias4=None, host_alias5=None, host_name=None, locked=None, merchant_id=None, redirect_aliases=None, storefront_oid=None, unlock_password=None):  # noqa: E501
        """StoreFront - a model defined in Swagger"""  # noqa: E501

        self._host_alias1 = None
        self._host_alias2 = None
        self._host_alias3 = None
        self._host_alias4 = None
        self._host_alias5 = None
        self._host_name = None
        self._locked = None
        self._merchant_id = None
        self._redirect_aliases = None
        self._storefront_oid = None
        self._unlock_password = None
        self.discriminator = None

        if host_alias1 is not None:
            self.host_alias1 = host_alias1
        if host_alias2 is not None:
            self.host_alias2 = host_alias2
        if host_alias3 is not None:
            self.host_alias3 = host_alias3
        if host_alias4 is not None:
            self.host_alias4 = host_alias4
        if host_alias5 is not None:
            self.host_alias5 = host_alias5
        if host_name is not None:
            self.host_name = host_name
        if locked is not None:
            self.locked = locked
        if merchant_id is not None:
            self.merchant_id = merchant_id
        if redirect_aliases is not None:
            self.redirect_aliases = redirect_aliases
        if storefront_oid is not None:
            self.storefront_oid = storefront_oid
        if unlock_password is not None:
            self.unlock_password = unlock_password

    @property
    def host_alias1(self):
        """Gets the host_alias1 of this StoreFront.  # noqa: E501


        :return: The host_alias1 of this StoreFront.  # noqa: E501
        :rtype: str
        """
        return self._host_alias1

    @host_alias1.setter
    def host_alias1(self, host_alias1):
        """Sets the host_alias1 of this StoreFront.


        :param host_alias1: The host_alias1 of this StoreFront.  # noqa: E501
        :type: str
        """

        self._host_alias1 = host_alias1

    @property
    def host_alias2(self):
        """Gets the host_alias2 of this StoreFront.  # noqa: E501


        :return: The host_alias2 of this StoreFront.  # noqa: E501
        :rtype: str
        """
        return self._host_alias2

    @host_alias2.setter
    def host_alias2(self, host_alias2):
        """Sets the host_alias2 of this StoreFront.


        :param host_alias2: The host_alias2 of this StoreFront.  # noqa: E501
        :type: str
        """

        self._host_alias2 = host_alias2

    @property
    def host_alias3(self):
        """Gets the host_alias3 of this StoreFront.  # noqa: E501


        :return: The host_alias3 of this StoreFront.  # noqa: E501
        :rtype: str
        """
        return self._host_alias3

    @host_alias3.setter
    def host_alias3(self, host_alias3):
        """Sets the host_alias3 of this StoreFront.


        :param host_alias3: The host_alias3 of this StoreFront.  # noqa: E501
        :type: str
        """

        self._host_alias3 = host_alias3

    @property
    def host_alias4(self):
        """Gets the host_alias4 of this StoreFront.  # noqa: E501


        :return: The host_alias4 of this StoreFront.  # noqa: E501
        :rtype: str
        """
        return self._host_alias4

    @host_alias4.setter
    def host_alias4(self, host_alias4):
        """Sets the host_alias4 of this StoreFront.


        :param host_alias4: The host_alias4 of this StoreFront.  # noqa: E501
        :type: str
        """

        self._host_alias4 = host_alias4

    @property
    def host_alias5(self):
        """Gets the host_alias5 of this StoreFront.  # noqa: E501


        :return: The host_alias5 of this StoreFront.  # noqa: E501
        :rtype: str
        """
        return self._host_alias5

    @host_alias5.setter
    def host_alias5(self, host_alias5):
        """Sets the host_alias5 of this StoreFront.


        :param host_alias5: The host_alias5 of this StoreFront.  # noqa: E501
        :type: str
        """

        self._host_alias5 = host_alias5

    @property
    def host_name(self):
        """Gets the host_name of this StoreFront.  # noqa: E501


        :return: The host_name of this StoreFront.  # noqa: E501
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """Sets the host_name of this StoreFront.


        :param host_name: The host_name of this StoreFront.  # noqa: E501
        :type: str
        """

        self._host_name = host_name

    @property
    def locked(self):
        """Gets the locked of this StoreFront.  # noqa: E501


        :return: The locked of this StoreFront.  # noqa: E501
        :rtype: bool
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this StoreFront.


        :param locked: The locked of this StoreFront.  # noqa: E501
        :type: bool
        """

        self._locked = locked

    @property
    def merchant_id(self):
        """Gets the merchant_id of this StoreFront.  # noqa: E501


        :return: The merchant_id of this StoreFront.  # noqa: E501
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this StoreFront.


        :param merchant_id: The merchant_id of this StoreFront.  # noqa: E501
        :type: str
        """

        self._merchant_id = merchant_id

    @property
    def redirect_aliases(self):
        """Gets the redirect_aliases of this StoreFront.  # noqa: E501


        :return: The redirect_aliases of this StoreFront.  # noqa: E501
        :rtype: bool
        """
        return self._redirect_aliases

    @redirect_aliases.setter
    def redirect_aliases(self, redirect_aliases):
        """Sets the redirect_aliases of this StoreFront.


        :param redirect_aliases: The redirect_aliases of this StoreFront.  # noqa: E501
        :type: bool
        """

        self._redirect_aliases = redirect_aliases

    @property
    def storefront_oid(self):
        """Gets the storefront_oid of this StoreFront.  # noqa: E501


        :return: The storefront_oid of this StoreFront.  # noqa: E501
        :rtype: int
        """
        return self._storefront_oid

    @storefront_oid.setter
    def storefront_oid(self, storefront_oid):
        """Sets the storefront_oid of this StoreFront.


        :param storefront_oid: The storefront_oid of this StoreFront.  # noqa: E501
        :type: int
        """

        self._storefront_oid = storefront_oid

    @property
    def unlock_password(self):
        """Gets the unlock_password of this StoreFront.  # noqa: E501


        :return: The unlock_password of this StoreFront.  # noqa: E501
        :rtype: str
        """
        return self._unlock_password

    @unlock_password.setter
    def unlock_password(self, unlock_password):
        """Sets the unlock_password of this StoreFront.


        :param unlock_password: The unlock_password of this StoreFront.  # noqa: E501
        :type: str
        """

        self._unlock_password = unlock_password

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StoreFront, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StoreFront):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
