# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class WorkflowTask(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'assigned_to_group': 'str',
        'assigned_to_group_id': 'int',
        'assigned_to_user': 'str',
        'assigned_to_user_id': 'int',
        'attachments': 'list[WorkflowAttachment]',
        'created_by': 'WorkflowUser',
        'created_dts': 'str',
        'delay_until_dts': 'str',
        'dependant_workflow_task_uuid': 'str',
        'due_dts': 'str',
        'histories': 'list[WorkflowTaskHistory]',
        'last_update_dts': 'str',
        'merchant_id': 'str',
        'notes': 'list[WorkflowNote]',
        'object_email': 'str',
        'object_id': 'str',
        'object_type': 'str',
        'object_url': 'str',
        'priority': 'str',
        'related_workflow_task_uuid': 'str',
        'status': 'str',
        'tags': 'list[str]',
        'task_context': 'str',
        'task_details': 'str',
        'task_name': 'str',
        'workflow_task_uuid': 'str'
    }

    attribute_map = {
        'assigned_to_group': 'assigned_to_group',
        'assigned_to_group_id': 'assigned_to_group_id',
        'assigned_to_user': 'assigned_to_user',
        'assigned_to_user_id': 'assigned_to_user_id',
        'attachments': 'attachments',
        'created_by': 'created_by',
        'created_dts': 'created_dts',
        'delay_until_dts': 'delay_until_dts',
        'dependant_workflow_task_uuid': 'dependant_workflow_task_uuid',
        'due_dts': 'due_dts',
        'histories': 'histories',
        'last_update_dts': 'last_update_dts',
        'merchant_id': 'merchant_id',
        'notes': 'notes',
        'object_email': 'object_email',
        'object_id': 'object_id',
        'object_type': 'object_type',
        'object_url': 'object_url',
        'priority': 'priority',
        'related_workflow_task_uuid': 'related_workflow_task_uuid',
        'status': 'status',
        'tags': 'tags',
        'task_context': 'task_context',
        'task_details': 'task_details',
        'task_name': 'task_name',
        'workflow_task_uuid': 'workflow_task_uuid'
    }

    def __init__(self, assigned_to_group=None, assigned_to_group_id=None, assigned_to_user=None, assigned_to_user_id=None, attachments=None, created_by=None, created_dts=None, delay_until_dts=None, dependant_workflow_task_uuid=None, due_dts=None, histories=None, last_update_dts=None, merchant_id=None, notes=None, object_email=None, object_id=None, object_type=None, object_url=None, priority=None, related_workflow_task_uuid=None, status=None, tags=None, task_context=None, task_details=None, task_name=None, workflow_task_uuid=None):  # noqa: E501
        """WorkflowTask - a model defined in Swagger"""  # noqa: E501

        self._assigned_to_group = None
        self._assigned_to_group_id = None
        self._assigned_to_user = None
        self._assigned_to_user_id = None
        self._attachments = None
        self._created_by = None
        self._created_dts = None
        self._delay_until_dts = None
        self._dependant_workflow_task_uuid = None
        self._due_dts = None
        self._histories = None
        self._last_update_dts = None
        self._merchant_id = None
        self._notes = None
        self._object_email = None
        self._object_id = None
        self._object_type = None
        self._object_url = None
        self._priority = None
        self._related_workflow_task_uuid = None
        self._status = None
        self._tags = None
        self._task_context = None
        self._task_details = None
        self._task_name = None
        self._workflow_task_uuid = None
        self.discriminator = None

        if assigned_to_group is not None:
            self.assigned_to_group = assigned_to_group
        if assigned_to_group_id is not None:
            self.assigned_to_group_id = assigned_to_group_id
        if assigned_to_user is not None:
            self.assigned_to_user = assigned_to_user
        if assigned_to_user_id is not None:
            self.assigned_to_user_id = assigned_to_user_id
        if attachments is not None:
            self.attachments = attachments
        if created_by is not None:
            self.created_by = created_by
        if created_dts is not None:
            self.created_dts = created_dts
        if delay_until_dts is not None:
            self.delay_until_dts = delay_until_dts
        if dependant_workflow_task_uuid is not None:
            self.dependant_workflow_task_uuid = dependant_workflow_task_uuid
        if due_dts is not None:
            self.due_dts = due_dts
        if histories is not None:
            self.histories = histories
        if last_update_dts is not None:
            self.last_update_dts = last_update_dts
        if merchant_id is not None:
            self.merchant_id = merchant_id
        if notes is not None:
            self.notes = notes
        if object_email is not None:
            self.object_email = object_email
        if object_id is not None:
            self.object_id = object_id
        if object_type is not None:
            self.object_type = object_type
        if object_url is not None:
            self.object_url = object_url
        if priority is not None:
            self.priority = priority
        if related_workflow_task_uuid is not None:
            self.related_workflow_task_uuid = related_workflow_task_uuid
        if status is not None:
            self.status = status
        if tags is not None:
            self.tags = tags
        if task_context is not None:
            self.task_context = task_context
        if task_details is not None:
            self.task_details = task_details
        if task_name is not None:
            self.task_name = task_name
        if workflow_task_uuid is not None:
            self.workflow_task_uuid = workflow_task_uuid

    @property
    def assigned_to_group(self):
        """Gets the assigned_to_group of this WorkflowTask.  # noqa: E501

        Assigned to group  # noqa: E501

        :return: The assigned_to_group of this WorkflowTask.  # noqa: E501
        :rtype: str
        """
        return self._assigned_to_group

    @assigned_to_group.setter
    def assigned_to_group(self, assigned_to_group):
        """Sets the assigned_to_group of this WorkflowTask.

        Assigned to group  # noqa: E501

        :param assigned_to_group: The assigned_to_group of this WorkflowTask.  # noqa: E501
        :type: str
        """

        self._assigned_to_group = assigned_to_group

    @property
    def assigned_to_group_id(self):
        """Gets the assigned_to_group_id of this WorkflowTask.  # noqa: E501

        Assigned to group ID  # noqa: E501

        :return: The assigned_to_group_id of this WorkflowTask.  # noqa: E501
        :rtype: int
        """
        return self._assigned_to_group_id

    @assigned_to_group_id.setter
    def assigned_to_group_id(self, assigned_to_group_id):
        """Sets the assigned_to_group_id of this WorkflowTask.

        Assigned to group ID  # noqa: E501

        :param assigned_to_group_id: The assigned_to_group_id of this WorkflowTask.  # noqa: E501
        :type: int
        """

        self._assigned_to_group_id = assigned_to_group_id

    @property
    def assigned_to_user(self):
        """Gets the assigned_to_user of this WorkflowTask.  # noqa: E501

        Assigned to user  # noqa: E501

        :return: The assigned_to_user of this WorkflowTask.  # noqa: E501
        :rtype: str
        """
        return self._assigned_to_user

    @assigned_to_user.setter
    def assigned_to_user(self, assigned_to_user):
        """Sets the assigned_to_user of this WorkflowTask.

        Assigned to user  # noqa: E501

        :param assigned_to_user: The assigned_to_user of this WorkflowTask.  # noqa: E501
        :type: str
        """

        self._assigned_to_user = assigned_to_user

    @property
    def assigned_to_user_id(self):
        """Gets the assigned_to_user_id of this WorkflowTask.  # noqa: E501

        Assigned to user ID  # noqa: E501

        :return: The assigned_to_user_id of this WorkflowTask.  # noqa: E501
        :rtype: int
        """
        return self._assigned_to_user_id

    @assigned_to_user_id.setter
    def assigned_to_user_id(self, assigned_to_user_id):
        """Sets the assigned_to_user_id of this WorkflowTask.

        Assigned to user ID  # noqa: E501

        :param assigned_to_user_id: The assigned_to_user_id of this WorkflowTask.  # noqa: E501
        :type: int
        """

        self._assigned_to_user_id = assigned_to_user_id

    @property
    def attachments(self):
        """Gets the attachments of this WorkflowTask.  # noqa: E501

        Attachments to the Workflow Task  # noqa: E501

        :return: The attachments of this WorkflowTask.  # noqa: E501
        :rtype: list[WorkflowAttachment]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this WorkflowTask.

        Attachments to the Workflow Task  # noqa: E501

        :param attachments: The attachments of this WorkflowTask.  # noqa: E501
        :type: list[WorkflowAttachment]
        """

        self._attachments = attachments

    @property
    def created_by(self):
        """Gets the created_by of this WorkflowTask.  # noqa: E501


        :return: The created_by of this WorkflowTask.  # noqa: E501
        :rtype: WorkflowUser
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this WorkflowTask.


        :param created_by: The created_by of this WorkflowTask.  # noqa: E501
        :type: WorkflowUser
        """

        self._created_by = created_by

    @property
    def created_dts(self):
        """Gets the created_dts of this WorkflowTask.  # noqa: E501

        Date/time that the workflow task was created  # noqa: E501

        :return: The created_dts of this WorkflowTask.  # noqa: E501
        :rtype: str
        """
        return self._created_dts

    @created_dts.setter
    def created_dts(self, created_dts):
        """Sets the created_dts of this WorkflowTask.

        Date/time that the workflow task was created  # noqa: E501

        :param created_dts: The created_dts of this WorkflowTask.  # noqa: E501
        :type: str
        """

        self._created_dts = created_dts

    @property
    def delay_until_dts(self):
        """Gets the delay_until_dts of this WorkflowTask.  # noqa: E501

        Date/time that the workflow task should delay until  # noqa: E501

        :return: The delay_until_dts of this WorkflowTask.  # noqa: E501
        :rtype: str
        """
        return self._delay_until_dts

    @delay_until_dts.setter
    def delay_until_dts(self, delay_until_dts):
        """Sets the delay_until_dts of this WorkflowTask.

        Date/time that the workflow task should delay until  # noqa: E501

        :param delay_until_dts: The delay_until_dts of this WorkflowTask.  # noqa: E501
        :type: str
        """

        self._delay_until_dts = delay_until_dts

    @property
    def dependant_workflow_task_uuid(self):
        """Gets the dependant_workflow_task_uuid of this WorkflowTask.  # noqa: E501

        Dependant Workflow Task UUID (must be completed before this task can be completed)  # noqa: E501

        :return: The dependant_workflow_task_uuid of this WorkflowTask.  # noqa: E501
        :rtype: str
        """
        return self._dependant_workflow_task_uuid

    @dependant_workflow_task_uuid.setter
    def dependant_workflow_task_uuid(self, dependant_workflow_task_uuid):
        """Sets the dependant_workflow_task_uuid of this WorkflowTask.

        Dependant Workflow Task UUID (must be completed before this task can be completed)  # noqa: E501

        :param dependant_workflow_task_uuid: The dependant_workflow_task_uuid of this WorkflowTask.  # noqa: E501
        :type: str
        """

        self._dependant_workflow_task_uuid = dependant_workflow_task_uuid

    @property
    def due_dts(self):
        """Gets the due_dts of this WorkflowTask.  # noqa: E501

        Date/time that the workflow task is due  # noqa: E501

        :return: The due_dts of this WorkflowTask.  # noqa: E501
        :rtype: str
        """
        return self._due_dts

    @due_dts.setter
    def due_dts(self, due_dts):
        """Sets the due_dts of this WorkflowTask.

        Date/time that the workflow task is due  # noqa: E501

        :param due_dts: The due_dts of this WorkflowTask.  # noqa: E501
        :type: str
        """

        self._due_dts = due_dts

    @property
    def histories(self):
        """Gets the histories of this WorkflowTask.  # noqa: E501

        Array of history records for the task  # noqa: E501

        :return: The histories of this WorkflowTask.  # noqa: E501
        :rtype: list[WorkflowTaskHistory]
        """
        return self._histories

    @histories.setter
    def histories(self, histories):
        """Sets the histories of this WorkflowTask.

        Array of history records for the task  # noqa: E501

        :param histories: The histories of this WorkflowTask.  # noqa: E501
        :type: list[WorkflowTaskHistory]
        """

        self._histories = histories

    @property
    def last_update_dts(self):
        """Gets the last_update_dts of this WorkflowTask.  # noqa: E501

        Date/time that the workflow task was last updated  # noqa: E501

        :return: The last_update_dts of this WorkflowTask.  # noqa: E501
        :rtype: str
        """
        return self._last_update_dts

    @last_update_dts.setter
    def last_update_dts(self, last_update_dts):
        """Sets the last_update_dts of this WorkflowTask.

        Date/time that the workflow task was last updated  # noqa: E501

        :param last_update_dts: The last_update_dts of this WorkflowTask.  # noqa: E501
        :type: str
        """

        self._last_update_dts = last_update_dts

    @property
    def merchant_id(self):
        """Gets the merchant_id of this WorkflowTask.  # noqa: E501

        Merchant ID  # noqa: E501

        :return: The merchant_id of this WorkflowTask.  # noqa: E501
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this WorkflowTask.

        Merchant ID  # noqa: E501

        :param merchant_id: The merchant_id of this WorkflowTask.  # noqa: E501
        :type: str
        """

        self._merchant_id = merchant_id

    @property
    def notes(self):
        """Gets the notes of this WorkflowTask.  # noqa: E501

        Notes on the Workflow Task  # noqa: E501

        :return: The notes of this WorkflowTask.  # noqa: E501
        :rtype: list[WorkflowNote]
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this WorkflowTask.

        Notes on the Workflow Task  # noqa: E501

        :param notes: The notes of this WorkflowTask.  # noqa: E501
        :type: list[WorkflowNote]
        """

        self._notes = notes

    @property
    def object_email(self):
        """Gets the object_email of this WorkflowTask.  # noqa: E501

        Object is associated with customer email  # noqa: E501

        :return: The object_email of this WorkflowTask.  # noqa: E501
        :rtype: str
        """
        return self._object_email

    @object_email.setter
    def object_email(self, object_email):
        """Sets the object_email of this WorkflowTask.

        Object is associated with customer email  # noqa: E501

        :param object_email: The object_email of this WorkflowTask.  # noqa: E501
        :type: str
        """

        self._object_email = object_email

    @property
    def object_id(self):
        """Gets the object_id of this WorkflowTask.  # noqa: E501

        Object ID  # noqa: E501

        :return: The object_id of this WorkflowTask.  # noqa: E501
        :rtype: str
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this WorkflowTask.

        Object ID  # noqa: E501

        :param object_id: The object_id of this WorkflowTask.  # noqa: E501
        :type: str
        """

        self._object_id = object_id

    @property
    def object_type(self):
        """Gets the object_type of this WorkflowTask.  # noqa: E501

        Object Type  # noqa: E501

        :return: The object_type of this WorkflowTask.  # noqa: E501
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this WorkflowTask.

        Object Type  # noqa: E501

        :param object_type: The object_type of this WorkflowTask.  # noqa: E501
        :type: str
        """
        allowed_values = ["order", "auto order", "item", "customer profile", "storefront"]  # noqa: E501
        if object_type not in allowed_values:
            raise ValueError(
                "Invalid value for `object_type` ({0}), must be one of {1}"  # noqa: E501
                .format(object_type, allowed_values)
            )

        self._object_type = object_type

    @property
    def object_url(self):
        """Gets the object_url of this WorkflowTask.  # noqa: E501

        Object URL  # noqa: E501

        :return: The object_url of this WorkflowTask.  # noqa: E501
        :rtype: str
        """
        return self._object_url

    @object_url.setter
    def object_url(self, object_url):
        """Sets the object_url of this WorkflowTask.

        Object URL  # noqa: E501

        :param object_url: The object_url of this WorkflowTask.  # noqa: E501
        :type: str
        """

        self._object_url = object_url

    @property
    def priority(self):
        """Gets the priority of this WorkflowTask.  # noqa: E501

        Priority  # noqa: E501

        :return: The priority of this WorkflowTask.  # noqa: E501
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this WorkflowTask.

        Priority  # noqa: E501

        :param priority: The priority of this WorkflowTask.  # noqa: E501
        :type: str
        """
        allowed_values = ["1 - low", "2 - medium", "3 - high", "4 - critical"]  # noqa: E501
        if priority not in allowed_values:
            raise ValueError(
                "Invalid value for `priority` ({0}), must be one of {1}"  # noqa: E501
                .format(priority, allowed_values)
            )

        self._priority = priority

    @property
    def related_workflow_task_uuid(self):
        """Gets the related_workflow_task_uuid of this WorkflowTask.  # noqa: E501

        Related Workflow Task UUID  # noqa: E501

        :return: The related_workflow_task_uuid of this WorkflowTask.  # noqa: E501
        :rtype: str
        """
        return self._related_workflow_task_uuid

    @related_workflow_task_uuid.setter
    def related_workflow_task_uuid(self, related_workflow_task_uuid):
        """Sets the related_workflow_task_uuid of this WorkflowTask.

        Related Workflow Task UUID  # noqa: E501

        :param related_workflow_task_uuid: The related_workflow_task_uuid of this WorkflowTask.  # noqa: E501
        :type: str
        """

        self._related_workflow_task_uuid = related_workflow_task_uuid

    @property
    def status(self):
        """Gets the status of this WorkflowTask.  # noqa: E501

        Status of the workflow task  # noqa: E501

        :return: The status of this WorkflowTask.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this WorkflowTask.

        Status of the workflow task  # noqa: E501

        :param status: The status of this WorkflowTask.  # noqa: E501
        :type: str
        """
        allowed_values = ["open", "closed", "delayed", "awaiting customer feedback"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def tags(self):
        """Gets the tags of this WorkflowTask.  # noqa: E501

        Tags  # noqa: E501

        :return: The tags of this WorkflowTask.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this WorkflowTask.

        Tags  # noqa: E501

        :param tags: The tags of this WorkflowTask.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def task_context(self):
        """Gets the task_context of this WorkflowTask.  # noqa: E501

        User friendly string of the task context  # noqa: E501

        :return: The task_context of this WorkflowTask.  # noqa: E501
        :rtype: str
        """
        return self._task_context

    @task_context.setter
    def task_context(self, task_context):
        """Sets the task_context of this WorkflowTask.

        User friendly string of the task context  # noqa: E501

        :param task_context: The task_context of this WorkflowTask.  # noqa: E501
        :type: str
        """

        self._task_context = task_context

    @property
    def task_details(self):
        """Gets the task_details of this WorkflowTask.  # noqa: E501

        Task Details  # noqa: E501

        :return: The task_details of this WorkflowTask.  # noqa: E501
        :rtype: str
        """
        return self._task_details

    @task_details.setter
    def task_details(self, task_details):
        """Sets the task_details of this WorkflowTask.

        Task Details  # noqa: E501

        :param task_details: The task_details of this WorkflowTask.  # noqa: E501
        :type: str
        """

        self._task_details = task_details

    @property
    def task_name(self):
        """Gets the task_name of this WorkflowTask.  # noqa: E501

        Task Name  # noqa: E501

        :return: The task_name of this WorkflowTask.  # noqa: E501
        :rtype: str
        """
        return self._task_name

    @task_name.setter
    def task_name(self, task_name):
        """Sets the task_name of this WorkflowTask.

        Task Name  # noqa: E501

        :param task_name: The task_name of this WorkflowTask.  # noqa: E501
        :type: str
        """

        self._task_name = task_name

    @property
    def workflow_task_uuid(self):
        """Gets the workflow_task_uuid of this WorkflowTask.  # noqa: E501

        Workflow Task UUID  # noqa: E501

        :return: The workflow_task_uuid of this WorkflowTask.  # noqa: E501
        :rtype: str
        """
        return self._workflow_task_uuid

    @workflow_task_uuid.setter
    def workflow_task_uuid(self, workflow_task_uuid):
        """Sets the workflow_task_uuid of this WorkflowTask.

        Workflow Task UUID  # noqa: E501

        :param workflow_task_uuid: The workflow_task_uuid of this WorkflowTask.  # noqa: E501
        :type: str
        """

        self._workflow_task_uuid = workflow_task_uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WorkflowTask, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkflowTask):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
