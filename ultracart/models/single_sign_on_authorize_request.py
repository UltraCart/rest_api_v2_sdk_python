# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SingleSignOnAuthorizeRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'redirect_uri': 'str',
        'state': 'str'
    }

    attribute_map = {
        'redirect_uri': 'redirect_uri',
        'state': 'state'
    }

    def __init__(self, redirect_uri=None, state=None):  # noqa: E501
        """SingleSignOnAuthorizeRequest - a model defined in Swagger"""  # noqa: E501

        self._redirect_uri = None
        self._state = None
        self.discriminator = None

        if redirect_uri is not None:
            self.redirect_uri = redirect_uri
        if state is not None:
            self.state = state

    @property
    def redirect_uri(self):
        """Gets the redirect_uri of this SingleSignOnAuthorizeRequest.  # noqa: E501

        The URL that the customer should be redirected to after they have approved a single sign on session.  # noqa: E501

        :return: The redirect_uri of this SingleSignOnAuthorizeRequest.  # noqa: E501
        :rtype: str
        """
        return self._redirect_uri

    @redirect_uri.setter
    def redirect_uri(self, redirect_uri):
        """Sets the redirect_uri of this SingleSignOnAuthorizeRequest.

        The URL that the customer should be redirected to after they have approved a single sign on session.  # noqa: E501

        :param redirect_uri: The redirect_uri of this SingleSignOnAuthorizeRequest.  # noqa: E501
        :type: str
        """

        self._redirect_uri = redirect_uri

    @property
    def state(self):
        """Gets the state of this SingleSignOnAuthorizeRequest.  # noqa: E501

        An optional state variable that you provide.  It will be returned to you on the redirect.  You can inspect the state to validate the request is legitimate.  We recommend using this field.  # noqa: E501

        :return: The state of this SingleSignOnAuthorizeRequest.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this SingleSignOnAuthorizeRequest.

        An optional state variable that you provide.  It will be returned to you on the redirect.  You can inspect the state to validate the request is legitimate.  We recommend using this field.  # noqa: E501

        :param state: The state of this SingleSignOnAuthorizeRequest.  # noqa: E501
        :type: str
        """

        self._state = state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SingleSignOnAuthorizeRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SingleSignOnAuthorizeRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
