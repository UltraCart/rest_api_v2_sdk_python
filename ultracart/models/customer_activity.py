# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CustomerActivity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'activities': 'list[Activity]',
        'memberships': 'list[ListSegmentMembership]',
        'metrics': 'list[Metric]',
        'properties_list': 'list[ModelProperty]'
    }

    attribute_map = {
        'activities': 'activities',
        'memberships': 'memberships',
        'metrics': 'metrics',
        'properties_list': 'properties_list'
    }

    def __init__(self, activities=None, memberships=None, metrics=None, properties_list=None):  # noqa: E501
        """CustomerActivity - a model defined in Swagger"""  # noqa: E501

        self._activities = None
        self._memberships = None
        self._metrics = None
        self._properties_list = None
        self.discriminator = None

        if activities is not None:
            self.activities = activities
        if memberships is not None:
            self.memberships = memberships
        if metrics is not None:
            self.metrics = metrics
        if properties_list is not None:
            self.properties_list = properties_list

    @property
    def activities(self):
        """Gets the activities of this CustomerActivity.  # noqa: E501


        :return: The activities of this CustomerActivity.  # noqa: E501
        :rtype: list[Activity]
        """
        return self._activities

    @activities.setter
    def activities(self, activities):
        """Sets the activities of this CustomerActivity.


        :param activities: The activities of this CustomerActivity.  # noqa: E501
        :type: list[Activity]
        """

        self._activities = activities

    @property
    def memberships(self):
        """Gets the memberships of this CustomerActivity.  # noqa: E501


        :return: The memberships of this CustomerActivity.  # noqa: E501
        :rtype: list[ListSegmentMembership]
        """
        return self._memberships

    @memberships.setter
    def memberships(self, memberships):
        """Sets the memberships of this CustomerActivity.


        :param memberships: The memberships of this CustomerActivity.  # noqa: E501
        :type: list[ListSegmentMembership]
        """

        self._memberships = memberships

    @property
    def metrics(self):
        """Gets the metrics of this CustomerActivity.  # noqa: E501


        :return: The metrics of this CustomerActivity.  # noqa: E501
        :rtype: list[Metric]
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this CustomerActivity.


        :param metrics: The metrics of this CustomerActivity.  # noqa: E501
        :type: list[Metric]
        """

        self._metrics = metrics

    @property
    def properties_list(self):
        """Gets the properties_list of this CustomerActivity.  # noqa: E501


        :return: The properties_list of this CustomerActivity.  # noqa: E501
        :rtype: list[ModelProperty]
        """
        return self._properties_list

    @properties_list.setter
    def properties_list(self, properties_list):
        """Sets the properties_list of this CustomerActivity.


        :param properties_list: The properties_list of this CustomerActivity.  # noqa: E501
        :type: list[ModelProperty]
        """

        self._properties_list = properties_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomerActivity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomerActivity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
