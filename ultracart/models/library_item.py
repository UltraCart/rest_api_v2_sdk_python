# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class LibraryItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'assets': 'list[LibraryItemAsset]',
        'categories': 'list[str]',
        'content': 'str',
        'description': 'str',
        'industries': 'list[str]',
        'library_item_oid': 'int',
        'merchant_id': 'str',
        'price': 'float',
        'price_formatted': 'str',
        'public_item': 'bool',
        'published_dts': 'str',
        'publishing_status': 'str',
        'purchase_history': 'int',
        'style': 'str',
        'title': 'str',
        'type': 'str',
        'verison': 'str'
    }

    attribute_map = {
        'assets': 'assets',
        'categories': 'categories',
        'content': 'content',
        'description': 'description',
        'industries': 'industries',
        'library_item_oid': 'library_item_oid',
        'merchant_id': 'merchant_id',
        'price': 'price',
        'price_formatted': 'price_formatted',
        'public_item': 'public_item',
        'published_dts': 'published_dts',
        'publishing_status': 'publishing_status',
        'purchase_history': 'purchase_history',
        'style': 'style',
        'title': 'title',
        'type': 'type',
        'verison': 'verison'
    }

    def __init__(self, assets=None, categories=None, content=None, description=None, industries=None, library_item_oid=None, merchant_id=None, price=None, price_formatted=None, public_item=None, published_dts=None, publishing_status=None, purchase_history=None, style=None, title=None, type=None, verison=None):  # noqa: E501
        """LibraryItem - a model defined in Swagger"""  # noqa: E501

        self._assets = None
        self._categories = None
        self._content = None
        self._description = None
        self._industries = None
        self._library_item_oid = None
        self._merchant_id = None
        self._price = None
        self._price_formatted = None
        self._public_item = None
        self._published_dts = None
        self._publishing_status = None
        self._purchase_history = None
        self._style = None
        self._title = None
        self._type = None
        self._verison = None
        self.discriminator = None

        if assets is not None:
            self.assets = assets
        if categories is not None:
            self.categories = categories
        if content is not None:
            self.content = content
        if description is not None:
            self.description = description
        if industries is not None:
            self.industries = industries
        if library_item_oid is not None:
            self.library_item_oid = library_item_oid
        if merchant_id is not None:
            self.merchant_id = merchant_id
        if price is not None:
            self.price = price
        if price_formatted is not None:
            self.price_formatted = price_formatted
        if public_item is not None:
            self.public_item = public_item
        if published_dts is not None:
            self.published_dts = published_dts
        if publishing_status is not None:
            self.publishing_status = publishing_status
        if purchase_history is not None:
            self.purchase_history = purchase_history
        if style is not None:
            self.style = style
        if title is not None:
            self.title = title
        if type is not None:
            self.type = type
        if verison is not None:
            self.verison = verison

    @property
    def assets(self):
        """Gets the assets of this LibraryItem.  # noqa: E501


        :return: The assets of this LibraryItem.  # noqa: E501
        :rtype: list[LibraryItemAsset]
        """
        return self._assets

    @assets.setter
    def assets(self, assets):
        """Sets the assets of this LibraryItem.


        :param assets: The assets of this LibraryItem.  # noqa: E501
        :type: list[LibraryItemAsset]
        """

        self._assets = assets

    @property
    def categories(self):
        """Gets the categories of this LibraryItem.  # noqa: E501


        :return: The categories of this LibraryItem.  # noqa: E501
        :rtype: list[str]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this LibraryItem.


        :param categories: The categories of this LibraryItem.  # noqa: E501
        :type: list[str]
        """

        self._categories = categories

    @property
    def content(self):
        """Gets the content of this LibraryItem.  # noqa: E501


        :return: The content of this LibraryItem.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this LibraryItem.


        :param content: The content of this LibraryItem.  # noqa: E501
        :type: str
        """

        self._content = content

    @property
    def description(self):
        """Gets the description of this LibraryItem.  # noqa: E501


        :return: The description of this LibraryItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this LibraryItem.


        :param description: The description of this LibraryItem.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def industries(self):
        """Gets the industries of this LibraryItem.  # noqa: E501


        :return: The industries of this LibraryItem.  # noqa: E501
        :rtype: list[str]
        """
        return self._industries

    @industries.setter
    def industries(self, industries):
        """Sets the industries of this LibraryItem.


        :param industries: The industries of this LibraryItem.  # noqa: E501
        :type: list[str]
        """

        self._industries = industries

    @property
    def library_item_oid(self):
        """Gets the library_item_oid of this LibraryItem.  # noqa: E501


        :return: The library_item_oid of this LibraryItem.  # noqa: E501
        :rtype: int
        """
        return self._library_item_oid

    @library_item_oid.setter
    def library_item_oid(self, library_item_oid):
        """Sets the library_item_oid of this LibraryItem.


        :param library_item_oid: The library_item_oid of this LibraryItem.  # noqa: E501
        :type: int
        """

        self._library_item_oid = library_item_oid

    @property
    def merchant_id(self):
        """Gets the merchant_id of this LibraryItem.  # noqa: E501


        :return: The merchant_id of this LibraryItem.  # noqa: E501
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this LibraryItem.


        :param merchant_id: The merchant_id of this LibraryItem.  # noqa: E501
        :type: str
        """

        self._merchant_id = merchant_id

    @property
    def price(self):
        """Gets the price of this LibraryItem.  # noqa: E501


        :return: The price of this LibraryItem.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this LibraryItem.


        :param price: The price of this LibraryItem.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def price_formatted(self):
        """Gets the price_formatted of this LibraryItem.  # noqa: E501


        :return: The price_formatted of this LibraryItem.  # noqa: E501
        :rtype: str
        """
        return self._price_formatted

    @price_formatted.setter
    def price_formatted(self, price_formatted):
        """Sets the price_formatted of this LibraryItem.


        :param price_formatted: The price_formatted of this LibraryItem.  # noqa: E501
        :type: str
        """

        self._price_formatted = price_formatted

    @property
    def public_item(self):
        """Gets the public_item of this LibraryItem.  # noqa: E501


        :return: The public_item of this LibraryItem.  # noqa: E501
        :rtype: bool
        """
        return self._public_item

    @public_item.setter
    def public_item(self, public_item):
        """Sets the public_item of this LibraryItem.


        :param public_item: The public_item of this LibraryItem.  # noqa: E501
        :type: bool
        """

        self._public_item = public_item

    @property
    def published_dts(self):
        """Gets the published_dts of this LibraryItem.  # noqa: E501


        :return: The published_dts of this LibraryItem.  # noqa: E501
        :rtype: str
        """
        return self._published_dts

    @published_dts.setter
    def published_dts(self, published_dts):
        """Sets the published_dts of this LibraryItem.


        :param published_dts: The published_dts of this LibraryItem.  # noqa: E501
        :type: str
        """

        self._published_dts = published_dts

    @property
    def publishing_status(self):
        """Gets the publishing_status of this LibraryItem.  # noqa: E501


        :return: The publishing_status of this LibraryItem.  # noqa: E501
        :rtype: str
        """
        return self._publishing_status

    @publishing_status.setter
    def publishing_status(self, publishing_status):
        """Sets the publishing_status of this LibraryItem.


        :param publishing_status: The publishing_status of this LibraryItem.  # noqa: E501
        :type: str
        """

        self._publishing_status = publishing_status

    @property
    def purchase_history(self):
        """Gets the purchase_history of this LibraryItem.  # noqa: E501


        :return: The purchase_history of this LibraryItem.  # noqa: E501
        :rtype: int
        """
        return self._purchase_history

    @purchase_history.setter
    def purchase_history(self, purchase_history):
        """Sets the purchase_history of this LibraryItem.


        :param purchase_history: The purchase_history of this LibraryItem.  # noqa: E501
        :type: int
        """

        self._purchase_history = purchase_history

    @property
    def style(self):
        """Gets the style of this LibraryItem.  # noqa: E501


        :return: The style of this LibraryItem.  # noqa: E501
        :rtype: str
        """
        return self._style

    @style.setter
    def style(self, style):
        """Sets the style of this LibraryItem.


        :param style: The style of this LibraryItem.  # noqa: E501
        :type: str
        """

        self._style = style

    @property
    def title(self):
        """Gets the title of this LibraryItem.  # noqa: E501


        :return: The title of this LibraryItem.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this LibraryItem.


        :param title: The title of this LibraryItem.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this LibraryItem.  # noqa: E501


        :return: The type of this LibraryItem.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this LibraryItem.


        :param type: The type of this LibraryItem.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def verison(self):
        """Gets the verison of this LibraryItem.  # noqa: E501


        :return: The verison of this LibraryItem.  # noqa: E501
        :rtype: str
        """
        return self._verison

    @verison.setter
    def verison(self, verison):
        """Sets the verison of this LibraryItem.


        :param verison: The verison of this LibraryItem.  # noqa: E501
        :type: str
        """

        self._verison = verison

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LibraryItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LibraryItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
