# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class LibraryItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'assets': 'list[LibraryItemAsset]',
        'categories': 'list[str]',
        'content': 'str',
        'content_type': 'str',
        'description': 'str',
        'industries': 'list[str]',
        'library_item_oid': 'int',
        'merchant_id': 'str',
        'my_purchased_version': 'int',
        'original_object_id': 'str',
        'price': 'float',
        'price_formatted': 'str',
        'published': 'bool',
        'published_dts': 'object',
        'published_from_library_item_oid': 'int',
        'published_meta': 'LibraryItemPublishedMeta',
        'published_version': 'int',
        'purchased': 'bool',
        'purchased_from_library_item_oid': 'int',
        'purchased_meta': 'LibraryItemPurchasedMeta',
        'purchased_version': 'int',
        'rejected': 'bool',
        'rejected_reason': 'str',
        'release_notes': 'str',
        'release_version': 'int',
        'reviewed': 'bool',
        'reviewed_dts': 'object',
        'screenshots': 'list[LibraryItemScreenshot]',
        'share_with_accounts': 'list[LibraryItemAccount]',
        'share_with_other_emails': 'list[LibraryItemEmail]',
        'shared': 'bool',
        'source': 'bool',
        'source_to_library_item_oid': 'int',
        'source_version': 'int',
        'style': 'str',
        'times_purchased': 'int',
        'title': 'str',
        'type': 'str',
        'under_review': 'bool'
    }

    attribute_map = {
        'assets': 'assets',
        'categories': 'categories',
        'content': 'content',
        'content_type': 'content_type',
        'description': 'description',
        'industries': 'industries',
        'library_item_oid': 'library_item_oid',
        'merchant_id': 'merchant_id',
        'my_purchased_version': 'my_purchased_version',
        'original_object_id': 'original_object_id',
        'price': 'price',
        'price_formatted': 'price_formatted',
        'published': 'published',
        'published_dts': 'published_dts',
        'published_from_library_item_oid': 'published_from_library_item_oid',
        'published_meta': 'published_meta',
        'published_version': 'published_version',
        'purchased': 'purchased',
        'purchased_from_library_item_oid': 'purchased_from_library_item_oid',
        'purchased_meta': 'purchased_meta',
        'purchased_version': 'purchased_version',
        'rejected': 'rejected',
        'rejected_reason': 'rejected_reason',
        'release_notes': 'release_notes',
        'release_version': 'release_version',
        'reviewed': 'reviewed',
        'reviewed_dts': 'reviewed_dts',
        'screenshots': 'screenshots',
        'share_with_accounts': 'share_with_accounts',
        'share_with_other_emails': 'share_with_other_emails',
        'shared': 'shared',
        'source': 'source',
        'source_to_library_item_oid': 'source_to_library_item_oid',
        'source_version': 'source_version',
        'style': 'style',
        'times_purchased': 'times_purchased',
        'title': 'title',
        'type': 'type',
        'under_review': 'under_review'
    }

    def __init__(self, assets=None, categories=None, content=None, content_type=None, description=None, industries=None, library_item_oid=None, merchant_id=None, my_purchased_version=None, original_object_id=None, price=None, price_formatted=None, published=None, published_dts=None, published_from_library_item_oid=None, published_meta=None, published_version=None, purchased=None, purchased_from_library_item_oid=None, purchased_meta=None, purchased_version=None, rejected=None, rejected_reason=None, release_notes=None, release_version=None, reviewed=None, reviewed_dts=None, screenshots=None, share_with_accounts=None, share_with_other_emails=None, shared=None, source=None, source_to_library_item_oid=None, source_version=None, style=None, times_purchased=None, title=None, type=None, under_review=None):  # noqa: E501
        """LibraryItem - a model defined in Swagger"""  # noqa: E501

        self._assets = None
        self._categories = None
        self._content = None
        self._content_type = None
        self._description = None
        self._industries = None
        self._library_item_oid = None
        self._merchant_id = None
        self._my_purchased_version = None
        self._original_object_id = None
        self._price = None
        self._price_formatted = None
        self._published = None
        self._published_dts = None
        self._published_from_library_item_oid = None
        self._published_meta = None
        self._published_version = None
        self._purchased = None
        self._purchased_from_library_item_oid = None
        self._purchased_meta = None
        self._purchased_version = None
        self._rejected = None
        self._rejected_reason = None
        self._release_notes = None
        self._release_version = None
        self._reviewed = None
        self._reviewed_dts = None
        self._screenshots = None
        self._share_with_accounts = None
        self._share_with_other_emails = None
        self._shared = None
        self._source = None
        self._source_to_library_item_oid = None
        self._source_version = None
        self._style = None
        self._times_purchased = None
        self._title = None
        self._type = None
        self._under_review = None
        self.discriminator = None

        if assets is not None:
            self.assets = assets
        if categories is not None:
            self.categories = categories
        if content is not None:
            self.content = content
        if content_type is not None:
            self.content_type = content_type
        if description is not None:
            self.description = description
        if industries is not None:
            self.industries = industries
        if library_item_oid is not None:
            self.library_item_oid = library_item_oid
        if merchant_id is not None:
            self.merchant_id = merchant_id
        if my_purchased_version is not None:
            self.my_purchased_version = my_purchased_version
        if original_object_id is not None:
            self.original_object_id = original_object_id
        if price is not None:
            self.price = price
        if price_formatted is not None:
            self.price_formatted = price_formatted
        if published is not None:
            self.published = published
        if published_dts is not None:
            self.published_dts = published_dts
        if published_from_library_item_oid is not None:
            self.published_from_library_item_oid = published_from_library_item_oid
        if published_meta is not None:
            self.published_meta = published_meta
        if published_version is not None:
            self.published_version = published_version
        if purchased is not None:
            self.purchased = purchased
        if purchased_from_library_item_oid is not None:
            self.purchased_from_library_item_oid = purchased_from_library_item_oid
        if purchased_meta is not None:
            self.purchased_meta = purchased_meta
        if purchased_version is not None:
            self.purchased_version = purchased_version
        if rejected is not None:
            self.rejected = rejected
        if rejected_reason is not None:
            self.rejected_reason = rejected_reason
        if release_notes is not None:
            self.release_notes = release_notes
        if release_version is not None:
            self.release_version = release_version
        if reviewed is not None:
            self.reviewed = reviewed
        if reviewed_dts is not None:
            self.reviewed_dts = reviewed_dts
        if screenshots is not None:
            self.screenshots = screenshots
        if share_with_accounts is not None:
            self.share_with_accounts = share_with_accounts
        if share_with_other_emails is not None:
            self.share_with_other_emails = share_with_other_emails
        if shared is not None:
            self.shared = shared
        if source is not None:
            self.source = source
        if source_to_library_item_oid is not None:
            self.source_to_library_item_oid = source_to_library_item_oid
        if source_version is not None:
            self.source_version = source_version
        if style is not None:
            self.style = style
        if times_purchased is not None:
            self.times_purchased = times_purchased
        if title is not None:
            self.title = title
        if type is not None:
            self.type = type
        if under_review is not None:
            self.under_review = under_review

    @property
    def assets(self):
        """Gets the assets of this LibraryItem.  # noqa: E501


        :return: The assets of this LibraryItem.  # noqa: E501
        :rtype: list[LibraryItemAsset]
        """
        return self._assets

    @assets.setter
    def assets(self, assets):
        """Sets the assets of this LibraryItem.


        :param assets: The assets of this LibraryItem.  # noqa: E501
        :type: list[LibraryItemAsset]
        """

        self._assets = assets

    @property
    def categories(self):
        """Gets the categories of this LibraryItem.  # noqa: E501


        :return: The categories of this LibraryItem.  # noqa: E501
        :rtype: list[str]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this LibraryItem.


        :param categories: The categories of this LibraryItem.  # noqa: E501
        :type: list[str]
        """

        self._categories = categories

    @property
    def content(self):
        """Gets the content of this LibraryItem.  # noqa: E501


        :return: The content of this LibraryItem.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this LibraryItem.


        :param content: The content of this LibraryItem.  # noqa: E501
        :type: str
        """

        self._content = content

    @property
    def content_type(self):
        """Gets the content_type of this LibraryItem.  # noqa: E501


        :return: The content_type of this LibraryItem.  # noqa: E501
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this LibraryItem.


        :param content_type: The content_type of this LibraryItem.  # noqa: E501
        :type: str
        """

        self._content_type = content_type

    @property
    def description(self):
        """Gets the description of this LibraryItem.  # noqa: E501


        :return: The description of this LibraryItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this LibraryItem.


        :param description: The description of this LibraryItem.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def industries(self):
        """Gets the industries of this LibraryItem.  # noqa: E501


        :return: The industries of this LibraryItem.  # noqa: E501
        :rtype: list[str]
        """
        return self._industries

    @industries.setter
    def industries(self, industries):
        """Sets the industries of this LibraryItem.


        :param industries: The industries of this LibraryItem.  # noqa: E501
        :type: list[str]
        """

        self._industries = industries

    @property
    def library_item_oid(self):
        """Gets the library_item_oid of this LibraryItem.  # noqa: E501


        :return: The library_item_oid of this LibraryItem.  # noqa: E501
        :rtype: int
        """
        return self._library_item_oid

    @library_item_oid.setter
    def library_item_oid(self, library_item_oid):
        """Sets the library_item_oid of this LibraryItem.


        :param library_item_oid: The library_item_oid of this LibraryItem.  # noqa: E501
        :type: int
        """

        self._library_item_oid = library_item_oid

    @property
    def merchant_id(self):
        """Gets the merchant_id of this LibraryItem.  # noqa: E501


        :return: The merchant_id of this LibraryItem.  # noqa: E501
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this LibraryItem.


        :param merchant_id: The merchant_id of this LibraryItem.  # noqa: E501
        :type: str
        """

        self._merchant_id = merchant_id

    @property
    def my_purchased_version(self):
        """Gets the my_purchased_version of this LibraryItem.  # noqa: E501

        If this is a public item and the merchant has already purchased it, this is their version.  If not yet purchased, this will be zero.  This value will only be populated during a searchPublicItems() call.  # noqa: E501

        :return: The my_purchased_version of this LibraryItem.  # noqa: E501
        :rtype: int
        """
        return self._my_purchased_version

    @my_purchased_version.setter
    def my_purchased_version(self, my_purchased_version):
        """Sets the my_purchased_version of this LibraryItem.

        If this is a public item and the merchant has already purchased it, this is their version.  If not yet purchased, this will be zero.  This value will only be populated during a searchPublicItems() call.  # noqa: E501

        :param my_purchased_version: The my_purchased_version of this LibraryItem.  # noqa: E501
        :type: int
        """

        self._my_purchased_version = my_purchased_version

    @property
    def original_object_id(self):
        """Gets the original_object_id of this LibraryItem.  # noqa: E501

        This id points to the original object that was added to the library. For flows and campaigns, this is a uuid string.  For upsells, it is an oid integer.  For transactional_emails, it is an email name.  # noqa: E501

        :return: The original_object_id of this LibraryItem.  # noqa: E501
        :rtype: str
        """
        return self._original_object_id

    @original_object_id.setter
    def original_object_id(self, original_object_id):
        """Sets the original_object_id of this LibraryItem.

        This id points to the original object that was added to the library. For flows and campaigns, this is a uuid string.  For upsells, it is an oid integer.  For transactional_emails, it is an email name.  # noqa: E501

        :param original_object_id: The original_object_id of this LibraryItem.  # noqa: E501
        :type: str
        """

        self._original_object_id = original_object_id

    @property
    def price(self):
        """Gets the price of this LibraryItem.  # noqa: E501

        The price of the published item.  Null for any private library items.  # noqa: E501

        :return: The price of this LibraryItem.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this LibraryItem.

        The price of the published item.  Null for any private library items.  # noqa: E501

        :param price: The price of this LibraryItem.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def price_formatted(self):
        """Gets the price_formatted of this LibraryItem.  # noqa: E501

        The formatted price of the published item.  Null for any private library items.  # noqa: E501

        :return: The price_formatted of this LibraryItem.  # noqa: E501
        :rtype: str
        """
        return self._price_formatted

    @price_formatted.setter
    def price_formatted(self, price_formatted):
        """Sets the price_formatted of this LibraryItem.

        The formatted price of the published item.  Null for any private library items.  # noqa: E501

        :param price_formatted: The price_formatted of this LibraryItem.  # noqa: E501
        :type: str
        """

        self._price_formatted = price_formatted

    @property
    def published(self):
        """Gets the published of this LibraryItem.  # noqa: E501

        True if this library item is a published item (not source)  # noqa: E501

        :return: The published of this LibraryItem.  # noqa: E501
        :rtype: bool
        """
        return self._published

    @published.setter
    def published(self, published):
        """Sets the published of this LibraryItem.

        True if this library item is a published item (not source)  # noqa: E501

        :param published: The published of this LibraryItem.  # noqa: E501
        :type: bool
        """

        self._published = published

    @property
    def published_dts(self):
        """Gets the published_dts of this LibraryItem.  # noqa: E501

        The timestamp of the last published version  # noqa: E501

        :return: The published_dts of this LibraryItem.  # noqa: E501
        :rtype: object
        """
        return self._published_dts

    @published_dts.setter
    def published_dts(self, published_dts):
        """Sets the published_dts of this LibraryItem.

        The timestamp of the last published version  # noqa: E501

        :param published_dts: The published_dts of this LibraryItem.  # noqa: E501
        :type: object
        """

        self._published_dts = published_dts

    @property
    def published_from_library_item_oid(self):
        """Gets the published_from_library_item_oid of this LibraryItem.  # noqa: E501

        The source item used to publish this item.  This allows for comparisons between source and published  # noqa: E501

        :return: The published_from_library_item_oid of this LibraryItem.  # noqa: E501
        :rtype: int
        """
        return self._published_from_library_item_oid

    @published_from_library_item_oid.setter
    def published_from_library_item_oid(self, published_from_library_item_oid):
        """Sets the published_from_library_item_oid of this LibraryItem.

        The source item used to publish this item.  This allows for comparisons between source and published  # noqa: E501

        :param published_from_library_item_oid: The published_from_library_item_oid of this LibraryItem.  # noqa: E501
        :type: int
        """

        self._published_from_library_item_oid = published_from_library_item_oid

    @property
    def published_meta(self):
        """Gets the published_meta of this LibraryItem.  # noqa: E501


        :return: The published_meta of this LibraryItem.  # noqa: E501
        :rtype: LibraryItemPublishedMeta
        """
        return self._published_meta

    @published_meta.setter
    def published_meta(self, published_meta):
        """Sets the published_meta of this LibraryItem.


        :param published_meta: The published_meta of this LibraryItem.  # noqa: E501
        :type: LibraryItemPublishedMeta
        """

        self._published_meta = published_meta

    @property
    def published_version(self):
        """Gets the published_version of this LibraryItem.  # noqa: E501

        The source version when this item was published.  This allows for out-of-date alerts to be shown when there is a difference between source and published  # noqa: E501

        :return: The published_version of this LibraryItem.  # noqa: E501
        :rtype: int
        """
        return self._published_version

    @published_version.setter
    def published_version(self, published_version):
        """Sets the published_version of this LibraryItem.

        The source version when this item was published.  This allows for out-of-date alerts to be shown when there is a difference between source and published  # noqa: E501

        :param published_version: The published_version of this LibraryItem.  # noqa: E501
        :type: int
        """

        self._published_version = published_version

    @property
    def purchased(self):
        """Gets the purchased of this LibraryItem.  # noqa: E501

        True if this library item has been purchased  # noqa: E501

        :return: The purchased of this LibraryItem.  # noqa: E501
        :rtype: bool
        """
        return self._purchased

    @purchased.setter
    def purchased(self, purchased):
        """Sets the purchased of this LibraryItem.

        True if this library item has been purchased  # noqa: E501

        :param purchased: The purchased of this LibraryItem.  # noqa: E501
        :type: bool
        """

        self._purchased = purchased

    @property
    def purchased_from_library_item_oid(self):
        """Gets the purchased_from_library_item_oid of this LibraryItem.  # noqa: E501

        The published item that was purchased to make this item.  This allows for comparisons between published and purchased  # noqa: E501

        :return: The purchased_from_library_item_oid of this LibraryItem.  # noqa: E501
        :rtype: int
        """
        return self._purchased_from_library_item_oid

    @purchased_from_library_item_oid.setter
    def purchased_from_library_item_oid(self, purchased_from_library_item_oid):
        """Sets the purchased_from_library_item_oid of this LibraryItem.

        The published item that was purchased to make this item.  This allows for comparisons between published and purchased  # noqa: E501

        :param purchased_from_library_item_oid: The purchased_from_library_item_oid of this LibraryItem.  # noqa: E501
        :type: int
        """

        self._purchased_from_library_item_oid = purchased_from_library_item_oid

    @property
    def purchased_meta(self):
        """Gets the purchased_meta of this LibraryItem.  # noqa: E501


        :return: The purchased_meta of this LibraryItem.  # noqa: E501
        :rtype: LibraryItemPurchasedMeta
        """
        return self._purchased_meta

    @purchased_meta.setter
    def purchased_meta(self, purchased_meta):
        """Sets the purchased_meta of this LibraryItem.


        :param purchased_meta: The purchased_meta of this LibraryItem.  # noqa: E501
        :type: LibraryItemPurchasedMeta
        """

        self._purchased_meta = purchased_meta

    @property
    def purchased_version(self):
        """Gets the purchased_version of this LibraryItem.  # noqa: E501

        The published version when this item was purchased.  This allows for out-of-date alerts to be shown when there is a difference between published and purchased  # noqa: E501

        :return: The purchased_version of this LibraryItem.  # noqa: E501
        :rtype: int
        """
        return self._purchased_version

    @purchased_version.setter
    def purchased_version(self, purchased_version):
        """Sets the purchased_version of this LibraryItem.

        The published version when this item was purchased.  This allows for out-of-date alerts to be shown when there is a difference between published and purchased  # noqa: E501

        :param purchased_version: The purchased_version of this LibraryItem.  # noqa: E501
        :type: int
        """

        self._purchased_version = purchased_version

    @property
    def rejected(self):
        """Gets the rejected of this LibraryItem.  # noqa: E501

        Any published library reviewed by UltraCart staff for malicious or inappropriate content will have this flag set to true.  This is always false for non-published items  # noqa: E501

        :return: The rejected of this LibraryItem.  # noqa: E501
        :rtype: bool
        """
        return self._rejected

    @rejected.setter
    def rejected(self, rejected):
        """Sets the rejected of this LibraryItem.

        Any published library reviewed by UltraCart staff for malicious or inappropriate content will have this flag set to true.  This is always false for non-published items  # noqa: E501

        :param rejected: The rejected of this LibraryItem.  # noqa: E501
        :type: bool
        """

        self._rejected = rejected

    @property
    def rejected_reason(self):
        """Gets the rejected_reason of this LibraryItem.  # noqa: E501

        Any rejected published item will have this field populated with the reason.  # noqa: E501

        :return: The rejected_reason of this LibraryItem.  # noqa: E501
        :rtype: str
        """
        return self._rejected_reason

    @rejected_reason.setter
    def rejected_reason(self, rejected_reason):
        """Sets the rejected_reason of this LibraryItem.

        Any rejected published item will have this field populated with the reason.  # noqa: E501

        :param rejected_reason: The rejected_reason of this LibraryItem.  # noqa: E501
        :type: str
        """

        self._rejected_reason = rejected_reason

    @property
    def release_notes(self):
        """Gets the release_notes of this LibraryItem.  # noqa: E501

        Release notes specific to each published version and only appearing on public items.  # noqa: E501

        :return: The release_notes of this LibraryItem.  # noqa: E501
        :rtype: str
        """
        return self._release_notes

    @release_notes.setter
    def release_notes(self, release_notes):
        """Sets the release_notes of this LibraryItem.

        Release notes specific to each published version and only appearing on public items.  # noqa: E501

        :param release_notes: The release_notes of this LibraryItem.  # noqa: E501
        :type: str
        """

        self._release_notes = release_notes

    @property
    def release_version(self):
        """Gets the release_version of this LibraryItem.  # noqa: E501

        This counter records how many times a library item has been published.  This is used to show version history.  # noqa: E501

        :return: The release_version of this LibraryItem.  # noqa: E501
        :rtype: int
        """
        return self._release_version

    @release_version.setter
    def release_version(self, release_version):
        """Sets the release_version of this LibraryItem.

        This counter records how many times a library item has been published.  This is used to show version history.  # noqa: E501

        :param release_version: The release_version of this LibraryItem.  # noqa: E501
        :type: int
        """

        self._release_version = release_version

    @property
    def reviewed(self):
        """Gets the reviewed of this LibraryItem.  # noqa: E501

        Any published library items must be reviewed by UltraCart staff for malicious content.  This flag shows the status of that review.  This is always false for non-published items  # noqa: E501

        :return: The reviewed of this LibraryItem.  # noqa: E501
        :rtype: bool
        """
        return self._reviewed

    @reviewed.setter
    def reviewed(self, reviewed):
        """Sets the reviewed of this LibraryItem.

        Any published library items must be reviewed by UltraCart staff for malicious content.  This flag shows the status of that review.  This is always false for non-published items  # noqa: E501

        :param reviewed: The reviewed of this LibraryItem.  # noqa: E501
        :type: bool
        """

        self._reviewed = reviewed

    @property
    def reviewed_dts(self):
        """Gets the reviewed_dts of this LibraryItem.  # noqa: E501

        This is the timestamp for a published items formal review by UltraCart staff for malicious content.  # noqa: E501

        :return: The reviewed_dts of this LibraryItem.  # noqa: E501
        :rtype: object
        """
        return self._reviewed_dts

    @reviewed_dts.setter
    def reviewed_dts(self, reviewed_dts):
        """Sets the reviewed_dts of this LibraryItem.

        This is the timestamp for a published items formal review by UltraCart staff for malicious content.  # noqa: E501

        :param reviewed_dts: The reviewed_dts of this LibraryItem.  # noqa: E501
        :type: object
        """

        self._reviewed_dts = reviewed_dts

    @property
    def screenshots(self):
        """Gets the screenshots of this LibraryItem.  # noqa: E501


        :return: The screenshots of this LibraryItem.  # noqa: E501
        :rtype: list[LibraryItemScreenshot]
        """
        return self._screenshots

    @screenshots.setter
    def screenshots(self, screenshots):
        """Sets the screenshots of this LibraryItem.


        :param screenshots: The screenshots of this LibraryItem.  # noqa: E501
        :type: list[LibraryItemScreenshot]
        """

        self._screenshots = screenshots

    @property
    def share_with_accounts(self):
        """Gets the share_with_accounts of this LibraryItem.  # noqa: E501


        :return: The share_with_accounts of this LibraryItem.  # noqa: E501
        :rtype: list[LibraryItemAccount]
        """
        return self._share_with_accounts

    @share_with_accounts.setter
    def share_with_accounts(self, share_with_accounts):
        """Sets the share_with_accounts of this LibraryItem.


        :param share_with_accounts: The share_with_accounts of this LibraryItem.  # noqa: E501
        :type: list[LibraryItemAccount]
        """

        self._share_with_accounts = share_with_accounts

    @property
    def share_with_other_emails(self):
        """Gets the share_with_other_emails of this LibraryItem.  # noqa: E501


        :return: The share_with_other_emails of this LibraryItem.  # noqa: E501
        :rtype: list[LibraryItemEmail]
        """
        return self._share_with_other_emails

    @share_with_other_emails.setter
    def share_with_other_emails(self, share_with_other_emails):
        """Sets the share_with_other_emails of this LibraryItem.


        :param share_with_other_emails: The share_with_other_emails of this LibraryItem.  # noqa: E501
        :type: list[LibraryItemEmail]
        """

        self._share_with_other_emails = share_with_other_emails

    @property
    def shared(self):
        """Gets the shared of this LibraryItem.  # noqa: E501

        True if this item is shared from another merchant account  # noqa: E501

        :return: The shared of this LibraryItem.  # noqa: E501
        :rtype: bool
        """
        return self._shared

    @shared.setter
    def shared(self, shared):
        """Sets the shared of this LibraryItem.

        True if this item is shared from another merchant account  # noqa: E501

        :param shared: The shared of this LibraryItem.  # noqa: E501
        :type: bool
        """

        self._shared = shared

    @property
    def source(self):
        """Gets the source of this LibraryItem.  # noqa: E501

        True if this library item has been published  # noqa: E501

        :return: The source of this LibraryItem.  # noqa: E501
        :rtype: bool
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this LibraryItem.

        True if this library item has been published  # noqa: E501

        :param source: The source of this LibraryItem.  # noqa: E501
        :type: bool
        """

        self._source = source

    @property
    def source_to_library_item_oid(self):
        """Gets the source_to_library_item_oid of this LibraryItem.  # noqa: E501

        This oid points to the published library item, if there is one.  # noqa: E501

        :return: The source_to_library_item_oid of this LibraryItem.  # noqa: E501
        :rtype: int
        """
        return self._source_to_library_item_oid

    @source_to_library_item_oid.setter
    def source_to_library_item_oid(self, source_to_library_item_oid):
        """Sets the source_to_library_item_oid of this LibraryItem.

        This oid points to the published library item, if there is one.  # noqa: E501

        :param source_to_library_item_oid: The source_to_library_item_oid of this LibraryItem.  # noqa: E501
        :type: int
        """

        self._source_to_library_item_oid = source_to_library_item_oid

    @property
    def source_version(self):
        """Gets the source_version of this LibraryItem.  # noqa: E501

        The version of this item.  Increment every time the item is saved.  # noqa: E501

        :return: The source_version of this LibraryItem.  # noqa: E501
        :rtype: int
        """
        return self._source_version

    @source_version.setter
    def source_version(self, source_version):
        """Sets the source_version of this LibraryItem.

        The version of this item.  Increment every time the item is saved.  # noqa: E501

        :param source_version: The source_version of this LibraryItem.  # noqa: E501
        :type: int
        """

        self._source_version = source_version

    @property
    def style(self):
        """Gets the style of this LibraryItem.  # noqa: E501


        :return: The style of this LibraryItem.  # noqa: E501
        :rtype: str
        """
        return self._style

    @style.setter
    def style(self, style):
        """Sets the style of this LibraryItem.


        :param style: The style of this LibraryItem.  # noqa: E501
        :type: str
        """

        self._style = style

    @property
    def times_purchased(self):
        """Gets the times_purchased of this LibraryItem.  # noqa: E501


        :return: The times_purchased of this LibraryItem.  # noqa: E501
        :rtype: int
        """
        return self._times_purchased

    @times_purchased.setter
    def times_purchased(self, times_purchased):
        """Sets the times_purchased of this LibraryItem.


        :param times_purchased: The times_purchased of this LibraryItem.  # noqa: E501
        :type: int
        """

        self._times_purchased = times_purchased

    @property
    def title(self):
        """Gets the title of this LibraryItem.  # noqa: E501


        :return: The title of this LibraryItem.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this LibraryItem.


        :param title: The title of this LibraryItem.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this LibraryItem.  # noqa: E501


        :return: The type of this LibraryItem.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this LibraryItem.


        :param type: The type of this LibraryItem.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def under_review(self):
        """Gets the under_review of this LibraryItem.  # noqa: E501

        True if this library item was published but is awaiting review from UltraCart staff.  # noqa: E501

        :return: The under_review of this LibraryItem.  # noqa: E501
        :rtype: bool
        """
        return self._under_review

    @under_review.setter
    def under_review(self, under_review):
        """Sets the under_review of this LibraryItem.

        True if this library item was published but is awaiting review from UltraCart staff.  # noqa: E501

        :param under_review: The under_review of this LibraryItem.  # noqa: E501
        :type: bool
        """

        self._under_review = under_review

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LibraryItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LibraryItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
