# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PaymentsConfigurationPayPal(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'accept_pay_pal': 'bool',
        'paypal_accounting_code': 'str',
        'paypal_api_password': 'str',
        'paypal_api_user_name': 'str',
        'paypal_certificate_on_file': 'bool',
        'paypal_deposit_to_account': 'str',
        'paypal_email': 'str',
        'paypal_environment': 'str',
        'paypal_header_image_url': 'str',
        'paypal_hide_bill_me_later': 'bool',
        'paypal_hide_express_checkout_on_view_cart': 'bool',
        'paypal_hide_for_unshipped_orders': 'bool',
        'paypal_hold_in_ar': 'bool',
        'paypal_landing_page': 'str',
        'paypal_mode': 'str',
        'paypal_private_key_password': 'str',
        'paypal_processing_fee': 'str',
        'paypal_processing_perc': 'str',
        'paypal_send_recurring': 'str',
        'paypal_show_card_logos_not_directly_supported': 'bool',
        'paypal_show_signature': 'bool',
        'paypal_signature': 'str',
        'paypal_solution_type': 'str',
        'paypal_summary_email': 'str',
        'paypal_summary_mode': 'str',
        'paypal_zero_dollar_penny': 'bool',
        'push_pay_pal': 'bool',
        'restrictions': 'PaymentsConfigurationRestrictions',
        'short_pay_pal_marketing_text': 'bool'
    }

    attribute_map = {
        'accept_pay_pal': 'acceptPayPal',
        'paypal_accounting_code': 'paypalAccountingCode',
        'paypal_api_password': 'paypalApiPassword',
        'paypal_api_user_name': 'paypalApiUserName',
        'paypal_certificate_on_file': 'paypalCertificateOnFile',
        'paypal_deposit_to_account': 'paypalDepositToAccount',
        'paypal_email': 'paypalEmail',
        'paypal_environment': 'paypalEnvironment',
        'paypal_header_image_url': 'paypalHeaderImageUrl',
        'paypal_hide_bill_me_later': 'paypalHideBillMeLater',
        'paypal_hide_express_checkout_on_view_cart': 'paypalHideExpressCheckoutOnViewCart',
        'paypal_hide_for_unshipped_orders': 'paypalHideForUnshippedOrders',
        'paypal_hold_in_ar': 'paypalHoldInAR',
        'paypal_landing_page': 'paypalLandingPage',
        'paypal_mode': 'paypalMode',
        'paypal_private_key_password': 'paypalPrivateKeyPassword',
        'paypal_processing_fee': 'paypalProcessingFee',
        'paypal_processing_perc': 'paypalProcessingPerc',
        'paypal_send_recurring': 'paypalSendRecurring',
        'paypal_show_card_logos_not_directly_supported': 'paypalShowCardLogosNotDirectlySupported',
        'paypal_show_signature': 'paypalShowSignature',
        'paypal_signature': 'paypalSignature',
        'paypal_solution_type': 'paypalSolutionType',
        'paypal_summary_email': 'paypalSummaryEmail',
        'paypal_summary_mode': 'paypalSummaryMode',
        'paypal_zero_dollar_penny': 'paypalZeroDollarPenny',
        'push_pay_pal': 'pushPayPal',
        'restrictions': 'restrictions',
        'short_pay_pal_marketing_text': 'shortPayPalMarketingText'
    }

    def __init__(self, accept_pay_pal=None, paypal_accounting_code=None, paypal_api_password=None, paypal_api_user_name=None, paypal_certificate_on_file=None, paypal_deposit_to_account=None, paypal_email=None, paypal_environment=None, paypal_header_image_url=None, paypal_hide_bill_me_later=None, paypal_hide_express_checkout_on_view_cart=None, paypal_hide_for_unshipped_orders=None, paypal_hold_in_ar=None, paypal_landing_page=None, paypal_mode=None, paypal_private_key_password=None, paypal_processing_fee=None, paypal_processing_perc=None, paypal_send_recurring=None, paypal_show_card_logos_not_directly_supported=None, paypal_show_signature=None, paypal_signature=None, paypal_solution_type=None, paypal_summary_email=None, paypal_summary_mode=None, paypal_zero_dollar_penny=None, push_pay_pal=None, restrictions=None, short_pay_pal_marketing_text=None):  # noqa: E501
        """PaymentsConfigurationPayPal - a model defined in Swagger"""  # noqa: E501

        self._accept_pay_pal = None
        self._paypal_accounting_code = None
        self._paypal_api_password = None
        self._paypal_api_user_name = None
        self._paypal_certificate_on_file = None
        self._paypal_deposit_to_account = None
        self._paypal_email = None
        self._paypal_environment = None
        self._paypal_header_image_url = None
        self._paypal_hide_bill_me_later = None
        self._paypal_hide_express_checkout_on_view_cart = None
        self._paypal_hide_for_unshipped_orders = None
        self._paypal_hold_in_ar = None
        self._paypal_landing_page = None
        self._paypal_mode = None
        self._paypal_private_key_password = None
        self._paypal_processing_fee = None
        self._paypal_processing_perc = None
        self._paypal_send_recurring = None
        self._paypal_show_card_logos_not_directly_supported = None
        self._paypal_show_signature = None
        self._paypal_signature = None
        self._paypal_solution_type = None
        self._paypal_summary_email = None
        self._paypal_summary_mode = None
        self._paypal_zero_dollar_penny = None
        self._push_pay_pal = None
        self._restrictions = None
        self._short_pay_pal_marketing_text = None
        self.discriminator = None

        if accept_pay_pal is not None:
            self.accept_pay_pal = accept_pay_pal
        if paypal_accounting_code is not None:
            self.paypal_accounting_code = paypal_accounting_code
        if paypal_api_password is not None:
            self.paypal_api_password = paypal_api_password
        if paypal_api_user_name is not None:
            self.paypal_api_user_name = paypal_api_user_name
        if paypal_certificate_on_file is not None:
            self.paypal_certificate_on_file = paypal_certificate_on_file
        if paypal_deposit_to_account is not None:
            self.paypal_deposit_to_account = paypal_deposit_to_account
        if paypal_email is not None:
            self.paypal_email = paypal_email
        if paypal_environment is not None:
            self.paypal_environment = paypal_environment
        if paypal_header_image_url is not None:
            self.paypal_header_image_url = paypal_header_image_url
        if paypal_hide_bill_me_later is not None:
            self.paypal_hide_bill_me_later = paypal_hide_bill_me_later
        if paypal_hide_express_checkout_on_view_cart is not None:
            self.paypal_hide_express_checkout_on_view_cart = paypal_hide_express_checkout_on_view_cart
        if paypal_hide_for_unshipped_orders is not None:
            self.paypal_hide_for_unshipped_orders = paypal_hide_for_unshipped_orders
        if paypal_hold_in_ar is not None:
            self.paypal_hold_in_ar = paypal_hold_in_ar
        if paypal_landing_page is not None:
            self.paypal_landing_page = paypal_landing_page
        if paypal_mode is not None:
            self.paypal_mode = paypal_mode
        if paypal_private_key_password is not None:
            self.paypal_private_key_password = paypal_private_key_password
        if paypal_processing_fee is not None:
            self.paypal_processing_fee = paypal_processing_fee
        if paypal_processing_perc is not None:
            self.paypal_processing_perc = paypal_processing_perc
        if paypal_send_recurring is not None:
            self.paypal_send_recurring = paypal_send_recurring
        if paypal_show_card_logos_not_directly_supported is not None:
            self.paypal_show_card_logos_not_directly_supported = paypal_show_card_logos_not_directly_supported
        if paypal_show_signature is not None:
            self.paypal_show_signature = paypal_show_signature
        if paypal_signature is not None:
            self.paypal_signature = paypal_signature
        if paypal_solution_type is not None:
            self.paypal_solution_type = paypal_solution_type
        if paypal_summary_email is not None:
            self.paypal_summary_email = paypal_summary_email
        if paypal_summary_mode is not None:
            self.paypal_summary_mode = paypal_summary_mode
        if paypal_zero_dollar_penny is not None:
            self.paypal_zero_dollar_penny = paypal_zero_dollar_penny
        if push_pay_pal is not None:
            self.push_pay_pal = push_pay_pal
        if restrictions is not None:
            self.restrictions = restrictions
        if short_pay_pal_marketing_text is not None:
            self.short_pay_pal_marketing_text = short_pay_pal_marketing_text

    @property
    def accept_pay_pal(self):
        """Gets the accept_pay_pal of this PaymentsConfigurationPayPal.  # noqa: E501


        :return: The accept_pay_pal of this PaymentsConfigurationPayPal.  # noqa: E501
        :rtype: bool
        """
        return self._accept_pay_pal

    @accept_pay_pal.setter
    def accept_pay_pal(self, accept_pay_pal):
        """Sets the accept_pay_pal of this PaymentsConfigurationPayPal.


        :param accept_pay_pal: The accept_pay_pal of this PaymentsConfigurationPayPal.  # noqa: E501
        :type: bool
        """

        self._accept_pay_pal = accept_pay_pal

    @property
    def paypal_accounting_code(self):
        """Gets the paypal_accounting_code of this PaymentsConfigurationPayPal.  # noqa: E501


        :return: The paypal_accounting_code of this PaymentsConfigurationPayPal.  # noqa: E501
        :rtype: str
        """
        return self._paypal_accounting_code

    @paypal_accounting_code.setter
    def paypal_accounting_code(self, paypal_accounting_code):
        """Sets the paypal_accounting_code of this PaymentsConfigurationPayPal.


        :param paypal_accounting_code: The paypal_accounting_code of this PaymentsConfigurationPayPal.  # noqa: E501
        :type: str
        """

        self._paypal_accounting_code = paypal_accounting_code

    @property
    def paypal_api_password(self):
        """Gets the paypal_api_password of this PaymentsConfigurationPayPal.  # noqa: E501


        :return: The paypal_api_password of this PaymentsConfigurationPayPal.  # noqa: E501
        :rtype: str
        """
        return self._paypal_api_password

    @paypal_api_password.setter
    def paypal_api_password(self, paypal_api_password):
        """Sets the paypal_api_password of this PaymentsConfigurationPayPal.


        :param paypal_api_password: The paypal_api_password of this PaymentsConfigurationPayPal.  # noqa: E501
        :type: str
        """

        self._paypal_api_password = paypal_api_password

    @property
    def paypal_api_user_name(self):
        """Gets the paypal_api_user_name of this PaymentsConfigurationPayPal.  # noqa: E501


        :return: The paypal_api_user_name of this PaymentsConfigurationPayPal.  # noqa: E501
        :rtype: str
        """
        return self._paypal_api_user_name

    @paypal_api_user_name.setter
    def paypal_api_user_name(self, paypal_api_user_name):
        """Sets the paypal_api_user_name of this PaymentsConfigurationPayPal.


        :param paypal_api_user_name: The paypal_api_user_name of this PaymentsConfigurationPayPal.  # noqa: E501
        :type: str
        """

        self._paypal_api_user_name = paypal_api_user_name

    @property
    def paypal_certificate_on_file(self):
        """Gets the paypal_certificate_on_file of this PaymentsConfigurationPayPal.  # noqa: E501


        :return: The paypal_certificate_on_file of this PaymentsConfigurationPayPal.  # noqa: E501
        :rtype: bool
        """
        return self._paypal_certificate_on_file

    @paypal_certificate_on_file.setter
    def paypal_certificate_on_file(self, paypal_certificate_on_file):
        """Sets the paypal_certificate_on_file of this PaymentsConfigurationPayPal.


        :param paypal_certificate_on_file: The paypal_certificate_on_file of this PaymentsConfigurationPayPal.  # noqa: E501
        :type: bool
        """

        self._paypal_certificate_on_file = paypal_certificate_on_file

    @property
    def paypal_deposit_to_account(self):
        """Gets the paypal_deposit_to_account of this PaymentsConfigurationPayPal.  # noqa: E501


        :return: The paypal_deposit_to_account of this PaymentsConfigurationPayPal.  # noqa: E501
        :rtype: str
        """
        return self._paypal_deposit_to_account

    @paypal_deposit_to_account.setter
    def paypal_deposit_to_account(self, paypal_deposit_to_account):
        """Sets the paypal_deposit_to_account of this PaymentsConfigurationPayPal.


        :param paypal_deposit_to_account: The paypal_deposit_to_account of this PaymentsConfigurationPayPal.  # noqa: E501
        :type: str
        """

        self._paypal_deposit_to_account = paypal_deposit_to_account

    @property
    def paypal_email(self):
        """Gets the paypal_email of this PaymentsConfigurationPayPal.  # noqa: E501


        :return: The paypal_email of this PaymentsConfigurationPayPal.  # noqa: E501
        :rtype: str
        """
        return self._paypal_email

    @paypal_email.setter
    def paypal_email(self, paypal_email):
        """Sets the paypal_email of this PaymentsConfigurationPayPal.


        :param paypal_email: The paypal_email of this PaymentsConfigurationPayPal.  # noqa: E501
        :type: str
        """

        self._paypal_email = paypal_email

    @property
    def paypal_environment(self):
        """Gets the paypal_environment of this PaymentsConfigurationPayPal.  # noqa: E501


        :return: The paypal_environment of this PaymentsConfigurationPayPal.  # noqa: E501
        :rtype: str
        """
        return self._paypal_environment

    @paypal_environment.setter
    def paypal_environment(self, paypal_environment):
        """Sets the paypal_environment of this PaymentsConfigurationPayPal.


        :param paypal_environment: The paypal_environment of this PaymentsConfigurationPayPal.  # noqa: E501
        :type: str
        """

        self._paypal_environment = paypal_environment

    @property
    def paypal_header_image_url(self):
        """Gets the paypal_header_image_url of this PaymentsConfigurationPayPal.  # noqa: E501


        :return: The paypal_header_image_url of this PaymentsConfigurationPayPal.  # noqa: E501
        :rtype: str
        """
        return self._paypal_header_image_url

    @paypal_header_image_url.setter
    def paypal_header_image_url(self, paypal_header_image_url):
        """Sets the paypal_header_image_url of this PaymentsConfigurationPayPal.


        :param paypal_header_image_url: The paypal_header_image_url of this PaymentsConfigurationPayPal.  # noqa: E501
        :type: str
        """

        self._paypal_header_image_url = paypal_header_image_url

    @property
    def paypal_hide_bill_me_later(self):
        """Gets the paypal_hide_bill_me_later of this PaymentsConfigurationPayPal.  # noqa: E501


        :return: The paypal_hide_bill_me_later of this PaymentsConfigurationPayPal.  # noqa: E501
        :rtype: bool
        """
        return self._paypal_hide_bill_me_later

    @paypal_hide_bill_me_later.setter
    def paypal_hide_bill_me_later(self, paypal_hide_bill_me_later):
        """Sets the paypal_hide_bill_me_later of this PaymentsConfigurationPayPal.


        :param paypal_hide_bill_me_later: The paypal_hide_bill_me_later of this PaymentsConfigurationPayPal.  # noqa: E501
        :type: bool
        """

        self._paypal_hide_bill_me_later = paypal_hide_bill_me_later

    @property
    def paypal_hide_express_checkout_on_view_cart(self):
        """Gets the paypal_hide_express_checkout_on_view_cart of this PaymentsConfigurationPayPal.  # noqa: E501


        :return: The paypal_hide_express_checkout_on_view_cart of this PaymentsConfigurationPayPal.  # noqa: E501
        :rtype: bool
        """
        return self._paypal_hide_express_checkout_on_view_cart

    @paypal_hide_express_checkout_on_view_cart.setter
    def paypal_hide_express_checkout_on_view_cart(self, paypal_hide_express_checkout_on_view_cart):
        """Sets the paypal_hide_express_checkout_on_view_cart of this PaymentsConfigurationPayPal.


        :param paypal_hide_express_checkout_on_view_cart: The paypal_hide_express_checkout_on_view_cart of this PaymentsConfigurationPayPal.  # noqa: E501
        :type: bool
        """

        self._paypal_hide_express_checkout_on_view_cart = paypal_hide_express_checkout_on_view_cart

    @property
    def paypal_hide_for_unshipped_orders(self):
        """Gets the paypal_hide_for_unshipped_orders of this PaymentsConfigurationPayPal.  # noqa: E501


        :return: The paypal_hide_for_unshipped_orders of this PaymentsConfigurationPayPal.  # noqa: E501
        :rtype: bool
        """
        return self._paypal_hide_for_unshipped_orders

    @paypal_hide_for_unshipped_orders.setter
    def paypal_hide_for_unshipped_orders(self, paypal_hide_for_unshipped_orders):
        """Sets the paypal_hide_for_unshipped_orders of this PaymentsConfigurationPayPal.


        :param paypal_hide_for_unshipped_orders: The paypal_hide_for_unshipped_orders of this PaymentsConfigurationPayPal.  # noqa: E501
        :type: bool
        """

        self._paypal_hide_for_unshipped_orders = paypal_hide_for_unshipped_orders

    @property
    def paypal_hold_in_ar(self):
        """Gets the paypal_hold_in_ar of this PaymentsConfigurationPayPal.  # noqa: E501


        :return: The paypal_hold_in_ar of this PaymentsConfigurationPayPal.  # noqa: E501
        :rtype: bool
        """
        return self._paypal_hold_in_ar

    @paypal_hold_in_ar.setter
    def paypal_hold_in_ar(self, paypal_hold_in_ar):
        """Sets the paypal_hold_in_ar of this PaymentsConfigurationPayPal.


        :param paypal_hold_in_ar: The paypal_hold_in_ar of this PaymentsConfigurationPayPal.  # noqa: E501
        :type: bool
        """

        self._paypal_hold_in_ar = paypal_hold_in_ar

    @property
    def paypal_landing_page(self):
        """Gets the paypal_landing_page of this PaymentsConfigurationPayPal.  # noqa: E501


        :return: The paypal_landing_page of this PaymentsConfigurationPayPal.  # noqa: E501
        :rtype: str
        """
        return self._paypal_landing_page

    @paypal_landing_page.setter
    def paypal_landing_page(self, paypal_landing_page):
        """Sets the paypal_landing_page of this PaymentsConfigurationPayPal.


        :param paypal_landing_page: The paypal_landing_page of this PaymentsConfigurationPayPal.  # noqa: E501
        :type: str
        """

        self._paypal_landing_page = paypal_landing_page

    @property
    def paypal_mode(self):
        """Gets the paypal_mode of this PaymentsConfigurationPayPal.  # noqa: E501


        :return: The paypal_mode of this PaymentsConfigurationPayPal.  # noqa: E501
        :rtype: str
        """
        return self._paypal_mode

    @paypal_mode.setter
    def paypal_mode(self, paypal_mode):
        """Sets the paypal_mode of this PaymentsConfigurationPayPal.


        :param paypal_mode: The paypal_mode of this PaymentsConfigurationPayPal.  # noqa: E501
        :type: str
        """

        self._paypal_mode = paypal_mode

    @property
    def paypal_private_key_password(self):
        """Gets the paypal_private_key_password of this PaymentsConfigurationPayPal.  # noqa: E501


        :return: The paypal_private_key_password of this PaymentsConfigurationPayPal.  # noqa: E501
        :rtype: str
        """
        return self._paypal_private_key_password

    @paypal_private_key_password.setter
    def paypal_private_key_password(self, paypal_private_key_password):
        """Sets the paypal_private_key_password of this PaymentsConfigurationPayPal.


        :param paypal_private_key_password: The paypal_private_key_password of this PaymentsConfigurationPayPal.  # noqa: E501
        :type: str
        """

        self._paypal_private_key_password = paypal_private_key_password

    @property
    def paypal_processing_fee(self):
        """Gets the paypal_processing_fee of this PaymentsConfigurationPayPal.  # noqa: E501


        :return: The paypal_processing_fee of this PaymentsConfigurationPayPal.  # noqa: E501
        :rtype: str
        """
        return self._paypal_processing_fee

    @paypal_processing_fee.setter
    def paypal_processing_fee(self, paypal_processing_fee):
        """Sets the paypal_processing_fee of this PaymentsConfigurationPayPal.


        :param paypal_processing_fee: The paypal_processing_fee of this PaymentsConfigurationPayPal.  # noqa: E501
        :type: str
        """

        self._paypal_processing_fee = paypal_processing_fee

    @property
    def paypal_processing_perc(self):
        """Gets the paypal_processing_perc of this PaymentsConfigurationPayPal.  # noqa: E501


        :return: The paypal_processing_perc of this PaymentsConfigurationPayPal.  # noqa: E501
        :rtype: str
        """
        return self._paypal_processing_perc

    @paypal_processing_perc.setter
    def paypal_processing_perc(self, paypal_processing_perc):
        """Sets the paypal_processing_perc of this PaymentsConfigurationPayPal.


        :param paypal_processing_perc: The paypal_processing_perc of this PaymentsConfigurationPayPal.  # noqa: E501
        :type: str
        """

        self._paypal_processing_perc = paypal_processing_perc

    @property
    def paypal_send_recurring(self):
        """Gets the paypal_send_recurring of this PaymentsConfigurationPayPal.  # noqa: E501


        :return: The paypal_send_recurring of this PaymentsConfigurationPayPal.  # noqa: E501
        :rtype: str
        """
        return self._paypal_send_recurring

    @paypal_send_recurring.setter
    def paypal_send_recurring(self, paypal_send_recurring):
        """Sets the paypal_send_recurring of this PaymentsConfigurationPayPal.


        :param paypal_send_recurring: The paypal_send_recurring of this PaymentsConfigurationPayPal.  # noqa: E501
        :type: str
        """

        self._paypal_send_recurring = paypal_send_recurring

    @property
    def paypal_show_card_logos_not_directly_supported(self):
        """Gets the paypal_show_card_logos_not_directly_supported of this PaymentsConfigurationPayPal.  # noqa: E501


        :return: The paypal_show_card_logos_not_directly_supported of this PaymentsConfigurationPayPal.  # noqa: E501
        :rtype: bool
        """
        return self._paypal_show_card_logos_not_directly_supported

    @paypal_show_card_logos_not_directly_supported.setter
    def paypal_show_card_logos_not_directly_supported(self, paypal_show_card_logos_not_directly_supported):
        """Sets the paypal_show_card_logos_not_directly_supported of this PaymentsConfigurationPayPal.


        :param paypal_show_card_logos_not_directly_supported: The paypal_show_card_logos_not_directly_supported of this PaymentsConfigurationPayPal.  # noqa: E501
        :type: bool
        """

        self._paypal_show_card_logos_not_directly_supported = paypal_show_card_logos_not_directly_supported

    @property
    def paypal_show_signature(self):
        """Gets the paypal_show_signature of this PaymentsConfigurationPayPal.  # noqa: E501


        :return: The paypal_show_signature of this PaymentsConfigurationPayPal.  # noqa: E501
        :rtype: bool
        """
        return self._paypal_show_signature

    @paypal_show_signature.setter
    def paypal_show_signature(self, paypal_show_signature):
        """Sets the paypal_show_signature of this PaymentsConfigurationPayPal.


        :param paypal_show_signature: The paypal_show_signature of this PaymentsConfigurationPayPal.  # noqa: E501
        :type: bool
        """

        self._paypal_show_signature = paypal_show_signature

    @property
    def paypal_signature(self):
        """Gets the paypal_signature of this PaymentsConfigurationPayPal.  # noqa: E501


        :return: The paypal_signature of this PaymentsConfigurationPayPal.  # noqa: E501
        :rtype: str
        """
        return self._paypal_signature

    @paypal_signature.setter
    def paypal_signature(self, paypal_signature):
        """Sets the paypal_signature of this PaymentsConfigurationPayPal.


        :param paypal_signature: The paypal_signature of this PaymentsConfigurationPayPal.  # noqa: E501
        :type: str
        """

        self._paypal_signature = paypal_signature

    @property
    def paypal_solution_type(self):
        """Gets the paypal_solution_type of this PaymentsConfigurationPayPal.  # noqa: E501


        :return: The paypal_solution_type of this PaymentsConfigurationPayPal.  # noqa: E501
        :rtype: str
        """
        return self._paypal_solution_type

    @paypal_solution_type.setter
    def paypal_solution_type(self, paypal_solution_type):
        """Sets the paypal_solution_type of this PaymentsConfigurationPayPal.


        :param paypal_solution_type: The paypal_solution_type of this PaymentsConfigurationPayPal.  # noqa: E501
        :type: str
        """

        self._paypal_solution_type = paypal_solution_type

    @property
    def paypal_summary_email(self):
        """Gets the paypal_summary_email of this PaymentsConfigurationPayPal.  # noqa: E501


        :return: The paypal_summary_email of this PaymentsConfigurationPayPal.  # noqa: E501
        :rtype: str
        """
        return self._paypal_summary_email

    @paypal_summary_email.setter
    def paypal_summary_email(self, paypal_summary_email):
        """Sets the paypal_summary_email of this PaymentsConfigurationPayPal.


        :param paypal_summary_email: The paypal_summary_email of this PaymentsConfigurationPayPal.  # noqa: E501
        :type: str
        """

        self._paypal_summary_email = paypal_summary_email

    @property
    def paypal_summary_mode(self):
        """Gets the paypal_summary_mode of this PaymentsConfigurationPayPal.  # noqa: E501


        :return: The paypal_summary_mode of this PaymentsConfigurationPayPal.  # noqa: E501
        :rtype: str
        """
        return self._paypal_summary_mode

    @paypal_summary_mode.setter
    def paypal_summary_mode(self, paypal_summary_mode):
        """Sets the paypal_summary_mode of this PaymentsConfigurationPayPal.


        :param paypal_summary_mode: The paypal_summary_mode of this PaymentsConfigurationPayPal.  # noqa: E501
        :type: str
        """

        self._paypal_summary_mode = paypal_summary_mode

    @property
    def paypal_zero_dollar_penny(self):
        """Gets the paypal_zero_dollar_penny of this PaymentsConfigurationPayPal.  # noqa: E501


        :return: The paypal_zero_dollar_penny of this PaymentsConfigurationPayPal.  # noqa: E501
        :rtype: bool
        """
        return self._paypal_zero_dollar_penny

    @paypal_zero_dollar_penny.setter
    def paypal_zero_dollar_penny(self, paypal_zero_dollar_penny):
        """Sets the paypal_zero_dollar_penny of this PaymentsConfigurationPayPal.


        :param paypal_zero_dollar_penny: The paypal_zero_dollar_penny of this PaymentsConfigurationPayPal.  # noqa: E501
        :type: bool
        """

        self._paypal_zero_dollar_penny = paypal_zero_dollar_penny

    @property
    def push_pay_pal(self):
        """Gets the push_pay_pal of this PaymentsConfigurationPayPal.  # noqa: E501


        :return: The push_pay_pal of this PaymentsConfigurationPayPal.  # noqa: E501
        :rtype: bool
        """
        return self._push_pay_pal

    @push_pay_pal.setter
    def push_pay_pal(self, push_pay_pal):
        """Sets the push_pay_pal of this PaymentsConfigurationPayPal.


        :param push_pay_pal: The push_pay_pal of this PaymentsConfigurationPayPal.  # noqa: E501
        :type: bool
        """

        self._push_pay_pal = push_pay_pal

    @property
    def restrictions(self):
        """Gets the restrictions of this PaymentsConfigurationPayPal.  # noqa: E501


        :return: The restrictions of this PaymentsConfigurationPayPal.  # noqa: E501
        :rtype: PaymentsConfigurationRestrictions
        """
        return self._restrictions

    @restrictions.setter
    def restrictions(self, restrictions):
        """Sets the restrictions of this PaymentsConfigurationPayPal.


        :param restrictions: The restrictions of this PaymentsConfigurationPayPal.  # noqa: E501
        :type: PaymentsConfigurationRestrictions
        """

        self._restrictions = restrictions

    @property
    def short_pay_pal_marketing_text(self):
        """Gets the short_pay_pal_marketing_text of this PaymentsConfigurationPayPal.  # noqa: E501


        :return: The short_pay_pal_marketing_text of this PaymentsConfigurationPayPal.  # noqa: E501
        :rtype: bool
        """
        return self._short_pay_pal_marketing_text

    @short_pay_pal_marketing_text.setter
    def short_pay_pal_marketing_text(self, short_pay_pal_marketing_text):
        """Sets the short_pay_pal_marketing_text of this PaymentsConfigurationPayPal.


        :param short_pay_pal_marketing_text: The short_pay_pal_marketing_text of this PaymentsConfigurationPayPal.  # noqa: E501
        :type: bool
        """

        self._short_pay_pal_marketing_text = short_pay_pal_marketing_text

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaymentsConfigurationPayPal, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentsConfigurationPayPal):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
