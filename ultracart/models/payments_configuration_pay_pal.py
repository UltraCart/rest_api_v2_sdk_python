# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PaymentsConfigurationPayPal(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'accept_paypal': 'bool',
        'accounting_code': 'str',
        'api_password': 'str',
        'api_username': 'str',
        'certificate_on_file': 'bool',
        'deposit_to_account': 'str',
        'email': 'str',
        'environment': 'str',
        'header_image_url': 'str',
        'hide_bill_me_later': 'bool',
        'hide_express_checkout_on_view_cart': 'bool',
        'hide_for_unshipped_orders': 'bool',
        'hold_in_ar': 'bool',
        'landing_page': 'str',
        'mode': 'str',
        'private_key_password': 'str',
        'processing_fee': 'float',
        'processing_percentage': 'float',
        'push_paypal': 'bool',
        'restrictions': 'PaymentsConfigurationRestrictions',
        'send_recurring': 'bool',
        'short_paypal_marketing_text': 'bool',
        'show_card_logos_not_directly_supported': 'bool',
        'show_signature': 'bool',
        'signature': 'str',
        'solution_type': 'str',
        'summary_email': 'str',
        'summary_mode': 'str',
        'zero_dollar_penny': 'bool'
    }

    attribute_map = {
        'accept_paypal': 'accept_paypal',
        'accounting_code': 'accounting_code',
        'api_password': 'api_password',
        'api_username': 'api_username',
        'certificate_on_file': 'certificate_on_file',
        'deposit_to_account': 'deposit_to_account',
        'email': 'email',
        'environment': 'environment',
        'header_image_url': 'header_image_url',
        'hide_bill_me_later': 'hide_bill_me_later',
        'hide_express_checkout_on_view_cart': 'hide_express_checkout_on_view_cart',
        'hide_for_unshipped_orders': 'hide_for_unshipped_orders',
        'hold_in_ar': 'hold_in_ar',
        'landing_page': 'landing_page',
        'mode': 'mode',
        'private_key_password': 'private_key_password',
        'processing_fee': 'processing_fee',
        'processing_percentage': 'processing_percentage',
        'push_paypal': 'push_paypal',
        'restrictions': 'restrictions',
        'send_recurring': 'send_recurring',
        'short_paypal_marketing_text': 'short_paypal_marketing_text',
        'show_card_logos_not_directly_supported': 'show_card_logos_not_directly_supported',
        'show_signature': 'show_signature',
        'signature': 'signature',
        'solution_type': 'solution_type',
        'summary_email': 'summary_email',
        'summary_mode': 'summary_mode',
        'zero_dollar_penny': 'zero_dollar_penny'
    }

    def __init__(self, accept_paypal=None, accounting_code=None, api_password=None, api_username=None, certificate_on_file=None, deposit_to_account=None, email=None, environment=None, header_image_url=None, hide_bill_me_later=None, hide_express_checkout_on_view_cart=None, hide_for_unshipped_orders=None, hold_in_ar=None, landing_page=None, mode=None, private_key_password=None, processing_fee=None, processing_percentage=None, push_paypal=None, restrictions=None, send_recurring=None, short_paypal_marketing_text=None, show_card_logos_not_directly_supported=None, show_signature=None, signature=None, solution_type=None, summary_email=None, summary_mode=None, zero_dollar_penny=None):  # noqa: E501
        """PaymentsConfigurationPayPal - a model defined in Swagger"""  # noqa: E501

        self._accept_paypal = None
        self._accounting_code = None
        self._api_password = None
        self._api_username = None
        self._certificate_on_file = None
        self._deposit_to_account = None
        self._email = None
        self._environment = None
        self._header_image_url = None
        self._hide_bill_me_later = None
        self._hide_express_checkout_on_view_cart = None
        self._hide_for_unshipped_orders = None
        self._hold_in_ar = None
        self._landing_page = None
        self._mode = None
        self._private_key_password = None
        self._processing_fee = None
        self._processing_percentage = None
        self._push_paypal = None
        self._restrictions = None
        self._send_recurring = None
        self._short_paypal_marketing_text = None
        self._show_card_logos_not_directly_supported = None
        self._show_signature = None
        self._signature = None
        self._solution_type = None
        self._summary_email = None
        self._summary_mode = None
        self._zero_dollar_penny = None
        self.discriminator = None

        if accept_paypal is not None:
            self.accept_paypal = accept_paypal
        if accounting_code is not None:
            self.accounting_code = accounting_code
        if api_password is not None:
            self.api_password = api_password
        if api_username is not None:
            self.api_username = api_username
        if certificate_on_file is not None:
            self.certificate_on_file = certificate_on_file
        if deposit_to_account is not None:
            self.deposit_to_account = deposit_to_account
        if email is not None:
            self.email = email
        if environment is not None:
            self.environment = environment
        if header_image_url is not None:
            self.header_image_url = header_image_url
        if hide_bill_me_later is not None:
            self.hide_bill_me_later = hide_bill_me_later
        if hide_express_checkout_on_view_cart is not None:
            self.hide_express_checkout_on_view_cart = hide_express_checkout_on_view_cart
        if hide_for_unshipped_orders is not None:
            self.hide_for_unshipped_orders = hide_for_unshipped_orders
        if hold_in_ar is not None:
            self.hold_in_ar = hold_in_ar
        if landing_page is not None:
            self.landing_page = landing_page
        if mode is not None:
            self.mode = mode
        if private_key_password is not None:
            self.private_key_password = private_key_password
        if processing_fee is not None:
            self.processing_fee = processing_fee
        if processing_percentage is not None:
            self.processing_percentage = processing_percentage
        if push_paypal is not None:
            self.push_paypal = push_paypal
        if restrictions is not None:
            self.restrictions = restrictions
        if send_recurring is not None:
            self.send_recurring = send_recurring
        if short_paypal_marketing_text is not None:
            self.short_paypal_marketing_text = short_paypal_marketing_text
        if show_card_logos_not_directly_supported is not None:
            self.show_card_logos_not_directly_supported = show_card_logos_not_directly_supported
        if show_signature is not None:
            self.show_signature = show_signature
        if signature is not None:
            self.signature = signature
        if solution_type is not None:
            self.solution_type = solution_type
        if summary_email is not None:
            self.summary_email = summary_email
        if summary_mode is not None:
            self.summary_mode = summary_mode
        if zero_dollar_penny is not None:
            self.zero_dollar_penny = zero_dollar_penny

    @property
    def accept_paypal(self):
        """Gets the accept_paypal of this PaymentsConfigurationPayPal.  # noqa: E501

        Master flag that determine if PayPal is an active payment for this account  # noqa: E501

        :return: The accept_paypal of this PaymentsConfigurationPayPal.  # noqa: E501
        :rtype: bool
        """
        return self._accept_paypal

    @accept_paypal.setter
    def accept_paypal(self, accept_paypal):
        """Sets the accept_paypal of this PaymentsConfigurationPayPal.

        Master flag that determine if PayPal is an active payment for this account  # noqa: E501

        :param accept_paypal: The accept_paypal of this PaymentsConfigurationPayPal.  # noqa: E501
        :type: bool
        """

        self._accept_paypal = accept_paypal

    @property
    def accounting_code(self):
        """Gets the accounting_code of this PaymentsConfigurationPayPal.  # noqa: E501

        Optional accounting code that is set to Quickbooks when an order uses this payment method.  # noqa: E501

        :return: The accounting_code of this PaymentsConfigurationPayPal.  # noqa: E501
        :rtype: str
        """
        return self._accounting_code

    @accounting_code.setter
    def accounting_code(self, accounting_code):
        """Sets the accounting_code of this PaymentsConfigurationPayPal.

        Optional accounting code that is set to Quickbooks when an order uses this payment method.  # noqa: E501

        :param accounting_code: The accounting_code of this PaymentsConfigurationPayPal.  # noqa: E501
        :type: str
        """

        self._accounting_code = accounting_code

    @property
    def api_password(self):
        """Gets the api_password of this PaymentsConfigurationPayPal.  # noqa: E501

        PayPal API password  # noqa: E501

        :return: The api_password of this PaymentsConfigurationPayPal.  # noqa: E501
        :rtype: str
        """
        return self._api_password

    @api_password.setter
    def api_password(self, api_password):
        """Sets the api_password of this PaymentsConfigurationPayPal.

        PayPal API password  # noqa: E501

        :param api_password: The api_password of this PaymentsConfigurationPayPal.  # noqa: E501
        :type: str
        """

        self._api_password = api_password

    @property
    def api_username(self):
        """Gets the api_username of this PaymentsConfigurationPayPal.  # noqa: E501

        PayPal API username  # noqa: E501

        :return: The api_username of this PaymentsConfigurationPayPal.  # noqa: E501
        :rtype: str
        """
        return self._api_username

    @api_username.setter
    def api_username(self, api_username):
        """Sets the api_username of this PaymentsConfigurationPayPal.

        PayPal API username  # noqa: E501

        :param api_username: The api_username of this PaymentsConfigurationPayPal.  # noqa: E501
        :type: str
        """

        self._api_username = api_username

    @property
    def certificate_on_file(self):
        """Gets the certificate_on_file of this PaymentsConfigurationPayPal.  # noqa: E501

        (Legacy) true if there is a PayPal certificate already on file. Used to manage the internal UI  # noqa: E501

        :return: The certificate_on_file of this PaymentsConfigurationPayPal.  # noqa: E501
        :rtype: bool
        """
        return self._certificate_on_file

    @certificate_on_file.setter
    def certificate_on_file(self, certificate_on_file):
        """Sets the certificate_on_file of this PaymentsConfigurationPayPal.

        (Legacy) true if there is a PayPal certificate already on file. Used to manage the internal UI  # noqa: E501

        :param certificate_on_file: The certificate_on_file of this PaymentsConfigurationPayPal.  # noqa: E501
        :type: bool
        """

        self._certificate_on_file = certificate_on_file

    @property
    def deposit_to_account(self):
        """Gets the deposit_to_account of this PaymentsConfigurationPayPal.  # noqa: E501

        The account to deposit funds  # noqa: E501

        :return: The deposit_to_account of this PaymentsConfigurationPayPal.  # noqa: E501
        :rtype: str
        """
        return self._deposit_to_account

    @deposit_to_account.setter
    def deposit_to_account(self, deposit_to_account):
        """Sets the deposit_to_account of this PaymentsConfigurationPayPal.

        The account to deposit funds  # noqa: E501

        :param deposit_to_account: The deposit_to_account of this PaymentsConfigurationPayPal.  # noqa: E501
        :type: str
        """

        self._deposit_to_account = deposit_to_account

    @property
    def email(self):
        """Gets the email of this PaymentsConfigurationPayPal.  # noqa: E501

        The main PayPal email address  # noqa: E501

        :return: The email of this PaymentsConfigurationPayPal.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this PaymentsConfigurationPayPal.

        The main PayPal email address  # noqa: E501

        :param email: The email of this PaymentsConfigurationPayPal.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def environment(self):
        """Gets the environment of this PaymentsConfigurationPayPal.  # noqa: E501

        PayPal configuration, live or sandbox  # noqa: E501

        :return: The environment of this PaymentsConfigurationPayPal.  # noqa: E501
        :rtype: str
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this PaymentsConfigurationPayPal.

        PayPal configuration, live or sandbox  # noqa: E501

        :param environment: The environment of this PaymentsConfigurationPayPal.  # noqa: E501
        :type: str
        """
        allowed_values = ["Live", "Sandbox"]  # noqa: E501
        if environment not in allowed_values:
            raise ValueError(
                "Invalid value for `environment` ({0}), must be one of {1}"  # noqa: E501
                .format(environment, allowed_values)
            )

        self._environment = environment

    @property
    def header_image_url(self):
        """Gets the header_image_url of this PaymentsConfigurationPayPal.  # noqa: E501

        The URL for the PayPal header  # noqa: E501

        :return: The header_image_url of this PaymentsConfigurationPayPal.  # noqa: E501
        :rtype: str
        """
        return self._header_image_url

    @header_image_url.setter
    def header_image_url(self, header_image_url):
        """Sets the header_image_url of this PaymentsConfigurationPayPal.

        The URL for the PayPal header  # noqa: E501

        :param header_image_url: The header_image_url of this PaymentsConfigurationPayPal.  # noqa: E501
        :type: str
        """

        self._header_image_url = header_image_url

    @property
    def hide_bill_me_later(self):
        """Gets the hide_bill_me_later of this PaymentsConfigurationPayPal.  # noqa: E501

        True if the Bill Me Later button should be hidden during checkout  # noqa: E501

        :return: The hide_bill_me_later of this PaymentsConfigurationPayPal.  # noqa: E501
        :rtype: bool
        """
        return self._hide_bill_me_later

    @hide_bill_me_later.setter
    def hide_bill_me_later(self, hide_bill_me_later):
        """Sets the hide_bill_me_later of this PaymentsConfigurationPayPal.

        True if the Bill Me Later button should be hidden during checkout  # noqa: E501

        :param hide_bill_me_later: The hide_bill_me_later of this PaymentsConfigurationPayPal.  # noqa: E501
        :type: bool
        """

        self._hide_bill_me_later = hide_bill_me_later

    @property
    def hide_express_checkout_on_view_cart(self):
        """Gets the hide_express_checkout_on_view_cart of this PaymentsConfigurationPayPal.  # noqa: E501

        True if the PayPal express checkout button should be hidden on the view cart page.  This will force the customer to enter address information before being able to checkout with PayPal  # noqa: E501

        :return: The hide_express_checkout_on_view_cart of this PaymentsConfigurationPayPal.  # noqa: E501
        :rtype: bool
        """
        return self._hide_express_checkout_on_view_cart

    @hide_express_checkout_on_view_cart.setter
    def hide_express_checkout_on_view_cart(self, hide_express_checkout_on_view_cart):
        """Sets the hide_express_checkout_on_view_cart of this PaymentsConfigurationPayPal.

        True if the PayPal express checkout button should be hidden on the view cart page.  This will force the customer to enter address information before being able to checkout with PayPal  # noqa: E501

        :param hide_express_checkout_on_view_cart: The hide_express_checkout_on_view_cart of this PaymentsConfigurationPayPal.  # noqa: E501
        :type: bool
        """

        self._hide_express_checkout_on_view_cart = hide_express_checkout_on_view_cart

    @property
    def hide_for_unshipped_orders(self):
        """Gets the hide_for_unshipped_orders of this PaymentsConfigurationPayPal.  # noqa: E501

        True if PayPal should be hidden for orders with no shippable product, such as digital orders  # noqa: E501

        :return: The hide_for_unshipped_orders of this PaymentsConfigurationPayPal.  # noqa: E501
        :rtype: bool
        """
        return self._hide_for_unshipped_orders

    @hide_for_unshipped_orders.setter
    def hide_for_unshipped_orders(self, hide_for_unshipped_orders):
        """Sets the hide_for_unshipped_orders of this PaymentsConfigurationPayPal.

        True if PayPal should be hidden for orders with no shippable product, such as digital orders  # noqa: E501

        :param hide_for_unshipped_orders: The hide_for_unshipped_orders of this PaymentsConfigurationPayPal.  # noqa: E501
        :type: bool
        """

        self._hide_for_unshipped_orders = hide_for_unshipped_orders

    @property
    def hold_in_ar(self):
        """Gets the hold_in_ar of this PaymentsConfigurationPayPal.  # noqa: E501

        If true, PayPal orders are held in Accounts Receivable for review  # noqa: E501

        :return: The hold_in_ar of this PaymentsConfigurationPayPal.  # noqa: E501
        :rtype: bool
        """
        return self._hold_in_ar

    @hold_in_ar.setter
    def hold_in_ar(self, hold_in_ar):
        """Sets the hold_in_ar of this PaymentsConfigurationPayPal.

        If true, PayPal orders are held in Accounts Receivable for review  # noqa: E501

        :param hold_in_ar: The hold_in_ar of this PaymentsConfigurationPayPal.  # noqa: E501
        :type: bool
        """

        self._hold_in_ar = hold_in_ar

    @property
    def landing_page(self):
        """Gets the landing_page of this PaymentsConfigurationPayPal.  # noqa: E501

        PayPal landing page  # noqa: E501

        :return: The landing_page of this PaymentsConfigurationPayPal.  # noqa: E501
        :rtype: str
        """
        return self._landing_page

    @landing_page.setter
    def landing_page(self, landing_page):
        """Sets the landing_page of this PaymentsConfigurationPayPal.

        PayPal landing page  # noqa: E501

        :param landing_page: The landing_page of this PaymentsConfigurationPayPal.  # noqa: E501
        :type: str
        """
        allowed_values = ["Billing", "Login"]  # noqa: E501
        if landing_page not in allowed_values:
            raise ValueError(
                "Invalid value for `landing_page` ({0}), must be one of {1}"  # noqa: E501
                .format(landing_page, allowed_values)
            )

        self._landing_page = landing_page

    @property
    def mode(self):
        """Gets the mode of this PaymentsConfigurationPayPal.  # noqa: E501

        The PayPal mode  # noqa: E501

        :return: The mode of this PaymentsConfigurationPayPal.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this PaymentsConfigurationPayPal.

        The PayPal mode  # noqa: E501

        :param mode: The mode of this PaymentsConfigurationPayPal.  # noqa: E501
        :type: str
        """
        allowed_values = ["WPPECO", "WPPECDP"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"  # noqa: E501
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def private_key_password(self):
        """Gets the private_key_password of this PaymentsConfigurationPayPal.  # noqa: E501

        PayPal API private key password  # noqa: E501

        :return: The private_key_password of this PaymentsConfigurationPayPal.  # noqa: E501
        :rtype: str
        """
        return self._private_key_password

    @private_key_password.setter
    def private_key_password(self, private_key_password):
        """Sets the private_key_password of this PaymentsConfigurationPayPal.

        PayPal API private key password  # noqa: E501

        :param private_key_password: The private_key_password of this PaymentsConfigurationPayPal.  # noqa: E501
        :type: str
        """

        self._private_key_password = private_key_password

    @property
    def processing_fee(self):
        """Gets the processing_fee of this PaymentsConfigurationPayPal.  # noqa: E501

        Optional additional fee to charge if PayPal is used.  It is rare for this to be used.  # noqa: E501

        :return: The processing_fee of this PaymentsConfigurationPayPal.  # noqa: E501
        :rtype: float
        """
        return self._processing_fee

    @processing_fee.setter
    def processing_fee(self, processing_fee):
        """Sets the processing_fee of this PaymentsConfigurationPayPal.

        Optional additional fee to charge if PayPal is used.  It is rare for this to be used.  # noqa: E501

        :param processing_fee: The processing_fee of this PaymentsConfigurationPayPal.  # noqa: E501
        :type: float
        """

        self._processing_fee = processing_fee

    @property
    def processing_percentage(self):
        """Gets the processing_percentage of this PaymentsConfigurationPayPal.  # noqa: E501

        The processing percentage charged by PayPal  # noqa: E501

        :return: The processing_percentage of this PaymentsConfigurationPayPal.  # noqa: E501
        :rtype: float
        """
        return self._processing_percentage

    @processing_percentage.setter
    def processing_percentage(self, processing_percentage):
        """Sets the processing_percentage of this PaymentsConfigurationPayPal.

        The processing percentage charged by PayPal  # noqa: E501

        :param processing_percentage: The processing_percentage of this PaymentsConfigurationPayPal.  # noqa: E501
        :type: float
        """

        self._processing_percentage = processing_percentage

    @property
    def push_paypal(self):
        """Gets the push_paypal of this PaymentsConfigurationPayPal.  # noqa: E501

        True if the internal UI should recommend opening a PayPal account  # noqa: E501

        :return: The push_paypal of this PaymentsConfigurationPayPal.  # noqa: E501
        :rtype: bool
        """
        return self._push_paypal

    @push_paypal.setter
    def push_paypal(self, push_paypal):
        """Sets the push_paypal of this PaymentsConfigurationPayPal.

        True if the internal UI should recommend opening a PayPal account  # noqa: E501

        :param push_paypal: The push_paypal of this PaymentsConfigurationPayPal.  # noqa: E501
        :type: bool
        """

        self._push_paypal = push_paypal

    @property
    def restrictions(self):
        """Gets the restrictions of this PaymentsConfigurationPayPal.  # noqa: E501


        :return: The restrictions of this PaymentsConfigurationPayPal.  # noqa: E501
        :rtype: PaymentsConfigurationRestrictions
        """
        return self._restrictions

    @restrictions.setter
    def restrictions(self, restrictions):
        """Sets the restrictions of this PaymentsConfigurationPayPal.


        :param restrictions: The restrictions of this PaymentsConfigurationPayPal.  # noqa: E501
        :type: PaymentsConfigurationRestrictions
        """

        self._restrictions = restrictions

    @property
    def send_recurring(self):
        """Gets the send_recurring of this PaymentsConfigurationPayPal.  # noqa: E501

        True if UltraCart should send recurring orders to PayPal.  There are restrictions to what PayPal will accept for recurring orders.  Be careful.  # noqa: E501

        :return: The send_recurring of this PaymentsConfigurationPayPal.  # noqa: E501
        :rtype: bool
        """
        return self._send_recurring

    @send_recurring.setter
    def send_recurring(self, send_recurring):
        """Sets the send_recurring of this PaymentsConfigurationPayPal.

        True if UltraCart should send recurring orders to PayPal.  There are restrictions to what PayPal will accept for recurring orders.  Be careful.  # noqa: E501

        :param send_recurring: The send_recurring of this PaymentsConfigurationPayPal.  # noqa: E501
        :type: bool
        """

        self._send_recurring = send_recurring

    @property
    def short_paypal_marketing_text(self):
        """Gets the short_paypal_marketing_text of this PaymentsConfigurationPayPal.  # noqa: E501

        Short marketing text  # noqa: E501

        :return: The short_paypal_marketing_text of this PaymentsConfigurationPayPal.  # noqa: E501
        :rtype: bool
        """
        return self._short_paypal_marketing_text

    @short_paypal_marketing_text.setter
    def short_paypal_marketing_text(self, short_paypal_marketing_text):
        """Sets the short_paypal_marketing_text of this PaymentsConfigurationPayPal.

        Short marketing text  # noqa: E501

        :param short_paypal_marketing_text: The short_paypal_marketing_text of this PaymentsConfigurationPayPal.  # noqa: E501
        :type: bool
        """

        self._short_paypal_marketing_text = short_paypal_marketing_text

    @property
    def show_card_logos_not_directly_supported(self):
        """Gets the show_card_logos_not_directly_supported of this PaymentsConfigurationPayPal.  # noqa: E501

        internal ui flag  # noqa: E501

        :return: The show_card_logos_not_directly_supported of this PaymentsConfigurationPayPal.  # noqa: E501
        :rtype: bool
        """
        return self._show_card_logos_not_directly_supported

    @show_card_logos_not_directly_supported.setter
    def show_card_logos_not_directly_supported(self, show_card_logos_not_directly_supported):
        """Sets the show_card_logos_not_directly_supported of this PaymentsConfigurationPayPal.

        internal ui flag  # noqa: E501

        :param show_card_logos_not_directly_supported: The show_card_logos_not_directly_supported of this PaymentsConfigurationPayPal.  # noqa: E501
        :type: bool
        """

        self._show_card_logos_not_directly_supported = show_card_logos_not_directly_supported

    @property
    def show_signature(self):
        """Gets the show_signature of this PaymentsConfigurationPayPal.  # noqa: E501

        Internal flag used to manage UI  # noqa: E501

        :return: The show_signature of this PaymentsConfigurationPayPal.  # noqa: E501
        :rtype: bool
        """
        return self._show_signature

    @show_signature.setter
    def show_signature(self, show_signature):
        """Sets the show_signature of this PaymentsConfigurationPayPal.

        Internal flag used to manage UI  # noqa: E501

        :param show_signature: The show_signature of this PaymentsConfigurationPayPal.  # noqa: E501
        :type: bool
        """

        self._show_signature = show_signature

    @property
    def signature(self):
        """Gets the signature of this PaymentsConfigurationPayPal.  # noqa: E501

        PayPal signature  # noqa: E501

        :return: The signature of this PaymentsConfigurationPayPal.  # noqa: E501
        :rtype: str
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this PaymentsConfigurationPayPal.

        PayPal signature  # noqa: E501

        :param signature: The signature of this PaymentsConfigurationPayPal.  # noqa: E501
        :type: str
        """

        self._signature = signature

    @property
    def solution_type(self):
        """Gets the solution_type of this PaymentsConfigurationPayPal.  # noqa: E501

        PayPal solution type  # noqa: E501

        :return: The solution_type of this PaymentsConfigurationPayPal.  # noqa: E501
        :rtype: str
        """
        return self._solution_type

    @solution_type.setter
    def solution_type(self, solution_type):
        """Sets the solution_type of this PaymentsConfigurationPayPal.

        PayPal solution type  # noqa: E501

        :param solution_type: The solution_type of this PaymentsConfigurationPayPal.  # noqa: E501
        :type: str
        """
        allowed_values = ["Sole", "Mark"]  # noqa: E501
        if solution_type not in allowed_values:
            raise ValueError(
                "Invalid value for `solution_type` ({0}), must be one of {1}"  # noqa: E501
                .format(solution_type, allowed_values)
            )

        self._solution_type = solution_type

    @property
    def summary_email(self):
        """Gets the summary_email of this PaymentsConfigurationPayPal.  # noqa: E501

        The email where PayPal summaries should be sent  # noqa: E501

        :return: The summary_email of this PaymentsConfigurationPayPal.  # noqa: E501
        :rtype: str
        """
        return self._summary_email

    @summary_email.setter
    def summary_email(self, summary_email):
        """Sets the summary_email of this PaymentsConfigurationPayPal.

        The email where PayPal summaries should be sent  # noqa: E501

        :param summary_email: The summary_email of this PaymentsConfigurationPayPal.  # noqa: E501
        :type: str
        """

        self._summary_email = summary_email

    @property
    def summary_mode(self):
        """Gets the summary_mode of this PaymentsConfigurationPayPal.  # noqa: E501

        Description of what mode PayPal is operating  # noqa: E501

        :return: The summary_mode of this PaymentsConfigurationPayPal.  # noqa: E501
        :rtype: str
        """
        return self._summary_mode

    @summary_mode.setter
    def summary_mode(self, summary_mode):
        """Sets the summary_mode of this PaymentsConfigurationPayPal.

        Description of what mode PayPal is operating  # noqa: E501

        :param summary_mode: The summary_mode of this PaymentsConfigurationPayPal.  # noqa: E501
        :type: str
        """

        self._summary_mode = summary_mode

    @property
    def zero_dollar_penny(self):
        """Gets the zero_dollar_penny of this PaymentsConfigurationPayPal.  # noqa: E501

        Send free items to PayPal as one cent items and subtract this penny from shipping.  PayPal does not allow the sale of free items.  # noqa: E501

        :return: The zero_dollar_penny of this PaymentsConfigurationPayPal.  # noqa: E501
        :rtype: bool
        """
        return self._zero_dollar_penny

    @zero_dollar_penny.setter
    def zero_dollar_penny(self, zero_dollar_penny):
        """Sets the zero_dollar_penny of this PaymentsConfigurationPayPal.

        Send free items to PayPal as one cent items and subtract this penny from shipping.  PayPal does not allow the sale of free items.  # noqa: E501

        :param zero_dollar_penny: The zero_dollar_penny of this PaymentsConfigurationPayPal.  # noqa: E501
        :type: bool
        """

        self._zero_dollar_penny = zero_dollar_penny

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaymentsConfigurationPayPal, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentsConfigurationPayPal):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
