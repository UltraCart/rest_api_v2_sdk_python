# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ExperimentVariation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'add_to_cart_count': 'int',
        'average_duration_seconds': 'int',
        'average_objective_per_session': 'float',
        'bounce_count': 'int',
        'conversion_rate': 'float',
        'duration_seconds_sum': 'int',
        'initiate_checkout_count': 'int',
        'order_count': 'int',
        'original_traffic_percentage': 'float',
        'page_view_count': 'int',
        'revenue': 'float',
        'session_count': 'int',
        'traffic_percentage': 'float',
        'variation_name': 'str',
        'variation_number': 'int',
        'winner': 'bool'
    }

    attribute_map = {
        'add_to_cart_count': 'add_to_cart_count',
        'average_duration_seconds': 'average_duration_seconds',
        'average_objective_per_session': 'average_objective_per_session',
        'bounce_count': 'bounce_count',
        'conversion_rate': 'conversion_rate',
        'duration_seconds_sum': 'duration_seconds_sum',
        'initiate_checkout_count': 'initiate_checkout_count',
        'order_count': 'order_count',
        'original_traffic_percentage': 'original_traffic_percentage',
        'page_view_count': 'page_view_count',
        'revenue': 'revenue',
        'session_count': 'session_count',
        'traffic_percentage': 'traffic_percentage',
        'variation_name': 'variation_name',
        'variation_number': 'variation_number',
        'winner': 'winner'
    }

    def __init__(self, add_to_cart_count=None, average_duration_seconds=None, average_objective_per_session=None, bounce_count=None, conversion_rate=None, duration_seconds_sum=None, initiate_checkout_count=None, order_count=None, original_traffic_percentage=None, page_view_count=None, revenue=None, session_count=None, traffic_percentage=None, variation_name=None, variation_number=None, winner=None):
        """
        ExperimentVariation - a model defined in Swagger
        """

        self._add_to_cart_count = None
        self._average_duration_seconds = None
        self._average_objective_per_session = None
        self._bounce_count = None
        self._conversion_rate = None
        self._duration_seconds_sum = None
        self._initiate_checkout_count = None
        self._order_count = None
        self._original_traffic_percentage = None
        self._page_view_count = None
        self._revenue = None
        self._session_count = None
        self._traffic_percentage = None
        self._variation_name = None
        self._variation_number = None
        self._winner = None
        self.discriminator = None

        if add_to_cart_count is not None:
          self.add_to_cart_count = add_to_cart_count
        if average_duration_seconds is not None:
          self.average_duration_seconds = average_duration_seconds
        if average_objective_per_session is not None:
          self.average_objective_per_session = average_objective_per_session
        if bounce_count is not None:
          self.bounce_count = bounce_count
        if conversion_rate is not None:
          self.conversion_rate = conversion_rate
        if duration_seconds_sum is not None:
          self.duration_seconds_sum = duration_seconds_sum
        if initiate_checkout_count is not None:
          self.initiate_checkout_count = initiate_checkout_count
        if order_count is not None:
          self.order_count = order_count
        if original_traffic_percentage is not None:
          self.original_traffic_percentage = original_traffic_percentage
        if page_view_count is not None:
          self.page_view_count = page_view_count
        if revenue is not None:
          self.revenue = revenue
        if session_count is not None:
          self.session_count = session_count
        if traffic_percentage is not None:
          self.traffic_percentage = traffic_percentage
        if variation_name is not None:
          self.variation_name = variation_name
        if variation_number is not None:
          self.variation_number = variation_number
        if winner is not None:
          self.winner = winner

    @property
    def add_to_cart_count(self):
        """
        Gets the add_to_cart_count of this ExperimentVariation.
        Total add to cart count for this variation

        :return: The add_to_cart_count of this ExperimentVariation.
        :rtype: int
        """
        return self._add_to_cart_count

    @add_to_cart_count.setter
    def add_to_cart_count(self, add_to_cart_count):
        """
        Sets the add_to_cart_count of this ExperimentVariation.
        Total add to cart count for this variation

        :param add_to_cart_count: The add_to_cart_count of this ExperimentVariation.
        :type: int
        """

        self._add_to_cart_count = add_to_cart_count

    @property
    def average_duration_seconds(self):
        """
        Gets the average_duration_seconds of this ExperimentVariation.
        Average duration seconds per session for this variation

        :return: The average_duration_seconds of this ExperimentVariation.
        :rtype: int
        """
        return self._average_duration_seconds

    @average_duration_seconds.setter
    def average_duration_seconds(self, average_duration_seconds):
        """
        Sets the average_duration_seconds of this ExperimentVariation.
        Average duration seconds per session for this variation

        :param average_duration_seconds: The average_duration_seconds of this ExperimentVariation.
        :type: int
        """

        self._average_duration_seconds = average_duration_seconds

    @property
    def average_objective_per_session(self):
        """
        Gets the average_objective_per_session of this ExperimentVariation.
        Average objective value per session for this variation

        :return: The average_objective_per_session of this ExperimentVariation.
        :rtype: float
        """
        return self._average_objective_per_session

    @average_objective_per_session.setter
    def average_objective_per_session(self, average_objective_per_session):
        """
        Sets the average_objective_per_session of this ExperimentVariation.
        Average objective value per session for this variation

        :param average_objective_per_session: The average_objective_per_session of this ExperimentVariation.
        :type: float
        """

        self._average_objective_per_session = average_objective_per_session

    @property
    def bounce_count(self):
        """
        Gets the bounce_count of this ExperimentVariation.
        Total bounce count for this variation

        :return: The bounce_count of this ExperimentVariation.
        :rtype: int
        """
        return self._bounce_count

    @bounce_count.setter
    def bounce_count(self, bounce_count):
        """
        Sets the bounce_count of this ExperimentVariation.
        Total bounce count for this variation

        :param bounce_count: The bounce_count of this ExperimentVariation.
        :type: int
        """

        self._bounce_count = bounce_count

    @property
    def conversion_rate(self):
        """
        Gets the conversion_rate of this ExperimentVariation.
        Conversion rate for this variation

        :return: The conversion_rate of this ExperimentVariation.
        :rtype: float
        """
        return self._conversion_rate

    @conversion_rate.setter
    def conversion_rate(self, conversion_rate):
        """
        Sets the conversion_rate of this ExperimentVariation.
        Conversion rate for this variation

        :param conversion_rate: The conversion_rate of this ExperimentVariation.
        :type: float
        """

        self._conversion_rate = conversion_rate

    @property
    def duration_seconds_sum(self):
        """
        Gets the duration_seconds_sum of this ExperimentVariation.
        Total number of seconds spent on the site for this variation

        :return: The duration_seconds_sum of this ExperimentVariation.
        :rtype: int
        """
        return self._duration_seconds_sum

    @duration_seconds_sum.setter
    def duration_seconds_sum(self, duration_seconds_sum):
        """
        Sets the duration_seconds_sum of this ExperimentVariation.
        Total number of seconds spent on the site for this variation

        :param duration_seconds_sum: The duration_seconds_sum of this ExperimentVariation.
        :type: int
        """

        self._duration_seconds_sum = duration_seconds_sum

    @property
    def initiate_checkout_count(self):
        """
        Gets the initiate_checkout_count of this ExperimentVariation.
        Total initiate checkout count for this variation

        :return: The initiate_checkout_count of this ExperimentVariation.
        :rtype: int
        """
        return self._initiate_checkout_count

    @initiate_checkout_count.setter
    def initiate_checkout_count(self, initiate_checkout_count):
        """
        Sets the initiate_checkout_count of this ExperimentVariation.
        Total initiate checkout count for this variation

        :param initiate_checkout_count: The initiate_checkout_count of this ExperimentVariation.
        :type: int
        """

        self._initiate_checkout_count = initiate_checkout_count

    @property
    def order_count(self):
        """
        Gets the order_count of this ExperimentVariation.
        Total order count for this variation

        :return: The order_count of this ExperimentVariation.
        :rtype: int
        """
        return self._order_count

    @order_count.setter
    def order_count(self, order_count):
        """
        Sets the order_count of this ExperimentVariation.
        Total order count for this variation

        :param order_count: The order_count of this ExperimentVariation.
        :type: int
        """

        self._order_count = order_count

    @property
    def original_traffic_percentage(self):
        """
        Gets the original_traffic_percentage of this ExperimentVariation.
        Percentage of the traffic the variation originally started out with

        :return: The original_traffic_percentage of this ExperimentVariation.
        :rtype: float
        """
        return self._original_traffic_percentage

    @original_traffic_percentage.setter
    def original_traffic_percentage(self, original_traffic_percentage):
        """
        Sets the original_traffic_percentage of this ExperimentVariation.
        Percentage of the traffic the variation originally started out with

        :param original_traffic_percentage: The original_traffic_percentage of this ExperimentVariation.
        :type: float
        """

        self._original_traffic_percentage = original_traffic_percentage

    @property
    def page_view_count(self):
        """
        Gets the page_view_count of this ExperimentVariation.
        Total page view count for this variation

        :return: The page_view_count of this ExperimentVariation.
        :rtype: int
        """
        return self._page_view_count

    @page_view_count.setter
    def page_view_count(self, page_view_count):
        """
        Sets the page_view_count of this ExperimentVariation.
        Total page view count for this variation

        :param page_view_count: The page_view_count of this ExperimentVariation.
        :type: int
        """

        self._page_view_count = page_view_count

    @property
    def revenue(self):
        """
        Gets the revenue of this ExperimentVariation.
        Total revenue for this variation

        :return: The revenue of this ExperimentVariation.
        :rtype: float
        """
        return self._revenue

    @revenue.setter
    def revenue(self, revenue):
        """
        Sets the revenue of this ExperimentVariation.
        Total revenue for this variation

        :param revenue: The revenue of this ExperimentVariation.
        :type: float
        """

        self._revenue = revenue

    @property
    def session_count(self):
        """
        Gets the session_count of this ExperimentVariation.
        Total sessions for this variation

        :return: The session_count of this ExperimentVariation.
        :rtype: int
        """
        return self._session_count

    @session_count.setter
    def session_count(self, session_count):
        """
        Sets the session_count of this ExperimentVariation.
        Total sessions for this variation

        :param session_count: The session_count of this ExperimentVariation.
        :type: int
        """

        self._session_count = session_count

    @property
    def traffic_percentage(self):
        """
        Gets the traffic_percentage of this ExperimentVariation.
        Percentage of the traffic this variation is currently receiving

        :return: The traffic_percentage of this ExperimentVariation.
        :rtype: float
        """
        return self._traffic_percentage

    @traffic_percentage.setter
    def traffic_percentage(self, traffic_percentage):
        """
        Sets the traffic_percentage of this ExperimentVariation.
        Percentage of the traffic this variation is currently receiving

        :param traffic_percentage: The traffic_percentage of this ExperimentVariation.
        :type: float
        """

        self._traffic_percentage = traffic_percentage

    @property
    def variation_name(self):
        """
        Gets the variation_name of this ExperimentVariation.
        Name of the variation

        :return: The variation_name of this ExperimentVariation.
        :rtype: str
        """
        return self._variation_name

    @variation_name.setter
    def variation_name(self, variation_name):
        """
        Sets the variation_name of this ExperimentVariation.
        Name of the variation

        :param variation_name: The variation_name of this ExperimentVariation.
        :type: str
        """

        self._variation_name = variation_name

    @property
    def variation_number(self):
        """
        Gets the variation_number of this ExperimentVariation.
        Variation number

        :return: The variation_number of this ExperimentVariation.
        :rtype: int
        """
        return self._variation_number

    @variation_number.setter
    def variation_number(self, variation_number):
        """
        Sets the variation_number of this ExperimentVariation.
        Variation number

        :param variation_number: The variation_number of this ExperimentVariation.
        :type: int
        """

        self._variation_number = variation_number

    @property
    def winner(self):
        """
        Gets the winner of this ExperimentVariation.
        True if this variation has been declared the winner

        :return: The winner of this ExperimentVariation.
        :rtype: bool
        """
        return self._winner

    @winner.setter
    def winner(self, winner):
        """
        Sets the winner of this ExperimentVariation.
        True if this variation has been declared the winner

        :param winner: The winner of this ExperimentVariation.
        :type: bool
        """

        self._winner = winner

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ExperimentVariation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
