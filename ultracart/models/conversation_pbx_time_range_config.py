# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConversationPbxTimeRangeConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'end_date': 'str',
        'end_day_of_week': 'int',
        'end_time': 'str',
        'start_date': 'str',
        'start_day_of_week': 'int',
        'start_time': 'str'
    }

    attribute_map = {
        'end_date': 'end_date',
        'end_day_of_week': 'end_day_of_week',
        'end_time': 'end_time',
        'start_date': 'start_date',
        'start_day_of_week': 'start_day_of_week',
        'start_time': 'start_time'
    }

    def __init__(self, end_date=None, end_day_of_week=None, end_time=None, start_date=None, start_day_of_week=None, start_time=None):  # noqa: E501
        """ConversationPbxTimeRangeConfig - a model defined in Swagger"""  # noqa: E501

        self._end_date = None
        self._end_day_of_week = None
        self._end_time = None
        self._start_date = None
        self._start_day_of_week = None
        self._start_time = None
        self.discriminator = None

        if end_date is not None:
            self.end_date = end_date
        if end_day_of_week is not None:
            self.end_day_of_week = end_day_of_week
        if end_time is not None:
            self.end_time = end_time
        if start_date is not None:
            self.start_date = start_date
        if start_day_of_week is not None:
            self.start_day_of_week = start_day_of_week
        if start_time is not None:
            self.start_time = start_time

    @property
    def end_date(self):
        """Gets the end_date of this ConversationPbxTimeRangeConfig.  # noqa: E501

        End date  # noqa: E501

        :return: The end_date of this ConversationPbxTimeRangeConfig.  # noqa: E501
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this ConversationPbxTimeRangeConfig.

        End date  # noqa: E501

        :param end_date: The end_date of this ConversationPbxTimeRangeConfig.  # noqa: E501
        :type: str
        """

        self._end_date = end_date

    @property
    def end_day_of_week(self):
        """Gets the end_day_of_week of this ConversationPbxTimeRangeConfig.  # noqa: E501

        End day of week  # noqa: E501

        :return: The end_day_of_week of this ConversationPbxTimeRangeConfig.  # noqa: E501
        :rtype: int
        """
        return self._end_day_of_week

    @end_day_of_week.setter
    def end_day_of_week(self, end_day_of_week):
        """Sets the end_day_of_week of this ConversationPbxTimeRangeConfig.

        End day of week  # noqa: E501

        :param end_day_of_week: The end_day_of_week of this ConversationPbxTimeRangeConfig.  # noqa: E501
        :type: int
        """

        self._end_day_of_week = end_day_of_week

    @property
    def end_time(self):
        """Gets the end_time of this ConversationPbxTimeRangeConfig.  # noqa: E501

        End time  # noqa: E501

        :return: The end_time of this ConversationPbxTimeRangeConfig.  # noqa: E501
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this ConversationPbxTimeRangeConfig.

        End time  # noqa: E501

        :param end_time: The end_time of this ConversationPbxTimeRangeConfig.  # noqa: E501
        :type: str
        """

        self._end_time = end_time

    @property
    def start_date(self):
        """Gets the start_date of this ConversationPbxTimeRangeConfig.  # noqa: E501

        Start date  # noqa: E501

        :return: The start_date of this ConversationPbxTimeRangeConfig.  # noqa: E501
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this ConversationPbxTimeRangeConfig.

        Start date  # noqa: E501

        :param start_date: The start_date of this ConversationPbxTimeRangeConfig.  # noqa: E501
        :type: str
        """

        self._start_date = start_date

    @property
    def start_day_of_week(self):
        """Gets the start_day_of_week of this ConversationPbxTimeRangeConfig.  # noqa: E501

        Start day of week  # noqa: E501

        :return: The start_day_of_week of this ConversationPbxTimeRangeConfig.  # noqa: E501
        :rtype: int
        """
        return self._start_day_of_week

    @start_day_of_week.setter
    def start_day_of_week(self, start_day_of_week):
        """Sets the start_day_of_week of this ConversationPbxTimeRangeConfig.

        Start day of week  # noqa: E501

        :param start_day_of_week: The start_day_of_week of this ConversationPbxTimeRangeConfig.  # noqa: E501
        :type: int
        """

        self._start_day_of_week = start_day_of_week

    @property
    def start_time(self):
        """Gets the start_time of this ConversationPbxTimeRangeConfig.  # noqa: E501

        Start time  # noqa: E501

        :return: The start_time of this ConversationPbxTimeRangeConfig.  # noqa: E501
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this ConversationPbxTimeRangeConfig.

        Start time  # noqa: E501

        :param start_time: The start_time of this ConversationPbxTimeRangeConfig.  # noqa: E501
        :type: str
        """

        self._start_time = start_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConversationPbxTimeRangeConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConversationPbxTimeRangeConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
