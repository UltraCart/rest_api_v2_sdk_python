# coding: utf-8

"""
    UltraCart Rest API V2

    This is the next generation UltraCart REST API...

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AffiliateClickQuery(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'affiliate_link_oid': 'int',
        'affiliate_oid': 'int',
        'click_dts_begin': 'str',
        'click_dts_end': 'str',
        'ip_address': 'str',
        'sub_id': 'str'
    }

    attribute_map = {
        'affiliate_link_oid': 'affiliate_link_oid',
        'affiliate_oid': 'affiliate_oid',
        'click_dts_begin': 'click_dts_begin',
        'click_dts_end': 'click_dts_end',
        'ip_address': 'ip_address',
        'sub_id': 'sub_id'
    }

    def __init__(self, affiliate_link_oid=None, affiliate_oid=None, click_dts_begin=None, click_dts_end=None, ip_address=None, sub_id=None):
        """
        AffiliateClickQuery - a model defined in Swagger
        """

        self._affiliate_link_oid = None
        self._affiliate_oid = None
        self._click_dts_begin = None
        self._click_dts_end = None
        self._ip_address = None
        self._sub_id = None
        self.discriminator = None

        if affiliate_link_oid is not None:
          self.affiliate_link_oid = affiliate_link_oid
        if affiliate_oid is not None:
          self.affiliate_oid = affiliate_oid
        if click_dts_begin is not None:
          self.click_dts_begin = click_dts_begin
        if click_dts_end is not None:
          self.click_dts_end = click_dts_end
        if ip_address is not None:
          self.ip_address = ip_address
        if sub_id is not None:
          self.sub_id = sub_id

    @property
    def affiliate_link_oid(self):
        """
        Gets the affiliate_link_oid of this AffiliateClickQuery.
        Unique object identifier for for the link that this click is associated with

        :return: The affiliate_link_oid of this AffiliateClickQuery.
        :rtype: int
        """
        return self._affiliate_link_oid

    @affiliate_link_oid.setter
    def affiliate_link_oid(self, affiliate_link_oid):
        """
        Sets the affiliate_link_oid of this AffiliateClickQuery.
        Unique object identifier for for the link that this click is associated with

        :param affiliate_link_oid: The affiliate_link_oid of this AffiliateClickQuery.
        :type: int
        """

        self._affiliate_link_oid = affiliate_link_oid

    @property
    def affiliate_oid(self):
        """
        Gets the affiliate_oid of this AffiliateClickQuery.
        Affiliate ID associated with the click

        :return: The affiliate_oid of this AffiliateClickQuery.
        :rtype: int
        """
        return self._affiliate_oid

    @affiliate_oid.setter
    def affiliate_oid(self, affiliate_oid):
        """
        Sets the affiliate_oid of this AffiliateClickQuery.
        Affiliate ID associated with the click

        :param affiliate_oid: The affiliate_oid of this AffiliateClickQuery.
        :type: int
        """

        self._affiliate_oid = affiliate_oid

    @property
    def click_dts_begin(self):
        """
        Gets the click_dts_begin of this AffiliateClickQuery.
        Minimum click date/time to return

        :return: The click_dts_begin of this AffiliateClickQuery.
        :rtype: str
        """
        return self._click_dts_begin

    @click_dts_begin.setter
    def click_dts_begin(self, click_dts_begin):
        """
        Sets the click_dts_begin of this AffiliateClickQuery.
        Minimum click date/time to return

        :param click_dts_begin: The click_dts_begin of this AffiliateClickQuery.
        :type: str
        """

        self._click_dts_begin = click_dts_begin

    @property
    def click_dts_end(self):
        """
        Gets the click_dts_end of this AffiliateClickQuery.
        Maximum click date/time to return

        :return: The click_dts_end of this AffiliateClickQuery.
        :rtype: str
        """
        return self._click_dts_end

    @click_dts_end.setter
    def click_dts_end(self, click_dts_end):
        """
        Sets the click_dts_end of this AffiliateClickQuery.
        Maximum click date/time to return

        :param click_dts_end: The click_dts_end of this AffiliateClickQuery.
        :type: str
        """

        self._click_dts_end = click_dts_end

    @property
    def ip_address(self):
        """
        Gets the ip_address of this AffiliateClickQuery.
        IP address that generated the click

        :return: The ip_address of this AffiliateClickQuery.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """
        Sets the ip_address of this AffiliateClickQuery.
        IP address that generated the click

        :param ip_address: The ip_address of this AffiliateClickQuery.
        :type: str
        """

        self._ip_address = ip_address

    @property
    def sub_id(self):
        """
        Gets the sub_id of this AffiliateClickQuery.
        Sub ID value passed on the click

        :return: The sub_id of this AffiliateClickQuery.
        :rtype: str
        """
        return self._sub_id

    @sub_id.setter
    def sub_id(self, sub_id):
        """
        Sets the sub_id of this AffiliateClickQuery.
        Sub ID value passed on the click

        :param sub_id: The sub_id of this AffiliateClickQuery.
        :type: str
        """

        self._sub_id = sub_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AffiliateClickQuery):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
