# coding: utf-8

"""
    UltraCart Rest API V2

    UltraCart REST API Version 2

    OpenAPI spec version: 2.0.0
    Contact: support@ultracart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AffiliateLedger(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'affiliate_click_oid': 'int',
        'affiliate_link_oid': 'int',
        'affiliate_oid': 'int',
        'assigned_by_user': 'str',
        'click': 'AffiliateClick',
        'item_id': 'str',
        'link': 'AffiliateLink',
        'order': 'Order',
        'order_id': 'str',
        'original_transaction_dts': 'str',
        'sub_id': 'str',
        'tier_number': 'str',
        'transaction_amount': 'float',
        'transaction_amount_paid': 'float',
        'transaction_dts': 'str',
        'transaction_memo': 'str',
        'transaction_percentage': 'str',
        'transaction_state': 'str'
    }

    attribute_map = {
        'affiliate_click_oid': 'affiliate_click_oid',
        'affiliate_link_oid': 'affiliate_link_oid',
        'affiliate_oid': 'affiliate_oid',
        'assigned_by_user': 'assigned_by_user',
        'click': 'click',
        'item_id': 'item_id',
        'link': 'link',
        'order': 'order',
        'order_id': 'order_id',
        'original_transaction_dts': 'original_transaction_dts',
        'sub_id': 'sub_id',
        'tier_number': 'tier_number',
        'transaction_amount': 'transaction_amount',
        'transaction_amount_paid': 'transaction_amount_paid',
        'transaction_dts': 'transaction_dts',
        'transaction_memo': 'transaction_memo',
        'transaction_percentage': 'transaction_percentage',
        'transaction_state': 'transaction_state'
    }

    def __init__(self, affiliate_click_oid=None, affiliate_link_oid=None, affiliate_oid=None, assigned_by_user=None, click=None, item_id=None, link=None, order=None, order_id=None, original_transaction_dts=None, sub_id=None, tier_number=None, transaction_amount=None, transaction_amount_paid=None, transaction_dts=None, transaction_memo=None, transaction_percentage=None, transaction_state=None):
        """
        AffiliateLedger - a model defined in Swagger
        """

        self._affiliate_click_oid = None
        self._affiliate_link_oid = None
        self._affiliate_oid = None
        self._assigned_by_user = None
        self._click = None
        self._item_id = None
        self._link = None
        self._order = None
        self._order_id = None
        self._original_transaction_dts = None
        self._sub_id = None
        self._tier_number = None
        self._transaction_amount = None
        self._transaction_amount_paid = None
        self._transaction_dts = None
        self._transaction_memo = None
        self._transaction_percentage = None
        self._transaction_state = None
        self.discriminator = None

        if affiliate_click_oid is not None:
          self.affiliate_click_oid = affiliate_click_oid
        if affiliate_link_oid is not None:
          self.affiliate_link_oid = affiliate_link_oid
        if affiliate_oid is not None:
          self.affiliate_oid = affiliate_oid
        if assigned_by_user is not None:
          self.assigned_by_user = assigned_by_user
        if click is not None:
          self.click = click
        if item_id is not None:
          self.item_id = item_id
        if link is not None:
          self.link = link
        if order is not None:
          self.order = order
        if order_id is not None:
          self.order_id = order_id
        if original_transaction_dts is not None:
          self.original_transaction_dts = original_transaction_dts
        if sub_id is not None:
          self.sub_id = sub_id
        if tier_number is not None:
          self.tier_number = tier_number
        if transaction_amount is not None:
          self.transaction_amount = transaction_amount
        if transaction_amount_paid is not None:
          self.transaction_amount_paid = transaction_amount_paid
        if transaction_dts is not None:
          self.transaction_dts = transaction_dts
        if transaction_memo is not None:
          self.transaction_memo = transaction_memo
        if transaction_percentage is not None:
          self.transaction_percentage = transaction_percentage
        if transaction_state is not None:
          self.transaction_state = transaction_state

    @property
    def affiliate_click_oid(self):
        """
        Gets the affiliate_click_oid of this AffiliateLedger.
        Unique object identifier for the click associated with this ledger entry

        :return: The affiliate_click_oid of this AffiliateLedger.
        :rtype: int
        """
        return self._affiliate_click_oid

    @affiliate_click_oid.setter
    def affiliate_click_oid(self, affiliate_click_oid):
        """
        Sets the affiliate_click_oid of this AffiliateLedger.
        Unique object identifier for the click associated with this ledger entry

        :param affiliate_click_oid: The affiliate_click_oid of this AffiliateLedger.
        :type: int
        """

        self._affiliate_click_oid = affiliate_click_oid

    @property
    def affiliate_link_oid(self):
        """
        Gets the affiliate_link_oid of this AffiliateLedger.
        Unique object identifier for the link that this click is associated with

        :return: The affiliate_link_oid of this AffiliateLedger.
        :rtype: int
        """
        return self._affiliate_link_oid

    @affiliate_link_oid.setter
    def affiliate_link_oid(self, affiliate_link_oid):
        """
        Sets the affiliate_link_oid of this AffiliateLedger.
        Unique object identifier for the link that this click is associated with

        :param affiliate_link_oid: The affiliate_link_oid of this AffiliateLedger.
        :type: int
        """

        self._affiliate_link_oid = affiliate_link_oid

    @property
    def affiliate_oid(self):
        """
        Gets the affiliate_oid of this AffiliateLedger.
        Affiliate object ID associated with this transaction

        :return: The affiliate_oid of this AffiliateLedger.
        :rtype: int
        """
        return self._affiliate_oid

    @affiliate_oid.setter
    def affiliate_oid(self, affiliate_oid):
        """
        Sets the affiliate_oid of this AffiliateLedger.
        Affiliate object ID associated with this transaction

        :param affiliate_oid: The affiliate_oid of this AffiliateLedger.
        :type: int
        """

        self._affiliate_oid = affiliate_oid

    @property
    def assigned_by_user(self):
        """
        Gets the assigned_by_user of this AffiliateLedger.
        User that assigned the transaction if it was done manually

        :return: The assigned_by_user of this AffiliateLedger.
        :rtype: str
        """
        return self._assigned_by_user

    @assigned_by_user.setter
    def assigned_by_user(self, assigned_by_user):
        """
        Sets the assigned_by_user of this AffiliateLedger.
        User that assigned the transaction if it was done manually

        :param assigned_by_user: The assigned_by_user of this AffiliateLedger.
        :type: str
        """

        self._assigned_by_user = assigned_by_user

    @property
    def click(self):
        """
        Gets the click of this AffiliateLedger.

        :return: The click of this AffiliateLedger.
        :rtype: AffiliateClick
        """
        return self._click

    @click.setter
    def click(self, click):
        """
        Sets the click of this AffiliateLedger.

        :param click: The click of this AffiliateLedger.
        :type: AffiliateClick
        """

        self._click = click

    @property
    def item_id(self):
        """
        Gets the item_id of this AffiliateLedger.
        Item ID associated with this transaction

        :return: The item_id of this AffiliateLedger.
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """
        Sets the item_id of this AffiliateLedger.
        Item ID associated with this transaction

        :param item_id: The item_id of this AffiliateLedger.
        :type: str
        """

        self._item_id = item_id

    @property
    def link(self):
        """
        Gets the link of this AffiliateLedger.

        :return: The link of this AffiliateLedger.
        :rtype: AffiliateLink
        """
        return self._link

    @link.setter
    def link(self, link):
        """
        Sets the link of this AffiliateLedger.

        :param link: The link of this AffiliateLedger.
        :type: AffiliateLink
        """

        self._link = link

    @property
    def order(self):
        """
        Gets the order of this AffiliateLedger.

        :return: The order of this AffiliateLedger.
        :rtype: Order
        """
        return self._order

    @order.setter
    def order(self, order):
        """
        Sets the order of this AffiliateLedger.

        :param order: The order of this AffiliateLedger.
        :type: Order
        """

        self._order = order

    @property
    def order_id(self):
        """
        Gets the order_id of this AffiliateLedger.
        Order ID associated with this transaction

        :return: The order_id of this AffiliateLedger.
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """
        Sets the order_id of this AffiliateLedger.
        Order ID associated with this transaction

        :param order_id: The order_id of this AffiliateLedger.
        :type: str
        """

        self._order_id = order_id

    @property
    def original_transaction_dts(self):
        """
        Gets the original_transaction_dts of this AffiliateLedger.
        Date/time of the original transaction for reversals

        :return: The original_transaction_dts of this AffiliateLedger.
        :rtype: str
        """
        return self._original_transaction_dts

    @original_transaction_dts.setter
    def original_transaction_dts(self, original_transaction_dts):
        """
        Sets the original_transaction_dts of this AffiliateLedger.
        Date/time of the original transaction for reversals

        :param original_transaction_dts: The original_transaction_dts of this AffiliateLedger.
        :type: str
        """

        self._original_transaction_dts = original_transaction_dts

    @property
    def sub_id(self):
        """
        Gets the sub_id of this AffiliateLedger.
        Sub ID associated with transaction (from the click)

        :return: The sub_id of this AffiliateLedger.
        :rtype: str
        """
        return self._sub_id

    @sub_id.setter
    def sub_id(self, sub_id):
        """
        Sets the sub_id of this AffiliateLedger.
        Sub ID associated with transaction (from the click)

        :param sub_id: The sub_id of this AffiliateLedger.
        :type: str
        """

        self._sub_id = sub_id

    @property
    def tier_number(self):
        """
        Gets the tier_number of this AffiliateLedger.
        Tier number that this transaction earned

        :return: The tier_number of this AffiliateLedger.
        :rtype: str
        """
        return self._tier_number

    @tier_number.setter
    def tier_number(self, tier_number):
        """
        Sets the tier_number of this AffiliateLedger.
        Tier number that this transaction earned

        :param tier_number: The tier_number of this AffiliateLedger.
        :type: str
        """

        self._tier_number = tier_number

    @property
    def transaction_amount(self):
        """
        Gets the transaction_amount of this AffiliateLedger.
        Transaction amount

        :return: The transaction_amount of this AffiliateLedger.
        :rtype: float
        """
        return self._transaction_amount

    @transaction_amount.setter
    def transaction_amount(self, transaction_amount):
        """
        Sets the transaction_amount of this AffiliateLedger.
        Transaction amount

        :param transaction_amount: The transaction_amount of this AffiliateLedger.
        :type: float
        """

        self._transaction_amount = transaction_amount

    @property
    def transaction_amount_paid(self):
        """
        Gets the transaction_amount_paid of this AffiliateLedger.
        Amount of the transaction that has been paid out.

        :return: The transaction_amount_paid of this AffiliateLedger.
        :rtype: float
        """
        return self._transaction_amount_paid

    @transaction_amount_paid.setter
    def transaction_amount_paid(self, transaction_amount_paid):
        """
        Sets the transaction_amount_paid of this AffiliateLedger.
        Amount of the transaction that has been paid out.

        :param transaction_amount_paid: The transaction_amount_paid of this AffiliateLedger.
        :type: float
        """

        self._transaction_amount_paid = transaction_amount_paid

    @property
    def transaction_dts(self):
        """
        Gets the transaction_dts of this AffiliateLedger.
        Date/time that the transaction was made

        :return: The transaction_dts of this AffiliateLedger.
        :rtype: str
        """
        return self._transaction_dts

    @transaction_dts.setter
    def transaction_dts(self, transaction_dts):
        """
        Sets the transaction_dts of this AffiliateLedger.
        Date/time that the transaction was made

        :param transaction_dts: The transaction_dts of this AffiliateLedger.
        :type: str
        """

        self._transaction_dts = transaction_dts

    @property
    def transaction_memo(self):
        """
        Gets the transaction_memo of this AffiliateLedger.
        Memo explaining the transaction

        :return: The transaction_memo of this AffiliateLedger.
        :rtype: str
        """
        return self._transaction_memo

    @transaction_memo.setter
    def transaction_memo(self, transaction_memo):
        """
        Sets the transaction_memo of this AffiliateLedger.
        Memo explaining the transaction

        :param transaction_memo: The transaction_memo of this AffiliateLedger.
        :type: str
        """

        self._transaction_memo = transaction_memo

    @property
    def transaction_percentage(self):
        """
        Gets the transaction_percentage of this AffiliateLedger.
        Percentage associated with this transaction

        :return: The transaction_percentage of this AffiliateLedger.
        :rtype: str
        """
        return self._transaction_percentage

    @transaction_percentage.setter
    def transaction_percentage(self, transaction_percentage):
        """
        Sets the transaction_percentage of this AffiliateLedger.
        Percentage associated with this transaction

        :param transaction_percentage: The transaction_percentage of this AffiliateLedger.
        :type: str
        """

        self._transaction_percentage = transaction_percentage

    @property
    def transaction_state(self):
        """
        Gets the transaction_state of this AffiliateLedger.
        Transaction state

        :return: The transaction_state of this AffiliateLedger.
        :rtype: str
        """
        return self._transaction_state

    @transaction_state.setter
    def transaction_state(self, transaction_state):
        """
        Sets the transaction_state of this AffiliateLedger.
        Transaction state

        :param transaction_state: The transaction_state of this AffiliateLedger.
        :type: str
        """
        allowed_values = ["Pending", "Posted", "Approved", "Paid", "Rejected", "Partially Paid"]
        if transaction_state not in allowed_values:
            raise ValueError(
                "Invalid value for `transaction_state` ({0}), must be one of {1}"
                .format(transaction_state, allowed_values)
            )

        self._transaction_state = transaction_state

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AffiliateLedger):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
